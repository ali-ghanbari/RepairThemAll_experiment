{
  "repair_end": "2019-01-01 19:28:05.190138", 
  "repair_begin": "2019-01-01 19:26:02.442882", 
  "patches": [
    {
      "PATCH_DIFF_ORIG": "\\/var\\/lib\\/oar\\/.batch_job_bashrc: line 5: \\/home\\/tdurieux\\/.bashrc: No such file or directory\\n--- org\\/apache\\/jackrabbit\\/oak\\/commons\\/PathUtils.java\\n+++ org\\/apache\\/jackrabbit\\/oak\\/commons\\/PathUtils.java\\n@@ -285,14 +285,6 @@\\n \\tpublic static boolean isAncestor(java.lang.String ancestor, java.lang.String path) {\\n \\t\\tassert org.apache.jackrabbit.oak.commons.PathUtils.isValid(ancestor);\\n \\t\\tassert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);\\n-\\t\\tif ((ancestor.isEmpty()) || (path.isEmpty())) {\\n-\\t\\t\\treturn false;\\n-\\t\\t}\\n-\\t\\tif (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRoot(ancestor))) {\\n-\\t\\t\\tancestor += \\\"\\/\\\";\\n-\\t\\t}\\n-\\t\\treturn path.startsWith(ancestor);\\n-\\t}\\n \\n \\n \\n@@ -303,24 +295,9 @@\\n \\n \\n \\n-\\t@javax.annotation.Nonnull\\n-\\tpublic static java.lang.String relativize(java.lang.String parentPath, java.lang.String path) {\\n-\\t\\tassert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);\\n-\\t\\tassert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);\\n \\n-\\t\\tif (parentPath.equals(path)) {\\n-\\t\\t\\treturn \\\"\\\";\\n-\\t\\t}\\n \\n-\\t\\tjava.lang.String prefix = (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)) ? \\n-\\t\\tparentPath : \\n-\\t\\tparentPath + '\\/';\\n \\n-\\t\\tif (path.startsWith(prefix)) {\\n-\\t\\t\\treturn path.substring(prefix.length());\\n-\\t\\t}\\n-\\t\\tthrow new java.lang.IllegalArgumentException((((\\\"Cannot relativize \\\" + path) + \\\" wrt. \\\") + parentPath));\\n-\\t}\\n \\n \\n \\n@@ -330,11 +307,7 @@\\n \\n \\n \\n-\\tpublic static int getNextSlash(java.lang.String path, int index) {\\n-\\t\\tassert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);\\n \\n-\\t\\treturn path.indexOf('\\/', index);\\n-\\t}\\n \\n \\n \\n@@ -345,23 +318,6 @@\\n \\n \\n \\n-\\tpublic static void validate(java.lang.String path) {\\n-\\t\\tif ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {\\n-\\t\\t\\treturn;\\n-\\t\\t}else \\t\\t\\tif ((path.charAt(((path.length()) - 1))) == '\\/') {\\n-\\t\\t\\t\\tthrow new java.lang.IllegalArgumentException((\\\"Path may not end with '\\/': \\\" + path));\\n-\\t\\t\\t}\\n-\\t\\tchar last = 0;\\n-\\t\\tfor (int index = 0, len = path.length(); index < len; index++) {\\n-\\t\\t\\tchar c = path.charAt(index);\\n-\\t\\t\\tif (c == '\\/') {\\n-\\t\\t\\t\\tif (last == '\\/') {\\n-\\t\\t\\t\\t\\tthrow new java.lang.IllegalArgumentException((\\\"Path may not contains '\\/\\/': \\\" + path));\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t\\tlast = c;\\n-\\t\\t}\\n-\\t}\\n \\n \\n \\n@@ -372,12 +328,56 @@\\n \\n \\n \\n-\\tpublic static boolean isValid(java.lang.String path) {\\n-\\t\\tif ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {\\n-\\t\\t\\treturn true;\\n-\\t\\t}else \\t\\t\\tif ((path.charAt(((path.length()) - 1))) == '\\/') {\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\tif ((path.charAt(((path.length()) - 1))) == '\\/') {\\n \\t\\t\\t\\treturn false;\\n-\\t\\t\\t}\\n+\\t\\t} \\t\\tif (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRoot(ancestor))) { \\t\\t\\tancestor += \\\"\\/\\\";} \\t\\treturn path.startsWith(ancestor);} \\t@javax.annotation.Nonnull \\tpublic static java.lang.String relativize(java.lang.String parentPath, java.lang.String path) { \\t\\tassert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath); \\t\\tassert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path); \\t\\tif (parentPath.equals(path)) { \\t\\t\\treturn \\\"\\\";} \\t\\tjava.lang.String prefix = (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)) ? parentPath : parentPath + '\\/'; \\t\\tif (path.startsWith(prefix)) { \\t\\t\\treturn path.substring(prefix.length());} \\t\\tthrow new java.lang.IllegalArgumentException((((\\\"Cannot relativize \\\" + path) + \\\" wrt. \\\") + parentPath));} \\tpublic static int getNextSlash(java.lang.String path, int index) { \\t\\tassert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path); \\t\\treturn path.indexOf('\\/', index);} \\tpublic static void validate(java.lang.String path) { \\t\\tif ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) { \\t\\t\\treturn;}else \\t\\t\\tif ((path.charAt(((path.length()) - 1))) == '\\/') { \\t\\t\\t\\tthrow new java.lang.IllegalArgumentException((\\\"Path may not end with '\\/': \\\" + path));} \\t\\tchar last = 0; \\t\\tfor (int index = 0, len = path.length(); index < len; index++) { \\t\\t\\tchar c = path.charAt(index); \\t\\t\\tif (c == '\\/') { \\t\\t\\t\\tif (last == '\\/') { \\t\\t\\t\\t\\tthrow new java.lang.IllegalArgumentException((\\\"Path may not contains '\\/\\/': \\\" + path));}} \\t\\t\\tlast = c;}} \\tpublic static boolean isValid(java.lang.String path) { \\t\\tif ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) { \\t\\t\\treturn true;}else \\t\\t\\tif ((path.charAt(((path.length()) - 1))) == '\\/') { \\t\\t\\t\\treturn false;}\\n \\t\\tchar last = 0;\\n \\t\\tfor (int index = 0, len = path.length(); index < len; index++) {\\n \\t\\t\\tchar c = path.charAt(index);\\n\\n", 
      "patchhunks": [
        {
          "MODIFIED_FILE_PATH": "\\/tmp\\/jGenProg_Bug_dot_jar_Jackrabbit-Oak_5449bf39\\/.\\/output_astor\\/AstorMain-Jackrabbit-Oak-5449bf39\\/\\/src\\/\\/variant-116_f\\/org\\/apache\\/jackrabbit\\/oak\\/commons\\/PathUtils.java", 
          "ORIGINAL_CODE": "if ((ancestor.isEmpty()) || (path.isEmpty())) {\\n\\treturn false;\\n}", 
          "INGREDIENT_SCOPE": "LOCAL", 
          "PATCH_HUNK_CODE": "if ((path.charAt(((path.length()) - 1))) == '\\/') {\\n\\treturn false;\\n}", 
          "INGREDIENT_PARENT": "if ((path.charAt(((path.length()) - 1))) == '\\/') {\\n\\treturn false;\\n}", 
          "LOCATION": "org.apache.jackrabbit.oak.commons.PathUtils", 
          "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl", 
          "OPERATOR": "ReplaceOp", 
          "PATH": "\\/tmp\\/jGenProg_Bug_dot_jar_Jackrabbit-Oak_5449bf39\\/output_astor\\/AstorMain-Jackrabbit-Oak-5449bf39\\/src\\/default\\/org\\/apache\\/jackrabbit\\/oak\\/commons\\/PathUtils.java", 
          "LINE": "288", 
          "MP_RANKING": "3", 
          "SUSPICIOUNESS": "0.577", 
          "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl"
        }
      ], 
      "GENERATION": "58", 
      "VARIANT_ID": "116", 
      "TIME": "86", 
      "VALIDATION": "|true|0|6|[]|", 
      "FOLDER_SOLUTION_CODE": "\\/tmp\\/jGenProg_Bug_dot_jar_Jackrabbit-Oak_5449bf39\\/.\\/output_astor\\/AstorMain-Jackrabbit-Oak-5449bf39\\/\\/bin\\/\\/variant-116"
    }
  ]
}