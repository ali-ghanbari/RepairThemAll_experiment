{
  "repair_end": "2018-12-30 00:57:10.420088", 
  "repair_begin": "2018-12-30 00:27:11.072551", 
  "patches": [
    {
      "diff": "--- /tmp/RSRepair_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-29 18:26:42.277991000 -0500\n+++ /tmp/RSRepair_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_nzxx/Patch_22/patched/tmp/RSRepair_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-29 18:37:37.013792826 -0500\n@@ -660,59 +660,23 @@\n \n         final double ret;\n         final double absX = FastMath.abs(x);\n-        if (absX <= 20.0) {\n-            if (x >= 1.0) {\n-                /*\n-                 * From the recurrence relation\n-                 * Gamma(x) = (x - 1) * ... * (x - n) * Gamma(x - n),\n-                 * then\n-                 * Gamma(t) = 1 / [1 + invGamma1pm1(t - 1)],\n-                 * where t = x - n. This means that t must satisfy\n-                 * -0.5 <= t - 1 <= 1.5.\n-                 */\n-                double prod = 1.0;\n-                double t = x;\n-                while (t > 2.5) {\n-                    t -= 1.0;\n-                    prod *= t;\n-                }\n-                ret = prod / (1.0 + invGamma1pm1(t - 1.0));\n-            } else {\n-                /*\n-                 * From the recurrence relation\n-                 * Gamma(x) = Gamma(x + n + 1) / [x * (x + 1) * ... * (x + n)]\n-                 * then\n-                 * Gamma(x + n + 1) = 1 / [1 + invGamma1pm1(x + n)],\n-                 * which requires -0.5 <= x + n <= 1.5.\n-                 */\n-                double prod = x;\n-                double t = x;\n-                while (t < -0.5) {\n-                    t += 1.0;\n-                    prod *= t;\n-                }\n-                ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n-            }\n-        } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n-        }\n+        if (x >= 1.0) {\n+\t\t\tdouble prod = 1.0;\n+\t\t\tdouble t = x;\n+\t\t\twhile (t > 2.5) {\n+\t\t\t\tt -= 1.0;\n+\t\t\t\tprod *= t;\n+\t\t\t}\n+\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t} else {\n+\t\t\tdouble prod = x;\n+\t\t\tdouble t = x;\n+\t\t\twhile (t < -0.5) {\n+\t\t\t\tt += 1.0;\n+\t\t\t\tprod *= t;\n+\t\t\t}\n+\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t}\n         return ret;\n     }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 663, 
          "faulty": "if (absX <= 20.0) {\n  if (x >= 1.0) {\n    double prod=1.0;\n    double t=x;\n    while (t > 2.5) {\n      t-=1.0;\n      prod*=t;\n    }\n    ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n  }\n else {\n    double prod=x;\n    double t=x;\n    while (t < -0.5) {\n      t+=1.0;\n      prod*=t;\n    }\n    ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n  }\n}\n else {\n  final double y=absX + LANCZOS_G + 0.5;\n  final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);\n  if (x > 0.0) {\n    ret=gammaAbs;\n  }\n else {\n    ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n  }\n}", 
          "type": "Replace", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "Replace", 
          "seed": "double prod=1.0;"
        }
      ]
    }
  ]
}