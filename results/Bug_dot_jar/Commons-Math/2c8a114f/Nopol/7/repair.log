cd /tmp/Nopol_Bug_dot_jar_Commons-Math_2c8a114f;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -Xmx4g -Xms1g -cp /home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin//../lib/tools.jar fr.inria.lille.repair.Main \
	--mode repair \
	--type pre_then_cond \
	--oracle angelic \
	--synthesis smt \
	--flocal gzoltar \
	--json \
	--solver z3 \
	--solver-path /home/tdurieux/defects4j4repair/script/../libs/z3/build/z3 \
	--complianceLevel 7 \
	--source src/main/java \
	--classpath "target/classes:target/test-classes:/home/tdurieux/.m2/repository/junit/junit/4.4/junit-4.4.jar:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar";
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
08:47:16.735 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Source files: [src/main/java]
08:47:16.749 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Classpath: [file:/tmp/Nopol_Bug_dot_jar_Commons-Math_2c8a114f/target/classes/, file:/tmp/Nopol_Bug_dot_jar_Commons-Math_2c8a114f/target/test-classes/, file:/home/tdurieux/.m2/repository/junit/junit/4.4/junit-4.4.jar, file:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar]
08:47:16.750 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Statement type: PRE_THEN_COND
08:47:16.750 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Args: [org.apache.commons.math.ArgumentOutsideDomainExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.DuplicateSampleAbscissaExceptionTest, org.apache.commons.math.FunctionEvaluationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.estimation.EstimatedParameterTest, org.apache.commons.math.estimation.GaussNewtonEstimatorTest, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest, org.apache.commons.math.estimation.MinpackTest, org.apache.commons.math.estimation.WeightedMeasurementTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.geometry.FrenchVector3DFormatTest, org.apache.commons.math.geometry.RotationOrderTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.Vector3DFormatTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BigMatrixImplTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.InvalidMatrixExceptionTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.MatrixIndexExceptionTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.RealMatrixImplTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.optimization.direct.MultiDirectionalTest, org.apache.commons.math.optimization.direct.NelderMeadTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.univariate.BrentMinimizerTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.TransformerMapTest]
08:47:16.752 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/home/tdurieux/defects4j4repair/script/../libs/z3/build/z3', projectSources=[src/main/java], projectClasspath='[Ljava.net.URL;@66d33a', projectTests=[org.apache.commons.math.ArgumentOutsideDomainExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.DuplicateSampleAbscissaExceptionTest, org.apache.commons.math.FunctionEvaluationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.estimation.EstimatedParameterTest, org.apache.commons.math.estimation.GaussNewtonEstimatorTest, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest, org.apache.commons.math.estimation.MinpackTest, org.apache.commons.math.estimation.WeightedMeasurementTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.geometry.FrenchVector3DFormatTest, org.apache.commons.math.geometry.RotationOrderTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.Vector3DFormatTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BigMatrixImplTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.InvalidMatrixExceptionTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.MatrixIndexExceptionTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.RealMatrixImplTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.optimization.direct.MultiDirectionalTest, org.apache.commons.math.optimization.direct.NelderMeadTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.univariate.BrentMinimizerTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.TransformerMapTest], complianceLevel=7, outputFolder=., json=true}
08:47:16.753 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Available processors (cores): 4
08:47:16.759 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Free memory: 930 MB
08:47:16.759 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Maximum memory: 3 GB
08:47:16.759 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Total memory available to JVM: 981 MB
08:47:16.759 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Java version: 1.8.0_181
08:47:16.760 [main] INFO  fr.inria.lille.repair.nopol.NoPol - JAVA_HOME: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/
08:47:16.760 [main] INFO  fr.inria.lille.repair.nopol.NoPol - PATH: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:/usr/lib/oar/oardodo:/usr/lib/oar/oardodo:/usr/local/bin:/usr/bin:/bin:/usr/games
08:47:34.254 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #1
08:47:34.254 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.RandomDataImpl:438 which is executed by 3 tests
-1412529426
08:47:34.535 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.MathRuntimeException$4: must have n >= 0 for n!, got n = -2
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:305)
    at org.apache.commons.math.util.MathUtils.factorialLog(MathUtils.java:564)
    at org.apache.commons.math.random.RandomDataImpl.nextPoisson(RandomDataImpl.java:434)
    at org.apache.commons.math.random.RandomDataTest.checkNextPoissonConsistency(RandomDataTest.java:264)
    at org.apache.commons.math.random.RandomDataTest.testNextPoissionConistency(RandomDataTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
org.apache.commons.math.MathRuntimeException$4: must have n >= 0 for n!, got n = -1
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:305)
    at org.apache.commons.math.util.MathUtils.factorialLog(MathUtils.java:564)
    at org.apache.commons.math.random.RandomDataImpl.nextPoisson(RandomDataImpl.java:434)
    at org.apache.commons.math.random.RandomDataTest.checkNextPoissonConsistency(RandomDataTest.java:264)
    at org.apache.commons.math.random.RandomDataTest.testNextPoissionConistency(RandomDataTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
org.apache.commons.math.MathRuntimeException$4: must have n >= 0 for n!, got n = -1
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:305)
    at org.apache.commons.math.util.MathUtils.factorialLog(MathUtils.java:564)
    at org.apache.commons.math.random.RandomDataImpl.nextPoisson(RandomDataImpl.java:434)
    at org.apache.commons.math.random.RandomDataTest.checkNextPoissonConsistency(RandomDataTest.java:264)
    at org.apache.commons.math.random.RandomDataTest.testNextPoissionConistency(RandomDataTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
08:47:34.915 [pool-4-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (342 ms)
<> Total tests run: 54
<> Ignored tests: 0
<> Failed tests: 3
~ testNextPoissionConistency(org.apache.commons.math.random.RandomAdaptorTest)
[must have n >= 0 for n!, got n = -2]
org.apache.commons.math.MathRuntimeException$4: must have n >= 0 for n!, got n = -2    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:305)
    at org.apache.commons.math.util.MathUtils.factorialLog(MathUtils.java:564)
    at org.apache.commons.math.random.RandomDataImpl.nextPoisson(RandomDataImpl.java:434)
    at org.apache.commons.math.random.RandomDataTest.checkNextPoissonConsistency(RandomDataTest.java:264)
    at org.apache.commons.math.random.RandomDataTest.testNextPoissionConistency(RandomDataTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testNextPoissionConistency(org.apache.commons.math.random.RandomDataTest)
[must have n >= 0 for n!, got n = -1]
org.apache.commons.math.MathRuntimeException$4: must have n >= 0 for n!, got n = -1    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:305)
    at org.apache.commons.math.util.MathUtils.factorialLog(MathUtils.java:564)
    at org.apache.commons.math.random.RandomDataImpl.nextPoisson(RandomDataImpl.java:434)
    at org.apache.commons.math.random.RandomDataTest.checkNextPoissonConsistency(RandomDataTest.java:264)
    at org.apache.commons.math.random.RandomDataTest.testNextPoissionConistency(RandomDataTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testNextPoissionConistency(org.apache.commons.math.random.AbstractRandomGeneratorTest)
[must have n >= 0 for n!, got n = -1]
org.apache.commons.math.MathRuntimeException$4: must have n >= 0 for n!, got n = -1    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:305)
    at org.apache.commons.math.util.MathUtils.factorialLog(MathUtils.java:564)
    at org.apache.commons.math.random.RandomDataImpl.nextPoisson(RandomDataImpl.java:434)
    at org.apache.commons.math.random.RandomDataTest.checkNextPoissonConsistency(RandomDataTest.java:264)
    at org.apache.commons.math.random.RandomDataTest.testNextPoissionConistency(RandomDataTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

08:47:36.065 [pool-3-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
RandomDataImpl.java:212: error: missing return statement
    }
    ^
08:47:36.080 [pool-3-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class RandomDataImpl implements java.io.Serializable , org.apache.commons.math.random.RandomData {
    private static final long serialVersionUID = -626730818244969716L;

    private org.apache.commons.math.random.RandomGenerator rand = null;

    private java.security.SecureRandom secRand = null;

    public RandomDataImpl() {
    }

    public RandomDataImpl(org.apache.commons.math.random.RandomGenerator rand) {
        super();
        this.rand = rand;
    }

    public java.lang.String nextHexString(int len) {
        if (len <= 0) {
            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("length must be positive ({0})", len);
        }
        org.apache.commons.math.random.RandomGenerator ran = getRan();
        java.lang.StringBuffer outBuffer = new java.lang.StringBuffer();
        byte[] randomBytes = new byte[(len / 2) + 1];
        ran.nextBytes(randomBytes);
        for (int i = 0; i < (randomBytes.length); i++) {
            java.lang.Integer c = java.lang.Integer.valueOf(randomBytes[i]);
            java.lang.String hex = java.lang.Integer.toHexString(((c.intValue()) + 128));
            if ((hex.length()) == 1) {
                hex = "0" + hex;
            }
            outBuffer.append(hex);
        }
        return outBuffer.toString().substring(0, len);
    }

    public int nextInt(int lower, int upper) {
        if (lower >= upper) {
            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("upper bound ({0}) must be greater than lower bound ({1})", upper, lower);
        }
        double r = getRan().nextDouble();
        return ((int) (((r * upper) + ((1.0 - r) * lower)) + r));
    }

    public long nextLong(long lower, long upper) {
        if (lower >= upper) {
            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("upper bound ({0}) must be greater than lower bound ({1})", upper, lower);
        }
        double r = getRan().nextDouble();
        return ((long) (((r * upper) + ((1.0 - r) * lower)) + r));
    }

    public java.lang.String nextSecureHexString(int len) {
        if (len <= 0) {
            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("length must be positive ({0})", len);
        }
        java.security.SecureRandom secRan = getSecRan();
        java.security.MessageDigest alg = null;
        try {
            alg = java.security.MessageDigest.getInstance("SHA-1");
        } catch (java.security.NoSuchAlgorithmException ex) {
            throw org.apache.commons.math.MathRuntimeException.createInternalError(ex);
        }
        alg.reset();
        int numIter = (len / 40) + 1;
        java.lang.StringBuffer outBuffer = new java.lang.StringBuffer();
        for (int iter = 1; iter < (numIter + 1); iter++) {
            byte[] randomBytes = new byte[40];
            secRan.nextBytes(randomBytes);
            alg.update(randomBytes);
            byte[] hash = alg.digest();
            for (int i = 0; i < (hash.length); i++) {
                java.lang.Integer c = java.lang.Integer.valueOf(hash[i]);
                java.lang.String hex = java.lang.Integer.toHexString(((c.intValue()) + 128));
                if ((hex.length()) == 1) {
                    hex = "0" + hex;
                }
                outBuffer.append(hex);
            }
        }
        return outBuffer.toString().substring(0, len);
    }

    public int nextSecureInt(int lower, int upper) {
        if (lower >= upper) {
            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("upper bound ({0}) must be greater than lower bound ({1})", upper, lower);
        }
        java.security.SecureRandom sec = getSecRan();
        return lower + ((int) ((sec.nextDouble()) * ((upper - lower) + 1)));
    }

    public long nextSecureLong(long lower, long upper) {
        if (lower >= upper) {
            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("upper bound ({0}) must be greater than lower bound ({1})", upper, lower);
        }
        java.security.SecureRandom sec = getSecRan();
        return lower + ((long) ((sec.nextDouble()) * ((upper - lower) + 1)));
    }

    public long nextPoisson(double mean) {
        if (mean <= 0) {
            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("the Poisson mean must be positive ({0})", mean);
        }
        final org.apache.commons.math.random.RandomGenerator generator = getRan();
        double pivot = 6.0;
        if (mean < pivot) {
            double p = java.lang.Math.exp((-mean));
            long n = 0;
            double r = 1.0;
            double rnd = 1.0;
            while (n < (1000 * mean)) {
                rnd = generator.nextDouble();
                r = r * rnd;
                if (r >= p) {
                    n++;
                }else {
                    return n;
                }
            } 
            return n;
        }else {
            double mu = java.lang.Math.floor(mean);
            double delta = java.lang.Math.floor((pivot + ((mu - pivot) / 2.0)));
            double mu2delta = (2.0 * mu) + delta;
            double muDeltaHalf = mu + (delta / 2.0);
            double logMeanMu = java.lang.Math.log((mean / mu));
            double muFactorialLog = org.apache.commons.math.util.MathUtils.factorialLog(((int) (mu)));
            double c1 = java.lang.Math.sqrt((((java.lang.Math.PI) * mu) / 2.0));
            double c2 = c1 + (java.lang.Math.sqrt((((java.lang.Math.PI) * muDeltaHalf) / (2.0 * (java.lang.Math.exp((1.0 / mu2delta)))))));
            double c3 = c2 + 2.0;
            double c4 = c3 + (java.lang.Math.exp((1.0 / 78.0)));
            double c = c4 + (((2.0 / delta) * mu2delta) * (java.lang.Math.exp((((-delta) / mu2delta) * (1.0 + (delta / 2.0))))));
            double y = 0.0;
            double x = 0.0;
            double w = java.lang.Double.POSITIVE_INFINITY;
            boolean accept = false;
            while (!accept) {
                double u = nextUniform(0.0, c);
                double e = nextExponential(mean);
                if (u <= c1) {
                    double z = nextGaussian(0.0, 1.0);
                    y = ((-(java.lang.Math.abs(z))) * (java.lang.Math.sqrt(mu))) - 1.0;
                    x = java.lang.Math.floor(y);
                    w = ((((-z) * z) / 2.0) - e) - (x * logMeanMu);
                    if (x < (-mu)) {
                        w = java.lang.Double.POSITIVE_INFINITY;
                    }
                }else
                    if ((c1 < u) && (u <= c2)) {
                        double z = nextGaussian(0.0, 1.0);
                        y = 1.0 + ((java.lang.Math.abs(z)) * (java.lang.Math.sqrt(muDeltaHalf)));
                        x = java.lang.Math.ceil(y);
                        w = (((((-y) * y) + (2.0 * y)) / mu2delta) - e) - (x * logMeanMu);
                        if (x > delta) {
                            w = java.lang.Double.POSITIVE_INFINITY;
                        }
                    }else
                        if ((c2 < u) && (u <= c3)) {
                            x = 0.0;
                            w = -e;
                        }else
                            if ((c3 < u) && (u <= c4)) {
                                x = 1.0;
                                w = (-e) - logMeanMu;
                            }else
                                if (c4 < u) {
                                    double v = nextExponential(mean);
                                    y = delta + (((v * 2.0) / delta) * mu2delta);
                                    x = java.lang.Math.ceil(y);
                                    w = ((((-delta) / mu2delta) * (1.0 + (y / 2.0))) - e) - (x * logMeanMu);
                                }




                accept = w <= ((x * (java.lang.Math.log(mu))) - ((org.apache.commons.math.util.MathUtils.factorialLog(((int) (mu + x)))) / muFactorialLog));
            } 
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(0).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("muDeltaHalf",muDeltaHalf);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("c",c);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.commons.math.random.RandomDataImpl.this.secRand",org.apache.commons.math.random.RandomDataImpl.this.secRand);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("mu",mu);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("delta",delta);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("generator",generator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("c1",c1);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("accept",accept);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("c2",c2);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("c3",c3);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("c4",c4);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("mu2delta",mu2delta);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("logMeanMu",logMeanMu);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("muFactorialLog",muFactorialLog);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("mean",mean);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("w",w);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("pivot",pivot);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("y",y);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.commons.math.random.RandomDataImpl.this.rand",org.apache.commons.math.random.RandomDataImpl.this.rand);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectionEnds();
            }
            if (runtimeAngelicValue)
                return ((long) (x + mu));

        }
    }

    public double nextGaussian(double mu, double sigma) {
        if (sigma <= 0) {
            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})", sigma);
        }
        return (sigma * (getRan().nextGaussian())) + mu;
    }

    public double nextExponential(double mean) {
        if (mean < 0.0) {
            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("mean must be positive ({0})", mean);
        }
        final org.apache.commons.math.random.RandomGenerator generator = getRan();
        double unif = generator.nextDouble();
        while (unif == 0.0) {
            unif = generator.nextDouble();
        } 
        return (-mean) * (java.lang.Math.log(unif));
    }

    public double nextUniform(double lower, double upper) {
        if (lower >= upper) {
            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("upper bound ({0}) must be greater than lower bound ({1})", upper, lower);
        }
        final org.apache.commons.math.random.RandomGenerator generator = getRan();
        double u = generator.nextDouble();
        while (u <= 0.0) {
            u = generator.nextDouble();
        } 
        return lower + (u * (upper - lower));
    }

    private org.apache.commons.math.random.RandomGenerator getRan() {
        if ((rand) == null) {
            rand = new org.apache.commons.math.random.JDKRandomGenerator();
            rand.setSeed(java.lang.System.currentTimeMillis());
        }
        return rand;
    }

    private java.security.SecureRandom getSecRan() {
        if ((secRand) == null) {
            secRand = new java.security.SecureRandom();
            secRand.setSeed(java.lang.System.currentTimeMillis());
        }
        return secRand;
    }

    public void reSeed(long seed) {
        if ((rand) == null) {
            rand = new org.apache.commons.math.random.JDKRandomGenerator();
        }
        rand.setSeed(seed);
    }

    public void reSeedSecure() {
        if ((secRand) == null) {
            secRand = new java.security.SecureRandom();
        }
        secRand.setSeed(java.lang.System.currentTimeMillis());
    }

    public void reSeedSecure(long seed) {
        if ((secRand) == null) {
            secRand = new java.security.SecureRandom();
        }
        secRand.setSeed(seed);
    }

    public void reSeed() {
        if ((rand) == null) {
            rand = new org.apache.commons.math.random.JDKRandomGenerator();
        }
        rand.setSeed(java.lang.System.currentTimeMillis());
    }

    public void setSecureAlgorithm(java.lang.String algorithm, java.lang.String provider) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException {
        secRand = java.security.SecureRandom.getInstance(algorithm, provider);
    }

    public int[] nextPermutation(int n, int k) {
        if (k > n) {
            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("permutation k ({0}) exceeds n ({1})", k, n);
        }
        if (k == 0) {
            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("permutation k ({0}) must be positive", k);
        }
        int[] index = getNatural(n);
        shuffle(index, (n - k));
        int[] result = new int[k];
        for (int i = 0; i < k; i++) {
            result[i] = index[((n - i) - 1)];
        }
        return result;
    }

    public java.lang.Object[] nextSample(java.util.Collection<?> c, int k) {
        int len = c.size();
        if (k > len) {
            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("sample size ({0}) exceeds collection size ({1})");
        }
        if (k <= 0) {
            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("sample size must be positive ({0})", k);
        }
        java.lang.Object[] objects = c.toArray();
        int[] index = nextPermutation(len, k);
        java.lang.Object[] result = new java.lang.Object[k];
        for (int i = 0; i < k; i++) {
            result[i] = objects[index[i]];
        }
        return result;
    }

    private void shuffle(int[] list, int end) {
        int target = 0;
        for (int i = (list.length) - 1; i >= end; i--) {
            if (i == 0) {
                target = 0;
            }else {
                target = nextInt(0, i);
            }
            int temp = list[target];
            list[target] = list[i];
            list[i] = temp;
        }
    }

    private int[] getNatural(int n) {
        int[] natural = new int[n];
        for (int i = 0; i < n; i++) {
            natural[i] = i;
        }
        return natural;
    }
}
08:47:36.081 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
08:47:36.081 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #2
08:47:36.081 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.RandomDataImpl:435 which is executed by 3 tests
-1412529426
08:47:36.191 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #3
08:47:36.192 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.RandomDataImpl:434 which is executed by 3 tests
-1412529426
08:47:36.292 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #4
08:47:36.292 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.RandomDataImpl:433 which is executed by 3 tests
-1412529426
08:47:36.390 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.MathRuntimeException$4: must have n >= 0 for n!, got n = -6
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:305)
    at org.apache.commons.math.util.MathUtils.factorialLog(MathUtils.java:564)
    at org.apache.commons.math.random.RandomDataImpl.nextPoisson(RandomDataImpl.java:434)
    at org.apache.commons.math.random.RandomDataTest.checkNextPoissonConsistency(RandomDataTest.java:264)
    at org.apache.commons.math.random.RandomDataTest.testNextPoissionConistency(RandomDataTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
org.apache.commons.math.MathRuntimeException$4: must have n >= 0 for n!, got n = -1
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:305)
    at org.apache.commons.math.util.MathUtils.factorialLog(MathUtils.java:564)
    at org.apache.commons.math.random.RandomDataImpl.nextPoisson(RandomDataImpl.java:434)
    at org.apache.commons.math.random.RandomDataTest.checkNextPoissonConsistency(RandomDataTest.java:264)
    at org.apache.commons.math.random.RandomDataTest.testNextPoissionConistency(RandomDataTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
org.apache.commons.math.MathRuntimeException$4: must have n >= 0 for n!, got n = -1
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:305)
    at org.apache.commons.math.util.MathUtils.factorialLog(MathUtils.java:564)
    at org.apache.commons.math.random.RandomDataImpl.nextPoisson(RandomDataImpl.java:434)
    at org.apache.commons.math.random.RandomDataTest.checkNextPoissonConsistency(RandomDataTest.java:264)
    at org.apache.commons.math.random.RandomDataTest.testNextPoissionConistency(RandomDataTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
08:47:36.662 [pool-6-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (246 ms)
<> Total tests run: 54
<> Ignored tests: 0
<> Failed tests: 3
~ testNextPoissionConistency(org.apache.commons.math.random.RandomAdaptorTest)
[must have n >= 0 for n!, got n = -6]
org.apache.commons.math.MathRuntimeException$4: must have n >= 0 for n!, got n = -6    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:305)
    at org.apache.commons.math.util.MathUtils.factorialLog(MathUtils.java:564)
    at org.apache.commons.math.random.RandomDataImpl.nextPoisson(RandomDataImpl.java:434)
    at org.apache.commons.math.random.RandomDataTest.checkNextPoissonConsistency(RandomDataTest.java:264)
    at org.apache.commons.math.random.RandomDataTest.testNextPoissionConistency(RandomDataTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testNextPoissionConistency(org.apache.commons.math.random.RandomDataTest)
[must have n >= 0 for n!, got n = -1]
org.apache.commons.math.MathRuntimeException$4: must have n >= 0 for n!, got n = -1    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:305)
    at org.apache.commons.math.util.MathUtils.factorialLog(MathUtils.java:564)
    at org.apache.commons.math.random.RandomDataImpl.nextPoisson(RandomDataImpl.java:434)
    at org.apache.commons.math.random.RandomDataTest.checkNextPoissonConsistency(RandomDataTest.java:264)
    at org.apache.commons.math.random.RandomDataTest.testNextPoissionConistency(RandomDataTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testNextPoissionConistency(org.apache.commons.math.random.AbstractRandomGeneratorTest)
[must have n >= 0 for n!, got n = -1]
org.apache.commons.math.MathRuntimeException$4: must have n >= 0 for n!, got n = -1    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:305)
    at org.apache.commons.math.util.MathUtils.factorialLog(MathUtils.java:564)
    at org.apache.commons.math.random.RandomDataImpl.nextPoisson(RandomDataImpl.java:434)
    at org.apache.commons.math.random.RandomDataTest.checkNextPoissonConsistency(RandomDataTest.java:264)
    at org.apache.commons.math.random.RandomDataTest.testNextPoissionConistency(RandomDataTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

08:51:47.463 [pool-5-thread-1] DEBUG xxl.java.junit.TestSuiteExecution - Timeout after 200 seconds. Infinite loop?
08:53:34.193 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
08:54:21.933 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #5
08:55:27.575 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.RandomDataImpl:426 which is executed by 3 tests
java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: Java heap space
	at java.util.concurrent.FutureTask.report(FutureTask.java:122)
	at java.util.concurrent.FutureTask.get(FutureTask.java:206)
	at fr.inria.lille.repair.Main.main(Main.java:106)
Caused by: java.lang.OutOfMemoryError: Java heap space
	at java.lang.StringCoding$StringEncoder.encode(StringCoding.java:300)
	at java.lang.StringCoding.encode(StringCoding.java:344)
	at java.lang.String.getBytes(String.java:918)
	at java.io.UnixFileSystem.canonicalize0(Native Method)
	at java.io.UnixFileSystem.canonicalize(UnixFileSystem.java:172)
	at java.io.File.getCanonicalPath(File.java:618)
	at java.io.File.getCanonicalFile(File.java:643)
	at spoon.support.compiler.FileSystemFile.<init>(FileSystemFile.java:43)
	at spoon.support.compiler.FileSystemFolder.getFiles(FileSystemFolder.java:63)
	at spoon.support.compiler.FileSystemFolder.getAllJavaFiles(FileSystemFolder.java:108)
	at spoon.support.compiler.FileSystemFolder.getAllJavaFiles(FileSystemFolder.java:114)
	at spoon.support.compiler.FileSystemFolder.getAllJavaFiles(FileSystemFolder.java:114)
	at spoon.support.compiler.FileSystemFolder.getAllJavaFiles(FileSystemFolder.java:114)
	at spoon.support.compiler.FileSystemFolder.getAllJavaFiles(FileSystemFolder.java:114)
	at spoon.support.compiler.FileSystemFolder.getAllJavaFiles(FileSystemFolder.java:114)
	at spoon.support.StandardEnvironment.verifySourceClasspath(StandardEnvironment.java:444)
	at spoon.support.StandardEnvironment.setSourceClasspath(StandardEnvironment.java:428)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.setSourceClasspath(JDTBasedSpoonCompiler.java:321)
	at fr.inria.lille.commons.spoon.util.SpoonModelLibrary.modelFor(SpoonModelLibrary.java:47)
	at fr.inria.lille.commons.spoon.SpoonedFile.<init>(SpoonedFile.java:61)
	at fr.inria.lille.commons.spoon.SpoonedClass.<init>(SpoonedClass.java:14)
	at fr.inria.lille.commons.spoon.SpoonedProject.forked(SpoonedProject.java:47)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:222)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:213)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:154)
	at fr.inria.lille.repair.Main$1.call(Main.java:101)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Usage: java -jar nopol.jar
                          [(-m|--mode) <repair|ranking>] (-e|--type) <condition|precondition|pre_then_cond|loop|arithmetic> [(-o|--oracle) <angelic|symbolic>] [(-y|--synthesis) <smt|dynamoth>] [(-l|--solver) <z3|cvc4>] [(-p|--solver-path) <solverPath>] (-s|--source) source1:source2:...:sourceN  (-c|--classpath) <classpath> [(-t|--test) test1:test2:...:testN ] [--complianceLevel <complianceLevel>] [--maxTime <maxTime>] [--maxTimeType <maxTimeType>] [(-z|--flocal) < cocospoon|dumb|gzoltar>] [--output <outputFolder>] [--json[:<outputJson>]]

  [(-m|--mode) <repair|ranking>]
        Define the mode of execution. (default: repair)

  (-e|--type) <condition|precondition|pre_then_cond|loop|arithmetic>
        The repair type (example fixing only conditions, or adding
        precondition). REQUIRED OPTION (default: condition)

  [(-o|--oracle) <angelic|symbolic>]
        Define the oracle (only used with repair mode). (default: angelic)

  [(-y|--synthesis) <smt|dynamoth>]
        Define the patch synthesis. (default: smt)

  [(-l|--solver) <z3|cvc4>]
        Define the solver (only used with smt synthesis). (default: z3)

  [(-p|--solver-path) <solverPath>]
        Define the solver binary path (only used with smt synthesis).

  (-s|--source) source1:source2:...:sourceN 
        Define the path to the source code of the project.

  (-c|--classpath) <classpath>
        Define the classpath of the project.

  [(-t|--test) test1:test2:...:testN ]
        Define the tests of the project (both failing and passing),
        fully-qualified, separated with ':' (even if the classpath contains
        other tests, only those are considered.

  [--complianceLevel <complianceLevel>]
        The compliance level of the project. (default: 7)

  [--maxTime <maxTime>]
        The maximum time execution in minute for the whole execution of
        Nopol.(default: 10)

  [--maxTimeType <maxTimeType>]
        The maximum time execution in minute for one type of patch. (default: 5)

  [(-z|--flocal) < cocospoon|dumb|gzoltar>]
        Define the fault localizer to be used. (default: gzoltar)

  [--output <outputFolder>]
        Define the location where the patches will be saved. (default: .)

  [--json[:<outputJson>]]
        Output a json file in the current working directory.

Command exited with non-zero status 255
7496.65user 7.74system 31:58.08elapsed 391%CPU (0avgtext+0avgdata 4465944maxresident)k
45720inputs+7712outputs (3major+1352980minor)pagefaults 0swaps


Node: graphene-30.nancy.grid5000.fr



Date: Sat Dec 29 09:19:13 EST 2018

