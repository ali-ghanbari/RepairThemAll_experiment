cd /tmp/Nopol_Bug_dot_jar_Commons-Math_6eb46555;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -Xmx4g -Xms1g -cp /home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin//../lib/tools.jar fr.inria.lille.repair.Main \
	--mode repair \
	--type pre_then_cond \
	--oracle angelic \
	--synthesis smt \
	--flocal gzoltar \
	--json \
	--solver z3 \
	--solver-path /home/tdurieux/defects4j4repair/script/../libs/z3/build/z3 \
	--complianceLevel 7 \
	--source src/main/java \
	--classpath "target/classes:target/test-classes:/home/tdurieux/.m2/repository/junit/junit/4.10/junit-4.10.jar:/home/tdurieux/.m2/repository/org/hamcrest/hamcrest-core/1.1/hamcrest-core-1.1.jar:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar";
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
08:56:33.462 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Source files: [src/main/java]
08:56:33.555 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Classpath: [file:/tmp/Nopol_Bug_dot_jar_Commons-Math_6eb46555/target/classes/, file:/tmp/Nopol_Bug_dot_jar_Commons-Math_6eb46555/target/test-classes/, file:/home/tdurieux/.m2/repository/junit/junit/4.10/junit-4.10.jar, file:/home/tdurieux/.m2/repository/org/hamcrest/hamcrest-core/1.1/hamcrest-core-1.1.jar, file:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar]
08:56:33.555 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Statement type: PRE_THEN_COND
08:56:33.555 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Args: [org.apache.commons.math3.RetryRunnerTest, org.apache.commons.math3.analysis.FunctionUtilsTest, org.apache.commons.math3.analysis.function.GaussianTest, org.apache.commons.math3.analysis.function.HarmonicOscillatorTest, org.apache.commons.math3.analysis.function.LogisticTest, org.apache.commons.math3.analysis.function.LogitTest, org.apache.commons.math3.analysis.function.SigmoidTest, org.apache.commons.math3.analysis.function.SincTest, org.apache.commons.math3.analysis.function.SqrtTest, org.apache.commons.math3.analysis.function.StepFunctionTest, org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math3.analysis.integration.RombergIntegratorTest, org.apache.commons.math3.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math3.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest, org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math3.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math3.analysis.solvers.BisectionSolverTest, org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest, org.apache.commons.math3.analysis.solvers.BrentSolverTest, org.apache.commons.math3.analysis.solvers.IllinoisSolverTest, org.apache.commons.math3.analysis.solvers.LaguerreSolverTest, org.apache.commons.math3.analysis.solvers.MullerSolver2Test, org.apache.commons.math3.analysis.solvers.MullerSolverTest, org.apache.commons.math3.analysis.solvers.NewtonSolverTest, org.apache.commons.math3.analysis.solvers.PegasusSolverTest, org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest, org.apache.commons.math3.analysis.solvers.RiddersSolverTest, org.apache.commons.math3.analysis.solvers.SecantSolverTest, org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest, org.apache.commons.math3.complex.ComplexFieldTest, org.apache.commons.math3.complex.ComplexFormatTest, org.apache.commons.math3.complex.ComplexTest, org.apache.commons.math3.complex.ComplexUtilsTest, org.apache.commons.math3.complex.FrenchComplexFormatTest, org.apache.commons.math3.complex.RootsOfUnityTest, org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest, org.apache.commons.math3.dfp.DfpDecTest, org.apache.commons.math3.dfp.DfpMathTest, org.apache.commons.math3.dfp.DfpTest, org.apache.commons.math3.distribution.AbstractRealDistributionTest, org.apache.commons.math3.distribution.AbtractIntegerDistributionTest, org.apache.commons.math3.distribution.BetaDistributionTest, org.apache.commons.math3.distribution.BinomialDistributionTest, org.apache.commons.math3.distribution.CauchyDistributionTest, org.apache.commons.math3.distribution.ChiSquaredDistributionTest, org.apache.commons.math3.distribution.ExponentialDistributionTest, org.apache.commons.math3.distribution.FDistributionTest, org.apache.commons.math3.distribution.GammaDistributionTest, org.apache.commons.math3.distribution.HypergeometricDistributionTest, org.apache.commons.math3.distribution.KolmogorovSmirnovDistributionTest, org.apache.commons.math3.distribution.LogNormalDistributionTest, org.apache.commons.math3.distribution.NormalDistributionTest, org.apache.commons.math3.distribution.PascalDistributionTest, org.apache.commons.math3.distribution.PoissonDistributionTest, org.apache.commons.math3.distribution.TDistributionTest, org.apache.commons.math3.distribution.TriangularDistributionTest, org.apache.commons.math3.distribution.UniformIntegerDistributionTest, org.apache.commons.math3.distribution.UniformRealDistributionTest, org.apache.commons.math3.distribution.WeibullDistributionTest, org.apache.commons.math3.distribution.ZipfDistributionTest, org.apache.commons.math3.exception.DimensionMismatchExceptionTest, org.apache.commons.math3.exception.MaxCountExceededExceptionTest, org.apache.commons.math3.exception.NonMonotonicSequenceExceptionTest, org.apache.commons.math3.exception.NotPositiveExceptionTest, org.apache.commons.math3.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math3.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math3.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math3.exception.OutOfRangeExceptionTest, org.apache.commons.math3.exception.TooManyEvaluationsExceptionTest, org.apache.commons.math3.exception.util.ArgUtilsTest, org.apache.commons.math3.exception.util.ExceptionContextTest, org.apache.commons.math3.exception.util.LocalizedFormatsTest, org.apache.commons.math3.filter.KalmanFilterTest, org.apache.commons.math3.fraction.BigFractionFieldTest, org.apache.commons.math3.fraction.BigFractionFormatTest, org.apache.commons.math3.fraction.BigFractionTest, org.apache.commons.math3.fraction.FractionFieldTest, org.apache.commons.math3.fraction.FractionFormatTest, org.apache.commons.math3.fraction.FractionTest, org.apache.commons.math3.genetics.BinaryChromosomeTest, org.apache.commons.math3.genetics.BinaryMutationTest, org.apache.commons.math3.genetics.ChromosomeTest, org.apache.commons.math3.genetics.ElitisticListPopulationTest, org.apache.commons.math3.genetics.FitnessCachingTest, org.apache.commons.math3.genetics.FixedElapsedTimeTest, org.apache.commons.math3.genetics.FixedGenerationCountTest, org.apache.commons.math3.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math3.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math3.genetics.ListPopulationTest, org.apache.commons.math3.genetics.NPointCrossoverTest, org.apache.commons.math3.genetics.OnePointCrossoverTest, org.apache.commons.math3.genetics.RandomKeyMutationTest, org.apache.commons.math3.genetics.RandomKeyTest, org.apache.commons.math3.genetics.TournamentSelectionTest, org.apache.commons.math3.genetics.UniformCrossoverTest, org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest, org.apache.commons.math3.geometry.euclidean.threed.LineTest, org.apache.commons.math3.geometry.euclidean.threed.PlaneTest, org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest, org.apache.commons.math3.geometry.euclidean.threed.RotationOrderTest, org.apache.commons.math3.geometry.euclidean.threed.RotationTest, org.apache.commons.math3.geometry.euclidean.threed.SubLineTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest, org.apache.commons.math3.geometry.euclidean.twod.LineTest, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest, org.apache.commons.math3.geometry.euclidean.twod.SubLineTest, org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest, org.apache.commons.math3.linear.Array2DRowRealMatrixTest, org.apache.commons.math3.linear.ArrayFieldVectorTest, org.apache.commons.math3.linear.ArrayRealVectorTest, org.apache.commons.math3.linear.BiDiagonalTransformerTest, org.apache.commons.math3.linear.BlockFieldMatrixTest, org.apache.commons.math3.linear.BlockRealMatrixTest, org.apache.commons.math3.linear.CholeskyDecompositionTest, org.apache.commons.math3.linear.CholeskySolverTest, org.apache.commons.math3.linear.ConjugateGradientTest, org.apache.commons.math3.linear.EigenDecompositionTest, org.apache.commons.math3.linear.EigenSolverTest, org.apache.commons.math3.linear.FieldLUDecompositionTest, org.apache.commons.math3.linear.FieldLUSolverTest, org.apache.commons.math3.linear.FieldMatrixImplTest, org.apache.commons.math3.linear.FrenchRealVectorFormatTest, org.apache.commons.math3.linear.HessenbergTransformerTest, org.apache.commons.math3.linear.LUDecompositionTest, org.apache.commons.math3.linear.LUSolverTest, org.apache.commons.math3.linear.MatrixDimensionMismatchExceptionTest, org.apache.commons.math3.linear.MatrixUtilsTest, org.apache.commons.math3.linear.OpenMapRealMatrixTest, org.apache.commons.math3.linear.QRDecompositionTest, org.apache.commons.math3.linear.QRSolverTest, org.apache.commons.math3.linear.RealVectorFormatTest, org.apache.commons.math3.linear.RealVectorTest, org.apache.commons.math3.linear.SchurTransformerTest, org.apache.commons.math3.linear.SingularValueDecompositionTest, org.apache.commons.math3.linear.SingularValueSolverTest, org.apache.commons.math3.linear.SparseFieldMatrixTest, org.apache.commons.math3.linear.SparseFieldVectorTest, org.apache.commons.math3.linear.SparseRealMatrixTest, org.apache.commons.math3.linear.SparseRealVectorTest, org.apache.commons.math3.linear.SymmLQTest, org.apache.commons.math3.linear.TriDiagonalTransformerTest, org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest, org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest, org.apache.commons.math3.ode.ContinuousOutputModelTest, org.apache.commons.math3.ode.FirstOrderConverterTest, org.apache.commons.math3.ode.JacobianMatricesTest, org.apache.commons.math3.ode.events.EventStateTest, org.apache.commons.math3.ode.events.OverlappingEventsTest, org.apache.commons.math3.ode.events.ReappearingEventTest, org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.GillIntegratorTest, org.apache.commons.math3.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest, org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest, org.apache.commons.math3.ode.sampling.StepNormalizerTest, org.apache.commons.math3.optimization.DifferentiableMultivariateMultiStartOptimizerTest, org.apache.commons.math3.optimization.DifferentiableMultivariateVectorMultiStartOptimizerTest, org.apache.commons.math3.optimization.MultivariateMultiStartOptimizerTest, org.apache.commons.math3.optimization.PointValuePairTest, org.apache.commons.math3.optimization.PointVectorValuePairTest, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest, org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest, org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest, org.apache.commons.math3.optimization.direct.PowellOptimizerTest, org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math3.optimization.fitting.CurveFitterTest, org.apache.commons.math3.optimization.fitting.GaussianFitterTest, org.apache.commons.math3.optimization.fitting.HarmonicFitterTest, org.apache.commons.math3.optimization.fitting.PolynomialFitterTest, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math3.optimization.general.MinpackTest, org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math3.optimization.linear.SimplexSolverTest, org.apache.commons.math3.optimization.linear.SimplexTableauTest, org.apache.commons.math3.optimization.univariate.BracketFinderTest, org.apache.commons.math3.optimization.univariate.BrentOptimizerTest, org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest, org.apache.commons.math3.random.AbstractRandomGeneratorTest, org.apache.commons.math3.random.BitsStreamGeneratorTest, org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math3.random.EmpiricalDistributionTest, org.apache.commons.math3.random.GaussianRandomGeneratorTest, org.apache.commons.math3.random.ISAACTest, org.apache.commons.math3.random.MersenneTwisterTest, org.apache.commons.math3.random.RandomAdaptorTest, org.apache.commons.math3.random.RandomDataTest, org.apache.commons.math3.random.RandomGeneratorAbstractTest, org.apache.commons.math3.random.StableRandomGeneratorTest, org.apache.commons.math3.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math3.random.UniformRandomGeneratorTest, org.apache.commons.math3.random.ValueServerTest, org.apache.commons.math3.random.Well1024aTest, org.apache.commons.math3.random.Well19937aTest, org.apache.commons.math3.random.Well19937cTest, org.apache.commons.math3.random.Well44497aTest, org.apache.commons.math3.random.Well44497bTest, org.apache.commons.math3.random.Well512aTest, org.apache.commons.math3.special.BetaTest, org.apache.commons.math3.special.ErfTest, org.apache.commons.math3.special.GammaTest, org.apache.commons.math3.stat.CertifiedDataTest, org.apache.commons.math3.stat.FrequencyTest, org.apache.commons.math3.stat.StatUtilsTest, org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math3.stat.correlation.CovarianceTest, org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math3.stat.correlation.StorelessCovarianceTest, org.apache.commons.math3.stat.data.LewTest, org.apache.commons.math3.stat.data.LotteryTest, org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math3.stat.descriptive.moment.InteractionTest, org.apache.commons.math3.stat.descriptive.moment.KurtosisTest, org.apache.commons.math3.stat.descriptive.moment.MeanTest, org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math3.stat.descriptive.moment.SkewnessTest, org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math3.stat.descriptive.moment.VarianceTest, org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math3.stat.descriptive.rank.MaxTest, org.apache.commons.math3.stat.descriptive.rank.MedianTest, org.apache.commons.math3.stat.descriptive.rank.MinTest, org.apache.commons.math3.stat.descriptive.rank.PercentileTest, org.apache.commons.math3.stat.descriptive.summary.ProductTest, org.apache.commons.math3.stat.descriptive.summary.SumLogTest, org.apache.commons.math3.stat.descriptive.summary.SumSqTest, org.apache.commons.math3.stat.descriptive.summary.SumTest, org.apache.commons.math3.stat.inference.ChiSquareTestTest, org.apache.commons.math3.stat.inference.MannWhitneyUTestTest, org.apache.commons.math3.stat.inference.OneWayAnovaTest, org.apache.commons.math3.stat.inference.TTestTest, org.apache.commons.math3.stat.inference.TestUtilsTest, org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest, org.apache.commons.math3.stat.ranking.NaturalRankingTest, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math3.stat.regression.SimpleRegressionTest, org.apache.commons.math3.transform.FastCosineTransformerTest, org.apache.commons.math3.transform.FastFourierTransformerTest, org.apache.commons.math3.transform.FastHadamardTransformerTest, org.apache.commons.math3.transform.FastSineTransformerTest, org.apache.commons.math3.util.ArithmeticUtilsTest, org.apache.commons.math3.util.BigRealFieldTest, org.apache.commons.math3.util.BigRealTest, org.apache.commons.math3.util.ContinuedFractionTest, org.apache.commons.math3.util.Decimal64Test, org.apache.commons.math3.util.DefaultTransformerTest, org.apache.commons.math3.util.FastMathStrictComparisonTest, org.apache.commons.math3.util.FastMathTest, org.apache.commons.math3.util.FastMathTestPerformance, org.apache.commons.math3.util.IncrementorTest, org.apache.commons.math3.util.MathArraysTest, org.apache.commons.math3.util.MathUtilsTest, org.apache.commons.math3.util.MultidimensionalCounterTest, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest, org.apache.commons.math3.util.OpenIntToFieldTest, org.apache.commons.math3.util.PairTest, org.apache.commons.math3.util.PrecisionTest, org.apache.commons.math3.util.ResizableDoubleArrayTest, org.apache.commons.math3.util.TransformerMapTest]
08:56:33.558 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/home/tdurieux/defects4j4repair/script/../libs/z3/build/z3', projectSources=[src/main/java], projectClasspath='[Ljava.net.URL;@66d33a', projectTests=[org.apache.commons.math3.RetryRunnerTest, org.apache.commons.math3.analysis.FunctionUtilsTest, org.apache.commons.math3.analysis.function.GaussianTest, org.apache.commons.math3.analysis.function.HarmonicOscillatorTest, org.apache.commons.math3.analysis.function.LogisticTest, org.apache.commons.math3.analysis.function.LogitTest, org.apache.commons.math3.analysis.function.SigmoidTest, org.apache.commons.math3.analysis.function.SincTest, org.apache.commons.math3.analysis.function.SqrtTest, org.apache.commons.math3.analysis.function.StepFunctionTest, org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math3.analysis.integration.RombergIntegratorTest, org.apache.commons.math3.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math3.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest, org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math3.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math3.analysis.solvers.BisectionSolverTest, org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest, org.apache.commons.math3.analysis.solvers.BrentSolverTest, org.apache.commons.math3.analysis.solvers.IllinoisSolverTest, org.apache.commons.math3.analysis.solvers.LaguerreSolverTest, org.apache.commons.math3.analysis.solvers.MullerSolver2Test, org.apache.commons.math3.analysis.solvers.MullerSolverTest, org.apache.commons.math3.analysis.solvers.NewtonSolverTest, org.apache.commons.math3.analysis.solvers.PegasusSolverTest, org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest, org.apache.commons.math3.analysis.solvers.RiddersSolverTest, org.apache.commons.math3.analysis.solvers.SecantSolverTest, org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest, org.apache.commons.math3.complex.ComplexFieldTest, org.apache.commons.math3.complex.ComplexFormatTest, org.apache.commons.math3.complex.ComplexTest, org.apache.commons.math3.complex.ComplexUtilsTest, org.apache.commons.math3.complex.FrenchComplexFormatTest, org.apache.commons.math3.complex.RootsOfUnityTest, org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest, org.apache.commons.math3.dfp.DfpDecTest, org.apache.commons.math3.dfp.DfpMathTest, org.apache.commons.math3.dfp.DfpTest, org.apache.commons.math3.distribution.AbstractRealDistributionTest, org.apache.commons.math3.distribution.AbtractIntegerDistributionTest, org.apache.commons.math3.distribution.BetaDistributionTest, org.apache.commons.math3.distribution.BinomialDistributionTest, org.apache.commons.math3.distribution.CauchyDistributionTest, org.apache.commons.math3.distribution.ChiSquaredDistributionTest, org.apache.commons.math3.distribution.ExponentialDistributionTest, org.apache.commons.math3.distribution.FDistributionTest, org.apache.commons.math3.distribution.GammaDistributionTest, org.apache.commons.math3.distribution.HypergeometricDistributionTest, org.apache.commons.math3.distribution.KolmogorovSmirnovDistributionTest, org.apache.commons.math3.distribution.LogNormalDistributionTest, org.apache.commons.math3.distribution.NormalDistributionTest, org.apache.commons.math3.distribution.PascalDistributionTest, org.apache.commons.math3.distribution.PoissonDistributionTest, org.apache.commons.math3.distribution.TDistributionTest, org.apache.commons.math3.distribution.TriangularDistributionTest, org.apache.commons.math3.distribution.UniformIntegerDistributionTest, org.apache.commons.math3.distribution.UniformRealDistributionTest, org.apache.commons.math3.distribution.WeibullDistributionTest, org.apache.commons.math3.distribution.ZipfDistributionTest, org.apache.commons.math3.exception.DimensionMismatchExceptionTest, org.apache.commons.math3.exception.MaxCountExceededExceptionTest, org.apache.commons.math3.exception.NonMonotonicSequenceExceptionTest, org.apache.commons.math3.exception.NotPositiveExceptionTest, org.apache.commons.math3.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math3.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math3.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math3.exception.OutOfRangeExceptionTest, org.apache.commons.math3.exception.TooManyEvaluationsExceptionTest, org.apache.commons.math3.exception.util.ArgUtilsTest, org.apache.commons.math3.exception.util.ExceptionContextTest, org.apache.commons.math3.exception.util.LocalizedFormatsTest, org.apache.commons.math3.filter.KalmanFilterTest, org.apache.commons.math3.fraction.BigFractionFieldTest, org.apache.commons.math3.fraction.BigFractionFormatTest, org.apache.commons.math3.fraction.BigFractionTest, org.apache.commons.math3.fraction.FractionFieldTest, org.apache.commons.math3.fraction.FractionFormatTest, org.apache.commons.math3.fraction.FractionTest, org.apache.commons.math3.genetics.BinaryChromosomeTest, org.apache.commons.math3.genetics.BinaryMutationTest, org.apache.commons.math3.genetics.ChromosomeTest, org.apache.commons.math3.genetics.ElitisticListPopulationTest, org.apache.commons.math3.genetics.FitnessCachingTest, org.apache.commons.math3.genetics.FixedElapsedTimeTest, org.apache.commons.math3.genetics.FixedGenerationCountTest, org.apache.commons.math3.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math3.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math3.genetics.ListPopulationTest, org.apache.commons.math3.genetics.NPointCrossoverTest, org.apache.commons.math3.genetics.OnePointCrossoverTest, org.apache.commons.math3.genetics.RandomKeyMutationTest, org.apache.commons.math3.genetics.RandomKeyTest, org.apache.commons.math3.genetics.TournamentSelectionTest, org.apache.commons.math3.genetics.UniformCrossoverTest, org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest, org.apache.commons.math3.geometry.euclidean.threed.LineTest, org.apache.commons.math3.geometry.euclidean.threed.PlaneTest, org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest, org.apache.commons.math3.geometry.euclidean.threed.RotationOrderTest, org.apache.commons.math3.geometry.euclidean.threed.RotationTest, org.apache.commons.math3.geometry.euclidean.threed.SubLineTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest, org.apache.commons.math3.geometry.euclidean.twod.LineTest, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest, org.apache.commons.math3.geometry.euclidean.twod.SubLineTest, org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest, org.apache.commons.math3.linear.Array2DRowRealMatrixTest, org.apache.commons.math3.linear.ArrayFieldVectorTest, org.apache.commons.math3.linear.ArrayRealVectorTest, org.apache.commons.math3.linear.BiDiagonalTransformerTest, org.apache.commons.math3.linear.BlockFieldMatrixTest, org.apache.commons.math3.linear.BlockRealMatrixTest, org.apache.commons.math3.linear.CholeskyDecompositionTest, org.apache.commons.math3.linear.CholeskySolverTest, org.apache.commons.math3.linear.ConjugateGradientTest, org.apache.commons.math3.linear.EigenDecompositionTest, org.apache.commons.math3.linear.EigenSolverTest, org.apache.commons.math3.linear.FieldLUDecompositionTest, org.apache.commons.math3.linear.FieldLUSolverTest, org.apache.commons.math3.linear.FieldMatrixImplTest, org.apache.commons.math3.linear.FrenchRealVectorFormatTest, org.apache.commons.math3.linear.HessenbergTransformerTest, org.apache.commons.math3.linear.LUDecompositionTest, org.apache.commons.math3.linear.LUSolverTest, org.apache.commons.math3.linear.MatrixDimensionMismatchExceptionTest, org.apache.commons.math3.linear.MatrixUtilsTest, org.apache.commons.math3.linear.OpenMapRealMatrixTest, org.apache.commons.math3.linear.QRDecompositionTest, org.apache.commons.math3.linear.QRSolverTest, org.apache.commons.math3.linear.RealVectorFormatTest, org.apache.commons.math3.linear.RealVectorTest, org.apache.commons.math3.linear.SchurTransformerTest, org.apache.commons.math3.linear.SingularValueDecompositionTest, org.apache.commons.math3.linear.SingularValueSolverTest, org.apache.commons.math3.linear.SparseFieldMatrixTest, org.apache.commons.math3.linear.SparseFieldVectorTest, org.apache.commons.math3.linear.SparseRealMatrixTest, org.apache.commons.math3.linear.SparseRealVectorTest, org.apache.commons.math3.linear.SymmLQTest, org.apache.commons.math3.linear.TriDiagonalTransformerTest, org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest, org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest, org.apache.commons.math3.ode.ContinuousOutputModelTest, org.apache.commons.math3.ode.FirstOrderConverterTest, org.apache.commons.math3.ode.JacobianMatricesTest, org.apache.commons.math3.ode.events.EventStateTest, org.apache.commons.math3.ode.events.OverlappingEventsTest, org.apache.commons.math3.ode.events.ReappearingEventTest, org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.GillIntegratorTest, org.apache.commons.math3.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest, org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest, org.apache.commons.math3.ode.sampling.StepNormalizerTest, org.apache.commons.math3.optimization.DifferentiableMultivariateMultiStartOptimizerTest, org.apache.commons.math3.optimization.DifferentiableMultivariateVectorMultiStartOptimizerTest, org.apache.commons.math3.optimization.MultivariateMultiStartOptimizerTest, org.apache.commons.math3.optimization.PointValuePairTest, org.apache.commons.math3.optimization.PointVectorValuePairTest, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest, org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest, org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest, org.apache.commons.math3.optimization.direct.PowellOptimizerTest, org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math3.optimization.fitting.CurveFitterTest, org.apache.commons.math3.optimization.fitting.GaussianFitterTest, org.apache.commons.math3.optimization.fitting.HarmonicFitterTest, org.apache.commons.math3.optimization.fitting.PolynomialFitterTest, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math3.optimization.general.MinpackTest, org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math3.optimization.linear.SimplexSolverTest, org.apache.commons.math3.optimization.linear.SimplexTableauTest, org.apache.commons.math3.optimization.univariate.BracketFinderTest, org.apache.commons.math3.optimization.univariate.BrentOptimizerTest, org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest, org.apache.commons.math3.random.AbstractRandomGeneratorTest, org.apache.commons.math3.random.BitsStreamGeneratorTest, org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math3.random.EmpiricalDistributionTest, org.apache.commons.math3.random.GaussianRandomGeneratorTest, org.apache.commons.math3.random.ISAACTest, org.apache.commons.math3.random.MersenneTwisterTest, org.apache.commons.math3.random.RandomAdaptorTest, org.apache.commons.math3.random.RandomDataTest, org.apache.commons.math3.random.RandomGeneratorAbstractTest, org.apache.commons.math3.random.StableRandomGeneratorTest, org.apache.commons.math3.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math3.random.UniformRandomGeneratorTest, org.apache.commons.math3.random.ValueServerTest, org.apache.commons.math3.random.Well1024aTest, org.apache.commons.math3.random.Well19937aTest, org.apache.commons.math3.random.Well19937cTest, org.apache.commons.math3.random.Well44497aTest, org.apache.commons.math3.random.Well44497bTest, org.apache.commons.math3.random.Well512aTest, org.apache.commons.math3.special.BetaTest, org.apache.commons.math3.special.ErfTest, org.apache.commons.math3.special.GammaTest, org.apache.commons.math3.stat.CertifiedDataTest, org.apache.commons.math3.stat.FrequencyTest, org.apache.commons.math3.stat.StatUtilsTest, org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math3.stat.correlation.CovarianceTest, org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math3.stat.correlation.StorelessCovarianceTest, org.apache.commons.math3.stat.data.LewTest, org.apache.commons.math3.stat.data.LotteryTest, org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math3.stat.descriptive.moment.InteractionTest, org.apache.commons.math3.stat.descriptive.moment.KurtosisTest, org.apache.commons.math3.stat.descriptive.moment.MeanTest, org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math3.stat.descriptive.moment.SkewnessTest, org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math3.stat.descriptive.moment.VarianceTest, org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math3.stat.descriptive.rank.MaxTest, org.apache.commons.math3.stat.descriptive.rank.MedianTest, org.apache.commons.math3.stat.descriptive.rank.MinTest, org.apache.commons.math3.stat.descriptive.rank.PercentileTest, org.apache.commons.math3.stat.descriptive.summary.ProductTest, org.apache.commons.math3.stat.descriptive.summary.SumLogTest, org.apache.commons.math3.stat.descriptive.summary.SumSqTest, org.apache.commons.math3.stat.descriptive.summary.SumTest, org.apache.commons.math3.stat.inference.ChiSquareTestTest, org.apache.commons.math3.stat.inference.MannWhitneyUTestTest, org.apache.commons.math3.stat.inference.OneWayAnovaTest, org.apache.commons.math3.stat.inference.TTestTest, org.apache.commons.math3.stat.inference.TestUtilsTest, org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest, org.apache.commons.math3.stat.ranking.NaturalRankingTest, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math3.stat.regression.SimpleRegressionTest, org.apache.commons.math3.transform.FastCosineTransformerTest, org.apache.commons.math3.transform.FastFourierTransformerTest, org.apache.commons.math3.transform.FastHadamardTransformerTest, org.apache.commons.math3.transform.FastSineTransformerTest, org.apache.commons.math3.util.ArithmeticUtilsTest, org.apache.commons.math3.util.BigRealFieldTest, org.apache.commons.math3.util.BigRealTest, org.apache.commons.math3.util.ContinuedFractionTest, org.apache.commons.math3.util.Decimal64Test, org.apache.commons.math3.util.DefaultTransformerTest, org.apache.commons.math3.util.FastMathStrictComparisonTest, org.apache.commons.math3.util.FastMathTest, org.apache.commons.math3.util.FastMathTestPerformance, org.apache.commons.math3.util.IncrementorTest, org.apache.commons.math3.util.MathArraysTest, org.apache.commons.math3.util.MathUtilsTest, org.apache.commons.math3.util.MultidimensionalCounterTest, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest, org.apache.commons.math3.util.OpenIntToFieldTest, org.apache.commons.math3.util.PairTest, org.apache.commons.math3.util.PrecisionTest, org.apache.commons.math3.util.ResizableDoubleArrayTest, org.apache.commons.math3.util.TransformerMapTest], complianceLevel=7, outputFolder=., json=true}
08:56:33.558 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Available processors (cores): 4
08:56:33.564 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Free memory: 914 MB
08:56:33.564 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Maximum memory: 3 GB
08:56:33.564 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Total memory available to JVM: 981 MB
08:56:33.564 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Java version: 1.8.0_181
08:56:33.565 [main] INFO  fr.inria.lille.repair.nopol.NoPol - JAVA_HOME: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/
08:56:33.566 [main] INFO  fr.inria.lille.repair.nopol.NoPol - PATH: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:/usr/lib/oar/oardodo:/usr/lib/oar/oardodo:/usr/local/bin:/usr/bin:/bin:/usr/games
09:04:50.875 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #1
09:04:50.875 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1238 which is executed by 6 tests
09:04:50.876 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1238
09:04:50.876 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #2
09:04:50.876 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1237 which is executed by 6 tests
09:04:50.876 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1237
09:04:50.876 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #3
09:04:50.876 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1236 which is executed by 6 tests
09:04:50.876 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1236
09:04:50.877 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #4
09:04:50.877 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1231 which is executed by 6 tests
09:04:50.877 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1231
09:04:50.877 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #5
09:04:50.877 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1227 which is executed by 6 tests
09:04:50.877 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1227
09:04:50.877 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #6
09:04:50.877 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1226 which is executed by 6 tests
09:04:50.878 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1226
09:04:50.878 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #7
09:04:50.878 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1225 which is executed by 6 tests
09:04:50.878 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1225
09:04:50.878 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #8
09:04:50.878 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1222 which is executed by 6 tests
09:04:50.878 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1222
09:04:50.878 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #9
09:04:50.879 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1221 which is executed by 6 tests
09:04:50.879 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1221
09:04:50.879 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #10
09:04:50.879 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1218 which is executed by 6 tests
09:04:50.879 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1218
09:04:50.879 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #11
09:04:50.879 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1217 which is executed by 6 tests
09:04:50.879 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1217
09:04:50.880 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #12
09:04:50.880 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1216 which is executed by 6 tests
09:04:50.880 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1216
09:04:50.880 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #13
09:04:50.880 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1211 which is executed by 6 tests
09:04:50.880 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1211
09:04:50.880 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #14
09:04:50.880 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1209 which is executed by 6 tests
09:04:50.881 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1209
09:04:50.881 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #15
09:04:50.881 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1207 which is executed by 6 tests
09:04:50.881 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1207
09:04:50.881 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #16
09:04:50.881 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1206 which is executed by 6 tests
09:04:50.881 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1206
09:04:50.881 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #17
09:04:50.881 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1205 which is executed by 6 tests
09:04:50.881 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1205
09:04:50.882 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #18
09:04:50.882 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1202 which is executed by 6 tests
09:04:50.882 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1202
09:04:50.882 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #19
09:04:50.882 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1199 which is executed by 6 tests
09:04:50.882 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1199
09:04:50.882 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #20
09:04:50.882 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1198 which is executed by 6 tests
09:04:50.883 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1198
09:04:50.883 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #21
09:04:50.883 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVector:665 which is executed by 5 tests
74962082
09:04:51.246 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #22
09:04:51.246 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVector:663 which is executed by 5 tests
74962082
09:04:51.395 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #23
09:04:51.395 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVector:662 which is executed by 5 tests
74962082
09:04:51.536 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #24
09:04:51.536 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVector:661 which is executed by 5 tests
74962082
09:04:51.674 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #25
09:04:51.674 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVector:660 which is executed by 5 tests
74962082
09:04:51.840 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
09:04:53.305 [pool-4-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (1412 ms)
<> Total tests run: 362
<> Ignored tests: 60
<> Failed tests: 20
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testOuterProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testOuterProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMap(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
~ testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMap(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
~ testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)

java.lang.AssertionError: NaN * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:55.382 [pool-5-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (18 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testOuterProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[NaN * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: NaN * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:55.403 [pool-6-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (9 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:55.408 [pool-7-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDotProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:55.423 [pool-8-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
09:04:55.443 [pool-9-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (18 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)

java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:55.452 [pool-10-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:55.455 [pool-11-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDotProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: NaN * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:55.460 [pool-12-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
09:04:55.465 [pool-13-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMap(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)

java.lang.AssertionError: NaN * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:55.472 [pool-14-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[NaN * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:55.476 [pool-15-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testOuterProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:55.480 [pool-16-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:55.487 [pool-17-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDotProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:55.491 [pool-18-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
09:04:55.495 [pool-19-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)

java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:55.500 [pool-20-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:55.508 [pool-21-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDotProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:55.513 [pool-22-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
09:04:55.517 [pool-23-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMap(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)

java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:55.522 [pool-24-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

09:04:55.524 [pool-3-thread-1] DEBUG tests.output - Failing tests with false: 
[testOuterProductSameType(org.apache.commons.math3.linear.RealVectorTest): NaN * NaN expected:<NaN> but was:<0.0>, testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest): NaN * NaN expected:<NaN> but was:<0.0>, testDotProductSameType(org.apache.commons.math3.linear.RealVectorTest): 0.0 * NaN expected:<NaN> but was:<0.0>, testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest): 0.0 * NaN expected:<NaN> but was:<0.0>, testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest): Inverse, entry #4 expected:<-Infinity> but was:<Infinity>, testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest): NaN * 0.0 expected:<NaN> but was:<0.0>, testDotProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest): 0.0 * NaN expected:<NaN> but was:<0.0>, testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest): NaN * NaN expected:<NaN> but was:<0.0>, testMap(org.apache.commons.math3.linear.SparseRealVectorTest): Inverse, entry #4 expected:<-Infinity> but was:<Infinity>, testOuterProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest): NaN * NaN expected:<NaN> but was:<0.0>]
09:04:55.524 [pool-3-thread-1] DEBUG tests.output - Failing tests with true: 
[testOuterProductSameType(org.apache.commons.math3.linear.RealVectorTest): NaN * 0.0 expected:<NaN> but was:<0.0>, testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest): NaN * 0.0 expected:<NaN> but was:<0.0>, testDotProductSameType(org.apache.commons.math3.linear.RealVectorTest): 0.0 * NaN expected:<NaN> but was:<0.0>, testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest): 0.0 * NaN expected:<NaN> but was:<0.0>, testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest): Inverse, entry #4 expected:<-Infinity> but was:<Infinity>, testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest): NaN * 0.0 expected:<NaN> but was:<0.0>, testDotProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest): 0.0 * NaN expected:<NaN> but was:<0.0>, testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest): NaN * 0.0 expected:<NaN> but was:<0.0>, testMap(org.apache.commons.math3.linear.SparseRealVectorTest): Inverse, entry #4 expected:<-Infinity> but was:<Infinity>, testOuterProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest): NaN * 0.0 expected:<NaN> but was:<0.0>]
09:04:55.524 [pool-3-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.linear.RealVector:660.
09:04:55.524 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #26
09:04:55.524 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVector:659 which is executed by 5 tests
74962082
09:04:55.669 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #27
09:04:55.669 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVector:658 which is executed by 5 tests
74962082
09:04:55.807 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
09:04:56.211 [pool-26-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (385 ms)
<> Total tests run: 362
<> Ignored tests: 60
<> Failed tests: 20
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testOuterProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testOuterProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMap(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
~ testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMap(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
~ testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)

java.lang.AssertionError: NaN * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:57.073 [pool-27-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (11 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testOuterProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[NaN * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: NaN * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:57.082 [pool-28-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (7 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:57.091 [pool-29-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDotProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:57.098 [pool-30-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
09:04:57.116 [pool-31-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (15 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)

java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:57.118 [pool-32-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:57.120 [pool-33-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDotProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: NaN * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:57.123 [pool-34-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
09:04:57.127 [pool-35-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMap(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)

java.lang.AssertionError: NaN * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:57.130 [pool-36-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[NaN * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:57.132 [pool-37-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testOuterProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:57.144 [pool-38-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:57.147 [pool-39-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDotProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:57.152 [pool-40-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
09:04:57.156 [pool-41-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)

java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:57.157 [pool-42-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:57.159 [pool-43-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDotProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:57.162 [pool-44-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
09:04:57.165 [pool-45-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMap(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)

java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:57.167 [pool-46-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

09:04:57.169 [pool-25-thread-1] DEBUG tests.output - Failing tests with false: 
[testOuterProductSameType(org.apache.commons.math3.linear.RealVectorTest): NaN * NaN expected:<NaN> but was:<0.0>, testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest): NaN * NaN expected:<NaN> but was:<0.0>, testDotProductSameType(org.apache.commons.math3.linear.RealVectorTest): 0.0 * NaN expected:<NaN> but was:<0.0>, testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest): 0.0 * NaN expected:<NaN> but was:<0.0>, testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest): Inverse, entry #4 expected:<-Infinity> but was:<Infinity>, testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest): NaN * 0.0 expected:<NaN> but was:<0.0>, testDotProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest): 0.0 * NaN expected:<NaN> but was:<0.0>, testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest): NaN * NaN expected:<NaN> but was:<0.0>, testMap(org.apache.commons.math3.linear.SparseRealVectorTest): Inverse, entry #4 expected:<-Infinity> but was:<Infinity>, testOuterProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest): NaN * NaN expected:<NaN> but was:<0.0>]
09:04:57.169 [pool-25-thread-1] DEBUG tests.output - Failing tests with true: 
[testOuterProductSameType(org.apache.commons.math3.linear.RealVectorTest): NaN * 0.0 expected:<NaN> but was:<0.0>, testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest): NaN * 0.0 expected:<NaN> but was:<0.0>, testDotProductSameType(org.apache.commons.math3.linear.RealVectorTest): 0.0 * NaN expected:<NaN> but was:<0.0>, testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest): 0.0 * NaN expected:<NaN> but was:<0.0>, testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest): Inverse, entry #4 expected:<-Infinity> but was:<Infinity>, testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest): NaN * 0.0 expected:<NaN> but was:<0.0>, testDotProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest): 0.0 * NaN expected:<NaN> but was:<0.0>, testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest): NaN * 0.0 expected:<NaN> but was:<0.0>, testMap(org.apache.commons.math3.linear.SparseRealVectorTest): Inverse, entry #4 expected:<-Infinity> but was:<Infinity>, testOuterProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest): NaN * 0.0 expected:<NaN> but was:<0.0>]
09:04:57.169 [pool-25-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.linear.RealVector:658.
09:04:57.169 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #28
09:04:57.170 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVector:657 which is executed by 5 tests
74962082
09:04:57.344 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #29
09:04:57.344 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVector:656 which is executed by 5 tests
74962082
09:04:57.514 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #30
09:04:57.514 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVector:655 which is executed by 5 tests
74962082
09:04:57.690 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
09:04:58.220 [pool-48-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (512 ms)
<> Total tests run: 362
<> Ignored tests: 60
<> Failed tests: 20
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testOuterProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testOuterProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMap(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
~ testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMap(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
~ testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)

java.lang.AssertionError: NaN * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:59.022 [pool-49-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (10 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testOuterProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[NaN * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: NaN * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:59.031 [pool-50-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (6 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:59.033 [pool-51-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDotProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:59.037 [pool-52-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
09:04:59.055 [pool-53-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (17 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)

java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:59.057 [pool-54-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:59.059 [pool-55-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDotProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: NaN * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:59.061 [pool-56-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
09:04:59.064 [pool-57-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMap(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)

java.lang.AssertionError: NaN * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:59.066 [pool-58-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[NaN * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:59.067 [pool-59-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testOuterProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:59.069 [pool-60-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:59.071 [pool-61-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDotProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:59.074 [pool-62-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
09:04:59.077 [pool-63-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)

java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:59.079 [pool-64-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:59.080 [pool-65-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDotProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:59.082 [pool-66-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
09:04:59.084 [pool-67-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMap(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)

java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:04:59.086 [pool-68-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

09:04:59.086 [pool-47-thread-1] DEBUG tests.output - Failing tests with false: 
[testOuterProductSameType(org.apache.commons.math3.linear.RealVectorTest): NaN * NaN expected:<NaN> but was:<0.0>, testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest): NaN * NaN expected:<NaN> but was:<0.0>, testDotProductSameType(org.apache.commons.math3.linear.RealVectorTest): 0.0 * NaN expected:<NaN> but was:<0.0>, testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest): 0.0 * NaN expected:<NaN> but was:<0.0>, testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest): Inverse, entry #4 expected:<-Infinity> but was:<Infinity>, testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest): NaN * 0.0 expected:<NaN> but was:<0.0>, testDotProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest): 0.0 * NaN expected:<NaN> but was:<0.0>, testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest): NaN * NaN expected:<NaN> but was:<0.0>, testMap(org.apache.commons.math3.linear.SparseRealVectorTest): Inverse, entry #4 expected:<-Infinity> but was:<Infinity>, testOuterProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest): NaN * NaN expected:<NaN> but was:<0.0>]
09:04:59.086 [pool-47-thread-1] DEBUG tests.output - Failing tests with true: 
[testOuterProductSameType(org.apache.commons.math3.linear.RealVectorTest): NaN * 0.0 expected:<NaN> but was:<0.0>, testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest): NaN * 0.0 expected:<NaN> but was:<0.0>, testDotProductSameType(org.apache.commons.math3.linear.RealVectorTest): 0.0 * NaN expected:<NaN> but was:<0.0>, testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest): 0.0 * NaN expected:<NaN> but was:<0.0>, testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest): Inverse, entry #4 expected:<-Infinity> but was:<Infinity>, testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest): NaN * 0.0 expected:<NaN> but was:<0.0>, testDotProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest): 0.0 * NaN expected:<NaN> but was:<0.0>, testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest): NaN * 0.0 expected:<NaN> but was:<0.0>, testMap(org.apache.commons.math3.linear.SparseRealVectorTest): Inverse, entry #4 expected:<-Infinity> but was:<Infinity>, testOuterProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest): NaN * 0.0 expected:<NaN> but was:<0.0>]
09:04:59.086 [pool-47-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.linear.RealVector:655.
09:04:59.086 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #31
09:04:59.086 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVector:654 which is executed by 5 tests
74962082
09:04:59.230 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #32
09:04:59.230 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVector:647 which is executed by 5 tests
74962082
09:04:59.366 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
09:04:59.739 [pool-70-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (360 ms)
<> Total tests run: 362
<> Ignored tests: 60
<> Failed tests: 20
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testOuterProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testOuterProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMap(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
~ testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMap(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
~ testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)

09:05:00.469 [pool-69-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
RealVector.java:273: error: variable product might not have been initialized
                product.setEntry(thisE.getIndex(), otherE.getIndex(), ((thisE.getValue()) * (otherE.getValue())));
                ^
RealVector.java:276: error: variable product might not have been initialized
        return product;
               ^
09:05:00.962 [pool-69-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public abstract class RealVector {
    public abstract int getDimension();

    public abstract double getEntry(int index);

    public abstract void setEntry(int index, double value);

    public void addToEntry(int index, double increment) {
        setEntry(index, ((getEntry(index)) + increment));
    }

    public abstract org.apache.commons.math3.linear.RealVector append(org.apache.commons.math3.linear.RealVector v);

    public abstract org.apache.commons.math3.linear.RealVector append(double d);

    public abstract org.apache.commons.math3.linear.RealVector getSubVector(int index, int n);

    public abstract void setSubVector(int index, org.apache.commons.math3.linear.RealVector v);

    public abstract boolean isNaN();

    public abstract boolean isInfinite();

    protected void checkVectorDimensions(org.apache.commons.math3.linear.RealVector v) {
        checkVectorDimensions(v.getDimension());
    }

    protected void checkVectorDimensions(int n) {
        int d = getDimension();
        if (d != n) {
            throw new org.apache.commons.math3.exception.DimensionMismatchException(d, n);
        }
    }

    protected void checkIndex(final int index) {
        if ((index < 0) || (index >= (getDimension()))) {
            throw new org.apache.commons.math3.exception.OutOfRangeException(org.apache.commons.math3.exception.util.LocalizedFormats.INDEX, index, 0, ((getDimension()) - 1));
        }
    }

    protected void checkIndices(final int start, final int end) {
        final int dim = getDimension();
        if ((start < 0) || (start >= dim)) {
            throw new org.apache.commons.math3.exception.OutOfRangeException(org.apache.commons.math3.exception.util.LocalizedFormats.INDEX, start, 0, (dim - 1));
        }
        if ((end < 0) || (end >= dim)) {
            throw new org.apache.commons.math3.exception.OutOfRangeException(org.apache.commons.math3.exception.util.LocalizedFormats.INDEX, end, 0, (dim - 1));
        }
        if (end < start) {
            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(org.apache.commons.math3.exception.util.LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW, end, start, false);
        }
    }

    public org.apache.commons.math3.linear.RealVector add(org.apache.commons.math3.linear.RealVector v) {
        checkVectorDimensions(v);
        org.apache.commons.math3.linear.RealVector result = v.copy();
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = sparseIterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            final int index = e.getIndex();
            result.setEntry(index, ((e.getValue()) + (result.getEntry(index))));
        } 
        return result;
    }

    public org.apache.commons.math3.linear.RealVector subtract(org.apache.commons.math3.linear.RealVector v) {
        checkVectorDimensions(v);
        org.apache.commons.math3.linear.RealVector result = v.mapMultiply((-1.0));
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = sparseIterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            final int index = e.getIndex();
            result.setEntry(index, ((e.getValue()) + (result.getEntry(index))));
        } 
        return result;
    }

    public org.apache.commons.math3.linear.RealVector mapAdd(double d) {
        return copy().mapAddToSelf(d);
    }

    public org.apache.commons.math3.linear.RealVector mapAddToSelf(double d) {
        if (d != 0) {
            return mapToSelf(org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(new org.apache.commons.math3.analysis.function.Add(), d));
        }
        return this;
    }

    public abstract org.apache.commons.math3.linear.RealVector copy();

    public double dotProduct(org.apache.commons.math3.linear.RealVector v) {
        checkVectorDimensions(v);
        double d = 0;
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = sparseIterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            d += (e.getValue()) * (v.getEntry(e.getIndex()));
        } 
        return d;
    }

    public double cosine(org.apache.commons.math3.linear.RealVector v) {
        final double norm = getNorm();
        final double vNorm = v.getNorm();
        if ((norm == 0) || (vNorm == 0)) {
            throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM);
        }
        return (dotProduct(v)) / (norm * vNorm);
    }

    @java.lang.Deprecated
    public abstract org.apache.commons.math3.linear.RealVector ebeDivide(org.apache.commons.math3.linear.RealVector v);

    @java.lang.Deprecated
    public abstract org.apache.commons.math3.linear.RealVector ebeMultiply(org.apache.commons.math3.linear.RealVector v);

    public double getDistance(org.apache.commons.math3.linear.RealVector v) {
        checkVectorDimensions(v);
        double d = 0;
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = iterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            final double diff = (e.getValue()) - (v.getEntry(e.getIndex()));
            d += diff * diff;
        } 
        return org.apache.commons.math3.util.FastMath.sqrt(d);
    }

    public double getNorm() {
        double sum = 0;
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = sparseIterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            final double value = e.getValue();
            sum += value * value;
        } 
        return org.apache.commons.math3.util.FastMath.sqrt(sum);
    }

    public double getL1Norm() {
        double norm = 0;
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = sparseIterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            norm += org.apache.commons.math3.util.FastMath.abs(e.getValue());
        } 
        return norm;
    }

    public double getLInfNorm() {
        double norm = 0;
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = sparseIterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            norm = org.apache.commons.math3.util.FastMath.max(norm, org.apache.commons.math3.util.FastMath.abs(e.getValue()));
        } 
        return norm;
    }

    public double getL1Distance(org.apache.commons.math3.linear.RealVector v) {
        checkVectorDimensions(v);
        double d = 0;
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = iterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            d += org.apache.commons.math3.util.FastMath.abs(((e.getValue()) - (v.getEntry(e.getIndex()))));
        } 
        return d;
    }

    public double getLInfDistance(org.apache.commons.math3.linear.RealVector v) {
        checkVectorDimensions(v);
        double d = 0;
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = iterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            d = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(((e.getValue()) - (v.getEntry(e.getIndex())))), d);
        } 
        return d;
    }

    public int getMinIndex() {
        int minIndex = -1;
        double minValue = java.lang.Double.POSITIVE_INFINITY;
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> iterator = iterator();
        while (iterator.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry entry = iterator.next();
            if ((entry.getValue()) <= minValue) {
                minIndex = entry.getIndex();
                minValue = entry.getValue();
            }
        } 
        return minIndex;
    }

    public double getMinValue() {
        final int minIndex = getMinIndex();
        return minIndex < 0 ? java.lang.Double.NaN : getEntry(minIndex);
    }

    public int getMaxIndex() {
        int maxIndex = -1;
        double maxValue = java.lang.Double.NEGATIVE_INFINITY;
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> iterator = iterator();
        while (iterator.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry entry = iterator.next();
            if ((entry.getValue()) >= maxValue) {
                maxIndex = entry.getIndex();
                maxValue = entry.getValue();
            }
        } 
        return maxIndex;
    }

    public double getMaxValue() {
        final int maxIndex = getMaxIndex();
        return maxIndex < 0 ? java.lang.Double.NaN : getEntry(maxIndex);
    }

    public org.apache.commons.math3.linear.RealVector mapMultiply(double d) {
        return copy().mapMultiplyToSelf(d);
    }

    public org.apache.commons.math3.linear.RealVector mapMultiplyToSelf(double d) {
        return mapToSelf(org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(new org.apache.commons.math3.analysis.function.Multiply(), d));
    }

    public org.apache.commons.math3.linear.RealVector mapSubtract(double d) {
        return copy().mapSubtractToSelf(d);
    }

    public org.apache.commons.math3.linear.RealVector mapSubtractToSelf(double d) {
        return mapAddToSelf((-d));
    }

    public org.apache.commons.math3.linear.RealVector mapDivide(double d) {
        return copy().mapDivideToSelf(d);
    }

    public org.apache.commons.math3.linear.RealVector mapDivideToSelf(double d) {
        return mapToSelf(org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(new org.apache.commons.math3.analysis.function.Divide(), d));
    }

    public org.apache.commons.math3.linear.RealMatrix outerProduct(org.apache.commons.math3.linear.RealVector v) {
        org.apache.commons.math3.linear.RealMatrix product;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(3).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("(v instanceof org.apache.commons.math3.linear.SparseRealVector)",(v instanceof org.apache.commons.math3.linear.SparseRealVector));} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("(v instanceof org.apache.commons.math3.linear.SparseRealVector) || ((this) instanceof org.apache.commons.math3.linear.SparseRealVector)",(v instanceof org.apache.commons.math3.linear.SparseRealVector) || ((this) instanceof org.apache.commons.math3.linear.SparseRealVector));} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("v",v);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("((this) instanceof org.apache.commons.math3.linear.SparseRealVector)",((this) instanceof org.apache.commons.math3.linear.SparseRealVector));} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectionEnds();
        }
        if (runtimeAngelicValue) if ((v instanceof org.apache.commons.math3.linear.SparseRealVector) || ((this) instanceof org.apache.commons.math3.linear.SparseRealVector)) {
            product = new org.apache.commons.math3.linear.OpenMapRealMatrix(this.getDimension(), v.getDimension());
        }else {
            product = new org.apache.commons.math3.linear.Array2DRowRealMatrix(this.getDimension(), v.getDimension());
        }
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> thisIt = sparseIterator();
        while (thisIt.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry thisE = thisIt.next();
            java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> otherIt = v.sparseIterator();
            while (otherIt.hasNext()) {
                final org.apache.commons.math3.linear.RealVector.Entry otherE = otherIt.next();
                product.setEntry(thisE.getIndex(), otherE.getIndex(), ((thisE.getValue()) * (otherE.getValue())));
            } 
        } 
        return product;
    }

    public org.apache.commons.math3.linear.RealVector projection(final org.apache.commons.math3.linear.RealVector v) {
        final double norm2 = v.dotProduct(v);
        if (norm2 == 0.0) {
            throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM);
        }
        return v.mapMultiply(((dotProduct(v)) / (v.dotProduct(v))));
    }

    public void set(double value) {
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = iterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            e.setValue(value);
        } 
    }

    public double[] toArray() {
        int dim = getDimension();
        double[] values = new double[dim];
        for (int i = 0; i < dim; i++) {
            values[i] = getEntry(i);
        }
        return values;
    }

    public org.apache.commons.math3.linear.RealVector unitVector() {
        final double norm = getNorm();
        if (norm == 0) {
            throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM);
        }
        return mapDivide(norm);
    }

    public void unitize() {
        final double norm = getNorm();
        if (norm == 0) {
            throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM);
        }
        mapDivideToSelf(getNorm());
    }

    public java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> sparseIterator() {
        return new org.apache.commons.math3.linear.RealVector.SparseEntryIterator();
    }

    public java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> iterator() {
        final int dim = getDimension();
        return new java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry>() {
            private int i = 0;

            private org.apache.commons.math3.linear.RealVector.Entry e = new org.apache.commons.math3.linear.RealVector.Entry();

            public boolean hasNext() {
                return (i) < dim;
            }

            public org.apache.commons.math3.linear.RealVector.Entry next() {
                if ((i) < dim) {
                    e.setIndex(((i)++));
                    return e;
                }else {
                    throw new java.util.NoSuchElementException();
                }
            }

            public void remove() {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }
        };
    }

    public org.apache.commons.math3.linear.RealVector map(org.apache.commons.math3.analysis.UnivariateFunction function) {
        return copy().mapToSelf(function);
    }

    public org.apache.commons.math3.linear.RealVector mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction function) {
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = ((function.value(0)) == 0) ? sparseIterator() : iterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            e.setValue(function.value(e.getValue()));
        } 
        return this;
    }

    public org.apache.commons.math3.linear.RealVector combine(double a, double b, org.apache.commons.math3.linear.RealVector y) {
        return copy().combineToSelf(a, b, y);
    }

    public org.apache.commons.math3.linear.RealVector combineToSelf(double a, double b, org.apache.commons.math3.linear.RealVector y) {
        checkVectorDimensions(y);
        for (int i = 0; i < (getDimension()); i++) {
            final double xi = getEntry(i);
            final double yi = y.getEntry(i);
            setEntry(i, ((a * xi) + (b * yi)));
        }
        return this;
    }

    public double walkInDefaultOrder(final org.apache.commons.math3.linear.RealVectorPreservingVisitor visitor) {
        final int dim = getDimension();
        visitor.start(dim, 0, (dim - 1));
        for (int i = 0; i < dim; i++) {
            visitor.visit(i, getEntry(i));
        }
        return visitor.end();
    }

    public double walkInDefaultOrder(final org.apache.commons.math3.linear.RealVectorPreservingVisitor visitor, final int start, final int end) {
        checkIndices(start, end);
        visitor.start(getDimension(), start, end);
        for (int i = start; i <= end; i++) {
            visitor.visit(i, getEntry(i));
        }
        return visitor.end();
    }

    public double walkInOptimizedOrder(final org.apache.commons.math3.linear.RealVectorPreservingVisitor visitor) {
        return walkInDefaultOrder(visitor);
    }

    public double walkInOptimizedOrder(final org.apache.commons.math3.linear.RealVectorPreservingVisitor visitor, final int start, final int end) {
        return walkInDefaultOrder(visitor, start, end);
    }

    public double walkInDefaultOrder(final org.apache.commons.math3.linear.RealVectorChangingVisitor visitor) {
        final int dim = getDimension();
        visitor.start(dim, 0, (dim - 1));
        for (int i = 0; i < dim; i++) {
            setEntry(i, visitor.visit(i, getEntry(i)));
        }
        return visitor.end();
    }

    public double walkInDefaultOrder(final org.apache.commons.math3.linear.RealVectorChangingVisitor visitor, final int start, final int end) {
        checkIndices(start, end);
        visitor.start(getDimension(), start, end);
        for (int i = start; i <= end; i++) {
            setEntry(i, visitor.visit(i, getEntry(i)));
        }
        return visitor.end();
    }

    public double walkInOptimizedOrder(final org.apache.commons.math3.linear.RealVectorChangingVisitor visitor) {
        return walkInDefaultOrder(visitor);
    }

    public double walkInOptimizedOrder(final org.apache.commons.math3.linear.RealVectorChangingVisitor visitor, final int start, final int end) {
        return walkInDefaultOrder(visitor, start, end);
    }

    protected class Entry {
        private int index;

        public Entry() {
            setIndex(0);
        }

        public double getValue() {
            return getEntry(getIndex());
        }

        public void setValue(double value) {
            setEntry(getIndex(), value);
        }

        public int getIndex() {
            return index;
        }

        public void setIndex(int index) {
            this.index = index;
        }
    }

    @java.lang.Override
    public boolean equals(java.lang.Object obj) {
        throw new java.lang.UnsupportedOperationException();
    }

    @java.lang.Override
    public int hashCode() {
        throw new java.lang.UnsupportedOperationException();
    }

    protected class SparseEntryIterator implements java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> {
        private final int dim;

        private org.apache.commons.math3.linear.RealVector.Entry current;

        private org.apache.commons.math3.linear.RealVector.Entry next;

        protected SparseEntryIterator() {
            dim = getDimension();
            current = new org.apache.commons.math3.linear.RealVector.Entry();
            next = new org.apache.commons.math3.linear.RealVector.Entry();
            if ((next.getValue()) == 0) {
                advance(next);
            }
        }

        protected void advance(org.apache.commons.math3.linear.RealVector.Entry e) {
            if (e == null) {
                return;
            }
            do {
                e.setIndex(((e.getIndex()) + 1));
            } while (((e.getIndex()) < (dim)) && ((e.getValue()) == 0) );
            if ((e.getIndex()) >= (dim)) {
                e.setIndex((-1));
            }
        }

        public boolean hasNext() {
            return (next.getIndex()) >= 0;
        }

        public org.apache.commons.math3.linear.RealVector.Entry next() {
            int index = next.getIndex();
            if (index < 0) {
                throw new java.util.NoSuchElementException();
            }
            current.setIndex(index);
            advance(next);
            return current;
        }

        public void remove() {
            throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
        }
    }

    public static org.apache.commons.math3.linear.RealVector unmodifiableRealVector(final org.apache.commons.math3.linear.RealVector v) {
        return new org.apache.commons.math3.linear.RealVector() {
            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction function) {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector map(org.apache.commons.math3.analysis.UnivariateFunction function) {
                return v.map(function);
            }

            @java.lang.Override
            public java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> iterator() {
                final java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> i = v.iterator();
                return new java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry>() {
                    private final UnmodifiableEntry e = new UnmodifiableEntry();

                    public boolean hasNext() {
                        return i.hasNext();
                    }

                    public org.apache.commons.math3.linear.RealVector.Entry next() {
                        e.setIndex(i.next().getIndex());
                        return e;
                    }

                    public void remove() {
                        throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
                    }
                };
            }

            @java.lang.Override
            public java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> sparseIterator() {
                final java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> i = v.sparseIterator();
                return new java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry>() {
                    private final UnmodifiableEntry e = new UnmodifiableEntry();

                    public boolean hasNext() {
                        return i.hasNext();
                    }

                    public org.apache.commons.math3.linear.RealVector.Entry next() {
                        e.setIndex(i.next().getIndex());
                        return e;
                    }

                    public void remove() {
                        throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
                    }
                };
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector copy() {
                return v.copy();
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector add(org.apache.commons.math3.linear.RealVector w) {
                return v.add(w);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector subtract(org.apache.commons.math3.linear.RealVector w) {
                return v.subtract(w);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector mapAdd(double d) {
                return v.mapAdd(d);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector mapAddToSelf(double d) {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector mapSubtract(double d) {
                return v.mapSubtract(d);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector mapSubtractToSelf(double d) {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector mapMultiply(double d) {
                return v.mapMultiply(d);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector mapMultiplyToSelf(double d) {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector mapDivide(double d) {
                return v.mapDivide(d);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector mapDivideToSelf(double d) {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector ebeMultiply(org.apache.commons.math3.linear.RealVector w) {
                return v.ebeMultiply(w);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector ebeDivide(org.apache.commons.math3.linear.RealVector w) {
                return v.ebeDivide(w);
            }

            @java.lang.Override
            public double dotProduct(org.apache.commons.math3.linear.RealVector w) {
                return v.dotProduct(w);
            }

            @java.lang.Override
            public double cosine(org.apache.commons.math3.linear.RealVector w) {
                return v.cosine(w);
            }

            @java.lang.Override
            public double getNorm() {
                return v.getNorm();
            }

            @java.lang.Override
            public double getL1Norm() {
                return v.getL1Norm();
            }

            @java.lang.Override
            public double getLInfNorm() {
                return v.getLInfNorm();
            }

            @java.lang.Override
            public double getDistance(org.apache.commons.math3.linear.RealVector w) {
                return v.getDistance(w);
            }

            @java.lang.Override
            public double getL1Distance(org.apache.commons.math3.linear.RealVector w) {
                return v.getL1Distance(w);
            }

            @java.lang.Override
            public double getLInfDistance(org.apache.commons.math3.linear.RealVector w) {
                return v.getLInfDistance(w);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector unitVector() {
                return v.unitVector();
            }

            @java.lang.Override
            public void unitize() {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealMatrix outerProduct(org.apache.commons.math3.linear.RealVector w) {
                return v.outerProduct(w);
            }

            @java.lang.Override
            public double getEntry(int index) {
                return v.getEntry(index);
            }

            @java.lang.Override
            public void setEntry(int index, double value) {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            @java.lang.Override
            public void addToEntry(int index, double value) {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            @java.lang.Override
            public int getDimension() {
                return v.getDimension();
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector append(org.apache.commons.math3.linear.RealVector w) {
                return v.append(w);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector append(double d) {
                return v.append(d);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector getSubVector(int index, int n) {
                return v.getSubVector(index, n);
            }

            @java.lang.Override
            public void setSubVector(int index, org.apache.commons.math3.linear.RealVector w) {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            @java.lang.Override
            public void set(double value) {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            @java.lang.Override
            public double[] toArray() {
                return v.toArray();
            }

            @java.lang.Override
            public boolean isNaN() {
                return v.isNaN();
            }

            @java.lang.Override
            public boolean isInfinite() {
                return v.isInfinite();
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector combine(double a, double b, org.apache.commons.math3.linear.RealVector y) {
                return v.combine(a, b, y);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector combineToSelf(double a, double b, org.apache.commons.math3.linear.RealVector y) {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            class UnmodifiableEntry extends org.apache.commons.math3.linear.RealVector.Entry {
                @java.lang.Override
                public double getValue() {
                    return v.getEntry(getIndex());
                }

                @java.lang.Override
                public void setValue(double value) {
                    throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
                }
            }
        };
    }
}
09:05:00.963 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
09:05:00.963 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
09:05:01.323 [pool-72-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (348 ms)
<> Total tests run: 362
<> Ignored tests: 60
<> Failed tests: 20
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testOuterProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testOuterProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMap(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
~ testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMap(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
~ testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)

java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:05:02.108 [pool-73-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (11 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testOuterProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:05:02.117 [pool-74-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (7 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:05:02.120 [pool-75-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDotProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:05:02.124 [pool-76-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
09:05:02.143 [pool-77-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (17 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)

java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:05:02.144 [pool-78-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:05:02.146 [pool-79-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDotProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:05:02.148 [pool-80-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
09:05:02.151 [pool-81-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMap(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)

java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:05:02.153 [pool-82-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:05:02.155 [pool-83-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testOuterProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:05:02.157 [pool-84-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:05:02.158 [pool-85-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDotProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:05:02.160 [pool-86-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
09:05:02.164 [pool-87-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)

java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:05:02.166 [pool-88-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:05:02.167 [pool-89-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDotProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:05:02.168 [pool-90-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
09:05:02.171 [pool-91-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMap(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)

java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:05:02.173 [pool-92-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

09:05:02.173 [pool-71-thread-1] DEBUG tests.output - Failing tests with false: 
[testOuterProductSameType(org.apache.commons.math3.linear.RealVectorTest): NaN * 0.0 expected:<NaN> but was:<0.0>, testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest): NaN * 0.0 expected:<NaN> but was:<0.0>, testDotProductSameType(org.apache.commons.math3.linear.RealVectorTest): 0.0 * NaN expected:<NaN> but was:<0.0>, testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest): 0.0 * NaN expected:<NaN> but was:<0.0>, testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest): Inverse, entry #4 expected:<-Infinity> but was:<Infinity>, testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest): NaN * 0.0 expected:<NaN> but was:<0.0>, testDotProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest): 0.0 * NaN expected:<NaN> but was:<0.0>, testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest): NaN * 0.0 expected:<NaN> but was:<0.0>, testMap(org.apache.commons.math3.linear.SparseRealVectorTest): Inverse, entry #4 expected:<-Infinity> but was:<Infinity>, testOuterProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest): NaN * 0.0 expected:<NaN> but was:<0.0>]
09:05:02.173 [pool-71-thread-1] DEBUG tests.output - Failing tests with true: 
[testOuterProductSameType(org.apache.commons.math3.linear.RealVectorTest): NaN * 0.0 expected:<NaN> but was:<0.0>, testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest): NaN * 0.0 expected:<NaN> but was:<0.0>, testDotProductSameType(org.apache.commons.math3.linear.RealVectorTest): 0.0 * NaN expected:<NaN> but was:<0.0>, testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest): 0.0 * NaN expected:<NaN> but was:<0.0>, testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest): Inverse, entry #4 expected:<-Infinity> but was:<Infinity>, testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest): NaN * 0.0 expected:<NaN> but was:<0.0>, testDotProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest): 0.0 * NaN expected:<NaN> but was:<0.0>, testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest): NaN * 0.0 expected:<NaN> but was:<0.0>, testMap(org.apache.commons.math3.linear.SparseRealVectorTest): Inverse, entry #4 expected:<-Infinity> but was:<Infinity>, testOuterProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest): NaN * 0.0 expected:<NaN> but was:<0.0>]
09:05:02.173 [pool-71-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.linear.RealVector:647.
09:05:02.173 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #33
09:05:02.174 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1271 which is executed by 3 tests
09:05:02.174 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1271
09:05:02.174 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #34
09:05:02.174 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1270 which is executed by 3 tests
09:05:02.174 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1270
09:05:02.174 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #35
09:05:02.174 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1232 which is executed by 3 tests
09:05:02.174 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1232
09:05:02.174 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #36
09:05:02.174 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1212 which is executed by 3 tests
09:05:02.174 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1212
09:05:02.174 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #37
09:05:02.174 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:928 which is executed by 6 tests
09:05:02.174 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:928
09:05:02.175 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #38
09:05:02.175 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:927 which is executed by 6 tests
09:05:02.175 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:927
09:05:02.175 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #39
09:05:02.175 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:926 which is executed by 6 tests
09:05:02.175 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:926
09:05:02.175 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #40
09:05:02.175 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:925 which is executed by 6 tests
09:05:02.175 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:925
09:05:02.175 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #41
09:05:02.175 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:924 which is executed by 6 tests
09:05:02.175 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:924
09:05:02.175 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #42
09:05:02.175 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:923 which is executed by 6 tests
09:05:02.176 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:923
09:05:02.176 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #43
09:05:02.176 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:922 which is executed by 6 tests
09:05:02.176 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:922
09:05:02.176 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #44
09:05:02.176 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:921 which is executed by 6 tests
09:05:02.176 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:921
09:05:02.176 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #45
09:05:02.176 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:920 which is executed by 6 tests
09:05:02.176 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:920
09:05:02.176 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #46
09:05:02.176 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:919 which is executed by 6 tests
09:05:02.176 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:919
09:05:02.176 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #47
09:05:02.176 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:914 which is executed by 6 tests
09:05:02.177 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:914
09:05:02.177 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #48
09:05:02.177 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:912 which is executed by 6 tests
09:05:02.177 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:912
09:05:02.177 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #49
09:05:02.177 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:911 which is executed by 6 tests
09:05:02.177 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:911
09:05:02.177 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #50
09:05:02.177 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:910 which is executed by 6 tests
09:05:02.177 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:910
09:05:02.177 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #51
09:05:02.177 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:909 which is executed by 6 tests
09:05:02.178 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:909
09:05:02.178 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #52
09:05:02.178 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:908 which is executed by 6 tests
09:05:02.178 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:908
09:05:02.178 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #53
09:05:02.178 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:907 which is executed by 6 tests
09:05:02.178 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:907
09:05:02.178 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #54
09:05:02.178 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:906 which is executed by 6 tests
09:05:02.178 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:906
09:05:02.178 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #55
09:05:02.178 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVector:652 which is executed by 2 tests
74962082
09:05:02.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #56
09:05:02.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVector:651 which is executed by 2 tests
74962082
09:05:02.446 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:05:02.631 [pool-94-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (173 ms)
<> Total tests run: 162
<> Ignored tests: 48
<> Failed tests: 8
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testOuterProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testOuterProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

09:05:03.342 [pool-93-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
RealVector.java:272: error: variable product might not have been initialized
                product.setEntry(thisE.getIndex(), otherE.getIndex(), ((thisE.getValue()) * (otherE.getValue())));
                ^
RealVector.java:275: error: variable product might not have been initialized
        return product;
               ^
09:05:03.805 [pool-93-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public abstract class RealVector {
    public abstract int getDimension();

    public abstract double getEntry(int index);

    public abstract void setEntry(int index, double value);

    public void addToEntry(int index, double increment) {
        setEntry(index, ((getEntry(index)) + increment));
    }

    public abstract org.apache.commons.math3.linear.RealVector append(org.apache.commons.math3.linear.RealVector v);

    public abstract org.apache.commons.math3.linear.RealVector append(double d);

    public abstract org.apache.commons.math3.linear.RealVector getSubVector(int index, int n);

    public abstract void setSubVector(int index, org.apache.commons.math3.linear.RealVector v);

    public abstract boolean isNaN();

    public abstract boolean isInfinite();

    protected void checkVectorDimensions(org.apache.commons.math3.linear.RealVector v) {
        checkVectorDimensions(v.getDimension());
    }

    protected void checkVectorDimensions(int n) {
        int d = getDimension();
        if (d != n) {
            throw new org.apache.commons.math3.exception.DimensionMismatchException(d, n);
        }
    }

    protected void checkIndex(final int index) {
        if ((index < 0) || (index >= (getDimension()))) {
            throw new org.apache.commons.math3.exception.OutOfRangeException(org.apache.commons.math3.exception.util.LocalizedFormats.INDEX, index, 0, ((getDimension()) - 1));
        }
    }

    protected void checkIndices(final int start, final int end) {
        final int dim = getDimension();
        if ((start < 0) || (start >= dim)) {
            throw new org.apache.commons.math3.exception.OutOfRangeException(org.apache.commons.math3.exception.util.LocalizedFormats.INDEX, start, 0, (dim - 1));
        }
        if ((end < 0) || (end >= dim)) {
            throw new org.apache.commons.math3.exception.OutOfRangeException(org.apache.commons.math3.exception.util.LocalizedFormats.INDEX, end, 0, (dim - 1));
        }
        if (end < start) {
            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(org.apache.commons.math3.exception.util.LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW, end, start, false);
        }
    }

    public org.apache.commons.math3.linear.RealVector add(org.apache.commons.math3.linear.RealVector v) {
        checkVectorDimensions(v);
        org.apache.commons.math3.linear.RealVector result = v.copy();
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = sparseIterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            final int index = e.getIndex();
            result.setEntry(index, ((e.getValue()) + (result.getEntry(index))));
        } 
        return result;
    }

    public org.apache.commons.math3.linear.RealVector subtract(org.apache.commons.math3.linear.RealVector v) {
        checkVectorDimensions(v);
        org.apache.commons.math3.linear.RealVector result = v.mapMultiply((-1.0));
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = sparseIterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            final int index = e.getIndex();
            result.setEntry(index, ((e.getValue()) + (result.getEntry(index))));
        } 
        return result;
    }

    public org.apache.commons.math3.linear.RealVector mapAdd(double d) {
        return copy().mapAddToSelf(d);
    }

    public org.apache.commons.math3.linear.RealVector mapAddToSelf(double d) {
        if (d != 0) {
            return mapToSelf(org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(new org.apache.commons.math3.analysis.function.Add(), d));
        }
        return this;
    }

    public abstract org.apache.commons.math3.linear.RealVector copy();

    public double dotProduct(org.apache.commons.math3.linear.RealVector v) {
        checkVectorDimensions(v);
        double d = 0;
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = sparseIterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            d += (e.getValue()) * (v.getEntry(e.getIndex()));
        } 
        return d;
    }

    public double cosine(org.apache.commons.math3.linear.RealVector v) {
        final double norm = getNorm();
        final double vNorm = v.getNorm();
        if ((norm == 0) || (vNorm == 0)) {
            throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM);
        }
        return (dotProduct(v)) / (norm * vNorm);
    }

    @java.lang.Deprecated
    public abstract org.apache.commons.math3.linear.RealVector ebeDivide(org.apache.commons.math3.linear.RealVector v);

    @java.lang.Deprecated
    public abstract org.apache.commons.math3.linear.RealVector ebeMultiply(org.apache.commons.math3.linear.RealVector v);

    public double getDistance(org.apache.commons.math3.linear.RealVector v) {
        checkVectorDimensions(v);
        double d = 0;
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = iterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            final double diff = (e.getValue()) - (v.getEntry(e.getIndex()));
            d += diff * diff;
        } 
        return org.apache.commons.math3.util.FastMath.sqrt(d);
    }

    public double getNorm() {
        double sum = 0;
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = sparseIterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            final double value = e.getValue();
            sum += value * value;
        } 
        return org.apache.commons.math3.util.FastMath.sqrt(sum);
    }

    public double getL1Norm() {
        double norm = 0;
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = sparseIterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            norm += org.apache.commons.math3.util.FastMath.abs(e.getValue());
        } 
        return norm;
    }

    public double getLInfNorm() {
        double norm = 0;
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = sparseIterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            norm = org.apache.commons.math3.util.FastMath.max(norm, org.apache.commons.math3.util.FastMath.abs(e.getValue()));
        } 
        return norm;
    }

    public double getL1Distance(org.apache.commons.math3.linear.RealVector v) {
        checkVectorDimensions(v);
        double d = 0;
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = iterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            d += org.apache.commons.math3.util.FastMath.abs(((e.getValue()) - (v.getEntry(e.getIndex()))));
        } 
        return d;
    }

    public double getLInfDistance(org.apache.commons.math3.linear.RealVector v) {
        checkVectorDimensions(v);
        double d = 0;
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = iterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            d = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(((e.getValue()) - (v.getEntry(e.getIndex())))), d);
        } 
        return d;
    }

    public int getMinIndex() {
        int minIndex = -1;
        double minValue = java.lang.Double.POSITIVE_INFINITY;
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> iterator = iterator();
        while (iterator.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry entry = iterator.next();
            if ((entry.getValue()) <= minValue) {
                minIndex = entry.getIndex();
                minValue = entry.getValue();
            }
        } 
        return minIndex;
    }

    public double getMinValue() {
        final int minIndex = getMinIndex();
        return minIndex < 0 ? java.lang.Double.NaN : getEntry(minIndex);
    }

    public int getMaxIndex() {
        int maxIndex = -1;
        double maxValue = java.lang.Double.NEGATIVE_INFINITY;
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> iterator = iterator();
        while (iterator.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry entry = iterator.next();
            if ((entry.getValue()) >= maxValue) {
                maxIndex = entry.getIndex();
                maxValue = entry.getValue();
            }
        } 
        return maxIndex;
    }

    public double getMaxValue() {
        final int maxIndex = getMaxIndex();
        return maxIndex < 0 ? java.lang.Double.NaN : getEntry(maxIndex);
    }

    public org.apache.commons.math3.linear.RealVector mapMultiply(double d) {
        return copy().mapMultiplyToSelf(d);
    }

    public org.apache.commons.math3.linear.RealVector mapMultiplyToSelf(double d) {
        return mapToSelf(org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(new org.apache.commons.math3.analysis.function.Multiply(), d));
    }

    public org.apache.commons.math3.linear.RealVector mapSubtract(double d) {
        return copy().mapSubtractToSelf(d);
    }

    public org.apache.commons.math3.linear.RealVector mapSubtractToSelf(double d) {
        return mapAddToSelf((-d));
    }

    public org.apache.commons.math3.linear.RealVector mapDivide(double d) {
        return copy().mapDivideToSelf(d);
    }

    public org.apache.commons.math3.linear.RealVector mapDivideToSelf(double d) {
        return mapToSelf(org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(new org.apache.commons.math3.analysis.function.Divide(), d));
    }

    public org.apache.commons.math3.linear.RealMatrix outerProduct(org.apache.commons.math3.linear.RealVector v) {
        org.apache.commons.math3.linear.RealMatrix product;
        if ((v instanceof org.apache.commons.math3.linear.SparseRealVector) || ((this) instanceof org.apache.commons.math3.linear.SparseRealVector)) {
            product = new org.apache.commons.math3.linear.OpenMapRealMatrix(this.getDimension(), v.getDimension());
        }else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(5).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("v",v);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectionEnds();
            }
            if (runtimeAngelicValue)
                product = new org.apache.commons.math3.linear.Array2DRowRealMatrix(this.getDimension(), v.getDimension());

        }
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> thisIt = sparseIterator();
        while (thisIt.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry thisE = thisIt.next();
            java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> otherIt = v.sparseIterator();
            while (otherIt.hasNext()) {
                final org.apache.commons.math3.linear.RealVector.Entry otherE = otherIt.next();
                product.setEntry(thisE.getIndex(), otherE.getIndex(), ((thisE.getValue()) * (otherE.getValue())));
            } 
        } 
        return product;
    }

    public org.apache.commons.math3.linear.RealVector projection(final org.apache.commons.math3.linear.RealVector v) {
        final double norm2 = v.dotProduct(v);
        if (norm2 == 0.0) {
            throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM);
        }
        return v.mapMultiply(((dotProduct(v)) / (v.dotProduct(v))));
    }

    public void set(double value) {
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = iterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            e.setValue(value);
        } 
    }

    public double[] toArray() {
        int dim = getDimension();
        double[] values = new double[dim];
        for (int i = 0; i < dim; i++) {
            values[i] = getEntry(i);
        }
        return values;
    }

    public org.apache.commons.math3.linear.RealVector unitVector() {
        final double norm = getNorm();
        if (norm == 0) {
            throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM);
        }
        return mapDivide(norm);
    }

    public void unitize() {
        final double norm = getNorm();
        if (norm == 0) {
            throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM);
        }
        mapDivideToSelf(getNorm());
    }

    public java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> sparseIterator() {
        return new org.apache.commons.math3.linear.RealVector.SparseEntryIterator();
    }

    public java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> iterator() {
        final int dim = getDimension();
        return new java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry>() {
            private int i = 0;

            private org.apache.commons.math3.linear.RealVector.Entry e = new org.apache.commons.math3.linear.RealVector.Entry();

            public boolean hasNext() {
                return (i) < dim;
            }

            public org.apache.commons.math3.linear.RealVector.Entry next() {
                if ((i) < dim) {
                    e.setIndex(((i)++));
                    return e;
                }else {
                    throw new java.util.NoSuchElementException();
                }
            }

            public void remove() {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }
        };
    }

    public org.apache.commons.math3.linear.RealVector map(org.apache.commons.math3.analysis.UnivariateFunction function) {
        return copy().mapToSelf(function);
    }

    public org.apache.commons.math3.linear.RealVector mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction function) {
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = ((function.value(0)) == 0) ? sparseIterator() : iterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            e.setValue(function.value(e.getValue()));
        } 
        return this;
    }

    public org.apache.commons.math3.linear.RealVector combine(double a, double b, org.apache.commons.math3.linear.RealVector y) {
        return copy().combineToSelf(a, b, y);
    }

    public org.apache.commons.math3.linear.RealVector combineToSelf(double a, double b, org.apache.commons.math3.linear.RealVector y) {
        checkVectorDimensions(y);
        for (int i = 0; i < (getDimension()); i++) {
            final double xi = getEntry(i);
            final double yi = y.getEntry(i);
            setEntry(i, ((a * xi) + (b * yi)));
        }
        return this;
    }

    public double walkInDefaultOrder(final org.apache.commons.math3.linear.RealVectorPreservingVisitor visitor) {
        final int dim = getDimension();
        visitor.start(dim, 0, (dim - 1));
        for (int i = 0; i < dim; i++) {
            visitor.visit(i, getEntry(i));
        }
        return visitor.end();
    }

    public double walkInDefaultOrder(final org.apache.commons.math3.linear.RealVectorPreservingVisitor visitor, final int start, final int end) {
        checkIndices(start, end);
        visitor.start(getDimension(), start, end);
        for (int i = start; i <= end; i++) {
            visitor.visit(i, getEntry(i));
        }
        return visitor.end();
    }

    public double walkInOptimizedOrder(final org.apache.commons.math3.linear.RealVectorPreservingVisitor visitor) {
        return walkInDefaultOrder(visitor);
    }

    public double walkInOptimizedOrder(final org.apache.commons.math3.linear.RealVectorPreservingVisitor visitor, final int start, final int end) {
        return walkInDefaultOrder(visitor, start, end);
    }

    public double walkInDefaultOrder(final org.apache.commons.math3.linear.RealVectorChangingVisitor visitor) {
        final int dim = getDimension();
        visitor.start(dim, 0, (dim - 1));
        for (int i = 0; i < dim; i++) {
            setEntry(i, visitor.visit(i, getEntry(i)));
        }
        return visitor.end();
    }

    public double walkInDefaultOrder(final org.apache.commons.math3.linear.RealVectorChangingVisitor visitor, final int start, final int end) {
        checkIndices(start, end);
        visitor.start(getDimension(), start, end);
        for (int i = start; i <= end; i++) {
            setEntry(i, visitor.visit(i, getEntry(i)));
        }
        return visitor.end();
    }

    public double walkInOptimizedOrder(final org.apache.commons.math3.linear.RealVectorChangingVisitor visitor) {
        return walkInDefaultOrder(visitor);
    }

    public double walkInOptimizedOrder(final org.apache.commons.math3.linear.RealVectorChangingVisitor visitor, final int start, final int end) {
        return walkInDefaultOrder(visitor, start, end);
    }

    protected class Entry {
        private int index;

        public Entry() {
            setIndex(0);
        }

        public double getValue() {
            return getEntry(getIndex());
        }

        public void setValue(double value) {
            setEntry(getIndex(), value);
        }

        public int getIndex() {
            return index;
        }

        public void setIndex(int index) {
            this.index = index;
        }
    }

    @java.lang.Override
    public boolean equals(java.lang.Object obj) {
        throw new java.lang.UnsupportedOperationException();
    }

    @java.lang.Override
    public int hashCode() {
        throw new java.lang.UnsupportedOperationException();
    }

    protected class SparseEntryIterator implements java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> {
        private final int dim;

        private org.apache.commons.math3.linear.RealVector.Entry current;

        private org.apache.commons.math3.linear.RealVector.Entry next;

        protected SparseEntryIterator() {
            dim = getDimension();
            current = new org.apache.commons.math3.linear.RealVector.Entry();
            next = new org.apache.commons.math3.linear.RealVector.Entry();
            if ((next.getValue()) == 0) {
                advance(next);
            }
        }

        protected void advance(org.apache.commons.math3.linear.RealVector.Entry e) {
            if (e == null) {
                return;
            }
            do {
                e.setIndex(((e.getIndex()) + 1));
            } while (((e.getIndex()) < (dim)) && ((e.getValue()) == 0) );
            if ((e.getIndex()) >= (dim)) {
                e.setIndex((-1));
            }
        }

        public boolean hasNext() {
            return (next.getIndex()) >= 0;
        }

        public org.apache.commons.math3.linear.RealVector.Entry next() {
            int index = next.getIndex();
            if (index < 0) {
                throw new java.util.NoSuchElementException();
            }
            current.setIndex(index);
            advance(next);
            return current;
        }

        public void remove() {
            throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
        }
    }

    public static org.apache.commons.math3.linear.RealVector unmodifiableRealVector(final org.apache.commons.math3.linear.RealVector v) {
        return new org.apache.commons.math3.linear.RealVector() {
            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction function) {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector map(org.apache.commons.math3.analysis.UnivariateFunction function) {
                return v.map(function);
            }

            @java.lang.Override
            public java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> iterator() {
                final java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> i = v.iterator();
                return new java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry>() {
                    private final UnmodifiableEntry e = new UnmodifiableEntry();

                    public boolean hasNext() {
                        return i.hasNext();
                    }

                    public org.apache.commons.math3.linear.RealVector.Entry next() {
                        e.setIndex(i.next().getIndex());
                        return e;
                    }

                    public void remove() {
                        throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
                    }
                };
            }

            @java.lang.Override
            public java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> sparseIterator() {
                final java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> i = v.sparseIterator();
                return new java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry>() {
                    private final UnmodifiableEntry e = new UnmodifiableEntry();

                    public boolean hasNext() {
                        return i.hasNext();
                    }

                    public org.apache.commons.math3.linear.RealVector.Entry next() {
                        e.setIndex(i.next().getIndex());
                        return e;
                    }

                    public void remove() {
                        throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
                    }
                };
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector copy() {
                return v.copy();
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector add(org.apache.commons.math3.linear.RealVector w) {
                return v.add(w);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector subtract(org.apache.commons.math3.linear.RealVector w) {
                return v.subtract(w);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector mapAdd(double d) {
                return v.mapAdd(d);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector mapAddToSelf(double d) {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector mapSubtract(double d) {
                return v.mapSubtract(d);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector mapSubtractToSelf(double d) {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector mapMultiply(double d) {
                return v.mapMultiply(d);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector mapMultiplyToSelf(double d) {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector mapDivide(double d) {
                return v.mapDivide(d);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector mapDivideToSelf(double d) {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector ebeMultiply(org.apache.commons.math3.linear.RealVector w) {
                return v.ebeMultiply(w);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector ebeDivide(org.apache.commons.math3.linear.RealVector w) {
                return v.ebeDivide(w);
            }

            @java.lang.Override
            public double dotProduct(org.apache.commons.math3.linear.RealVector w) {
                return v.dotProduct(w);
            }

            @java.lang.Override
            public double cosine(org.apache.commons.math3.linear.RealVector w) {
                return v.cosine(w);
            }

            @java.lang.Override
            public double getNorm() {
                return v.getNorm();
            }

            @java.lang.Override
            public double getL1Norm() {
                return v.getL1Norm();
            }

            @java.lang.Override
            public double getLInfNorm() {
                return v.getLInfNorm();
            }

            @java.lang.Override
            public double getDistance(org.apache.commons.math3.linear.RealVector w) {
                return v.getDistance(w);
            }

            @java.lang.Override
            public double getL1Distance(org.apache.commons.math3.linear.RealVector w) {
                return v.getL1Distance(w);
            }

            @java.lang.Override
            public double getLInfDistance(org.apache.commons.math3.linear.RealVector w) {
                return v.getLInfDistance(w);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector unitVector() {
                return v.unitVector();
            }

            @java.lang.Override
            public void unitize() {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealMatrix outerProduct(org.apache.commons.math3.linear.RealVector w) {
                return v.outerProduct(w);
            }

            @java.lang.Override
            public double getEntry(int index) {
                return v.getEntry(index);
            }

            @java.lang.Override
            public void setEntry(int index, double value) {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            @java.lang.Override
            public void addToEntry(int index, double value) {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            @java.lang.Override
            public int getDimension() {
                return v.getDimension();
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector append(org.apache.commons.math3.linear.RealVector w) {
                return v.append(w);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector append(double d) {
                return v.append(d);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector getSubVector(int index, int n) {
                return v.getSubVector(index, n);
            }

            @java.lang.Override
            public void setSubVector(int index, org.apache.commons.math3.linear.RealVector w) {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            @java.lang.Override
            public void set(double value) {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            @java.lang.Override
            public double[] toArray() {
                return v.toArray();
            }

            @java.lang.Override
            public boolean isNaN() {
                return v.isNaN();
            }

            @java.lang.Override
            public boolean isInfinite() {
                return v.isInfinite();
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector combine(double a, double b, org.apache.commons.math3.linear.RealVector y) {
                return v.combine(a, b, y);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector combineToSelf(double a, double b, org.apache.commons.math3.linear.RealVector y) {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            class UnmodifiableEntry extends org.apache.commons.math3.linear.RealVector.Entry {
                @java.lang.Override
                public double getValue() {
                    return v.getEntry(getIndex());
                }

                @java.lang.Override
                public void setValue(double value) {
                    throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
                }
            }
        };
    }
}
09:05:03.806 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
09:05:03.806 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #57
09:05:03.806 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVector:649 which is executed by 3 tests
74962082
09:05:03.940 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #58
09:05:03.941 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVector:648 which is executed by 3 tests
74962082
09:05:04.073 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
09:05:04.289 [pool-96-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (206 ms)
<> Total tests run: 200
<> Ignored tests: 12
<> Failed tests: 12
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMap(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
~ testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMap(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
~ testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)

09:05:04.985 [pool-95-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
RealVector.java:272: error: variable product might not have been initialized
                product.setEntry(thisE.getIndex(), otherE.getIndex(), ((thisE.getValue()) * (otherE.getValue())));
                ^
RealVector.java:275: error: variable product might not have been initialized
        return product;
               ^
09:05:05.426 [pool-95-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public abstract class RealVector {
    public abstract int getDimension();

    public abstract double getEntry(int index);

    public abstract void setEntry(int index, double value);

    public void addToEntry(int index, double increment) {
        setEntry(index, ((getEntry(index)) + increment));
    }

    public abstract org.apache.commons.math3.linear.RealVector append(org.apache.commons.math3.linear.RealVector v);

    public abstract org.apache.commons.math3.linear.RealVector append(double d);

    public abstract org.apache.commons.math3.linear.RealVector getSubVector(int index, int n);

    public abstract void setSubVector(int index, org.apache.commons.math3.linear.RealVector v);

    public abstract boolean isNaN();

    public abstract boolean isInfinite();

    protected void checkVectorDimensions(org.apache.commons.math3.linear.RealVector v) {
        checkVectorDimensions(v.getDimension());
    }

    protected void checkVectorDimensions(int n) {
        int d = getDimension();
        if (d != n) {
            throw new org.apache.commons.math3.exception.DimensionMismatchException(d, n);
        }
    }

    protected void checkIndex(final int index) {
        if ((index < 0) || (index >= (getDimension()))) {
            throw new org.apache.commons.math3.exception.OutOfRangeException(org.apache.commons.math3.exception.util.LocalizedFormats.INDEX, index, 0, ((getDimension()) - 1));
        }
    }

    protected void checkIndices(final int start, final int end) {
        final int dim = getDimension();
        if ((start < 0) || (start >= dim)) {
            throw new org.apache.commons.math3.exception.OutOfRangeException(org.apache.commons.math3.exception.util.LocalizedFormats.INDEX, start, 0, (dim - 1));
        }
        if ((end < 0) || (end >= dim)) {
            throw new org.apache.commons.math3.exception.OutOfRangeException(org.apache.commons.math3.exception.util.LocalizedFormats.INDEX, end, 0, (dim - 1));
        }
        if (end < start) {
            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(org.apache.commons.math3.exception.util.LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW, end, start, false);
        }
    }

    public org.apache.commons.math3.linear.RealVector add(org.apache.commons.math3.linear.RealVector v) {
        checkVectorDimensions(v);
        org.apache.commons.math3.linear.RealVector result = v.copy();
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = sparseIterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            final int index = e.getIndex();
            result.setEntry(index, ((e.getValue()) + (result.getEntry(index))));
        } 
        return result;
    }

    public org.apache.commons.math3.linear.RealVector subtract(org.apache.commons.math3.linear.RealVector v) {
        checkVectorDimensions(v);
        org.apache.commons.math3.linear.RealVector result = v.mapMultiply((-1.0));
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = sparseIterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            final int index = e.getIndex();
            result.setEntry(index, ((e.getValue()) + (result.getEntry(index))));
        } 
        return result;
    }

    public org.apache.commons.math3.linear.RealVector mapAdd(double d) {
        return copy().mapAddToSelf(d);
    }

    public org.apache.commons.math3.linear.RealVector mapAddToSelf(double d) {
        if (d != 0) {
            return mapToSelf(org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(new org.apache.commons.math3.analysis.function.Add(), d));
        }
        return this;
    }

    public abstract org.apache.commons.math3.linear.RealVector copy();

    public double dotProduct(org.apache.commons.math3.linear.RealVector v) {
        checkVectorDimensions(v);
        double d = 0;
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = sparseIterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            d += (e.getValue()) * (v.getEntry(e.getIndex()));
        } 
        return d;
    }

    public double cosine(org.apache.commons.math3.linear.RealVector v) {
        final double norm = getNorm();
        final double vNorm = v.getNorm();
        if ((norm == 0) || (vNorm == 0)) {
            throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM);
        }
        return (dotProduct(v)) / (norm * vNorm);
    }

    @java.lang.Deprecated
    public abstract org.apache.commons.math3.linear.RealVector ebeDivide(org.apache.commons.math3.linear.RealVector v);

    @java.lang.Deprecated
    public abstract org.apache.commons.math3.linear.RealVector ebeMultiply(org.apache.commons.math3.linear.RealVector v);

    public double getDistance(org.apache.commons.math3.linear.RealVector v) {
        checkVectorDimensions(v);
        double d = 0;
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = iterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            final double diff = (e.getValue()) - (v.getEntry(e.getIndex()));
            d += diff * diff;
        } 
        return org.apache.commons.math3.util.FastMath.sqrt(d);
    }

    public double getNorm() {
        double sum = 0;
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = sparseIterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            final double value = e.getValue();
            sum += value * value;
        } 
        return org.apache.commons.math3.util.FastMath.sqrt(sum);
    }

    public double getL1Norm() {
        double norm = 0;
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = sparseIterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            norm += org.apache.commons.math3.util.FastMath.abs(e.getValue());
        } 
        return norm;
    }

    public double getLInfNorm() {
        double norm = 0;
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = sparseIterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            norm = org.apache.commons.math3.util.FastMath.max(norm, org.apache.commons.math3.util.FastMath.abs(e.getValue()));
        } 
        return norm;
    }

    public double getL1Distance(org.apache.commons.math3.linear.RealVector v) {
        checkVectorDimensions(v);
        double d = 0;
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = iterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            d += org.apache.commons.math3.util.FastMath.abs(((e.getValue()) - (v.getEntry(e.getIndex()))));
        } 
        return d;
    }

    public double getLInfDistance(org.apache.commons.math3.linear.RealVector v) {
        checkVectorDimensions(v);
        double d = 0;
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = iterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            d = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(((e.getValue()) - (v.getEntry(e.getIndex())))), d);
        } 
        return d;
    }

    public int getMinIndex() {
        int minIndex = -1;
        double minValue = java.lang.Double.POSITIVE_INFINITY;
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> iterator = iterator();
        while (iterator.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry entry = iterator.next();
            if ((entry.getValue()) <= minValue) {
                minIndex = entry.getIndex();
                minValue = entry.getValue();
            }
        } 
        return minIndex;
    }

    public double getMinValue() {
        final int minIndex = getMinIndex();
        return minIndex < 0 ? java.lang.Double.NaN : getEntry(minIndex);
    }

    public int getMaxIndex() {
        int maxIndex = -1;
        double maxValue = java.lang.Double.NEGATIVE_INFINITY;
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> iterator = iterator();
        while (iterator.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry entry = iterator.next();
            if ((entry.getValue()) >= maxValue) {
                maxIndex = entry.getIndex();
                maxValue = entry.getValue();
            }
        } 
        return maxIndex;
    }

    public double getMaxValue() {
        final int maxIndex = getMaxIndex();
        return maxIndex < 0 ? java.lang.Double.NaN : getEntry(maxIndex);
    }

    public org.apache.commons.math3.linear.RealVector mapMultiply(double d) {
        return copy().mapMultiplyToSelf(d);
    }

    public org.apache.commons.math3.linear.RealVector mapMultiplyToSelf(double d) {
        return mapToSelf(org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(new org.apache.commons.math3.analysis.function.Multiply(), d));
    }

    public org.apache.commons.math3.linear.RealVector mapSubtract(double d) {
        return copy().mapSubtractToSelf(d);
    }

    public org.apache.commons.math3.linear.RealVector mapSubtractToSelf(double d) {
        return mapAddToSelf((-d));
    }

    public org.apache.commons.math3.linear.RealVector mapDivide(double d) {
        return copy().mapDivideToSelf(d);
    }

    public org.apache.commons.math3.linear.RealVector mapDivideToSelf(double d) {
        return mapToSelf(org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(new org.apache.commons.math3.analysis.function.Divide(), d));
    }

    public org.apache.commons.math3.linear.RealMatrix outerProduct(org.apache.commons.math3.linear.RealVector v) {
        org.apache.commons.math3.linear.RealMatrix product;
        if ((v instanceof org.apache.commons.math3.linear.SparseRealVector) || ((this) instanceof org.apache.commons.math3.linear.SparseRealVector)) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(6).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("v",v);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectionEnds();
            }
            if (runtimeAngelicValue)
                product = new org.apache.commons.math3.linear.OpenMapRealMatrix(this.getDimension(), v.getDimension());

        }else {
            product = new org.apache.commons.math3.linear.Array2DRowRealMatrix(this.getDimension(), v.getDimension());
        }
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> thisIt = sparseIterator();
        while (thisIt.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry thisE = thisIt.next();
            java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> otherIt = v.sparseIterator();
            while (otherIt.hasNext()) {
                final org.apache.commons.math3.linear.RealVector.Entry otherE = otherIt.next();
                product.setEntry(thisE.getIndex(), otherE.getIndex(), ((thisE.getValue()) * (otherE.getValue())));
            } 
        } 
        return product;
    }

    public org.apache.commons.math3.linear.RealVector projection(final org.apache.commons.math3.linear.RealVector v) {
        final double norm2 = v.dotProduct(v);
        if (norm2 == 0.0) {
            throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM);
        }
        return v.mapMultiply(((dotProduct(v)) / (v.dotProduct(v))));
    }

    public void set(double value) {
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = iterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            e.setValue(value);
        } 
    }

    public double[] toArray() {
        int dim = getDimension();
        double[] values = new double[dim];
        for (int i = 0; i < dim; i++) {
            values[i] = getEntry(i);
        }
        return values;
    }

    public org.apache.commons.math3.linear.RealVector unitVector() {
        final double norm = getNorm();
        if (norm == 0) {
            throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM);
        }
        return mapDivide(norm);
    }

    public void unitize() {
        final double norm = getNorm();
        if (norm == 0) {
            throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM);
        }
        mapDivideToSelf(getNorm());
    }

    public java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> sparseIterator() {
        return new org.apache.commons.math3.linear.RealVector.SparseEntryIterator();
    }

    public java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> iterator() {
        final int dim = getDimension();
        return new java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry>() {
            private int i = 0;

            private org.apache.commons.math3.linear.RealVector.Entry e = new org.apache.commons.math3.linear.RealVector.Entry();

            public boolean hasNext() {
                return (i) < dim;
            }

            public org.apache.commons.math3.linear.RealVector.Entry next() {
                if ((i) < dim) {
                    e.setIndex(((i)++));
                    return e;
                }else {
                    throw new java.util.NoSuchElementException();
                }
            }

            public void remove() {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }
        };
    }

    public org.apache.commons.math3.linear.RealVector map(org.apache.commons.math3.analysis.UnivariateFunction function) {
        return copy().mapToSelf(function);
    }

    public org.apache.commons.math3.linear.RealVector mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction function) {
        java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> it = ((function.value(0)) == 0) ? sparseIterator() : iterator();
        while (it.hasNext()) {
            final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
            e.setValue(function.value(e.getValue()));
        } 
        return this;
    }

    public org.apache.commons.math3.linear.RealVector combine(double a, double b, org.apache.commons.math3.linear.RealVector y) {
        return copy().combineToSelf(a, b, y);
    }

    public org.apache.commons.math3.linear.RealVector combineToSelf(double a, double b, org.apache.commons.math3.linear.RealVector y) {
        checkVectorDimensions(y);
        for (int i = 0; i < (getDimension()); i++) {
            final double xi = getEntry(i);
            final double yi = y.getEntry(i);
            setEntry(i, ((a * xi) + (b * yi)));
        }
        return this;
    }

    public double walkInDefaultOrder(final org.apache.commons.math3.linear.RealVectorPreservingVisitor visitor) {
        final int dim = getDimension();
        visitor.start(dim, 0, (dim - 1));
        for (int i = 0; i < dim; i++) {
            visitor.visit(i, getEntry(i));
        }
        return visitor.end();
    }

    public double walkInDefaultOrder(final org.apache.commons.math3.linear.RealVectorPreservingVisitor visitor, final int start, final int end) {
        checkIndices(start, end);
        visitor.start(getDimension(), start, end);
        for (int i = start; i <= end; i++) {
            visitor.visit(i, getEntry(i));
        }
        return visitor.end();
    }

    public double walkInOptimizedOrder(final org.apache.commons.math3.linear.RealVectorPreservingVisitor visitor) {
        return walkInDefaultOrder(visitor);
    }

    public double walkInOptimizedOrder(final org.apache.commons.math3.linear.RealVectorPreservingVisitor visitor, final int start, final int end) {
        return walkInDefaultOrder(visitor, start, end);
    }

    public double walkInDefaultOrder(final org.apache.commons.math3.linear.RealVectorChangingVisitor visitor) {
        final int dim = getDimension();
        visitor.start(dim, 0, (dim - 1));
        for (int i = 0; i < dim; i++) {
            setEntry(i, visitor.visit(i, getEntry(i)));
        }
        return visitor.end();
    }

    public double walkInDefaultOrder(final org.apache.commons.math3.linear.RealVectorChangingVisitor visitor, final int start, final int end) {
        checkIndices(start, end);
        visitor.start(getDimension(), start, end);
        for (int i = start; i <= end; i++) {
            setEntry(i, visitor.visit(i, getEntry(i)));
        }
        return visitor.end();
    }

    public double walkInOptimizedOrder(final org.apache.commons.math3.linear.RealVectorChangingVisitor visitor) {
        return walkInDefaultOrder(visitor);
    }

    public double walkInOptimizedOrder(final org.apache.commons.math3.linear.RealVectorChangingVisitor visitor, final int start, final int end) {
        return walkInDefaultOrder(visitor, start, end);
    }

    protected class Entry {
        private int index;

        public Entry() {
            setIndex(0);
        }

        public double getValue() {
            return getEntry(getIndex());
        }

        public void setValue(double value) {
            setEntry(getIndex(), value);
        }

        public int getIndex() {
            return index;
        }

        public void setIndex(int index) {
            this.index = index;
        }
    }

    @java.lang.Override
    public boolean equals(java.lang.Object obj) {
        throw new java.lang.UnsupportedOperationException();
    }

    @java.lang.Override
    public int hashCode() {
        throw new java.lang.UnsupportedOperationException();
    }

    protected class SparseEntryIterator implements java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> {
        private final int dim;

        private org.apache.commons.math3.linear.RealVector.Entry current;

        private org.apache.commons.math3.linear.RealVector.Entry next;

        protected SparseEntryIterator() {
            dim = getDimension();
            current = new org.apache.commons.math3.linear.RealVector.Entry();
            next = new org.apache.commons.math3.linear.RealVector.Entry();
            if ((next.getValue()) == 0) {
                advance(next);
            }
        }

        protected void advance(org.apache.commons.math3.linear.RealVector.Entry e) {
            if (e == null) {
                return;
            }
            do {
                e.setIndex(((e.getIndex()) + 1));
            } while (((e.getIndex()) < (dim)) && ((e.getValue()) == 0) );
            if ((e.getIndex()) >= (dim)) {
                e.setIndex((-1));
            }
        }

        public boolean hasNext() {
            return (next.getIndex()) >= 0;
        }

        public org.apache.commons.math3.linear.RealVector.Entry next() {
            int index = next.getIndex();
            if (index < 0) {
                throw new java.util.NoSuchElementException();
            }
            current.setIndex(index);
            advance(next);
            return current;
        }

        public void remove() {
            throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
        }
    }

    public static org.apache.commons.math3.linear.RealVector unmodifiableRealVector(final org.apache.commons.math3.linear.RealVector v) {
        return new org.apache.commons.math3.linear.RealVector() {
            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction function) {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector map(org.apache.commons.math3.analysis.UnivariateFunction function) {
                return v.map(function);
            }

            @java.lang.Override
            public java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> iterator() {
                final java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> i = v.iterator();
                return new java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry>() {
                    private final UnmodifiableEntry e = new UnmodifiableEntry();

                    public boolean hasNext() {
                        return i.hasNext();
                    }

                    public org.apache.commons.math3.linear.RealVector.Entry next() {
                        e.setIndex(i.next().getIndex());
                        return e;
                    }

                    public void remove() {
                        throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
                    }
                };
            }

            @java.lang.Override
            public java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> sparseIterator() {
                final java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> i = v.sparseIterator();
                return new java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry>() {
                    private final UnmodifiableEntry e = new UnmodifiableEntry();

                    public boolean hasNext() {
                        return i.hasNext();
                    }

                    public org.apache.commons.math3.linear.RealVector.Entry next() {
                        e.setIndex(i.next().getIndex());
                        return e;
                    }

                    public void remove() {
                        throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
                    }
                };
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector copy() {
                return v.copy();
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector add(org.apache.commons.math3.linear.RealVector w) {
                return v.add(w);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector subtract(org.apache.commons.math3.linear.RealVector w) {
                return v.subtract(w);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector mapAdd(double d) {
                return v.mapAdd(d);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector mapAddToSelf(double d) {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector mapSubtract(double d) {
                return v.mapSubtract(d);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector mapSubtractToSelf(double d) {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector mapMultiply(double d) {
                return v.mapMultiply(d);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector mapMultiplyToSelf(double d) {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector mapDivide(double d) {
                return v.mapDivide(d);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector mapDivideToSelf(double d) {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector ebeMultiply(org.apache.commons.math3.linear.RealVector w) {
                return v.ebeMultiply(w);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector ebeDivide(org.apache.commons.math3.linear.RealVector w) {
                return v.ebeDivide(w);
            }

            @java.lang.Override
            public double dotProduct(org.apache.commons.math3.linear.RealVector w) {
                return v.dotProduct(w);
            }

            @java.lang.Override
            public double cosine(org.apache.commons.math3.linear.RealVector w) {
                return v.cosine(w);
            }

            @java.lang.Override
            public double getNorm() {
                return v.getNorm();
            }

            @java.lang.Override
            public double getL1Norm() {
                return v.getL1Norm();
            }

            @java.lang.Override
            public double getLInfNorm() {
                return v.getLInfNorm();
            }

            @java.lang.Override
            public double getDistance(org.apache.commons.math3.linear.RealVector w) {
                return v.getDistance(w);
            }

            @java.lang.Override
            public double getL1Distance(org.apache.commons.math3.linear.RealVector w) {
                return v.getL1Distance(w);
            }

            @java.lang.Override
            public double getLInfDistance(org.apache.commons.math3.linear.RealVector w) {
                return v.getLInfDistance(w);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector unitVector() {
                return v.unitVector();
            }

            @java.lang.Override
            public void unitize() {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealMatrix outerProduct(org.apache.commons.math3.linear.RealVector w) {
                return v.outerProduct(w);
            }

            @java.lang.Override
            public double getEntry(int index) {
                return v.getEntry(index);
            }

            @java.lang.Override
            public void setEntry(int index, double value) {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            @java.lang.Override
            public void addToEntry(int index, double value) {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            @java.lang.Override
            public int getDimension() {
                return v.getDimension();
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector append(org.apache.commons.math3.linear.RealVector w) {
                return v.append(w);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector append(double d) {
                return v.append(d);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector getSubVector(int index, int n) {
                return v.getSubVector(index, n);
            }

            @java.lang.Override
            public void setSubVector(int index, org.apache.commons.math3.linear.RealVector w) {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            @java.lang.Override
            public void set(double value) {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            @java.lang.Override
            public double[] toArray() {
                return v.toArray();
            }

            @java.lang.Override
            public boolean isNaN() {
                return v.isNaN();
            }

            @java.lang.Override
            public boolean isInfinite() {
                return v.isInfinite();
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector combine(double a, double b, org.apache.commons.math3.linear.RealVector y) {
                return v.combine(a, b, y);
            }

            @java.lang.Override
            public org.apache.commons.math3.linear.RealVector combineToSelf(double a, double b, org.apache.commons.math3.linear.RealVector y) {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }

            class UnmodifiableEntry extends org.apache.commons.math3.linear.RealVector.Entry {
                @java.lang.Override
                public double getValue() {
                    return v.getEntry(getIndex());
                }

                @java.lang.Override
                public void setValue(double value) {
                    throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
                }
            }
        };
    }
}
09:05:05.427 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
09:05:05.427 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #59
09:05:05.427 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1260 which is executed by 3 tests
09:05:05.427 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1260
09:05:05.427 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #60
09:05:05.427 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1259 which is executed by 3 tests
09:05:05.427 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1259
09:05:05.427 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #61
09:05:05.427 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1234 which is executed by 3 tests
09:05:05.427 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1234
09:05:05.427 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #62
09:05:05.428 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1214 which is executed by 3 tests
09:05:05.428 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:1214
09:05:05.428 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #63
09:05:05.428 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:935 which is executed by 3 tests
09:05:05.428 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:935
09:05:05.428 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #64
09:05:05.428 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:917 which is executed by 3 tests
09:05:05.428 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:917
09:05:05.428 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #65
09:05:05.428 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:940 which is executed by 3 tests
09:05:05.428 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:940
09:05:05.428 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #66
09:05:05.428 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:915 which is executed by 3 tests
09:05:05.428 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.linear.RealVectorAbstractTest:915
09:05:05.428 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #67
09:05:05.429 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVector$Entry:1075 which is executed by 86 tests
74962082
09:05:05.560 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #68
09:05:05.560 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.RealVector$Entry:1074 which is executed by 86 tests
74962082
09:05:05.689 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
09:05:06.498 [pool-98-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (793 ms)
<> Total tests run: 926
<> Ignored tests: 132
<> Failed tests: 47
~ testDotProductMixedTypes(org.apache.commons.math3.linear.ArrayRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testOuterProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testOuterProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testOuterProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testOuterProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.RealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMap(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
~ testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMap(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
~ testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMap(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
~ testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMap(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
~ testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)
~ testOuterProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductMixedTypes(RealVectorAbstractTest.java:940)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMap(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMap(RealVectorAbstractTest.java:893)
~ testOuterProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestOuterProduct(RealVectorAbstractTest.java:928)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProductSameType(RealVectorAbstractTest.java:935)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductSameType(org.apache.commons.math3.linear.SparseRealVectorTest)
[NaN * 0.0 expected:<NaN> but was:<0.0>]
java.lang.AssertionError: NaN * 0.0 expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductSameType(RealVectorAbstractTest.java:1260)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testDotProductMixedTypes(org.apache.commons.math3.linear.SparseRealVectorTest)
[0.0 * NaN expected:<NaN> but was:<0.0>]
java.lang.AssertionError: 0.0 * NaN expected:<NaN> but was:<0.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestDotProductSpecialValues(RealVectorAbstractTest.java:1238)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testDotProductMixedTypes(RealVectorAbstractTest.java:1271)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testMapToSelf(org.apache.commons.math3.linear.SparseRealVectorTest)
[Inverse, entry #4 expected:<-Infinity> but was:<Infinity>]
java.lang.AssertionError: Inverse, entry #4 expected:<-Infinity> but was:<Infinity>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.apache.commons.math3.TestUtils.assertEquals(TestUtils.java:260)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.doTestMapFunction(RealVectorAbstractTest.java:876)
    at org.apache.commons.math3.linear.RealVectorAbstractTest.testMapToSelf(RealVectorAbstractTest.java:901)

09:09:58.256 [pool-97-thread-1] DEBUG xxl.java.junit.TestSuiteExecution - Timeout after 200 seconds. Infinite loop?
09:12:47.872 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
09:13:46.522 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #69
09:15:10.779 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.BOBYQAOptimizer:1165 which is executed by 4 tests
10:13:33.930 [main] ERROR fr.inria.lille.repair.Main - Timeout: execution time > 60 MINUTES
java.util.concurrent.TimeoutException: null
	at java.util.concurrent.FutureTask.get(FutureTask.java:205) ~[na:1.8.0_181]
	at fr.inria.lille.repair.Main.main(Main.java:106) ~[nopol.jar:na]
TIMEOUT
Command exited with non-zero status 255
18057.59user 12.00system 1:23:39elapsed 359%CPU (0avgtext+0avgdata 4527148maxresident)k
39248inputs+12768outputs (3major+1366245minor)pagefaults 0swaps


Node: graphene-72.nancy.grid5000.fr



Date: Sat Dec 29 10:20:11 EST 2018

