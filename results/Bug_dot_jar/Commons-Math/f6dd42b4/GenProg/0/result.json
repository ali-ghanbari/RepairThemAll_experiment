{
  "repair_end": "2018-12-30 22:54:36.685810", 
  "repair_begin": "2018-12-30 21:11:44.911661", 
  "patches": [
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_644/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:56:03.299801110 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_644/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:56:03.303801169 -0500\n@@ -104,24 +104,18 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.defaultFunctionValueAccuracy = 1.0e-15;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BisectionSolver();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1106/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:24:17.068749612 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1106/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:24:17.068749612 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -104,31 +103,36 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        verifyInterval(min, max);\n+\t\tverifyInterval(min, max);\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        int i = 0;\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -244,7 +248,8 @@\n                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);\n             if (Math.abs(dx) <= tolerance) {\n                 setResult(x1, i);\n-                return result;\n+                y0 = y1;\n+\t\t\t\treturn result;\n             }\n             if ((Math.abs(oldDelta) < tolerance) ||\n                     (Math.abs(y0) <= Math.abs(y1))) {\n@@ -280,7 +285,7 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n+                    p1 = 1.0 - r3;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "Complex oldc=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 247, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "y0=y1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_622/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:54:38.002543824 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -104,13 +103,9 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,7 +113,8 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n+        this.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n@@ -128,7 +124,8 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BisectionSolver();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1264/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:34:22.737665466 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1264/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:34:22.741665525 -0500\n@@ -106,29 +106,27 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n-        // return the second endpoint if it is good enough\n+        if (f.value(min) == 0.0) {\n+\t\t\treturn min;\n+\t\t}\n+\t\t// return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tint iterationCount = 0;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 120, 
          "faulty": "double yMax=f.value(max);", 
          "type": "InsertBefore", 
          "seed": "if (f.value(min) == 0.0) {\n  return min;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "int iterationCount=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_493/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:46:38.875586800 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_493/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:46:38.875586800 -0500\n@@ -100,35 +100,30 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        double x0 = min;\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_933/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:13:25.427139021 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_933/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:13:25.427139021 -0500\n@@ -106,7 +106,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,12 +119,8 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n@@ -280,7 +277,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1203/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:30:36.910342157 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1203/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:30:36.910342157 -0500\n@@ -128,7 +128,8 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +281,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_888/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:10:46.248795193 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,29 +105,29 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +279,7 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n+                    p1 = 1.0 - r3;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1045/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:20:24.341319848 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1045/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:20:24.341319848 -0500\n@@ -94,22 +94,26 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tif (!resultComputed) {\n+\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t.createIllegalStateException(\"no result available\");\n+\t\t}\n \n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n@@ -118,17 +122,27 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tthis.resultComputed = true;\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +294,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (!resultComputed) {\n  throw MathRuntimeException.createIllegalStateException(\"no result available\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_780/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:04:33.959320695 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_780/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:04:33.963320754 -0500\n@@ -94,41 +94,43 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n-        // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tdouble x0 = min;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +176,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                iterationCount += this.iterationCount;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -270,7 +273,8 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n@@ -280,7 +284,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "iterationCount+=this.iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "Replace", 
          "seed": "double yMin=f.value(min);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1064/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:21:33.474338965 -0500\n@@ -104,18 +104,15 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        verifyInterval(min, max);\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n         if (Math.abs(yMax) <= functionValueAccuracy) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_620/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:54:32.858468150 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_620/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:54:32.858468150 -0500\n@@ -94,41 +94,42 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n+        double x0 = min;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,7 +271,8 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n@@ -280,7 +282,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_903/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:11:36.817538348 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_903/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:11:36.821538407 -0500\n@@ -100,35 +100,37 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,17 +272,18 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||\n                         p >= Math.abs(0.5 * oldDelta * p1)) {\n-                    // Inverse quadratic interpolation gives a value\n+                    delta = (x0 - x1) / (1 - y0 / y1);\n+\t\t\t\t\t// Inverse quadratic interpolation gives a value\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 282, 
          "faulty": "delta=0.5 * dx;", 
          "type": "InsertBefore", 
          "seed": "delta=(x0 - x1) / (1 - y0 / y1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (dx <= 0.0) {\n  x1=x1 - 0.5 * tolerance;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "final UnivariateRealFunction derivative=((DifferentiableUnivariateRealFunction)f).derivative();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1554/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:53:14.918296041 -0500\n@@ -97,7 +97,8 @@\n         clearResult();\n         verifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n+        setResult(initial, 0);\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n@@ -118,17 +119,16 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\tdouble x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +174,17 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                if (sign < 0) {\n+\t\t\t\t\tret = solve(f, min, yMin, max, yMax, min, yMin);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (yMin == 0.0) {\n+\t\t\t\t\t\tret = min;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tret = max;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tdouble x2 = max;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -244,7 +254,8 @@\n                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);\n             if (Math.abs(dx) <= tolerance) {\n                 setResult(x1, i);\n-                return result;\n+                x1 = x2;\n+\t\t\t\treturn result;\n             }\n             if ((Math.abs(oldDelta) < tolerance) ||\n                     (Math.abs(y0) <= Math.abs(y1))) {\n@@ -280,7 +291,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "setResult(initial,0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "if (sign < 0) {\n  ret=solve(f,min,yMin,max,yMax,min,yMin);\n}\n else {\n  if (yMin == 0.0) {\n    ret=min;\n  }\n else {\n    ret=max;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 247, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "x1=x2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1573/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:54:30.291401705 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1573/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:54:30.291401705 -0500\n@@ -95,7 +95,8 @@\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         clearResult();\n-        verifySequence(min, initial, max);\n+        int i = 0;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -118,17 +119,14 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "oldDelta=delta;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1067/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:21:43.190482175 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n@@ -222,7 +223,8 @@\n      * @throws IllegalArgumentException\n      */\n     protected void verifySequence(final double lower, final double initial, final double upper) {\n-        if (!isSequence(lower, initial, upper)) {\n+        this.iterationCount = 0;\n+\t\tif (!isSequence(lower, initial, upper)) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                     \"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",\n                     lower, initial, upper);\n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1067/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:21:43.190482175 -0500\n@@ -94,7 +94,7 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        double a = initial;\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,29 +106,44 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tif (yInitial * yMin < 0) {\n+\t\t\treturn solve(f, min, yMin, initial, yInitial, min, yMin);\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\tif (yInitial * yMin < 0) {\n+\t\t\treturn solve(f, min, yMin, initial, yInitial, min, yMin);\n+\t\t}\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tint i = 0;\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +295,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Replace", 
          "seed": "double a=initial;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 225, 
          "faulty": "if (!isSequence(lower,initial,upper)) {\n  throw MathRuntimeException.createIllegalArgumentException(\"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",lower,initial,upper);\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_840/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:07:57.066308117 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_840/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:07:57.070308176 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,29 +105,28 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +278,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_592/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:52:42.448865702 -0500\n@@ -94,41 +94,39 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tdouble x0 = min;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\tdouble x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +278,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1220/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:31:46.335364068 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1220/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:31:46.339364127 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -104,31 +103,34 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        verifyInterval(min, max);\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tint iterationCount = 0;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +282,7 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n+                    p1 = 1.0 - r3;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "int iterationCount=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_329/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:36:19.622587355 -0500\n@@ -95,7 +95,8 @@\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         clearResult();\n-        verifySequence(min, initial, max);\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,7 +107,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -128,7 +130,11 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_716/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:00:45.155953066 -0500\n@@ -106,29 +106,25 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tdouble x0 = min;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +170,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                iterationCount += this.iterationCount;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -270,7 +267,8 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "iterationCount+=this.iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1355/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:40:17.734885244 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1355/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:40:17.738885303 -0500\n@@ -106,7 +106,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -116,19 +117,19 @@\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n-        // return the second endpoint if it is good enough\n+        if (f.value(min) == 0.0) {\n+\t\t\treturn min;\n+\t\t}\n+\t\t// return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        int iterationCount = 0;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +281,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 120, 
          "faulty": "double yMax=f.value(max);", 
          "type": "InsertBefore", 
          "seed": "if (f.value(min) == 0.0) {\n  return min;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "int iterationCount=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new SecantSolver();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_895/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:11:11.657168606 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_895/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:11:11.657168606 -0500\n@@ -106,29 +106,28 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,17 +269,18 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||\n                         p >= Math.abs(0.5 * oldDelta * p1)) {\n-                    // Inverse quadratic interpolation gives a value\n+                    delta = (x0 - x1) / (1 - y0 / y1);\n+\t\t\t\t\t// Inverse quadratic interpolation gives a value\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 282, 
          "faulty": "delta=0.5 * dx;", 
          "type": "InsertBefore", 
          "seed": "delta=(x0 - x1) / (1 - y0 / y1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (dx <= 0.0) {\n  x1=x1 - 0.5 * tolerance;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "final UnivariateRealFunction derivative=((DifferentiableUnivariateRealFunction)f).derivative();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1300/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:36:54.587898868 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1300/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:36:54.587898868 -0500\n@@ -94,7 +94,9 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        double a = initial;\n+\t\t\tdouble oldx = Double.POSITIVE_INFINITY;\n+\t\tclearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,7 +108,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +121,18 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +284,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double a=initial;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x2=max;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1238/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:32:51.604324606 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1238/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:32:51.604324606 -0500\n@@ -106,29 +106,31 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +282,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_518/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:48:13.900966845 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_518/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:48:13.904966903 -0500\n@@ -94,22 +94,21 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        verifyInterval(min, max);\n         verifySequence(min, initial, max);\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n+        verifyBracketing(min, max, f);\n+\t\tverifySequence(min, initial, max);\n \n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n@@ -118,17 +117,22 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tdouble x0 = min;\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tthis.resultComputed = true;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +284,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "verifySequence(min,initial,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "verifySequence(min,initial,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Replace", 
          "seed": "verifyInterval(min,max);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_507/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:47:29.196317633 -0500\n@@ -222,7 +222,8 @@\n      * @throws IllegalArgumentException\n      */\n     protected void verifySequence(final double lower, final double initial, final double upper) {\n-        if (!isSequence(lower, initial, upper)) {\n+        this.resultComputed = false;\n+\t\tif (!isSequence(lower, initial, upper)) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                     \"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",\n                     lower, initial, upper);\n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_507/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:47:29.200317691 -0500\n@@ -106,11 +106,6 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +113,18 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +170,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 225, 
          "faulty": "if (!isSequence(lower,initial,upper)) {\n  throw MathRuntimeException.createIllegalArgumentException(\"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",lower,initial,upper);\n}", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1110/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:24:31.864967576 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,10 +105,12 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tif (!resultComputed) {\n+\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t.createIllegalStateException(\"no result available\");\n+\t\t}\n \n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n@@ -118,17 +119,22 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +286,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (!resultComputed) {\n  throw MathRuntimeException.createIllegalStateException(\"no result available\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1010/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:17:59.087177788 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1010/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:17:59.091177847 -0500\n@@ -104,9 +104,11 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        verifyInterval(min, max);\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -128,7 +130,9 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_656/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:56:48.048460558 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_656/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:56:48.052460617 -0500\n@@ -94,36 +94,33 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n+        double x0 = min;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n@@ -270,7 +267,8 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "this.iterationCount=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_817/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:06:47.581286295 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_817/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:06:47.581286295 -0500\n@@ -94,41 +94,46 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n+        double x0 = min;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tif (!resultComputed) {\n+\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t.createIllegalStateException(\"no result available\");\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,17 +275,18 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||\n                         p >= Math.abs(0.5 * oldDelta * p1)) {\n-                    // Inverse quadratic interpolation gives a value\n+                    delta = (x0 - x1) / (1 - y0 / y1);\n+\t\t\t\t\t// Inverse quadratic interpolation gives a value\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 282, 
          "faulty": "delta=0.5 * dx;", 
          "type": "InsertBefore", 
          "seed": "delta=(x0 - x1) / (1 - y0 / y1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "if (!resultComputed) {\n  throw MathRuntimeException.createIllegalStateException(\"no result available\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "setup(f);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_176/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:26:56.278390233 -0500\n@@ -95,7 +95,8 @@\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         clearResult();\n-        verifySequence(min, initial, max);\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,7 +107,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,11 +120,6 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1358/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:40:27.655031034 -0500\n@@ -95,9 +95,11 @@\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         clearResult();\n-        verifySequence(min, initial, max);\n+        int i = 0;\n+\t\tverifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n+        setResult(initial, 0);\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n@@ -118,17 +120,14 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +173,16 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                if (sign < 0) {\n+\t\t\t\t\tret = solve(f, min, yMin, max, yMax, min, yMin);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (yMin == 0.0) {\n+\t\t\t\t\t\tret = min;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tret = max;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "setResult(initial,0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "if (sign < 0) {\n  ret=solve(f,min,yMin,max,yMax,min,yMin);\n}\n else {\n  if (yMin == 0.0) {\n    ret=min;\n  }\n else {\n    ret=max;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "oldDelta=delta;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_736/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:01:49.644902491 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_736/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:01:49.648902550 -0500\n@@ -104,24 +104,19 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        verifyBracketing(min, max, f);\n+\t\tdouble x0 = min;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n@@ -174,7 +169,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                iterationCount += this.iterationCount;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "iterationCount+=this.iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_866/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:09:31.259692961 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_866/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:09:31.259692961 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -104,9 +103,14 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (yInitial * yMin < 0) {\n+\t\t\treturn solve(f, min, yMin, initial, yInitial, min, yMin);\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +122,25 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+        if (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tint i = 0;\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,7 +282,8 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n@@ -280,7 +293,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1327/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:38:33.737356631 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1327/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:38:33.741356690 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -104,31 +103,44 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        verifyInterval(min, max);\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        int i = 0;\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tdouble x1 = min;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tthis.iterationCount = iterationCount;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +292,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "Complex oldc=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_467/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:44:54.370068801 -0500\n@@ -94,23 +94,17 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +112,22 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +279,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1490/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:48:49.598402849 -0500\n@@ -111,7 +111,8 @@\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n+        this.iterationCount = 0;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n@@ -119,16 +120,13 @@\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n         if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +278,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "setResult(max,0);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1501/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:49:29.754992215 -0500\n@@ -94,10 +94,13 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        double a = initial;\n+\t\tclearResult();\n+        int i = 0;\n+\t\tverifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n+        setResult(initial, 0);\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n@@ -111,7 +114,8 @@\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n+        int iterationCount = 0;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n@@ -119,16 +123,19 @@\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n         if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +181,16 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                if (sign < 0) {\n+\t\t\t\t\tret = solve(f, min, yMin, max, yMax, min, yMin);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (yMin == 0.0) {\n+\t\t\t\t\t\tret = min;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tret = max;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double a=initial;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "setResult(initial,0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "if (sign < 0) {\n  ret=solve(f,min,yMin,max,yMax,min,yMin);\n}\n else {\n  if (yMin == 0.0) {\n    ret=min;\n  }\n else {\n    ret=max;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "oldDelta=delta;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "int iterationCount=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_272/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:32:55.947624913 -0500\n@@ -94,8 +94,9 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        this.iterationCount = iterationCount;\n+\t\tdouble x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,7 +107,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,11 +120,6 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_542/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:49:28.590051384 -0500\n@@ -222,7 +222,8 @@\n      * @throws IllegalArgumentException\n      */\n     protected void verifySequence(final double lower, final double initial, final double upper) {\n-        if (!isSequence(lower, initial, upper)) {\n+        this.resultComputed = false;\n+\t\tif (!isSequence(lower, initial, upper)) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                     \"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",\n                     lower, initial, upper);\n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_542/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:49:28.590051384 -0500\n@@ -94,7 +94,7 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        int i = 0;\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,11 +106,6 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +113,16 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.defaultFunctionValueAccuracy = 1.0e-15;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tthis.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +168,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 225, 
          "faulty": "if (!isSequence(lower,initial,upper)) {\n  throw MathRuntimeException.createIllegalArgumentException(\"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",lower,initial,upper);\n}", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Replace", 
          "seed": "int i=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_162/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:26:01.877598089 -0500\n@@ -106,11 +106,6 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +113,16 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +168,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1188/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:29:46.565600994 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,29 +105,16 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n-        // return the second endpoint if it is good enough\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        int i = 0;\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +266,7 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n+                    p1 = 1.0 - r3;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "this.resultComputed=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "if (f.value(min) == 0.0) {\n  return min;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_152/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:25:16.220933190 -0500\n@@ -118,18 +118,12 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n+        return solve(f, min, max);\n \n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "Replace", 
          "seed": "return solve(f,min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double yMin=f.value(min);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1004/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:17:39.182884173 -0500\n@@ -106,29 +106,26 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tdouble x1 = min;\n+\t\tint i = 0;\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +277,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_728/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:01:20.444472618 -0500\n@@ -100,35 +100,33 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tthis.resultComputed = true;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +172,9 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\titerationCount += this.iterationCount;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -280,7 +280,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "iterationCount+=this.iterationCount;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1030/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:19:23.972429724 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1030/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:19:23.976429783 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -128,7 +127,8 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "Complex oldc=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_444/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:43:29.776839823 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_444/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:43:29.776839823 -0500\n@@ -104,13 +104,9 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,7 +114,8 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n+        this.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n@@ -128,7 +125,8 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BisectionSolver();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_758/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:03:14.454150779 -0500\n@@ -106,11 +106,6 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +113,19 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tverifyBracketing(min, max, f);\n+\t\tdouble x0 = min;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +171,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                iterationCount += this.iterationCount;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "iterationCount+=this.iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_194/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:28:01.623341601 -0500\n@@ -94,8 +94,10 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\tclearResult();\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,29 +108,24 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_461/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:44:34.545780809 -0500\n@@ -94,8 +94,8 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,19 +106,18 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n+\t\t\treturn solve(f, min, yMin, initial, yInitial, min, yMin);\n+\t\t}\n \n-        // return the second endpoint if it is good enough\n+        if (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n+        this.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n@@ -128,7 +127,8 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +280,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "verifySequence(min,initial,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Replace", 
          "seed": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "return new UnivariateRealSolverFactoryImpl();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 120, 
          "faulty": "double yMax=f.value(max);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1462/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:47:03.700848351 -0500\n@@ -95,9 +95,11 @@\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         clearResult();\n-        verifySequence(min, initial, max);\n+        int i = 0;\n+\t\tverifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n+        setResult(initial, 0);\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n@@ -111,24 +113,24 @@\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n+        int iterationCount = 0;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +176,16 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                if (sign < 0) {\n+\t\t\t\t\tret = solve(f, min, yMin, max, yMax, min, yMin);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (yMin == 0.0) {\n+\t\t\t\t\t\tret = min;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tret = max;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "setResult(initial,0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "if (sign < 0) {\n  ret=solve(f,min,yMin,max,yMax,min,yMin);\n}\n else {\n  if (yMin == 0.0) {\n    ret=min;\n  }\n else {\n    ret=max;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "oldDelta=delta;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "int iterationCount=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_803/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:05:47.180397887 -0500\n@@ -94,41 +94,45 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tdouble x0 = min;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tdouble x1 = min;\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tint i = 0;\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,7 +274,8 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n@@ -280,7 +285,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1338/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:39:17.542000549 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            iterationCount += this.iterationCount;\n+\t\t\tif (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1338/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:39:17.542000549 -0500\n@@ -94,7 +94,9 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        double a = initial;\n+\t\t\tdouble oldx = Double.POSITIVE_INFINITY;\n+\t\tclearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,7 +108,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +121,18 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +284,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double a=initial;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "InsertBefore", 
          "seed": "iterationCount+=this.iterationCount;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_832/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:07:27.261869850 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_832/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:07:27.261869850 -0500\n@@ -94,41 +94,38 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n-        // return the second endpoint if it is good enough\n+        verifyBracketing(min, max, f);\n+\t\tdouble x0 = min;\n+\t\t// return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+        double x1 = min;\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tint i = 0;\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,7 +267,8 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n@@ -280,7 +278,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "Complex oldc=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1013/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:18:09.159326358 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1013/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:18:09.159326358 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,29 +105,32 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +282,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_281/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:33:30.960134262 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_281/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:33:30.964134320 -0500\n@@ -94,8 +94,10 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\tclearResult();\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,7 +108,9 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +122,11 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +278,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "return new NewtonSolver();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1346/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:39:47.834445796 -0500\n@@ -97,7 +97,8 @@\n         clearResult();\n         verifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n+        setResult(initial, 0);\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n@@ -118,17 +119,14 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +172,16 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                if (sign < 0) {\n+\t\t\t\t\tret = solve(f, min, yMin, max, yMax, min, yMin);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (yMin == 0.0) {\n+\t\t\t\t\t\tret = min;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tret = max;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -280,7 +287,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "setResult(initial,0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "if (sign < 0) {\n  ret=solve(f,min,yMin,max,yMax,min,yMin);\n}\n else {\n  if (yMin == 0.0) {\n    ret=min;\n  }\n else {\n    ret=max;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1315/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:37:54.132774386 -0500\n@@ -97,7 +97,8 @@\n         clearResult();\n         verifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n+        setResult(initial, 0);\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n@@ -118,17 +119,14 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +278,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "setResult(initial,0);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_349/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:37:34.287673033 -0500\n@@ -94,8 +94,9 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        this.iterationCount = iterationCount;\n+\t\tdouble x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,7 +107,9 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +121,16 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +282,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1319/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:38:03.676914705 -0500\n@@ -116,19 +116,22 @@\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n-        // return the second endpoint if it is good enough\n+        if (f.value(min) == 0.0) {\n+\t\t\treturn min;\n+\t\t}\n+\t\t// return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        int iterationCount = 0;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +283,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 120, 
          "faulty": "double yMax=f.value(max);", 
          "type": "InsertBefore", 
          "seed": "if (f.value(min) == 0.0) {\n  return min;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "int iterationCount=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1231/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:32:31.740032291 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1231/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:32:31.744032350 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -104,31 +103,47 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        verifyInterval(min, max);\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        int i = 0;\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tdouble x1 = min;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tthis.iterationCount = iterationCount;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +295,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "Complex oldc=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1276/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:35:08.438337731 -0500\n@@ -118,17 +118,14 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +277,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_216/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:29:20.592491127 -0500\n@@ -94,8 +94,10 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        this.iterationCount = iterationCount;\n+\t\tclearResult();\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,7 +108,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,11 +121,6 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_696/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:59:29.602840496 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_696/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:59:29.602840496 -0500\n@@ -100,35 +100,37 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tthis.resultComputed = true;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +282,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BisectionSolver();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_422/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:42:04.331598265 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n@@ -222,7 +224,8 @@\n      * @throws IllegalArgumentException\n      */\n     protected void verifySequence(final double lower, final double initial, final double upper) {\n-        if (!isSequence(lower, initial, upper)) {\n+        this.resultComputed = false;\n+\t\tif (!isSequence(lower, initial, upper)) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                     \"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",\n                     lower, initial, upper);\n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_422/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:42:04.335598323 -0500\n@@ -106,29 +106,26 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +171,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 225, 
          "faulty": "if (!isSequence(lower,initial,upper)) {\n  throw MathRuntimeException.createIllegalArgumentException(\"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",lower,initial,upper);\n}", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_530/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:48:48.305466441 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_530/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:48:48.305466441 -0500\n@@ -106,29 +106,29 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n-        // return the second endpoint if it is good enough\n+        if (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tdouble x0 = min;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +280,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "return new UnivariateRealSolverFactoryImpl();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 120, 
          "faulty": "double yMax=f.value(max);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1185/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:29:36.325450298 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1185/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:29:36.329450356 -0500\n@@ -106,29 +106,33 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tint iterationCount = 0;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tdouble x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +284,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "int iterationCount=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_979/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:16:11.269587074 -0500\n@@ -94,41 +94,34 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n-        if (Math.abs(yInitial) <= functionValueAccuracy) {\n+        this.resultComputed = true;\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n             return result;\n         }\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tint i = 0;\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +273,7 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n+                    p1 = 1.0 - r3;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "Complex oldc=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "double coefficients[]=((PolynomialFunction)f).getCoefficients();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_931/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:13:20.407064894 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,29 +105,35 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tint i = 0;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +285,7 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n+                    p1 = 1.0 - r3;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "Complex oldc=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1095/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:23:32.776097069 -0500\n@@ -94,19 +94,21 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n-        if (Math.abs(yInitial) <= functionValueAccuracy) {\n+        verifyInterval(min, max);\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        verifyInterval(min, max);\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -128,7 +130,9 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_609/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:53:52.233878572 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_609/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:53:52.237878630 -0500\n@@ -100,35 +100,32 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.defaultFunctionValueAccuracy = 1.0e-15;\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tthis.resultComputed = true;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +171,9 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\titerationCount += this.iterationCount;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -280,7 +279,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "iterationCount+=this.iterationCount;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1002/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:17:34.126809585 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1002/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:17:34.126809585 -0500\n@@ -94,7 +94,7 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        double a = initial;\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,29 +106,30 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tif (yInitial * yMin < 0) {\n+\t\t\treturn solve(f, min, yMin, initial, yInitial, min, yMin);\n+\t\t}\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tint i = 0;\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +281,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Replace", 
          "seed": "double a=initial;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_182/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:27:21.642759535 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_182/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:27:21.646759593 -0500\n@@ -94,8 +94,10 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\tclearResult();\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,7 +108,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +121,16 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1556/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:53:19.618364992 -0500\n@@ -97,7 +97,8 @@\n         clearResult();\n         verifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n+        setResult(initial, 0);\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n@@ -118,17 +119,23 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n+        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n+        if (Math.abs(yMax) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +181,16 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                if (sign < 0) {\n+\t\t\t\t\tret = solve(f, min, yMin, max, yMax, min, yMin);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (yMin == 0.0) {\n+\t\t\t\t\t\tret = min;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tret = max;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -244,7 +260,8 @@\n                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);\n             if (Math.abs(dx) <= tolerance) {\n                 setResult(x1, i);\n-                return result;\n+                x1 = x2;\n+\t\t\t\treturn result;\n             }\n             if ((Math.abs(oldDelta) < tolerance) ||\n                     (Math.abs(y0) <= Math.abs(y1))) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "setResult(initial,0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "if (sign < 0) {\n  ret=solve(f,min,yMin,max,yMax,min,yMin);\n}\n else {\n  if (yMin == 0.0) {\n    ret=min;\n  }\n else {\n    ret=max;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 247, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "x1=x2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_940/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:13:45.651437642 -0500\n@@ -106,29 +106,29 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tif (yInitial * yMin < 0) {\n+\t\t\treturn solve(f, min, yMin, initial, yInitial, min, yMin);\n+\t\t}\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tint i = 0;\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +280,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_995/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:17:14.358517950 -0500\n@@ -104,9 +104,11 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        verifyInterval(min, max);\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -128,7 +130,8 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_600/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:53:12.337299521 -0500\n@@ -94,23 +94,17 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +112,22 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tthis.resultComputed = true;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +173,9 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\titerationCount += this.iterationCount;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -280,7 +281,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "iterationCount+=this.iterationCount;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1449/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:46:18.284181545 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1449/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:46:18.288181603 -0500\n@@ -94,7 +94,8 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\tclearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,7 +107,10 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +122,22 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        double sign = yMin * yMax;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n-        // reduce interval if initial and max bracket the root\n+        if (Math.abs(yMax) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tdouble x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +183,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x0 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -280,7 +290,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "double sign=yMin * yMax;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_376/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:39:18.949194597 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_376/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:39:18.953194655 -0500\n@@ -94,41 +94,34 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n-\n-        // return the initial guess if it is good enough\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "verifySequence(min,initial,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "Delete", 
          "seed": "if (!resultComputed) {\n  throw MathRuntimeException.createIllegalStateException(\"no result available\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_173/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:26:46.310245092 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_173/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:26:46.310245092 -0500\n@@ -94,8 +94,10 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\tclearResult();\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,7 +108,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,11 +121,6 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_296/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:34:24.908919011 -0500\n@@ -106,11 +106,6 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +113,16 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +168,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1519/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:50:49.520162739 -0500\n@@ -111,24 +111,18 @@\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n+        this.iterationCount = 0;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +274,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "setResult(max,0);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_915/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:12:25.798258438 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_915/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:12:25.802258497 -0500\n@@ -94,17 +94,18 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n+        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n         if (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n@@ -118,17 +119,25 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        double x1 = min;\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tint i = 0;\n+\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,7 +279,8 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n@@ -280,7 +290,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1510/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:50:09.671578003 -0500\n@@ -95,7 +95,8 @@\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         clearResult();\n-        verifySequence(min, initial, max);\n+        int i = 0;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -111,24 +112,20 @@\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n+        this.iterationCount = 0;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+        this.defaultFunctionValueAccuracy = 1.0e-15;\n \n-        // full Brent algorithm starting with provided initial guess\n+        double x1 = min;\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "oldDelta=delta;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "setResult(max,0);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_339/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:36:59.543167847 -0500\n@@ -193,7 +193,8 @@\n      * @return true if the arguments form an increasing sequence\n      */\n     protected boolean isSequence(final double start, final double mid, final double end) {\n-        return (start < mid) && (mid < end);\n+        int iterationCount = 0;\n+\t\treturn (start < mid) && (mid < end);\n     }\n \n     /**\n@@ -206,9 +207,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_339/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:36:59.547167906 -0500\n@@ -94,8 +94,9 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\t\tthis.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -104,13 +105,9 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +115,12 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tdouble x0 = min;\n \n-        // full Brent algorithm starting with provided initial guess\n+        this.iterationCount = iterationCount;\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "setResult(initial,0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 196, 
          "faulty": "return (start < mid) && (mid < end);", 
          "type": "InsertBefore", 
          "seed": "int iterationCount=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1482/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:48:19.305958218 -0500\n@@ -95,9 +95,11 @@\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         clearResult();\n-        verifySequence(min, initial, max);\n+        int i = 0;\n+\t\tverifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n+        setResult(initial, 0);\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n@@ -119,17 +121,18 @@\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n         if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tthrow new MaxIterationsExceededException(maximalIterationCount);\n \n     }\n \n@@ -174,7 +177,16 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                if (sign < 0) {\n+\t\t\t\t\tret = solve(f, min, yMin, max, yMax, min, yMin);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (yMin == 0.0) {\n+\t\t\t\t\t\tret = min;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tret = max;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "setResult(initial,0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "if (sign < 0) {\n  ret=solve(f,min,yMin,max,yMax,min,yMin);\n}\n else {\n  if (yMin == 0.0) {\n    ret=min;\n  }\n else {\n    ret=max;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "oldDelta=delta;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "Replace", 
          "seed": "throw new MaxIterationsExceededException(maximalIterationCount);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_417/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:41:49.371380866 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n@@ -222,7 +224,8 @@\n      * @throws IllegalArgumentException\n      */\n     protected void verifySequence(final double lower, final double initial, final double upper) {\n-        if (!isSequence(lower, initial, upper)) {\n+        this.resultComputed = false;\n+\t\tif (!isSequence(lower, initial, upper)) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                     \"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",\n                     lower, initial, upper);\n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_417/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:41:49.371380866 -0500\n@@ -106,11 +106,6 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +113,20 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +172,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 225, 
          "faulty": "if (!isSequence(lower,initial,upper)) {\n  throw MathRuntimeException.createIllegalArgumentException(\"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",lower,initial,upper);\n}", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_243/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:31:05.810022414 -0500\n@@ -95,7 +95,8 @@\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         clearResult();\n-        verifySequence(min, initial, max);\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,7 +107,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +120,16 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +281,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_404/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:40:59.322653518 -0500\n@@ -94,10 +94,13 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\t\tthis.iterationCount = iterationCount;\n+\t\tdouble x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n+        double b = initial;\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n@@ -106,29 +109,30 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n+        double x0 = min;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +284,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "double b=initial;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1257/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:33:57.669296667 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1257/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:33:57.669296667 -0500\n@@ -106,27 +106,15 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+        this.defaultFunctionValueAccuracy = 1.0e-15;\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n@@ -243,7 +231,10 @@\n             double tolerance =\n                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);\n             if (Math.abs(dx) <= tolerance) {\n-                setResult(x1, i);\n+                if (delta / oldDelta > 1) {\n+\t\t\t\t\tdelta = 0.5 * oldDelta;\n+\t\t\t\t}\n+\t\t\t\tsetResult(x1, i);\n                 return result;\n             }\n             if ((Math.abs(oldDelta) < tolerance) ||\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "this.resultComputed=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "if (f.value(min) == 0.0) {\n  return min;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 246, 
          "faulty": "setResult(x1,i);", 
          "type": "InsertBefore", 
          "seed": "if (delta / oldDelta > 1) {\n  delta=0.5 * oldDelta;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1052/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:20:49.093684760 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1052/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:20:49.097684820 -0500\n@@ -100,35 +100,27 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n-        // return the first endpoint if it is good enough\n+        verifyInterval(min, max);\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n-        // return the second endpoint if it is good enough\n+        verifyBracketing(min, max, f);\n+\t\t// return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.defaultFunctionValueAccuracy = 1.0e-15;\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        this.resultComputed = true;\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +272,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_346/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:37:24.315528042 -0500\n@@ -94,8 +94,8 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,7 +106,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +119,16 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -276,11 +276,11 @@\n                 }\n                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||\n                         p >= Math.abs(0.5 * oldDelta * p1)) {\n-                    // Inverse quadratic interpolation gives a value\n+                    int iterationCount = 0;\n+\t\t\t\t\t// Inverse quadratic interpolation gives a value\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 282, 
          "faulty": "delta=0.5 * dx;", 
          "type": "InsertBefore", 
          "seed": "int iterationCount=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1117/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:25:02.105413018 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1117/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:25:02.105413018 -0500\n@@ -104,31 +104,29 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        verifyInterval(min, max);\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n-        // return the second endpoint if it is good enough\n+        verifyBracketing(min, max, f);\n+\t\t// return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tdouble x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +278,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1227/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:32:16.387806362 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1227/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:32:16.387806362 -0500\n@@ -118,17 +118,13 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +276,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_524/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:48:28.609180430 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n@@ -222,7 +224,8 @@\n      * @throws IllegalArgumentException\n      */\n     protected void verifySequence(final double lower, final double initial, final double upper) {\n-        if (!isSequence(lower, initial, upper)) {\n+        this.resultComputed = false;\n+\t\tif (!isSequence(lower, initial, upper)) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                     \"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",\n                     lower, initial, upper);\n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_524/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:48:28.613180488 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,10 +105,9 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifySequence(min, initial, max);\n \n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n@@ -118,17 +116,16 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        double x0 = min;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tthis.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "verifySequence(min,initial,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 225, 
          "faulty": "if (!isSequence(lower,initial,upper)) {\n  throw MathRuntimeException.createIllegalArgumentException(\"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",lower,initial,upper);\n}", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "setResult(initial,0);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_458/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:44:24.305632045 -0500\n@@ -94,10 +94,11 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        this.iterationCount = iterationCount;\n+\t\tverifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n+        setResult(initial, 0);\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n@@ -106,29 +107,26 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +172,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -280,7 +279,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "setResult(initial,0);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_226/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:29:55.613000841 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,11 +105,6 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +112,18 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +169,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_925/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:13:00.622772742 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_925/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:13:00.626772801 -0500\n@@ -106,29 +106,23 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n-        // return the second endpoint if it is good enough\n+        verifyBracketing(min, max, f);\n+\t\t// return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +168,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                clearResult();\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -280,7 +275,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "Complex oldc=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "clearResult();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_754/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:02:59.457930077 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_754/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:02:59.461930137 -0500\n@@ -106,7 +106,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,10 +119,8 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        verifyBracketing(min, max, f);\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_425/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:42:14.271742710 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,29 +105,24 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        double x0 = min;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_483/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:46:00.015022364 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_483/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:46:00.019022421 -0500\n@@ -106,29 +106,27 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n-        // return the second endpoint if it is good enough\n+        if (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        double x0 = min;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +278,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "return new UnivariateRealSolverFactoryImpl();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 120, 
          "faulty": "double yMax=f.value(max);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_337/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:36:54.587095783 -0500\n@@ -95,7 +95,8 @@\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         clearResult();\n-        verifySequence(min, initial, max);\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,7 +107,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +120,16 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -276,11 +277,11 @@\n                 }\n                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||\n                         p >= Math.abs(0.5 * oldDelta * p1)) {\n-                    // Inverse quadratic interpolation gives a value\n+                    int iterationCount = 0;\n+\t\t\t\t\t// Inverse quadratic interpolation gives a value\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 282, 
          "faulty": "delta=0.5 * dx;", 
          "type": "InsertBefore", 
          "seed": "int iterationCount=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1440/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:45:38.579598542 -0500\n@@ -94,10 +94,14 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n-\n-        // return the initial guess if it is good enough\n+        double a = initial;\n+\t\tclearResult();\n+        int i = 0;\n+\t\tverifySequence(min, initial, max);\n+\n+        setResult(initial, 0);\n+\t\tsetResult(initial, 0);\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n@@ -111,7 +115,8 @@\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n+        this.iterationCount = 0;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n@@ -119,16 +124,18 @@\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n         if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +181,16 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                if (sign < 0) {\n+\t\t\t\t\tret = solve(f, min, yMin, max, yMax, min, yMin);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (yMin == 0.0) {\n+\t\t\t\t\t\tret = min;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tret = max;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double a=initial;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "setResult(initial,0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "setResult(initial,0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "if (sign < 0) {\n  ret=solve(f,min,yMin,max,yMax,min,yMin);\n}\n else {\n  if (yMin == 0.0) {\n    ret=min;\n  }\n else {\n    ret=max;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "oldDelta=delta;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_967/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:15:21.236848688 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_967/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:15:21.240848747 -0500\n@@ -106,7 +106,11 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (yInitial * yMin < 0) {\n+\t\t\treturn solve(f, min, yMin, initial, yInitial, min, yMin);\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +122,17 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+        int i = 0;\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +284,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_219/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:29:30.592636681 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_219/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:29:30.592636681 -0500\n@@ -94,8 +94,10 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\tclearResult();\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,7 +108,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +121,16 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +282,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_965/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:15:16.204774417 -0500\n@@ -94,7 +94,7 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        double a = initial;\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,29 +106,29 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tif (yInitial * yMin < 0) {\n+\t\t\treturn solve(f, min, yMin, initial, yInitial, min, yMin);\n+\t\t}\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tint i = 0;\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +280,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Replace", 
          "seed": "double a=initial;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_790/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:05:03.635757309 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_790/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:05:03.639757368 -0500\n@@ -104,31 +104,28 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.defaultFunctionValueAccuracy = 1.0e-15;\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tthis.resultComputed = true;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BisectionSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1262/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:34:17.809592967 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1262/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:34:17.809592967 -0500\n@@ -106,7 +106,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +119,22 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        if (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +286,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1570/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:54:20.095252147 -0500\n@@ -95,7 +95,8 @@\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         clearResult();\n-        verifySequence(min, initial, max);\n+        int i = 0;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -111,7 +112,8 @@\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n+        this.iterationCount = 0;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n@@ -119,16 +121,13 @@\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n         if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +279,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "setResult(max,0);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_453/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:44:04.497344268 -0500\n@@ -95,7 +95,8 @@\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         clearResult();\n-        verifySequence(min, initial, max);\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,12 +107,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "verifySequence(min,initial,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BisectionSolver();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_277/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:33:16.039917213 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_277/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:33:16.039917213 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -104,31 +103,22 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tdouble x0 = min;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -170,16 +160,23 @@\n             if (Math.abs(yMin) <= functionValueAccuracy) {\n                 setResult(min, 0);\n                 ret = min;\n-            } else if (Math.abs(yMax) <= functionValueAccuracy) {\n-                setResult(max, 0);\n-                ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw MathRuntimeException.createIllegalArgumentException(\n-                        \"function values at endpoints do not have different signs.  \" +\n-                        \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n-                        min, max, yMin, yMax);\n-            }\n+\t\t\t\tif (yMin == 0.0) {\n+\t\t\t\t\tret = min;\n+\t\t\t\t} else {\n+\t\t\t\t\tret = max;\n+\t\t\t\t}\n+\t\t\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n+\t\t\t\t\tsetResult(max, 0);\n+\t\t\t\t\tret = max;\n+\t\t\t\t} else {\n+\t\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t\t.createIllegalArgumentException(\n+\t\t\t\t\t\t\t\t\t\"function values at endpoints do not have different signs.  \"\n+\t\t\t\t\t\t\t\t\t\t\t+ \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n+\t\t\t\t\t\t\t\t\tmin, max, yMin, yMax);\n+\t\t\t\t}\n+\t\t\t}\n         } else if (sign < 0){\n             // solve using only the first endpoint as initial guess\n             ret = solve(f, min, yMin, max, yMax, min, yMin);\n@@ -280,7 +277,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y2=y0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 173, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(max,0);\n  ret=max;\n}\n else {\n  throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);\n}", 
          "type": "InsertBefore", 
          "seed": "if (yMin == 0.0) {\n  ret=min;\n}\n else {\n  ret=max;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1147/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:27:02.371184098 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1147/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:27:02.371184098 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -123,12 +122,13 @@\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+        this.resultComputed = false;\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "Complex oldc=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "this.resultComputed=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_674/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:58:04.753590702 -0500\n@@ -94,23 +94,18 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        double a = initial;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +113,17 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tdouble x0 = min;\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,7 +265,8 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double a=initial;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_708/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:00:10.131437341 -0500\n@@ -106,11 +106,6 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +113,17 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tdouble x0 = min;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,13 +265,15 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||\n                         p >= Math.abs(0.5 * oldDelta * p1)) {\n-                    // Inverse quadratic interpolation gives a value\n+                    delta = (x0 - x1) / (1 - y0 / y1);\n+\t\t\t\t\t// Inverse quadratic interpolation gives a value\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 282, 
          "faulty": "delta=0.5 * dx;", 
          "type": "InsertBefore", 
          "seed": "delta=(x0 - x1) / (1 - y0 / y1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1138/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:26:27.154665557 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1138/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:26:27.154665557 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -104,31 +103,42 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        verifyInterval(min, max);\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        int i = 0;\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tdouble x1 = min;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +290,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "Complex oldc=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_490/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:46:28.891441787 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_490/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:46:28.895441846 -0500\n@@ -94,8 +94,8 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,29 +106,26 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n+        verifyBracketing(min, max, f);\n+\t\tif (yInitial * yMin < 0) {\n+\t\t\treturn solve(f, min, yMin, initial, yInitial, min, yMin);\n+\t\t}\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tdouble x0 = min;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "verifySequence(min,initial,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Replace", 
          "seed": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_556/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:50:22.638836124 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_556/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:50:22.642836181 -0500\n@@ -106,29 +106,18 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n-        // return the second endpoint if it is good enough\n+        verifyBracketing(min, max, f);\n+\t\t// return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        double x0 = min;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "throw new MaxIterationsExceededException(maximalIterationCount);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1480/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:48:14.257884120 -0500\n@@ -95,9 +95,11 @@\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         clearResult();\n-        verifySequence(min, initial, max);\n+        int i = 0;\n+\t\tverifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n+        setResult(initial, 0);\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n@@ -118,17 +120,14 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +173,16 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                if (sign < 0) {\n+\t\t\t\t\tret = solve(f, min, yMin, max, yMax, min, yMin);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (yMin == 0.0) {\n+\t\t\t\t\t\tret = min;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tret = max;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "setResult(initial,0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "if (sign < 0) {\n  ret=solve(f,min,yMin,max,yMax,min,yMin);\n}\n else {\n  if (yMin == 0.0) {\n    ret=min;\n  }\n else {\n    ret=max;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "oldDelta=delta;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1391/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:42:43.109021317 -0500\n@@ -94,7 +94,9 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        double a = initial;\n+\t\t\tdouble oldx = Double.POSITIVE_INFINITY;\n+\t\tclearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -119,16 +121,20 @@\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n         if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +286,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double a=initial;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x2=max;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_520/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:48:18.673036143 -0500\n@@ -106,11 +106,6 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +113,20 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n+        this.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_285/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:33:41.196283166 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_285/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:33:41.196283166 -0500\n@@ -94,7 +94,8 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\tclearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,7 +107,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +120,11 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +276,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "return new NewtonSolver();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_890/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:10:51.592873734 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_890/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:10:51.592873734 -0500\n@@ -106,29 +106,21 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n-        // return the second endpoint if it is good enough\n+        verifyBracketing(min, max, f);\n+\t\t// return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tint i = 0;\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "Complex oldc=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_785/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:04:48.963541450 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -104,31 +103,36 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tif (yInitial * yMin < 0) {\n+\t\t\treturn solve(f, min, yMin, initial, yInitial, min, yMin);\n+\t\t}\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tint i = 0;\n+\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,7 +274,8 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n@@ -280,7 +285,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_718/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:00:50.144026509 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_718/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:00:50.148026568 -0500\n@@ -94,36 +94,33 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n+        double x0 = min;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n@@ -174,7 +171,11 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\t\t\tsetResult(yMin, 0);\n+\t\t\t\t\treturn result;\n+\t\t\t\t}\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -270,7 +271,8 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "this.iterationCount=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1192/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:30:01.377819046 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1192/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:30:01.377819046 -0500\n@@ -111,11 +111,6 @@\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n         if (Math.abs(yMax) <= functionValueAccuracy) {\n@@ -123,12 +118,8 @@\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -293,7 +284,8 @@\n             if (Math.abs(delta) > tolerance) {\n                 x1 = x1 + delta;\n             } else if (dx > 0.0) {\n-                x1 = x1 + 0.5 * tolerance;\n+                iterationCount += this.iterationCount;\n+\t\t\t\tx1 = x1 + 0.5 * tolerance;\n             } else if (dx <= 0.0) {\n                 x1 = x1 - 0.5 * tolerance;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "this.resultComputed=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "if (f.value(min) == 0.0) {\n  return min;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 296, 
          "faulty": "x1=x1 + 0.5 * tolerance;", 
          "type": "InsertBefore", 
          "seed": "iterationCount+=this.iterationCount;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_908/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:11:56.509827717 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_908/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:11:56.513827776 -0500\n@@ -106,29 +106,25 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +276,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_988/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:16:48.210132158 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_988/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:16:48.214132216 -0500\n@@ -106,29 +106,24 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +275,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "Complex oldc=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_773/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:04:09.306957968 -0500\n@@ -100,25 +100,25 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        double x0 = min;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tdouble oldx = Double.POSITIVE_INFINITY;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n@@ -128,7 +128,9 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,7 +272,8 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_927/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:13:05.670847288 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -104,7 +103,8 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n         if (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n@@ -118,17 +118,23 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        double x1 = min;\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tint i = 0;\n+\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,7 +276,8 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n@@ -280,7 +287,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1167/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:28:26.836427558 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1167/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:28:26.840427617 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -104,31 +103,27 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        verifyInterval(min, max);\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -244,7 +239,8 @@\n                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);\n             if (Math.abs(dx) <= tolerance) {\n                 setResult(x1, i);\n-                return result;\n+                y0 = y1;\n+\t\t\t\treturn result;\n             }\n             if ((Math.abs(oldDelta) < tolerance) ||\n                     (Math.abs(y0) <= Math.abs(y1))) {\n@@ -280,7 +276,7 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n+                    p1 = 1.0 - r3;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 247, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "y0=y1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "Complex d2v=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_149/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:25:05.880782595 -0500\n@@ -128,8 +128,7 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n+        return solve(f, min, max);\n \n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "Replace", 
          "seed": "return solve(f,min,max);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_539/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:49:17.629892244 -0500\n@@ -222,7 +222,8 @@\n      * @throws IllegalArgumentException\n      */\n     protected void verifySequence(final double lower, final double initial, final double upper) {\n-        if (!isSequence(lower, initial, upper)) {\n+        this.resultComputed = false;\n+\t\tif (!isSequence(lower, initial, upper)) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                     \"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",\n                     lower, initial, upper);\n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_539/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:49:17.629892244 -0500\n@@ -100,17 +100,12 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +113,19 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tthis.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +171,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 225, 
          "faulty": "if (!isSequence(lower,initial,upper)) {\n  throw MathRuntimeException.createIllegalArgumentException(\"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",lower,initial,upper);\n}", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_951/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:14:20.595953558 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_951/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:14:20.599953617 -0500\n@@ -106,29 +106,27 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tdouble x1 = min;\n+\t\tint i = 0;\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +278,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1233/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:32:36.616104047 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1233/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:32:36.616104047 -0500\n@@ -106,29 +106,42 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tdouble x1 = min;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +293,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_836/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:07:42.142088665 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -104,31 +103,32 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        if (yInitial * yMin < 0) {\n+\t\t\treturn solve(f, min, yMin, initial, yInitial, min, yMin);\n+\t\t}\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        double x1 = min;\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tint i = 0;\n+\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,7 +270,8 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n@@ -280,7 +281,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1194/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:30:06.501894487 -0500\n@@ -94,7 +94,8 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        iterationCount += this.iterationCount;\n+\t\tclearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -104,31 +105,29 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        verifyInterval(min, max);\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n-        // return the second endpoint if it is good enough\n+        verifyBracketing(min, max, f);\n+\t\t// return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tdouble x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +279,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "iterationCount+=this.iterationCount;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_406/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:41:04.366726826 -0500\n@@ -94,8 +94,8 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        this.iterationCount = iterationCount;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,29 +106,30 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n+        double x0 = min;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +281,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1408/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:43:47.473966812 -0500\n@@ -94,10 +94,12 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        double a = initial;\n+\t\tclearResult();\n         verifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n+        setResult(initial, 0);\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n@@ -119,16 +121,16 @@\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n         if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double a=initial;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "setResult(initial,0);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_318/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:35:44.422075458 -0500\n@@ -94,7 +94,9 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\t\tthis.iterationCount = iterationCount;\n+\t\tclearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,11 +108,6 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -128,7 +125,8 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "Complex G=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1169/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:28:31.736499685 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1169/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:28:31.740499744 -0500\n@@ -104,31 +104,30 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        verifyInterval(min, max);\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.resultComputed = false;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +279,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_309/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:35:14.729643632 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_309/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:35:14.729643632 -0500\n@@ -94,8 +94,11 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\t\tthis.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\tclearResult();\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -104,9 +107,11 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +123,8 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "setResult(initial,0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_89/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:20:35.608844943 -0500\n@@ -118,17 +118,15 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        double x0 = min;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1532/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:51:45.008976899 -0500\n@@ -97,7 +97,8 @@\n         clearResult();\n         verifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n+        setResult(initial, 0);\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n@@ -111,24 +112,17 @@\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n+        this.iterationCount = 0;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +274,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "setResult(initial,0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "setResult(max,0);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1476/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:47:59.077661291 -0500\n@@ -94,7 +94,8 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\tclearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -118,17 +119,14 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -244,7 +242,8 @@\n                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);\n             if (Math.abs(dx) <= tolerance) {\n                 setResult(x1, i);\n-                return result;\n+                x1 = x2;\n+\t\t\t\treturn result;\n             }\n             if ((Math.abs(oldDelta) < tolerance) ||\n                     (Math.abs(y0) <= Math.abs(y1))) {\n@@ -280,7 +279,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 247, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "x1=x2;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_947/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:14:10.575805629 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_947/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:14:10.575805629 -0500\n@@ -106,29 +106,23 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n+        verifyBracketing(min, max, f);\n+\t\tsetResult(max, 0);\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tint i = 0;\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "Complex oldc=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "setResult(max,0);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_502/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:47:14.320101585 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_502/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:47:14.324101643 -0500\n@@ -100,16 +100,14 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n+        verifyInterval(min, max);\n \n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n@@ -118,17 +116,20 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n+        this.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -243,7 +244,8 @@\n             double tolerance =\n                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);\n             if (Math.abs(dx) <= tolerance) {\n-                setResult(x1, i);\n+                int iterationCount = 0;\n+\t\t\t\tsetResult(x1, i);\n                 return result;\n             }\n             if ((Math.abs(oldDelta) < tolerance) ||\n@@ -280,7 +282,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "verifyInterval(min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 246, 
          "faulty": "setResult(x1,i);", 
          "type": "InsertBefore", 
          "seed": "int iterationCount=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_630/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:55:12.963059189 -0500\n@@ -206,9 +206,12 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            double ret = Double.NaN;\n+\t\t\tif (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_630/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:55:12.963059189 -0500\n@@ -100,17 +100,11 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n-        // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +112,23 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tthis.resultComputed = true;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +174,9 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\titerationCount += this.iterationCount;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -280,7 +282,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "iterationCount+=this.iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "Replace", 
          "seed": "double yMin=f.value(min);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1458/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:46:48.748628831 -0500\n@@ -94,10 +94,13 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        double a = initial;\n+\t\tclearResult();\n+        int i = 0;\n+\t\tverifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n+        setResult(initial, 0);\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n@@ -119,16 +122,18 @@\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n         if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tdouble x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +179,16 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                if (sign < 0) {\n+\t\t\t\t\tret = solve(f, min, yMin, max, yMax, min, yMin);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (yMin == 0.0) {\n+\t\t\t\t\t\tret = min;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tret = max;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double a=initial;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "setResult(initial,0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "if (sign < 0) {\n  ret=solve(f,min,yMin,max,yMax,min,yMin);\n}\n else {\n  if (yMin == 0.0) {\n    ret=min;\n  }\n else {\n    ret=max;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "oldDelta=delta;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_196/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:28:06.795416895 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_196/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:28:06.795416895 -0500\n@@ -106,11 +106,6 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +113,16 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +168,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1415/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:44:12.746338010 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1415/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:44:12.750338068 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,7 +105,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +118,13 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "double coefficients[]=((PolynomialFunction)f).getCoefficients();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_320/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:35:49.462148755 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_320/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:35:49.466148814 -0500\n@@ -94,8 +94,9 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\tdouble x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -104,26 +105,19 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1196/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:30:11.553968865 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1196/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:30:11.557968924 -0500\n@@ -94,7 +94,8 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        double a = initial;\n+\t\tclearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,29 +107,40 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tdouble x1 = min;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +292,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double a=initial;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1387/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:42:28.164801770 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1387/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:42:28.168801829 -0500\n@@ -95,9 +95,12 @@\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         clearResult();\n-        verifySequence(min, initial, max);\n+        int i = 0;\n+\t\tverifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n+        setResult(initial, 0);\n+\t\tsetResult(initial, 0);\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n@@ -106,7 +109,10 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tdouble x0 = min;\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +124,18 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        double sign = yMin * yMax;\n+\t\tdouble x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +181,17 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                if (sign < 0) {\n+\t\t\t\t\tret = solve(f, min, yMin, max, yMax, min, yMin);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (yMin == 0.0) {\n+\t\t\t\t\t\tret = min;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tret = max;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tdouble x0 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -280,7 +297,7 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n+                    this.iterationCount = 0;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "setResult(initial,0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "setResult(initial,0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "if (sign < 0) {\n  ret=solve(f,min,yMin,max,yMax,min,yMin);\n}\n else {\n  if (yMin == 0.0) {\n    ret=min;\n  }\n else {\n    ret=max;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "double sign=yMin * yMax;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_414/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:41:39.651239610 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_414/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:41:39.651239610 -0500\n@@ -100,16 +100,14 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n+        verifyBracketing(min, max, f);\n+\t\tverifySequence(min, initial, max);\n \n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n@@ -118,17 +116,16 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        double x0 = min;\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +277,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "verifySequence(min,initial,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_738/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:01:54.580975153 -0500\n@@ -106,29 +106,29 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tdouble x0 = min;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,7 +270,8 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_743/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:02:14.333265909 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_743/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:02:14.337265967 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -104,9 +103,11 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +119,21 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+        if (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tint i = 0;\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,7 +275,8 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n@@ -280,7 +286,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_820/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:06:57.541432778 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_820/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:06:57.541432778 -0500\n@@ -100,35 +100,35 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n+\n+        double x1 = min;\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\tthis.resultComputed = true;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +280,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BisectionSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1422/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:44:38.194711768 -0500\n@@ -94,7 +94,9 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        double a = initial;\n+\t\t\tdouble oldx = Double.POSITIVE_INFINITY;\n+\t\tclearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,7 +108,9 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -119,16 +123,18 @@\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n         if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tdouble x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +286,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double a=initial;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x2=max;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_534/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:49:03.405685705 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_534/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:49:03.409685763 -0500\n@@ -104,31 +104,28 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tdouble x0 = min;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BisectionSolver();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_472/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:45:09.706291586 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_472/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:45:09.710291644 -0500\n@@ -94,22 +94,20 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n+        verifyBracketing(min, max, f);\n+\t\tverifySequence(min, initial, max);\n \n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n@@ -118,17 +116,22 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tdouble x0 = min;\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tthis.resultComputed = true;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +283,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "verifySequence(min,initial,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "verifySequence(min,initial,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=true;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_977/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:16:06.269513289 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_977/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:16:06.269513289 -0500\n@@ -106,7 +106,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +119,22 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -166,7 +172,10 @@\n         // Verify bracketing\n         double sign = yMin * yMax;\n         if (sign > 0) {\n-            // check if either value is close to a zero\n+            if (f.value(max) == 0.0) {\n+\t\t\t\treturn max;\n+\t\t\t}\n+\t\t\t// check if either value is close to a zero\n             if (Math.abs(yMin) <= functionValueAccuracy) {\n                 setResult(min, 0);\n                 ret = min;\n@@ -280,7 +289,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 170, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(min,0);\n  ret=min;\n}\n else if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(max,0);\n  ret=max;\n}\n else {\n  throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);\n}", 
          "type": "InsertBefore", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_401/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:40:49.434509808 -0500\n@@ -94,8 +94,8 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,19 +106,15 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n+\t\t\treturn solve(f, min, yMin, initial, yInitial, min, yMin);\n+\t\t}\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n@@ -128,7 +124,8 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "verifySequence(min,initial,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Replace", 
          "seed": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1240/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:32:56.732400066 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1240/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:32:56.732400066 -0500\n@@ -94,7 +94,8 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        double a = initial;\n+\t\tclearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,7 +107,9 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -123,12 +126,20 @@\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +291,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double a=initial;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1360/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:40:32.739105749 -0500\n@@ -97,7 +97,8 @@\n         clearResult();\n         verifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n+        setResult(initial, 0);\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n@@ -118,17 +119,13 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "setResult(initial,0);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_843/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:08:07.458460923 -0500\n@@ -106,29 +106,22 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n-        // return the second endpoint if it is good enough\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tint i = 0;\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "Complex oldc=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_720/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:00:55.116099715 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_720/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:00:55.116099715 -0500\n@@ -94,41 +94,48 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n+        double x0 = min;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+        double x1 = min;\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tint i = 0;\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,7 +277,8 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n@@ -280,7 +288,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_433/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:42:48.612241708 -0500\n@@ -94,8 +94,8 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,19 +106,14 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n+\t\t\treturn solve(f, min, yMin, initial, yInitial, min, yMin);\n+\t\t}\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n+        this.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n@@ -128,7 +123,8 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +276,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "verifySequence(min,initial,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Replace", 
          "seed": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "return new UnivariateRealSolverFactoryImpl();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_876/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:10:06.324208388 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -104,31 +103,35 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tdouble x1 = min;\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tint i = 0;\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,7 +273,8 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n@@ -280,7 +284,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_824/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:07:07.441578375 -0500\n@@ -100,25 +100,26 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n@@ -128,7 +129,10 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,17 +274,18 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||\n                         p >= Math.abs(0.5 * oldDelta * p1)) {\n-                    // Inverse quadratic interpolation gives a value\n+                    delta = (x0 - x1) / (1 - y0 / y1);\n+\t\t\t\t\t// Inverse quadratic interpolation gives a value\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 282, 
          "faulty": "delta=0.5 * dx;", 
          "type": "InsertBefore", 
          "seed": "delta=(x0 - x1) / (1 - y0 / y1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (dx <= 0.0) {\n  x1=x1 - 0.5 * tolerance;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "final UnivariateRealFunction derivative=((DifferentiableUnivariateRealFunction)f).derivative();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_303/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:34:54.697352280 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_303/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:34:54.697352280 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -104,31 +103,20 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        double x0 = min;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -170,16 +158,23 @@\n             if (Math.abs(yMin) <= functionValueAccuracy) {\n                 setResult(min, 0);\n                 ret = min;\n-            } else if (Math.abs(yMax) <= functionValueAccuracy) {\n-                setResult(max, 0);\n-                ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw MathRuntimeException.createIllegalArgumentException(\n-                        \"function values at endpoints do not have different signs.  \" +\n-                        \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n-                        min, max, yMin, yMax);\n-            }\n+\t\t\t\tif (yMin == 0.0) {\n+\t\t\t\t\tret = min;\n+\t\t\t\t} else {\n+\t\t\t\t\tret = max;\n+\t\t\t\t}\n+\t\t\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n+\t\t\t\t\tsetResult(max, 0);\n+\t\t\t\t\tret = max;\n+\t\t\t\t} else {\n+\t\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t\t.createIllegalArgumentException(\n+\t\t\t\t\t\t\t\t\t\"function values at endpoints do not have different signs.  \"\n+\t\t\t\t\t\t\t\t\t\t\t+ \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n+\t\t\t\t\t\t\t\t\tmin, max, yMin, yMax);\n+\t\t\t\t}\n+\t\t\t}\n         } else if (sign < 0){\n             // solve using only the first endpoint as initial guess\n             ret = solve(f, min, yMin, max, yMax, min, yMin);\n@@ -280,7 +275,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y2=y0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 173, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(max,0);\n  ret=max;\n}\n else {\n  throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);\n}", 
          "type": "InsertBefore", 
          "seed": "if (yMin == 0.0) {\n  ret=min;\n}\n else {\n  ret=max;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1000/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:17:29.146736118 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,29 +105,31 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        int i = 0;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +281,7 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n+                    p1 = 1.0 - r3;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "Complex oldc=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1493/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:48:59.650550387 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1493/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:48:59.650550387 -0500\n@@ -94,10 +94,14 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n-\n-        // return the initial guess if it is good enough\n+        double a = initial;\n+\t\tclearResult();\n+        int i = 0;\n+\t\tverifySequence(min, initial, max);\n+\n+        setResult(initial, 0);\n+\t\tsetResult(initial, 0);\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n@@ -106,12 +110,14 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n+        this.iterationCount = 0;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n@@ -119,16 +125,11 @@\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n         if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +175,16 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                if (sign < 0) {\n+\t\t\t\t\tret = solve(f, min, yMin, max, yMax, min, yMin);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (yMin == 0.0) {\n+\t\t\t\t\t\tret = min;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tret = max;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double a=initial;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "setResult(initial,0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "setResult(initial,0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "if (sign < 0) {\n  ret=solve(f,min,yMin,max,yMax,min,yMin);\n}\n else {\n  if (yMin == 0.0) {\n    ret=min;\n  }\n else {\n    ret=max;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "oldDelta=delta;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "setResult(max,0);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_526/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:48:33.525251818 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_526/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:48:33.525251818 -0500\n@@ -100,35 +100,35 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tthis.resultComputed = true;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +174,9 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\titerationCount += this.iterationCount;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -280,7 +282,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "iterationCount+=this.iterationCount;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_651/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:56:32.424230320 -0500\n@@ -100,17 +100,11 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n-        // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +112,22 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tthis.resultComputed = true;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +173,9 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\titerationCount += this.iterationCount;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -280,7 +281,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "iterationCount+=this.iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "Replace", 
          "seed": "double yMin=f.value(min);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_567/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:51:07.715490540 -0500\n@@ -222,7 +222,8 @@\n      * @throws IllegalArgumentException\n      */\n     protected void verifySequence(final double lower, final double initial, final double upper) {\n-        if (!isSequence(lower, initial, upper)) {\n+        this.resultComputed = false;\n+\t\tif (!isSequence(lower, initial, upper)) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                     \"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",\n                     lower, initial, upper);\n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_567/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:51:07.719490598 -0500\n@@ -95,7 +95,8 @@\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         clearResult();\n-        verifySequence(min, initial, max);\n+        int numIterations = 0;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,11 +107,6 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +114,21 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tthis.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +174,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 225, 
          "faulty": "if (!isSequence(lower,initial,upper)) {\n  throw MathRuntimeException.createIllegalArgumentException(\"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",lower,initial,upper);\n}", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_232/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:30:15.645292387 -0500\n@@ -95,7 +95,8 @@\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         clearResult();\n-        verifySequence(min, initial, max);\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,7 +107,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +120,16 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_598/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:53:07.513229504 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_598/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:53:07.513229504 -0500\n@@ -94,41 +94,39 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tdouble x0 = min;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +278,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1378/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:41:53.276289186 -0500\n@@ -94,7 +94,8 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\tclearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,7 +107,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +120,13 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +278,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x2=max;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1365/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:40:53.087404777 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1365/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:40:53.091404836 -0500\n@@ -106,7 +106,9 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +120,16 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        double sign = yMin * yMax;\n+\t\tdouble x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +175,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x0 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -280,7 +282,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "double sign=yMin * yMax;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_265/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:32:24.911173373 -0500\n@@ -94,8 +94,10 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\tclearResult();\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,7 +108,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -116,19 +119,16 @@\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n-        // return the second endpoint if it is good enough\n+        if (f.value(min) == 0.0) {\n+\t\t\treturn min;\n+\t\t}\n+\t\t// return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +280,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "return new NewtonSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 120, 
          "faulty": "double yMax=f.value(max);", 
          "type": "InsertBefore", 
          "seed": "if (f.value(min) == 0.0) {\n  return min;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_747/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:02:29.269485759 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_747/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:02:29.273485817 -0500\n@@ -104,31 +104,28 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.defaultFunctionValueAccuracy = 1.0e-15;\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        this.resultComputed = true;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BisectionSolver();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_614/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:54:12.730176036 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_614/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:54:12.730176036 -0500\n@@ -100,35 +100,36 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n-        // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tthis.resultComputed = true;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +175,9 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\titerationCount += this.iterationCount;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -280,7 +283,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "iterationCount+=this.iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "Replace", 
          "seed": "double yMin=f.value(min);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_822/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:07:02.341503371 -0500\n@@ -94,41 +94,42 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        double x0 = min;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tdouble x1 = min;\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tint i = 0;\n+\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,7 +271,8 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n@@ -280,7 +282,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_815/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:06:42.709214640 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -104,9 +103,11 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +119,25 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        double x1 = min;\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tint i = 0;\n+\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,7 +279,8 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n@@ -280,7 +290,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_374/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:39:14.045123309 -0500\n@@ -94,8 +94,10 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\t\tthis.iterationCount = iterationCount;\n+\t\tdouble x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,29 +108,30 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n+        double x0 = min;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +283,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_326/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:36:09.782444261 -0500\n@@ -95,7 +95,8 @@\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         clearResult();\n-        verifySequence(min, initial, max);\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,10 +107,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n+        verifyBracketing(min, max, f);\n+\t\tverifySequence(min, initial, max);\n \n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "verifySequence(min,initial,max);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1317/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:37:59.052846722 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1317/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:37:59.052846722 -0500\n@@ -106,11 +106,6 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +113,14 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_798/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:05:27.264104912 -0500\n@@ -106,11 +106,6 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +113,19 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tdouble x0 = min;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,7 +267,8 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1058/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:21:08.977977883 -0500\n@@ -94,19 +94,21 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n-        if (Math.abs(yInitial) <= functionValueAccuracy) {\n+        verifyInterval(min, max);\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        verifyInterval(min, max);\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +120,22 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +287,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_189/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:27:46.519121709 -0500\n@@ -118,18 +118,14 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n+        verifyBracketing(min, max, f);\n+\t\treturn solve(f, min, max);\n \n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "Replace", 
          "seed": "return solve(f,min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double yMin=f.value(min);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_107/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:21:59.838072391 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_107/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:21:59.838072391 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -104,13 +103,9 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +113,16 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tdouble x0 = min;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_83/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:20:10.528479401 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_83/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:20:10.528479401 -0500\n@@ -118,18 +118,14 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        double x0 = min;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n+        return solve(f, min, max);\n \n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "Replace", 
          "seed": "return solve(f,min,max);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_699/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:59:39.766990186 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_699/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:59:39.770990245 -0500\n@@ -104,31 +104,29 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tdouble x0 = min;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,7 +268,8 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_917/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:12:30.886333585 -0500\n@@ -100,25 +100,28 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n@@ -128,7 +131,10 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,17 +276,19 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||\n                         p >= Math.abs(0.5 * oldDelta * p1)) {\n-                    // Inverse quadratic interpolation gives a value\n+                    delta = (x0 - x1) / (1 - y0 / y1);\n+\t\t\t\t\t\t\tthis.iterationCount = iterationCount;\n+\t\t\t\t\t// Inverse quadratic interpolation gives a value\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 282, 
          "faulty": "delta=0.5 * dx;", 
          "type": "InsertBefore", 
          "seed": "delta=(x0 - x1) / (1 - y0 / y1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (dx <= 0.0) {\n  x1=x1 - 0.5 * tolerance;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "final UnivariateRealFunction derivative=((DifferentiableUnivariateRealFunction)f).derivative();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 282, 
          "faulty": "delta=0.5 * dx;", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_639/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:55:48.203578618 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_639/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:55:48.203578618 -0500\n@@ -100,35 +100,35 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n-        // return the second endpoint if it is good enough\n+        functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\t// return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tthis.resultComputed = true;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +174,9 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\titerationCount += this.iterationCount;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -280,7 +282,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "iterationCount+=this.iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 120, 
          "faulty": "double yMax=f.value(max);", 
          "type": "InsertBefore", 
          "seed": "functionValueAccuracy=defaultFunctionValueAccuracy;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1468/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:47:23.753142734 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1468/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:47:23.757142794 -0500\n@@ -95,9 +95,12 @@\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         clearResult();\n-        verifySequence(min, initial, max);\n+        int i = 0;\n+\t\tverifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n+        setResult(initial, 0);\n+\t\tsetResult(initial, 0);\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n@@ -106,29 +109,22 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n+        this.iterationCount = 0;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +170,16 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                if (sign < 0) {\n+\t\t\t\t\tret = solve(f, min, yMin, max, yMax, min, yMin);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (yMin == 0.0) {\n+\t\t\t\t\t\tret = min;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tret = max;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "setResult(initial,0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "setResult(initial,0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "if (sign < 0) {\n  ret=solve(f,min,yMin,max,yMax,min,yMin);\n}\n else {\n  if (yMin == 0.0) {\n    ret=min;\n  }\n else {\n    ret=max;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "oldDelta=delta;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "setResult(max,0);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_722/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:01:00.256175394 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_722/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:01:00.256175394 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,7 +105,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +118,21 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,7 +274,8 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n@@ -280,7 +285,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "this.iterationCount=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_730/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:01:25.380545287 -0500\n@@ -104,13 +104,7 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +112,13 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +164,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                iterationCount += this.iterationCount;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "iterationCount+=this.iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "Replace", 
          "seed": "double yMin=f.value(min);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1427/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:44:53.386934884 -0500\n@@ -94,7 +94,8 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\tclearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,7 +107,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +120,22 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        double sign = yMin * yMax;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n-        // reduce interval if initial and max bracket the root\n+        if (Math.abs(yMax) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tdouble x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +181,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x0 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -280,7 +288,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "double sign=yMin * yMax;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1302/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:36:59.531971569 -0500\n@@ -94,7 +94,9 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        double a = initial;\n+\t\t\tdouble oldx = Double.POSITIVE_INFINITY;\n+\t\tclearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,7 +108,9 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +122,20 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +287,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double a=initial;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x2=max;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_923/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:12:55.638699139 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_923/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:12:55.642699198 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,29 +105,36 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tint i = 0;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +286,7 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n+                    p1 = 1.0 - r3;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "Complex oldc=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1395/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:42:52.885164935 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1395/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:42:52.885164935 -0500\n@@ -94,7 +94,8 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\tclearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,7 +107,9 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +121,15 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +281,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x2=max;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_584/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:52:17.432502582 -0500\n@@ -222,7 +222,8 @@\n      * @throws IllegalArgumentException\n      */\n     protected void verifySequence(final double lower, final double initial, final double upper) {\n-        if (!isSequence(lower, initial, upper)) {\n+        this.resultComputed = false;\n+\t\tif (!isSequence(lower, initial, upper)) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                     \"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",\n                     lower, initial, upper);\n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_584/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:52:17.436502641 -0500\n@@ -97,7 +97,8 @@\n         clearResult();\n         verifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n+        double x0 = min;\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n@@ -106,11 +107,6 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +114,19 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tthis.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +172,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 225, 
          "faulty": "if (!isSequence(lower,initial,upper)) {\n  throw MathRuntimeException.createIllegalArgumentException(\"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",lower,initial,upper);\n}", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1254/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:33:47.581148245 -0500\n@@ -106,24 +106,17 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BisectionSolver();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1546/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:52:40.377789297 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1546/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:52:40.377789297 -0500\n@@ -95,9 +95,11 @@\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         clearResult();\n-        verifySequence(min, initial, max);\n+        int i = 0;\n+\t\tverifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n+        setResult(initial, 0);\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n@@ -118,17 +120,14 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +173,16 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                if (sign < 0) {\n+\t\t\t\t\tret = solve(f, min, yMin, max, yMax, min, yMin);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (yMin == 0.0) {\n+\t\t\t\t\t\tret = min;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tret = max;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "setResult(initial,0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "if (sign < 0) {\n  ret=solve(f,min,yMin,max,yMax,min,yMin);\n}\n else {\n  if (yMin == 0.0) {\n    ret=min;\n  }\n else {\n    ret=max;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "oldDelta=delta;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_763/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:03:29.518372471 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_763/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:03:29.518372471 -0500\n@@ -94,41 +94,40 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n-        // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tdouble x0 = min;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +173,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                iterationCount += this.iterationCount;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -280,7 +280,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "iterationCount+=this.iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "Replace", 
          "seed": "double yMin=f.value(min);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1207/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:30:51.618558675 -0500\n@@ -104,31 +104,30 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        verifyInterval(min, max);\n+\t\tverifyInterval(min, max);\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n         if (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n-        // return the second endpoint if it is good enough\n+        if (f.value(min) == 0.0) {\n+\t\t\treturn min;\n+\t\t}\n+\t\t// return the second endpoint if it is good enough\n         double yMax = f.value(max);\n         if (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+        int i = 0;\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -244,7 +243,8 @@\n                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);\n             if (Math.abs(dx) <= tolerance) {\n                 setResult(x1, i);\n-                return result;\n+                y0 = y1;\n+\t\t\t\treturn result;\n             }\n             if ((Math.abs(oldDelta) < tolerance) ||\n                     (Math.abs(y0) <= Math.abs(y1))) {\n@@ -280,7 +280,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 247, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "y0=y1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 120, 
          "faulty": "double yMax=f.value(max);", 
          "type": "InsertBefore", 
          "seed": "if (f.value(min) == 0.0) {\n  return min;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1538/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:52:09.993343495 -0500\n@@ -95,7 +95,8 @@\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         clearResult();\n-        verifySequence(min, initial, max);\n+        int i = 0;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -123,12 +124,17 @@\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n+        if (Math.abs(yMax) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "oldDelta=delta;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_900/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:11:26.929393041 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_900/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:11:26.937393159 -0500\n@@ -100,17 +100,12 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,7 +113,14 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n@@ -128,7 +130,10 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,17 +275,19 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||\n                         p >= Math.abs(0.5 * oldDelta * p1)) {\n-                    // Inverse quadratic interpolation gives a value\n+                    delta = (x0 - x1) / (1 - y0 / y1);\n+\t\t\t\t\t\t\tthis.iterationCount = iterationCount;\n+\t\t\t\t\t// Inverse quadratic interpolation gives a value\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 282, 
          "faulty": "delta=0.5 * dx;", 
          "type": "InsertBefore", 
          "seed": "delta=(x0 - x1) / (1 - y0 / y1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (dx <= 0.0) {\n  x1=x1 - 0.5 * tolerance;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "final UnivariateRealFunction derivative=((DifferentiableUnivariateRealFunction)f).derivative();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 282, 
          "faulty": "delta=0.5 * dx;", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1126/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:25:37.129928874 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1126/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:25:37.133928933 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,12 +105,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n@@ -123,12 +118,14 @@\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +277,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_642/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:55:58.167725474 -0500\n@@ -94,41 +94,38 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        double x0 = min;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\tdouble x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,7 +267,8 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n@@ -280,7 +278,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_861/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:09:16.259472452 -0500\n@@ -106,12 +106,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n@@ -270,17 +266,18 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||\n                         p >= Math.abs(0.5 * oldDelta * p1)) {\n-                    // Inverse quadratic interpolation gives a value\n+                    delta = (x0 - x1) / (1 - y0 / y1);\n+\t\t\t\t\t// Inverse quadratic interpolation gives a value\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 282, 
          "faulty": "delta=0.5 * dx;", 
          "type": "InsertBefore", 
          "seed": "delta=(x0 - x1) / (1 - y0 / y1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (dx <= 0.0) {\n  x1=x1 - 0.5 * tolerance;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "final UnivariateRealFunction derivative=((DifferentiableUnivariateRealFunction)f).derivative();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_199/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:28:16.939564570 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_199/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:28:16.939564570 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -104,31 +103,21 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tdouble x0 = min;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_206/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:28:45.871985739 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_206/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:28:45.871985739 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -104,21 +103,16 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n+        this.iterationCount = iterationCount;\n+\t\tif (yInitial * yMax < 0) {\n+\t\t\treturn solve(f, initial, yInitial, max, yMax, initial, yInitial);\n+\t\t}\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n@@ -128,7 +122,8 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_221/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:29:35.692710912 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_221/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:29:35.696710970 -0500\n@@ -94,8 +94,10 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\tclearResult();\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,23 +108,23 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tdouble x1 = min;\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n+        if (yInitial * yMin < 0) {\n+\t\t\treturn solve(f, min, yMin, initial, yInitial, min, yMin);\n+\t\t}\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_767/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:03:44.454592269 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_767/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:03:44.454592269 -0500\n@@ -100,35 +100,32 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n+\n+        double x1 = min;\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tthis.resultComputed = true;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +277,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BisectionSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_364/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:38:34.036541700 -0500\n@@ -95,7 +95,8 @@\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         clearResult();\n-        verifySequence(min, initial, max);\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,10 +107,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n+        verifyBracketing(min, max, f);\n+\t\tverifySequence(min, initial, max);\n \n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n@@ -280,7 +279,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "verifySequence(min,initial,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1484/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:48:24.274031142 -0500\n@@ -95,16 +95,19 @@\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         clearResult();\n-        verifySequence(min, initial, max);\n+        int i = 0;\n+\t\tverifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n+        setResult(initial, 0);\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double x1 = min;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n         if (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n@@ -119,17 +122,18 @@\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n         if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tthrow new MaxIterationsExceededException(maximalIterationCount);\n \n     }\n \n@@ -174,7 +178,16 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                if (sign < 0) {\n+\t\t\t\t\tret = solve(f, min, yMin, max, yMax, min, yMin);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (yMin == 0.0) {\n+\t\t\t\t\t\tret = min;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tret = max;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "setResult(initial,0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "if (sign < 0) {\n  ret=solve(f,min,yMin,max,yMax,min,yMin);\n}\n else {\n  if (yMin == 0.0) {\n    ret=min;\n  }\n else {\n    ret=max;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "oldDelta=delta;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "Replace", 
          "seed": "throw new MaxIterationsExceededException(maximalIterationCount);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_384/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:39:44.037559283 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_384/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:39:44.041559340 -0500\n@@ -94,8 +94,8 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -104,21 +104,20 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n@@ -128,7 +127,8 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "verifySequence(min,initial,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BisectionSolver();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_935/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:13:30.403212497 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_935/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:13:30.407212557 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,7 +105,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +118,16 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +279,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "Complex oldc=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1325/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:38:28.653281891 -0500\n@@ -94,7 +94,9 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        double a = initial;\n+\t\t\tdouble oldx = Double.POSITIVE_INFINITY;\n+\t\tclearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,7 +108,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +121,18 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -276,11 +280,14 @@\n                 }\n                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||\n                         p >= Math.abs(0.5 * oldDelta * p1)) {\n-                    // Inverse quadratic interpolation gives a value\n+                    if (f == null) {\n+\t\t\t\t\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t// Inverse quadratic interpolation gives a value\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n@@ -293,7 +300,8 @@\n             if (Math.abs(delta) > tolerance) {\n                 x1 = x1 + delta;\n             } else if (dx > 0.0) {\n-                x1 = x1 + 0.5 * tolerance;\n+                oldDelta = delta;\n+\t\t\t\tx1 = x1 + 0.5 * tolerance;\n             } else if (dx <= 0.0) {\n                 x1 = x1 - 0.5 * tolerance;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double a=initial;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 282, 
          "faulty": "delta=0.5 * dx;", 
          "type": "InsertBefore", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 296, 
          "faulty": "x1=x1 + 0.5 * tolerance;", 
          "type": "InsertBefore", 
          "seed": "oldDelta=delta;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_886/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:10:41.320722764 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_886/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:10:41.324722823 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,29 +105,29 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        int i = 0;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +279,7 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n+                    p1 = 1.0 - r3;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1212/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:31:11.718854553 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1212/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:31:11.722854612 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -104,31 +103,36 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        verifyInterval(min, max);\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        int i = 0;\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +284,7 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n+                    p1 = 1.0 - r3;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "Complex oldc=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BisectionSolver();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1163/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:28:11.964208639 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1163/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:28:11.968208698 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,29 +105,22 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +272,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "setResult(initial,0);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_536/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:49:08.365757728 -0500\n@@ -222,7 +222,8 @@\n      * @throws IllegalArgumentException\n      */\n     protected void verifySequence(final double lower, final double initial, final double upper) {\n-        if (!isSequence(lower, initial, upper)) {\n+        this.resultComputed = false;\n+\t\tif (!isSequence(lower, initial, upper)) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                     \"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",\n                     lower, initial, upper);\n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_536/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:49:08.369757785 -0500\n@@ -106,11 +106,6 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +113,19 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tthis.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +171,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 225, 
          "faulty": "if (!isSequence(lower,initial,upper)) {\n  throw MathRuntimeException.createIllegalArgumentException(\"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",lower,initial,upper);\n}", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_355/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:37:59.528040006 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_355/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:37:59.528040006 -0500\n@@ -94,8 +94,11 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\t\tthis.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\tclearResult();\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -104,9 +107,12 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +124,13 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +282,7 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n+                    x0 = x1;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "x0=x1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1082/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:22:43.119365383 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1082/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:22:43.123365442 -0500\n@@ -104,18 +104,15 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        verifyInterval(min, max);\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n         if (Math.abs(yMax) <= functionValueAccuracy) {\n@@ -128,7 +125,10 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1244/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:33:06.860549098 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1244/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:33:06.860549098 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -104,13 +103,9 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        verifyInterval(min, max);\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +113,19 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -244,7 +241,8 @@\n                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);\n             if (Math.abs(dx) <= tolerance) {\n                 setResult(x1, i);\n-                return result;\n+                y0 = y1;\n+\t\t\t\treturn result;\n             }\n             if ((Math.abs(oldDelta) < tolerance) ||\n                     (Math.abs(y0) <= Math.abs(y1))) {\n@@ -280,7 +278,7 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n+                    p1 = 1.0 - r3;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 247, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "y0=y1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "Complex d2v=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_146/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:24:56.060639571 -0500\n@@ -118,17 +118,16 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +173,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_380/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:39:33.909412061 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_380/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:39:33.909412061 -0500\n@@ -94,7 +94,7 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        verifySequence(min, initial, max);\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -104,13 +104,9 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,7 +114,9 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n@@ -128,7 +126,8 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BisectionSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Replace", 
          "seed": "verifySequence(min,initial,max);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1393/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:42:48.013093361 -0500\n@@ -106,7 +106,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,7 +119,8 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n+        double sign = yMin * yMax;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n@@ -128,7 +130,8 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +177,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x0 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -280,7 +284,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "double sign=yMin * yMax;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1349/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:39:57.882593478 -0500\n@@ -94,7 +94,9 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        double a = initial;\n+\t\t\tdouble oldx = Double.POSITIVE_INFINITY;\n+\t\tclearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -119,16 +121,16 @@\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n         if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double a=initial;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x2=max;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_552/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:50:12.422687800 -0500\n@@ -100,17 +100,12 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +113,20 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n+        this.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_291/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:34:05.972643571 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_291/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:34:05.972643571 -0500\n@@ -94,8 +94,8 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -104,31 +104,25 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_361/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:38:24.128397656 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,11 +105,6 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +112,16 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +167,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1456/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:46:43.832556655 -0500\n@@ -118,17 +118,17 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        double sign = yMin * yMax;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +174,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x0 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -280,7 +281,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "double sign=yMin * yMax;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_184/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:27:26.410828955 -0500\n@@ -94,8 +94,11 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\t\tthis.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\tclearResult();\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,7 +109,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,15 +122,7 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+        double x0 = min;\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "setResult(initial,0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_554/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:50:17.494761439 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_554/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:50:17.494761439 -0500\n@@ -100,16 +100,15 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n+        verifyBracketing(min, max, f);\n+\t\tverifyInterval(min, max);\n \n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n@@ -118,17 +117,18 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tdouble x0 = min;\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -244,7 +244,8 @@\n                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);\n             if (Math.abs(dx) <= tolerance) {\n                 setResult(x1, i);\n-                return result;\n+                y1 = y2;\n+\t\t\t\treturn result;\n             }\n             if ((Math.abs(oldDelta) < tolerance) ||\n                     (Math.abs(y0) <= Math.abs(y1))) {\n@@ -280,7 +281,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "verifyInterval(min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 247, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "y1=y2;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1308/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:37:24.108332940 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1308/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:37:24.112332999 -0500\n@@ -106,7 +106,10 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +121,24 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        double sign = yMin * yMax;\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tdouble x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +290,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "double sign=yMin * yMax;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1419/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:44:27.946561257 -0500\n@@ -94,7 +94,8 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        double a = initial;\n+\t\tclearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -118,17 +119,20 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        double sign = yMin * yMax;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tdouble x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +178,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x0 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -280,7 +285,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double a=initial;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "double sign=yMin * yMax;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1120/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:25:12.341563787 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1120/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:25:12.345563845 -0500\n@@ -106,29 +106,23 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.defaultFunctionValueAccuracy = 1.0e-15;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1144/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:26:52.567039744 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1144/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:26:52.567039744 -0500\n@@ -106,29 +106,18 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+        this.defaultFunctionValueAccuracy = 1.0e-15;\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "this.resultComputed=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "if (f.value(min) == 0.0) {\n  return min;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_369/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:38:53.748828265 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_369/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:38:53.752828323 -0500\n@@ -94,8 +94,8 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -104,31 +104,24 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n+        verifyBracketing(min, max, f);\n+\t\tif (yInitial * yMin < 0) {\n+\t\t\treturn solve(f, min, yMin, initial, yInitial, min, yMin);\n+\t\t}\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "verifySequence(min,initial,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Replace", 
          "seed": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_577/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:51:52.704143628 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_577/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:51:52.704143628 -0500\n@@ -104,31 +104,26 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n+\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +169,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -280,7 +276,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BisectionSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "double yInitial=f.value(initial);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_783/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:04:43.855466297 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_783/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:04:43.859466355 -0500\n@@ -94,36 +94,30 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tdouble x0 = min;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.defaultFunctionValueAccuracy = 1.0e-15;\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1033/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:19:34.172580136 -0500\n@@ -104,18 +104,15 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        verifyInterval(min, max);\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n         if (Math.abs(yMax) <= functionValueAccuracy) {\n@@ -128,7 +125,8 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1150/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:27:12.683335927 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1150/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:27:12.687335986 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,7 +105,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +118,18 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.defaultFunctionValueAccuracy = 1.0e-15;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "Complex oldc=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_509/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:47:34.132389318 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_509/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:47:34.132389318 -0500\n@@ -100,16 +100,15 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n+        verifyBracketing(min, max, f);\n+\t\tverifyInterval(min, max);\n \n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n@@ -118,17 +117,18 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tdouble x0 = min;\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +280,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "verifyInterval(min,max);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1353/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:40:12.790812583 -0500\n@@ -94,7 +94,9 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        double a = initial;\n+\t\t\tdouble oldx = Double.POSITIVE_INFINITY;\n+\t\tclearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -118,17 +120,19 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +284,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double a=initial;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x2=max;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1341/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:39:27.610148538 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1341/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:39:27.610148538 -0500\n@@ -94,8 +94,9 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        double a = initial;\n+\t\t\tdouble oldx = Double.POSITIVE_INFINITY;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -104,31 +105,41 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        verifyInterval(min, max);\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        int i = 0;\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tthis.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +291,7 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n+                    p1 = 1.0 - r3;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "Complex oldc=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double a=initial;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x2=max;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_851/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:08:32.422827978 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_851/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:08:32.422827978 -0500\n@@ -94,41 +94,43 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n-        if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+        double b = initial;\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n+        verifyBracketing(min, max, f);\n+\t\tdouble x0 = min;\n+\t\tif (f.value(max) == 0.0) {\n+\t\t\treturn max;\n+\t\t}\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+        double x1 = min;\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tint i = 0;\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,7 +272,8 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n@@ -280,7 +283,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "Complex oldc=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "return new SecantSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "double b=initial;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Replace", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_441/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:43:19.964697257 -0500\n@@ -94,8 +94,8 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        this.iterationCount = iterationCount;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,29 +106,27 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tdouble x0 = min;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +278,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1181/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:29:21.205227777 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1181/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:29:21.209227836 -0500\n@@ -106,12 +106,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n@@ -123,12 +119,18 @@\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +282,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_793/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:05:13.611904074 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_793/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:05:13.615904133 -0500\n@@ -104,24 +104,19 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.defaultFunctionValueAccuracy = 1.0e-15;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BisectionSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_191/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:27:51.563195143 -0500\n@@ -106,11 +106,6 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +113,17 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tsetResult(max, 0);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +169,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "setResult(max,0);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_958/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:14:45.808325747 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_958/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:14:45.808325747 -0500\n@@ -94,23 +94,19 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n+        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +114,25 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        double x1 = min;\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tint i = 0;\n+\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,7 +274,8 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n@@ -280,7 +285,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return max;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1544/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:52:35.425716642 -0500\n@@ -97,7 +97,8 @@\n         clearResult();\n         verifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n+        setResult(initial, 0);\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n@@ -118,17 +119,16 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\tdouble x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +174,16 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                if (sign < 0) {\n+\t\t\t\t\tret = solve(f, min, yMin, max, yMax, min, yMin);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (yMin == 0.0) {\n+\t\t\t\t\t\tret = min;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tret = max;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -244,7 +253,8 @@\n                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);\n             if (Math.abs(dx) <= tolerance) {\n                 setResult(x1, i);\n-                return result;\n+                x1 = x2;\n+\t\t\t\treturn result;\n             }\n             if ((Math.abs(oldDelta) < tolerance) ||\n                     (Math.abs(y0) <= Math.abs(y1))) {\n@@ -280,7 +290,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "setResult(initial,0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "if (sign < 0) {\n  ret=solve(f,min,yMin,max,yMax,min,yMin);\n}\n else {\n  if (yMin == 0.0) {\n    ret=min;\n  }\n else {\n    ret=max;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 247, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "x1=x2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_944/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:14:00.527657281 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -104,9 +103,11 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -123,12 +124,14 @@\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+        if (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tint i = 0;\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,7 +273,8 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1267/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:34:32.989816284 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1267/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:34:32.989816284 -0500\n@@ -104,9 +104,15 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        if (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -123,12 +129,21 @@\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tthis.iterationCount = iterationCount;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +295,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_863/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:09:21.351547308 -0500\n@@ -100,17 +100,12 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,7 +113,11 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n@@ -128,7 +127,8 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,17 +270,18 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||\n                         p >= Math.abs(0.5 * oldDelta * p1)) {\n-                    // Inverse quadratic interpolation gives a value\n+                    delta = (x0 - x1) / (1 - y0 / y1);\n+\t\t\t\t\t// Inverse quadratic interpolation gives a value\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 282, 
          "faulty": "delta=0.5 * dx;", 
          "type": "InsertBefore", 
          "seed": "delta=(x0 - x1) / (1 - y0 / y1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (dx <= 0.0) {\n  x1=x1 - 0.5 * tolerance;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "final UnivariateRealFunction derivative=((DifferentiableUnivariateRealFunction)f).derivative();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_588/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:52:27.492648611 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_588/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:52:27.496648668 -0500\n@@ -106,29 +106,26 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n-        // return the second endpoint if it is good enough\n+        if (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        double x0 = min;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +277,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "return new UnivariateRealSolverFactoryImpl();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 120, 
          "faulty": "double yMax=f.value(max);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1025/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:19:03.728131185 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1025/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:19:03.728131185 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -104,12 +103,15 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tif (!resultComputed) {\n+\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t.createIllegalStateException(\"no result available\");\n+\t\t}\n \n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n@@ -118,17 +120,21 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +286,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (!resultComputed) {\n  throw MathRuntimeException.createIllegalStateException(\"no result available\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1007/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:17:49.335033934 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1007/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:17:49.335033934 -0500\n@@ -94,17 +94,18 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n-        if (Math.abs(yInitial) <= functionValueAccuracy) {\n+        verifyInterval(min, max);\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        verifyInterval(min, max);\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n         if (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n@@ -118,17 +119,22 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +286,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "Complex H=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1560/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:53:35.258594435 -0500\n@@ -95,9 +95,11 @@\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         clearResult();\n-        verifySequence(min, initial, max);\n+        int i = 0;\n+\t\tverifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n+        setResult(initial, 0);\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n@@ -118,17 +120,19 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tdouble x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +178,16 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                if (sign < 0) {\n+\t\t\t\t\tret = solve(f, min, yMin, max, yMax, min, yMin);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (yMin == 0.0) {\n+\t\t\t\t\t\tret = min;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tret = max;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -244,7 +257,8 @@\n                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);\n             if (Math.abs(dx) <= tolerance) {\n                 setResult(x1, i);\n-                return result;\n+                x1 = x2;\n+\t\t\t\treturn result;\n             }\n             if ((Math.abs(oldDelta) < tolerance) ||\n                     (Math.abs(y0) <= Math.abs(y1))) {\n@@ -280,7 +294,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "setResult(initial,0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "if (sign < 0) {\n  ret=solve(f,min,yMin,max,yMax,min,yMin);\n}\n else {\n  if (yMin == 0.0) {\n    ret=min;\n  }\n else {\n    ret=max;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 247, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "x1=x2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1043/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:20:19.169243595 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,29 +105,29 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        int i = 0;\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +279,7 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n+                    p1 = 1.0 - r3;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "Complex oldc=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_135/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:24:06.211913499 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_135/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:24:06.211913499 -0500\n@@ -94,8 +94,10 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\tclearResult();\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,7 +108,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,10 +121,7 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        double x0 = min;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_636/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:55:38.087429518 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_636/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:55:38.087429518 -0500\n@@ -100,35 +100,34 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        double x0 = min;\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tthis.resultComputed = true;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +173,9 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\titerationCount += this.iterationCount;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -280,7 +281,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "iterationCount+=this.iterationCount;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_871/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:09:46.331914520 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_871/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:09:46.331914520 -0500\n@@ -94,41 +94,47 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n-        // return the second endpoint if it is good enough\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tdouble x0 = min;\n+\t\t// return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tif (!resultComputed) {\n+\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t.createIllegalStateException(\"no result available\");\n+\t\t}\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tint i = 0;\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,17 +276,18 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||\n                         p >= Math.abs(0.5 * oldDelta * p1)) {\n-                    // Inverse quadratic interpolation gives a value\n+                    delta = (x0 - x1) / (1 - y0 / y1);\n+\t\t\t\t\t// Inverse quadratic interpolation gives a value\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 282, 
          "faulty": "delta=0.5 * dx;", 
          "type": "InsertBefore", 
          "seed": "delta=(x0 - x1) / (1 - y0 / y1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "if (!resultComputed) {\n  throw MathRuntimeException.createIllegalStateException(\"no result available\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "setup(f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "Complex oldc=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1383/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:42:13.360584271 -0500\n@@ -206,7 +206,8 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n+            iterationCount += this.iterationCount;\n+\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n                     \"endpoints do not specify an interval: [{0}, {1}]\",\n                     lower, upper);\n         }\n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1383/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:42:13.360584271 -0500\n@@ -94,8 +94,9 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        double a = initial;\n+\t\t\tdouble oldx = Double.POSITIVE_INFINITY;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -118,17 +119,14 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double a=initial;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "InsertBefore", 
          "seed": "iterationCount+=this.iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "int numIterations=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1199/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:30:21.742118857 -0500\n@@ -104,31 +104,30 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        verifyInterval(min, max);\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n-        // return the second endpoint if it is good enough\n+        verifyBracketing(min, max, f);\n+\t\t// return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tdouble x1 = min;\n+\t\tthis.resultComputed = false;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +279,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_249/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:31:25.798313273 -0500\n@@ -94,8 +94,10 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\tclearResult();\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,7 +108,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +121,11 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +277,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "return new NewtonSolver();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_653/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:56:37.740308659 -0500\n@@ -104,9 +104,9 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,11 +118,6 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n@@ -174,7 +169,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                iterationCount += this.iterationCount;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "iterationCount+=this.iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "Replace", 
          "seed": "double yMin=f.value(min);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1424/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:44:43.398788198 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1424/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:44:43.398788198 -0500\n@@ -97,7 +97,8 @@\n         clearResult();\n         verifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n+        setResult(initial, 0);\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n@@ -118,17 +119,13 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "setResult(initial,0);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1334/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:39:04.117803224 -0500\n@@ -94,7 +94,9 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        double a = initial;\n+\t\t\tdouble oldx = Double.POSITIVE_INFINITY;\n+\t\tdouble b = initial;\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,7 +108,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +121,18 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -276,11 +280,14 @@\n                 }\n                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||\n                         p >= Math.abs(0.5 * oldDelta * p1)) {\n-                    // Inverse quadratic interpolation gives a value\n+                    if (f == null) {\n+\t\t\t\t\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t// Inverse quadratic interpolation gives a value\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n@@ -293,7 +300,8 @@\n             if (Math.abs(delta) > tolerance) {\n                 x1 = x1 + delta;\n             } else if (dx > 0.0) {\n-                x1 = x1 + 0.5 * tolerance;\n+                oldDelta = delta;\n+\t\t\t\tx1 = x1 + 0.5 * tolerance;\n             } else if (dx <= 0.0) {\n                 x1 = x1 - 0.5 * tolerance;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double a=initial;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 282, 
          "faulty": "delta=0.5 * dx;", 
          "type": "InsertBefore", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 296, 
          "faulty": "x1=x1 + 0.5 * tolerance;", 
          "type": "InsertBefore", 
          "seed": "oldDelta=delta;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Replace", 
          "seed": "double b=initial;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_998/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:17:24.450666839 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_998/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:17:24.450666839 -0500\n@@ -111,24 +111,23 @@\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +279,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "return min;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1413/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:44:07.722264219 -0500\n@@ -94,7 +94,8 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\tclearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,7 +107,9 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +121,18 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        double sign = yMin * yMax;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +178,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x0 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -280,7 +285,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "double sign=yMin * yMax;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1236/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:32:46.648251676 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1236/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:32:46.652251735 -0500\n@@ -94,7 +94,9 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        double a = initial;\n+\t\t\tdouble oldx = Double.POSITIVE_INFINITY;\n+\t\tclearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,7 +108,9 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +122,20 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +287,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double a=initial;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x2=max;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1173/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:28:46.356714880 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1173/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:28:46.360714939 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -104,7 +103,8 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        clearResult();\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n         if (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n@@ -123,12 +123,12 @@\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+        this.resultComputed = false;\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -170,16 +170,19 @@\n             if (Math.abs(yMin) <= functionValueAccuracy) {\n                 setResult(min, 0);\n                 ret = min;\n-            } else if (Math.abs(yMax) <= functionValueAccuracy) {\n-                setResult(max, 0);\n-                ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw MathRuntimeException.createIllegalArgumentException(\n-                        \"function values at endpoints do not have different signs.  \" +\n-                        \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n-                        min, max, yMin, yMax);\n-            }\n+\t\t\t\tthis.resultComputed = true;\n+\t\t\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n+\t\t\t\t\tsetResult(max, 0);\n+\t\t\t\t\tret = max;\n+\t\t\t\t} else {\n+\t\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t\t.createIllegalArgumentException(\n+\t\t\t\t\t\t\t\t\t\"function values at endpoints do not have different signs.  \"\n+\t\t\t\t\t\t\t\t\t\t\t+ \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n+\t\t\t\t\t\t\t\t\tmin, max, yMin, yMax);\n+\t\t\t\t}\n+\t\t\t}\n         } else if (sign < 0){\n             // solve using only the first endpoint as initial guess\n             ret = solve(f, min, yMin, max, yMax, min, yMin);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "Complex oldc=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "this.resultComputed=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "clearResult();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 173, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(max,0);\n  ret=max;\n}\n else {\n  throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);\n}", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=true;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_342/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:37:09.219308542 -0500\n@@ -94,8 +94,11 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\t\tthis.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\tclearResult();\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,7 +109,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +122,12 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +279,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "setResult(initial,0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_617/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:54:22.670320295 -0500\n@@ -100,17 +100,12 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +113,20 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tthis.resultComputed = true;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +172,9 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\titerationCount += this.iterationCount;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -280,7 +280,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "iterationCount+=this.iterationCount;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_247/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:31:20.874241622 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_247/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:31:20.878241680 -0500\n@@ -94,8 +94,10 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        this.iterationCount = iterationCount;\n+\t\tclearResult();\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,7 +108,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_451/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:43:59.669274124 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_451/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:43:59.669274124 -0500\n@@ -100,16 +100,14 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n+        verifyInterval(min, max);\n \n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n@@ -118,17 +116,20 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n+        this.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +281,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "verifyInterval(min,max);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_830/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:07:22.289796733 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_830/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:07:22.289796733 -0500\n@@ -106,23 +106,14 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_312/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:35:24.573786802 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_312/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:35:24.573786802 -0500\n@@ -94,8 +94,8 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,29 +106,24 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +169,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_306/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:35:04.669497318 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_306/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:35:04.673497376 -0500\n@@ -94,8 +94,9 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\t\tthis.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -104,13 +105,9 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +115,12 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tdouble x0 = min;\n \n-        // full Brent algorithm starting with provided initial guess\n+        this.iterationCount = iterationCount;\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "setResult(initial,0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_133/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:24:01.171840083 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_133/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:24:01.175840141 -0500\n@@ -118,18 +118,14 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        double x0 = min;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n+        return solve(f, min, max);\n \n     }\n \n@@ -276,7 +272,10 @@\n                 }\n                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||\n                         p >= Math.abs(0.5 * oldDelta * p1)) {\n-                    // Inverse quadratic interpolation gives a value\n+                    if (delta / oldDelta > 1) {\n+\t\t\t\t\t\t\t\tdelta = 0.5 * oldDelta;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t// Inverse quadratic interpolation gives a value\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "Replace", 
          "seed": "return solve(f,min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 282, 
          "faulty": "delta=0.5 * dx;", 
          "type": "InsertBefore", 
          "seed": "if (delta / oldDelta > 1) {\n  delta=0.5 * oldDelta;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_828/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:07:17.221722203 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_828/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:07:17.225722261 -0500\n@@ -94,41 +94,43 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n-        // return the second endpoint if it is good enough\n+        double x0 = min;\n+\t\t// return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+        double x1 = min;\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tint i = 0;\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,7 +272,8 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n@@ -280,7 +283,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_382/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:39:39.101487533 -0500\n@@ -95,21 +95,20 @@\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         clearResult();\n-        verifySequence(min, initial, max);\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n+        verifyBracketing(min, max, f);\n+\t\tverifySequence(min, initial, max);\n \n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n@@ -123,7 +122,8 @@\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n@@ -280,7 +280,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "verifySequence(min,initial,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_847/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:08:17.346606313 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_847/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:08:17.350606372 -0500\n@@ -94,41 +94,52 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tdouble x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\tthis.resultComputed = true;\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +291,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_419/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:41:54.343453119 -0500\n@@ -94,10 +94,11 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        this.iterationCount = iterationCount;\n+\t\tverifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n+        double x1 = min;\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n@@ -106,29 +107,30 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n+        double x0 = min;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +282,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_283/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:33:35.976207230 -0500\n@@ -106,7 +106,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -123,11 +124,6 @@\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "verifyBracketing(min,max,f);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_253/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:31:40.562528105 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_253/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:31:40.566528163 -0500\n@@ -106,29 +106,26 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +277,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1242/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:33:01.872475701 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1242/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:33:01.876475760 -0500\n@@ -106,7 +106,9 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +120,16 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        double sign = yMin * yMax;\n+\t\tdouble x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +281,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "double sign=yMin * yMax;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1077/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:22:22.995068820 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1077/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:22:22.999068878 -0500\n@@ -99,36 +99,34 @@\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n-        if (Math.abs(yInitial) <= functionValueAccuracy) {\n+        verifyInterval(min, max);\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n             return result;\n         }\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tthis.resultComputed = true;\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +278,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "this.resultComputed=true;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_686/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:58:50.142259302 -0500\n@@ -100,35 +100,31 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n-\n-        // return the first endpoint if it is good enough\n-        double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\n+        this.iterationCount = 0;\n+\t\tdouble yMin = f.value(min);\n+        int i = 1;\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tdouble x0 = min;\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tthis.resultComputed = true;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +170,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                iterationCount += this.iterationCount;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "iterationCount+=this.iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "Replace", 
          "seed": "double yMin=f.value(min);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Replace", 
          "seed": "int i=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_661/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:57:08.536762453 -0500\n@@ -106,11 +106,6 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +113,17 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tdouble x0 = min;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +169,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                iterationCount += this.iterationCount;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "iterationCount+=this.iterationCount;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_982/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:16:21.881743672 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_982/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:16:21.885743731 -0500\n@@ -94,22 +94,25 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tif (!resultComputed) {\n+\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t.createIllegalStateException(\"no result available\");\n+\t\t}\n \n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n@@ -118,17 +121,22 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        this.resultComputed = true;\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +288,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (!resultComputed) {\n  throw MathRuntimeException.createIllegalStateException(\"no result available\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_682/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:58:34.686031634 -0500\n@@ -94,23 +94,16 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n-        // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +111,26 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tthis.resultComputed = true;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +176,9 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\titerationCount += this.iterationCount;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -280,7 +284,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "iterationCount+=this.iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "Replace", 
          "seed": "double yMin=f.value(min);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_883/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:10:31.236574554 -0500\n@@ -106,7 +106,10 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        if (yInitial * yMin < 0) {\n+\t\t\treturn solve(f, min, yMin, initial, yInitial, min, yMin);\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +121,17 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+        int i = 0;\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +283,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_586/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:52:22.364574175 -0500\n@@ -222,7 +222,8 @@\n      * @throws IllegalArgumentException\n      */\n     protected void verifySequence(final double lower, final double initial, final double upper) {\n-        if (!isSequence(lower, initial, upper)) {\n+        this.resultComputed = false;\n+\t\tif (!isSequence(lower, initial, upper)) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                     \"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",\n                     lower, initial, upper);\n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_586/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:52:22.368574232 -0500\n@@ -94,7 +94,8 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        this.resultComputed = true;\n+\t\tclearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,29 +107,29 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tthis.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +175,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 225, 
          "faulty": "if (!isSequence(lower,initial,upper)) {\n  throw MathRuntimeException.createIllegalArgumentException(\"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",lower,initial,upper);\n}", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=true;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_897/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:11:16.741243321 -0500\n@@ -106,17 +106,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n-        // return the second endpoint if it is good enough\n+        verifyBracketing(min, max, f);\n+\t\t// return the second endpoint if it is good enough\n         double yMax = f.value(max);\n         if (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "Complex oldc=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_992/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:17:03.166352825 -0500\n@@ -106,7 +106,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -123,12 +124,14 @@\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +283,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_386/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:39:49.165633822 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_386/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:39:49.165633822 -0500\n@@ -94,7 +94,7 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        setResult(max, 0);\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -104,13 +104,9 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,7 +114,9 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n@@ -128,7 +126,8 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BisectionSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Replace", 
          "seed": "verifySequence(min,initial,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Replace", 
          "seed": "setResult(max,0);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_845/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:08:12.434534089 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_845/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:08:12.434534089 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,29 +105,28 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +278,7 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n+                    p1 = 1.0 - r3;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_522/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:48:23.645108345 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n@@ -222,7 +224,8 @@\n      * @throws IllegalArgumentException\n      */\n     protected void verifySequence(final double lower, final double initial, final double upper) {\n-        if (!isSequence(lower, initial, upper)) {\n+        this.resultComputed = false;\n+\t\tif (!isSequence(lower, initial, upper)) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                     \"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",\n                     lower, initial, upper);\n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_522/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:48:23.645108345 -0500\n@@ -106,29 +106,28 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tdouble x1 = min;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tthis.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +173,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -276,7 +276,12 @@\n                 }\n                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||\n                         p >= Math.abs(0.5 * oldDelta * p1)) {\n-                    // Inverse quadratic interpolation gives a value\n+                    if (p > 0.0) {\n+\t\t\t\t\t\t\t\tp1 = -p1;\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tp = -p;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t// Inverse quadratic interpolation gives a value\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 225, 
          "faulty": "if (!isSequence(lower,initial,upper)) {\n  throw MathRuntimeException.createIllegalArgumentException(\"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",lower,initial,upper);\n}", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 282, 
          "faulty": "delta=0.5 * dx;", 
          "type": "InsertBefore", 
          "seed": "if (p > 0.0) {\n  p1=-p1;\n}\n else {\n  p=-p;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_706/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:00:05.207364831 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_706/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:00:05.207364831 -0500\n@@ -94,41 +94,51 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n+        double x0 = min;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\tif (Math.abs(yInitial) <= functionValueAccuracy) {\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,7 +280,8 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n@@ -280,7 +291,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_689/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:58:59.898403002 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_689/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:58:59.902403062 -0500\n@@ -104,31 +104,23 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "Replace", 
          "seed": "double yMin=f.value(min);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_796/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:05:22.212030592 -0500\n@@ -106,7 +106,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,10 +119,8 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tdouble x0 = min;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n@@ -174,7 +173,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                iterationCount += this.iterationCount;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -270,13 +270,15 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||\n                         p >= Math.abs(0.5 * oldDelta * p1)) {\n-                    // Inverse quadratic interpolation gives a value\n+                    delta = (x0 - x1) / (1 - y0 / y1);\n+\t\t\t\t\t// Inverse quadratic interpolation gives a value\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "iterationCount+=this.iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 282, 
          "faulty": "delta=0.5 * dx;", 
          "type": "InsertBefore", 
          "seed": "delta=(x0 - x1) / (1 - y0 / y1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1279/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:35:18.402484294 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1279/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:35:18.402484294 -0500\n@@ -106,11 +106,6 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +113,14 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +272,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_760/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:03:19.410223716 -0500\n@@ -106,19 +106,17 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n@@ -270,13 +268,15 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||\n                         p >= Math.abs(0.5 * oldDelta * p1)) {\n-                    // Inverse quadratic interpolation gives a value\n+                    delta = (x0 - x1) / (1 - y0 / y1);\n+\t\t\t\t\t// Inverse quadratic interpolation gives a value\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 282, 
          "faulty": "delta=0.5 * dx;", 
          "type": "InsertBefore", 
          "seed": "delta=(x0 - x1) / (1 - y0 / y1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_262/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:32:14.943028344 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_262/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:32:14.943028344 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -104,31 +103,21 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tdouble x0 = min;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +269,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y2=y0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1272/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:34:52.826108082 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1272/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:34:52.826108082 -0500\n@@ -106,29 +106,16 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n-        // return the second endpoint if it is good enough\n+        verifyBracketing(min, max, f);\n+\t\t// return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        this.iterationCount = iterationCount;\n+\t\tverifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -243,7 +230,10 @@\n             double tolerance =\n                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);\n             if (Math.abs(dx) <= tolerance) {\n-                setResult(x1, i);\n+                if (delta / oldDelta > 1) {\n+\t\t\t\t\tdelta = 0.5 * oldDelta;\n+\t\t\t\t}\n+\t\t\t\tsetResult(x1, i);\n                 return result;\n             }\n             if ((Math.abs(oldDelta) < tolerance) ||\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "this.resultComputed=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "if (f.value(min) == 0.0) {\n  return min;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 246, 
          "faulty": "setResult(x1,i);", 
          "type": "InsertBefore", 
          "seed": "if (delta / oldDelta > 1) {\n  delta=0.5 * oldDelta;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double b=initial;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_788/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:04:58.751685455 -0500\n@@ -100,13 +100,14 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,7 +119,12 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n@@ -128,7 +134,10 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,17 +279,18 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||\n                         p >= Math.abs(0.5 * oldDelta * p1)) {\n-                    // Inverse quadratic interpolation gives a value\n+                    delta = (x0 - x1) / (1 - y0 / y1);\n+\t\t\t\t\t// Inverse quadratic interpolation gives a value\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 282, 
          "faulty": "delta=0.5 * dx;", 
          "type": "InsertBefore", 
          "seed": "delta=(x0 - x1) / (1 - y0 / y1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_315/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:35:34.553931946 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_315/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:35:34.557932004 -0500\n@@ -94,8 +94,9 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -104,31 +105,25 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "verifySequence(min,initial,max);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_826/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:07:12.461652201 -0500\n@@ -106,29 +106,28 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,13 +269,15 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||\n                         p >= Math.abs(0.5 * oldDelta * p1)) {\n-                    // Inverse quadratic interpolation gives a value\n+                    delta = (x0 - x1) / (1 - y0 / y1);\n+\t\t\t\t\t// Inverse quadratic interpolation gives a value\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 282, 
          "faulty": "delta=0.5 * dx;", 
          "type": "InsertBefore", 
          "seed": "delta=(x0 - x1) / (1 - y0 / y1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_666/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:57:28.705059613 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_666/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:57:28.709059672 -0500\n@@ -106,11 +106,6 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +113,21 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tdouble x0 = min;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,7 +269,8 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_469/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:44:59.606144865 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n@@ -222,7 +223,8 @@\n      * @throws IllegalArgumentException\n      */\n     protected void verifySequence(final double lower, final double initial, final double upper) {\n-        if (!isSequence(lower, initial, upper)) {\n+        this.resultComputed = false;\n+\t\tif (!isSequence(lower, initial, upper)) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                     \"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",\n                     lower, initial, upper);\n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_469/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:44:59.606144865 -0500\n@@ -95,7 +95,8 @@\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         clearResult();\n-        verifySequence(min, initial, max);\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -104,31 +105,31 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +175,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 225, 
          "faulty": "if (!isSequence(lower,initial,upper)) {\n  throw MathRuntimeException.createIllegalArgumentException(\"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",lower,initial,upper);\n}", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_776/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:04:19.079101756 -0500\n@@ -94,36 +94,33 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n+        double x0 = min;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n@@ -174,7 +171,11 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\t\t\tsetResult(yMin, 0);\n+\t\t\t\t\treturn result;\n+\t\t\t\t}\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -270,7 +271,8 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "this.iterationCount=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1497/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:49:14.618770072 -0500\n@@ -95,9 +95,11 @@\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         clearResult();\n-        verifySequence(min, initial, max);\n+        int i = 0;\n+\t\tverifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n+        setResult(initial, 0);\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n@@ -118,17 +120,21 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        double sign = yMin * yMax;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +180,17 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                if (sign < 0) {\n+\t\t\t\t\tret = solve(f, min, yMin, max, yMax, min, yMin);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (yMin == 0.0) {\n+\t\t\t\t\t\tret = min;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tret = max;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tdouble x0 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -280,7 +296,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "setResult(initial,0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "if (sign < 0) {\n  ret=solve(f,min,yMin,max,yMax,min,yMin);\n}\n else {\n  if (yMin == 0.0) {\n    ret=min;\n  }\n else {\n    ret=max;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "double sign=yMin * yMax;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1092/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:23:22.679948313 -0500\n@@ -100,33 +100,22 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n-        // return the first endpoint if it is good enough\n+        verifyInterval(min, max);\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+        double b = initial;\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n@@ -280,7 +269,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double b=initial;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "verifyBracketing(min,max,f);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_230/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:30:10.417216299 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_230/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:30:10.417216299 -0500\n@@ -94,7 +94,8 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\tclearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -118,18 +119,14 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n+        verifyBracketing(min, max, f);\n+\t\treturn solve(f, min, max);\n \n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "Replace", 
          "seed": "return solve(f,min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double yMin=f.value(min);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1451/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:46:23.308255311 -0500\n@@ -94,7 +94,8 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\tclearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -118,17 +119,15 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +279,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x2=max;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_949/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:14:15.627880214 -0500\n@@ -106,29 +106,21 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n-        // return the second endpoint if it is good enough\n+        verifyBracketing(min, max, f);\n+\t\t// return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +272,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "Complex oldc=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_399/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:40:44.170433301 -0500\n@@ -94,8 +94,8 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        this.iterationCount = iterationCount;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,29 +106,28 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +279,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1429/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:44:58.287006846 -0500\n@@ -94,10 +94,12 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        double a = initial;\n+\t\tclearResult();\n         verifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n+        setResult(initial, 0);\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n@@ -106,7 +108,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +121,13 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +279,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double a=initial;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "setResult(initial,0);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_324/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:36:04.746371025 -0500\n@@ -94,8 +94,10 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\t\tthis.iterationCount = iterationCount;\n+\t\tdouble x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,7 +108,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +121,16 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +282,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_869/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:09:41.423842374 -0500\n@@ -97,7 +97,8 @@\n         clearResult();\n         verifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n+        int numIterations = 0;\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n@@ -106,24 +107,17 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return solve(f,min,yMin,max,yMax,initial,yInitial);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "int numIterations=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_437/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:43:04.260469079 -0500\n@@ -222,7 +222,8 @@\n      * @throws IllegalArgumentException\n      */\n     protected void verifySequence(final double lower, final double initial, final double upper) {\n-        if (!isSequence(lower, initial, upper)) {\n+        this.resultComputed = false;\n+\t\tif (!isSequence(lower, initial, upper)) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                     \"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",\n                     lower, initial, upper);\n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_437/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:43:04.264469138 -0500\n@@ -94,8 +94,8 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,11 +106,6 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +113,20 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +172,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "verifySequence(min,initial,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 225, 
          "faulty": "if (!isSequence(lower,initial,upper)) {\n  throw MathRuntimeException.createIllegalArgumentException(\"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",lower,initial,upper);\n}", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_703/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:59:54.963213975 -0500\n@@ -106,29 +106,26 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tverifyBracketing(min, max, f);\n+\t\tdouble x0 = min;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +171,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                iterationCount += this.iterationCount;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "iterationCount+=this.iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_498/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:46:59.083880303 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_498/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:46:59.083880303 -0500\n@@ -100,16 +100,15 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifySequence(min, initial, max);\n \n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n@@ -118,17 +117,17 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        double x0 = min;\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tthis.resultComputed = true;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +173,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                iterationCount += this.iterationCount;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -280,7 +280,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "verifySequence(min,initial,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "iterationCount+=this.iterationCount;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_130/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:23:51.131693831 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_130/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:23:51.131693831 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -104,13 +103,9 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,7 +113,8 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n+        this.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n@@ -128,7 +124,8 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1249/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:33:27.176848033 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1249/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:33:27.180848092 -0500\n@@ -116,7 +116,10 @@\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n-        // return the second endpoint if it is good enough\n+        if (f.value(min) == 0.0) {\n+\t\t\treturn min;\n+\t\t}\n+\t\t// return the second endpoint if it is good enough\n         double yMax = f.value(max);\n         if (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n@@ -128,7 +131,8 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 120, 
          "faulty": "double yMax=f.value(max);", 
          "type": "InsertBefore", 
          "seed": "if (f.value(min) == 0.0) {\n  return min;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1088/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:23:07.951731301 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1088/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:23:07.955731360 -0500\n@@ -104,18 +104,14 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        verifyInterval(min, max);\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n         if (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n         if (Math.abs(yMax) <= functionValueAccuracy) {\n@@ -128,7 +124,10 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_463/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:44:39.501852808 -0500\n@@ -106,15 +106,9 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n+\t\t\treturn solve(f, min, yMin, initial, yInitial, min, yMin);\n+\t\t}\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n@@ -128,7 +122,8 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +275,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Replace", 
          "seed": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "return new UnivariateRealSolverFactoryImpl();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_256/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:31:50.618674427 -0500\n@@ -94,8 +94,8 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,29 +106,26 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +277,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_581/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:52:07.540358991 -0500\n@@ -222,7 +222,8 @@\n      * @throws IllegalArgumentException\n      */\n     protected void verifySequence(final double lower, final double initial, final double upper) {\n-        if (!isSequence(lower, initial, upper)) {\n+        this.resultComputed = false;\n+\t\tif (!isSequence(lower, initial, upper)) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                     \"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",\n                     lower, initial, upper);\n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_581/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:52:07.544359050 -0500\n@@ -106,11 +106,6 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -128,7 +123,9 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tthis.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +171,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 225, 
          "faulty": "if (!isSequence(lower,initial,upper)) {\n  throw MathRuntimeException.createIllegalArgumentException(\"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",lower,initial,upper);\n}", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_211/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:29:05.924277623 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_211/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:29:05.924277623 -0500\n@@ -94,8 +94,9 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\t\tthis.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -104,13 +105,9 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +115,11 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tdouble x0 = min;\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Delete", 
          "seed": "setResult(initial,0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1284/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:35:38.714783054 -0500\n@@ -94,7 +94,9 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        double a = initial;\n+\t\t\tdouble oldx = Double.POSITIVE_INFINITY;\n+\t\tclearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,7 +108,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +121,18 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +284,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double a=initial;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x2=max;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_880/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:10:21.200427044 -0500\n@@ -106,7 +106,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +119,24 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +288,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1136/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:26:22.182592342 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1136/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:26:22.182592342 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -104,31 +103,32 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        verifyInterval(min, max);\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -244,7 +244,8 @@\n                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);\n             if (Math.abs(dx) <= tolerance) {\n                 setResult(x1, i);\n-                return result;\n+                y0 = y1;\n+\t\t\t\treturn result;\n             }\n             if ((Math.abs(oldDelta) < tolerance) ||\n                     (Math.abs(y0) <= Math.abs(y1))) {\n@@ -280,7 +281,7 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n+                    p1 = 1.0 - r3;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 247, 
          "faulty": "return result;", 
          "type": "InsertBefore", 
          "seed": "y0=y1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_213/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:29:10.904350112 -0500\n@@ -95,7 +95,8 @@\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         clearResult();\n-        verifySequence(min, initial, max);\n+        double x2 = max;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,7 +107,8 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1521/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:50:54.420234639 -0500\n@@ -95,9 +95,11 @@\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         clearResult();\n-        verifySequence(min, initial, max);\n+        int i = 0;\n+\t\tverifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n+        setResult(initial, 0);\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n@@ -119,16 +121,17 @@\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n         if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tdouble x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +177,16 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                if (sign < 0) {\n+\t\t\t\t\tret = solve(f, min, yMin, max, yMax, min, yMin);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (yMin == 0.0) {\n+\t\t\t\t\t\tret = min;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tret = max;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "setResult(initial,0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "if (sign < 0) {\n  ret=solve(f,min,yMin,max,yMax,min,yMin);\n}\n else {\n  if (yMin == 0.0) {\n    ret=min;\n  }\n else {\n    ret=max;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "oldDelta=delta;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1048/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:20:34.193465097 -0500\n@@ -104,9 +104,11 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        verifyInterval(min, max);\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +120,14 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        int i = 0;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_938/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:13:40.603363107 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_938/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:13:40.603363107 -0500\n@@ -94,41 +94,45 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tdouble x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        this.resultComputed = true;\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +284,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1056/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:21:04.073905592 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1056/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:21:04.073905592 -0500\n@@ -123,12 +123,11 @@\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+        double x1 = min;\n+\t\tint numIterations = 0;\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +279,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "int numIterations=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1406/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:43:42.569894779 -0500\n@@ -94,7 +94,9 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t\tclearResult();\n+\t\tclearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -118,17 +120,13 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "clearResult();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_726/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:01:15.396398299 -0500\n@@ -100,17 +100,12 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +113,17 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        // full Brent algorithm starting with provided initial guess\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n+\n+        double x1 = min;\n+\t\tint i = 1;\n+\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tthis.resultComputed = true;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +169,9 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\titerationCount += this.iterationCount;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -280,7 +277,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "iterationCount+=this.iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "Replace", 
          "seed": "int i=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_505/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:47:24.256245888 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n@@ -222,7 +224,8 @@\n      * @throws IllegalArgumentException\n      */\n     protected void verifySequence(final double lower, final double initial, final double upper) {\n-        if (!isSequence(lower, initial, upper)) {\n+        this.resultComputed = false;\n+\t\tif (!isSequence(lower, initial, upper)) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                     \"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",\n                     lower, initial, upper);\n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_505/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:47:24.260245947 -0500\n@@ -106,29 +106,28 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tthis.functionValueAccuracy = defaultFunctionValueAccuracy;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +173,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 225, 
          "faulty": "if (!isSequence(lower,initial,upper)) {\n  throw MathRuntimeException.createIllegalArgumentException(\"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",lower,initial,upper);\n}", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.functionValueAccuracy=defaultFunctionValueAccuracy;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_164/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:26:06.733668804 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_164/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:26:06.737668862 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -104,21 +103,13 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n+        this.iterationCount = iterationCount;\n+\t\tif (Math.abs(yMax) <= functionValueAccuracy) {\n             setResult(yMax, 0);\n             return result;\n         }\n@@ -128,7 +119,8 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1097/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:23:37.668169146 -0500\n@@ -104,31 +104,33 @@\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n+        verifyInterval(min, max);\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +282,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "Delete", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_391/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:40:09.209925170 -0500\n@@ -206,9 +206,11 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (lower >= upper) {\n+\t\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\t\"endpoints do not specify an interval: [{0}, {1}]\",\n+\t\t\t\t\t\tlower, upper);\n+\t\t\t}\n         }\n     }\n \n@@ -222,7 +224,8 @@\n      * @throws IllegalArgumentException\n      */\n     protected void verifySequence(final double lower, final double initial, final double upper) {\n-        if (!isSequence(lower, initial, upper)) {\n+        this.resultComputed = false;\n+\t\tif (!isSequence(lower, initial, upper)) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                     \"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",\n                     lower, initial, upper);\n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_391/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:40:09.209925170 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,29 +105,28 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +172,8 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 225, 
          "faulty": "if (!isSequence(lower,initial,upper)) {\n  throw MathRuntimeException.createIllegalArgumentException(\"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\",lower,initial,upper);\n}", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1069/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:21:48.098554515 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1069/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:21:48.102554574 -0500\n@@ -94,7 +94,7 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n+        double a = initial;\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -128,7 +128,8 @@\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +281,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Replace", 
          "seed": "double a=initial;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1433/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:45:12.999222901 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1433/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:45:13.003222960 -0500\n@@ -95,7 +95,8 @@\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         clearResult();\n-        verifySequence(min, initial, max);\n+        int i = 0;\n+\t\tverifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n@@ -106,7 +107,10 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +122,15 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "oldDelta=delta;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1438/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:45:33.275520655 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1438/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:45:33.279520714 -0500\n@@ -95,6 +95,7 @@\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         clearResult();\n+\t\tclearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,7 +107,9 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n@@ -118,17 +121,13 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n         // reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +279,7 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n+                    p1 = 1.0 - r3;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "double x2=max;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "InsertBefore", 
          "seed": "clearResult();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_678/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:58:19.761811792 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_678/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:58:19.761811792 -0500\n@@ -94,41 +94,47 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n-        // return the first endpoint if it is good enough\n+        double oldx = Double.POSITIVE_INFINITY;\n+\t\t// return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n             setResult(yMin, 0);\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n+        double x0 = min;\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -270,7 +276,8 @@\n                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                 }\n                 if (p > 0.0) {\n-                    p1 = -p1;\n+                    double ret = Double.NaN;\n+\t\t\t\t\tp1 = -p1;\n                 } else {\n                     p = -p;\n                 }\n@@ -280,7 +287,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "return newBrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 115, 
          "faulty": "if (yInitial * yMin < 0) {\n  return solve(f,min,yMin,initial,yInitial,min,yMin);\n}", 
          "type": "InsertBefore", 
          "seed": "double x0=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 273, 
          "faulty": "p1=-p1;", 
          "type": "InsertBefore", 
          "seed": "double ret=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 108, 
          "faulty": "double yMin=f.value(min);", 
          "type": "InsertBefore", 
          "seed": "double oldx=Double.POSITIVE_INFINITY;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_561/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:50:43.043132357 -0500\n@@ -100,17 +100,12 @@\n         // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+\t\t\tsetResult(initial, 0);\n+\t\t\treturn result;\n+\t\t}\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n         // reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n@@ -118,17 +113,21 @@\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+        this.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.iterationCount = iterationCount;\n+\t\tthis.defaultFunctionValueAccuracy = 1.0e-15;\n \n-        // reduce interval if initial and max bracket the root\n+        double x1 = min;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tthis.resultComputed = true;\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +173,9 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                double x1 = min;\n+\t\t\t\titerationCount += this.iterationCount;\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n@@ -280,7 +281,6 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "return new BrentSolver();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "this.iterationCount=iterationCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "double y0=f.value(x0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 102, 
          "faulty": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "double x1=min;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "this.resultComputed=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "iterationCount+=this.iterationCount;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 15:11:22.140573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_955/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java\t2018-12-30 16:14:35.788177832 -0500\n@@ -206,9 +206,10 @@\n      */\n     protected void verifyInterval(final double lower, final double upper) {\n         if (lower >= upper) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    \"endpoints do not specify an interval: [{0}, {1}]\",\n-                    lower, upper);\n+            if (f == null) {\n+\t\t\t\tthrow MathRuntimeException\n+\t\t\t\t\t\t.createIllegalArgumentException(\"function to solve cannot be null\");\n+\t\t\t}\n         }\n     }\n \n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_955/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:14:35.788177832 -0500\n@@ -94,7 +94,6 @@\n                         final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n         verifySequence(min, initial, max);\n \n         // return the initial guess if it is good enough\n@@ -106,29 +105,30 @@\n \n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n+        verifyBracketing(min, max, f);\n+\t\t// reduce interval if min and initial bracket the root\n         if (yInitial * yMin < 0) {\n             return solve(f, min, yMin, initial, yInitial, min, yMin);\n         }\n \n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+        int i = 0;\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (Math.abs(yMin) <= functionValueAccuracy) {\n+\t\t\tsetResult(yMin, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -280,7 +280,7 @@\n                     // in the wrong direction, or progress is slow.\n                     // Fall back to bisection.\n                     delta = 0.5 * dx;\n-                    oldDelta = delta;\n+                    p1 = 1.0 - r3;\n                 } else {\n                     oldDelta = delta;\n                     delta = p / p1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java", 
          "line": 209, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"endpoints do not specify an interval: [{0}, {1}]\",lower,upper);", 
          "type": "Replace", 
          "seed": "if (f == null) {\n  throw MathRuntimeException.createIllegalArgumentException(\"function to solve cannot be null\");\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Replace", 
          "seed": "this.defaultFunctionValueAccuracy=1.0e-15;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "if (Math.abs(x1 - x0) <= absoluteAccuracy) {\n  setResult(x1,i);\n  return x1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "checkResultComputed();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 109, 
          "faulty": "if (Math.abs(yMin) <= functionValueAccuracy) {\n  setResult(yMin,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "p1=1.0 - r3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (Math.abs(yInitial) <= functionValueAccuracy) {\n  setResult(initial,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 97, 
          "faulty": "clearResult();", 
          "type": "Delete", 
          "seed": "Complex oldc=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 15:11:22.132573000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1464/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\t2018-12-30 16:47:08.720922050 -0500\n@@ -95,9 +95,11 @@\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         clearResult();\n-        verifySequence(min, initial, max);\n+        int i = 0;\n+\t\tverifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n+        setResult(initial, 0);\n+\t\t// return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n@@ -119,16 +121,18 @@\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n         if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n+\t\t\tsetResult(yMax, 0);\n+\t\t\treturn result;\n+\t\t}\n+\t\t// reduce interval if initial and max bracket the root\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n+        verifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\tverifyBracketing(min, max, f);\n+\t\t// full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }\n@@ -174,7 +178,16 @@\n                 setResult(max, 0);\n                 ret = max;\n             } else {\n-                // neither value is close to zero and min and max do not bracket root.\n+                if (sign < 0) {\n+\t\t\t\t\tret = solve(f, min, yMin, max, yMax, min, yMin);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (yMin == 0.0) {\n+\t\t\t\t\t\tret = min;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tret = max;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t// neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                         \"function values at endpoints do not have different signs.  \" +\n                         \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 127, 
          "faulty": "if (yInitial * yMax < 0) {\n  return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 132, 
          "faulty": "return solve(f,min,yMin,max,yMax,initial,yInitial);", 
          "type": "InsertBefore", 
          "seed": "verifyBracketing(min,max,f);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Delete", 
          "seed": "Complex delta=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 121, 
          "faulty": "if (Math.abs(yMax) <= functionValueAccuracy) {\n  setResult(yMax,0);\n  return result;\n}", 
          "type": "Delete", 
          "seed": "if (f.value(max) == 0.0) {\n  return max;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 101, 
          "faulty": "double yInitial=f.value(initial);", 
          "type": "InsertBefore", 
          "seed": "setResult(initial,0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 178, 
          "faulty": "throw MathRuntimeException.createIllegalArgumentException(\"function values at endpoints do not have different signs.  \" + \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",min,max,yMin,yMax);", 
          "type": "InsertBefore", 
          "seed": "if (sign < 0) {\n  ret=solve(f,min,yMin,max,yMax,min,yMin);\n}\n else {\n  if (yMin == 0.0) {\n    ret=min;\n  }\n else {\n    ret=max;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 98, 
          "faulty": "verifySequence(min,initial,max);", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java", 
          "line": 283, 
          "faulty": "oldDelta=delta;", 
          "type": "Replace", 
          "seed": "oldDelta=delta;"
        }
      ]
    }
  ]
}