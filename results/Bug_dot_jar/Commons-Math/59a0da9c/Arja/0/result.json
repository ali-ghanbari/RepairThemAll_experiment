{
  "repair_end": "2018-12-29 13:20:32.188144", 
  "repair_begin": "2018-12-29 12:30:38.368367", 
  "patches": [
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_59a0da9c/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\t2018-12-29 06:30:16.966620000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_59a0da9c/patches_un30/Patch_1433/patched/tmp/Arja_Bug_dot_jar_Commons-Math_59a0da9c/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\t2018-12-29 07:19:12.808350018 -0500\n@@ -86,7 +86,8 @@\n             if (MathUtils.compareTo(entry, 0, epsilon) > 0) {\n                 final double ratio = rhs / entry;\n                 if (MathUtils.equals(ratio, minRatio, epsilon)) {\n-                    minRatioPositions.add(i);\n+                    minRatioPositions = new ArrayList<Integer>();\n+\t\t\t\t\tminRatioPositions.add(i);\n                 } else if (ratio < minRatio) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_59a0da9c/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\t2018-12-29 06:30:16.902618000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_59a0da9c/patches_un30/Patch_1433/patched/tmp/Arja_Bug_dot_jar_Commons-Math_59a0da9c/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\t2018-12-29 07:19:12.812350042 -0500\n@@ -694,7 +694,12 @@\n \n           // the stability check failed, we reduce the global step\n           hNew   = Math.abs(filterStep(stepSize * stabilityReduction, forward, false));\n-          reject = true;\n+          if ((targetIter > 1)\n+\t\t\t\t&& (costPerTimeUnit[targetIter - 1] < orderControl1\n+\t\t\t\t\t\t* costPerTimeUnit[targetIter])) {\n+\t\t\t--targetIter;\n+\t\t}\n+\t\treject = true;\n           loop   = false;\n \n         } else {\n@@ -749,9 +754,21 @@\n                     final double ratio = ((double) sequence [k] * sequence[k+1]) /\n                                          (sequence[0] * sequence[0]);\n                     if (error > ratio * ratio) {\n-                      // we don't expect to converge on next iteration\n-                      // we reject the step immediately and reduce order\n-                      reject = true;\n+                      if (newStep) {\n+\t\t\t\t\t\tinterpolator.shift();\n+\t\t\t\t\t\tif (!firstStepAlreadyComputed) {\n+\t\t\t\t\t\t\tcomputeDerivatives(stepStart, y, yDot0);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (firstTime) {\n+\t\t\t\t\t\t\thNew = initializeStep(equations, forward,\n+\t\t\t\t\t\t\t\t\t2 * targetIter + 1, scale, stepStart, y,\n+\t\t\t\t\t\t\t\t\tyDot0, yTmp, yTmpDot);\n+\t\t\t\t\t\t\tif (!forward) {\n+\t\t\t\t\t\t\t\thNew = -hNew;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tnewStep = false;\n+\t\t\t\t\t}\n                       loop   = false;\n                       targetIter = k;\n                       if ((targetIter > 1) &&\n@@ -800,7 +817,7 @@\n                   hNew = optimalStep[targetIter];\n                 }\n                 loop = false;\n-                break;\n+                ;\n \n               default :\n                 if ((firstTime || lastStep) && (error <= 1.0)) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java", 
          "line": 697, 
          "faulty": "reject=true;", 
          "type": "InsertBefore", 
          "seed": "if ((targetIter > 1) && (costPerTimeUnit[targetIter - 1] < orderControl1 * costPerTimeUnit[targetIter])) {\n  --targetIter;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java", 
          "line": 89, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java", 
          "line": 803, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "this.scalAbsoluteTolerance=scalAbsoluteTolerance;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java", 
          "line": 754, 
          "faulty": "reject=true;", 
          "type": "Replace", 
          "seed": "if (newStep) {\n  interpolator.shift();\n  if (!firstStepAlreadyComputed) {\n    computeDerivatives(stepStart,y,yDot0);\n  }\n  if (firstTime) {\n    hNew=initializeStep(equations,forward,2 * targetIter + 1,scale,stepStart,y,yDot0,yTmp,yTmpDot);\n    if (!forward) {\n      hNew=-hNew;\n    }\n  }\n  newStep=false;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_59a0da9c/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\t2018-12-29 06:30:16.966620000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_59a0da9c/patches_un30/Patch_1464/patched/tmp/Arja_Bug_dot_jar_Commons-Math_59a0da9c/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\t2018-12-29 07:20:11.728719248 -0500\n@@ -86,7 +86,8 @@\n             if (MathUtils.compareTo(entry, 0, epsilon) > 0) {\n                 final double ratio = rhs / entry;\n                 if (MathUtils.equals(ratio, minRatio, epsilon)) {\n-                    minRatioPositions.add(i);\n+                    minRatioPositions = new ArrayList<Integer>();\n+\t\t\t\t\tminRatioPositions.add(i);\n                 } else if (ratio < minRatio) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_59a0da9c/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\t2018-12-29 06:30:16.902618000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_59a0da9c/patches_un30/Patch_1464/patched/tmp/Arja_Bug_dot_jar_Commons-Math_59a0da9c/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\t2018-12-29 07:20:11.732719275 -0500\n@@ -694,7 +694,12 @@\n \n           // the stability check failed, we reduce the global step\n           hNew   = Math.abs(filterStep(stepSize * stabilityReduction, forward, false));\n-          reject = true;\n+          if ((targetIter > 1)\n+\t\t\t\t&& (costPerTimeUnit[targetIter - 1] < orderControl1\n+\t\t\t\t\t\t* costPerTimeUnit[targetIter])) {\n+\t\t\t--targetIter;\n+\t\t}\n+\t\treject = true;\n           loop   = false;\n \n         } else {\n@@ -749,9 +754,21 @@\n                     final double ratio = ((double) sequence [k] * sequence[k+1]) /\n                                          (sequence[0] * sequence[0]);\n                     if (error > ratio * ratio) {\n-                      // we don't expect to converge on next iteration\n-                      // we reject the step immediately and reduce order\n-                      reject = true;\n+                      if (newStep) {\n+\t\t\t\t\t\tinterpolator.shift();\n+\t\t\t\t\t\tif (!firstStepAlreadyComputed) {\n+\t\t\t\t\t\t\tcomputeDerivatives(stepStart, y, yDot0);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (firstTime) {\n+\t\t\t\t\t\t\thNew = initializeStep(equations, forward,\n+\t\t\t\t\t\t\t\t\t2 * targetIter + 1, scale, stepStart, y,\n+\t\t\t\t\t\t\t\t\tyDot0, yTmp, yTmpDot);\n+\t\t\t\t\t\t\tif (!forward) {\n+\t\t\t\t\t\t\t\thNew = -hNew;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tnewStep = false;\n+\t\t\t\t\t}\n                       loop   = false;\n                       targetIter = k;\n                       if ((targetIter > 1) &&\n@@ -875,7 +892,8 @@\n                                                 0.01));\n             if (interpError > 10.0) {\n               hNew = hInt;\n-              reject = true;\n+              ++k;\n+\t\t\treject = true;\n             }\n           }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java", 
          "line": 878, 
          "faulty": "reject=true;", 
          "type": "InsertBefore", 
          "seed": "++k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java", 
          "line": 697, 
          "faulty": "reject=true;", 
          "type": "InsertBefore", 
          "seed": "if ((targetIter > 1) && (costPerTimeUnit[targetIter - 1] < orderControl1 * costPerTimeUnit[targetIter])) {\n  --targetIter;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java", 
          "line": 89, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java", 
          "line": 754, 
          "faulty": "reject=true;", 
          "type": "Replace", 
          "seed": "if (newStep) {\n  interpolator.shift();\n  if (!firstStepAlreadyComputed) {\n    computeDerivatives(stepStart,y,yDot0);\n  }\n  if (firstTime) {\n    hNew=initializeStep(equations,forward,2 * targetIter + 1,scale,stepStart,y,yDot0,yTmp,yTmpDot);\n    if (!forward) {\n      hNew=-hNew;\n    }\n  }\n  newStep=false;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_59a0da9c/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\t2018-12-29 06:30:16.966620000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_59a0da9c/patches_un30/Patch_1112/patched/tmp/Arja_Bug_dot_jar_Commons-Math_59a0da9c/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\t2018-12-29 07:09:05.651756910 -0500\n@@ -86,7 +86,8 @@\n             if (MathUtils.compareTo(entry, 0, epsilon) > 0) {\n                 final double ratio = rhs / entry;\n                 if (MathUtils.equals(ratio, minRatio, epsilon)) {\n-                    minRatioPositions.add(i);\n+                    minRatioPositions = new ArrayList<Integer>();\n+\t\t\t\t\tminRatioPositions.add(i);\n                 } else if (ratio < minRatio) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_59a0da9c/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\t2018-12-29 06:30:16.902618000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_59a0da9c/patches_un30/Patch_1112/patched/tmp/Arja_Bug_dot_jar_Commons-Math_59a0da9c/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\t2018-12-29 07:09:05.667757003 -0500\n@@ -694,7 +694,12 @@\n \n           // the stability check failed, we reduce the global step\n           hNew   = Math.abs(filterStep(stepSize * stabilityReduction, forward, false));\n-          reject = true;\n+          if ((targetIter > 1)\n+\t\t\t\t&& (costPerTimeUnit[targetIter - 1] < orderControl1\n+\t\t\t\t\t\t* costPerTimeUnit[targetIter])) {\n+\t\t\t--targetIter;\n+\t\t}\n+\t\treject = true;\n           loop   = false;\n \n         } else {\n@@ -749,9 +754,21 @@\n                     final double ratio = ((double) sequence [k] * sequence[k+1]) /\n                                          (sequence[0] * sequence[0]);\n                     if (error > ratio * ratio) {\n-                      // we don't expect to converge on next iteration\n-                      // we reject the step immediately and reduce order\n-                      reject = true;\n+                      if (newStep) {\n+\t\t\t\t\t\tinterpolator.shift();\n+\t\t\t\t\t\tif (!firstStepAlreadyComputed) {\n+\t\t\t\t\t\t\tcomputeDerivatives(stepStart, y, yDot0);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (firstTime) {\n+\t\t\t\t\t\t\thNew = initializeStep(equations, forward,\n+\t\t\t\t\t\t\t\t\t2 * targetIter + 1, scale, stepStart, y,\n+\t\t\t\t\t\t\t\t\tyDot0, yTmp, yTmpDot);\n+\t\t\t\t\t\t\tif (!forward) {\n+\t\t\t\t\t\t\t\thNew = -hNew;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tnewStep = false;\n+\t\t\t\t\t}\n                       loop   = false;\n                       targetIter = k;\n                       if ((targetIter > 1) &&\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java", 
          "line": 697, 
          "faulty": "reject=true;", 
          "type": "InsertBefore", 
          "seed": "if ((targetIter > 1) && (costPerTimeUnit[targetIter - 1] < orderControl1 * costPerTimeUnit[targetIter])) {\n  --targetIter;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java", 
          "line": 89, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java", 
          "line": 754, 
          "faulty": "reject=true;", 
          "type": "Replace", 
          "seed": "if (newStep) {\n  interpolator.shift();\n  if (!firstStepAlreadyComputed) {\n    computeDerivatives(stepStart,y,yDot0);\n  }\n  if (firstTime) {\n    hNew=initializeStep(equations,forward,2 * targetIter + 1,scale,stepStart,y,yDot0,yTmp,yTmpDot);\n    if (!forward) {\n      hNew=-hNew;\n    }\n  }\n  newStep=false;\n}"
        }
      ]
    }
  ]
}