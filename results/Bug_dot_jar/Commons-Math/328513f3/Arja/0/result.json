{
  "repair_end": "2018-12-29 10:08:35.654253", 
  "repair_begin": "2018-12-29 09:24:27.050412", 
  "patches": [
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1445/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:59:57.587624690 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1445/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:59:57.587624690 -0500\n@@ -447,7 +447,7 @@\n                     if (lastResult != null &&\n                             getConvergenceChecker().converged(\n                                     iterations, current, lastResult))\n-                        break generationLoop;\n+\t\t\t\t\t\t;\n                     lastResult = current;\n                 }\n                 // Adjust step size in case of equal function values (flat fitness)\n@@ -930,7 +930,9 @@\n                 else\n                     repaired[i] = x[i];\n             }\n-            return repaired;\n+            if (boundaries == null)\n+\t\t\t\treturn x;\n+\t\t\treturn repaired;\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 450, 
          "faulty": "break generationLoop;", 
          "type": "Delete", 
          "seed": "cc=(4. + mueff / dimension) / (dimension + 4. + 2. * mueff / dimension);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 933, 
          "faulty": "return repaired;", 
          "type": "InsertBefore", 
          "seed": "if (boundaries == null) return x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1358/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:58:16.647849574 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1358/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:58:16.659849547 -0500\n@@ -481,10 +481,6 @@\n                         new Integer[] { 2 });\n             if (boundaries[0] == null || boundaries[1] == null)\n                 throw new NoDataException();\n-            if (boundaries[0].length != init.length)\n-                throw new MultiDimensionMismatchException(\n-                        new Integer[] { boundaries[0].length },\n-                        new Integer[] { init.length });\n             if (boundaries[1].length != init.length)\n                 throw new MultiDimensionMismatchException(\n                         new Integer[] { boundaries[1].length },\n@@ -849,10 +845,6 @@\n             if (boundaries == null)\n                 return x;\n             double[] res = new double[x.length];\n-            for (int i = 0; i < x.length; i++) {\n-                double diff = boundaries[1][i] - boundaries[0][i];\n-                res[i] = (x[i] - boundaries[0][i]) / diff;\n-            }\n             return res;\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 484, 
          "faulty": "if (boundaries[0].length != init.length) throw new MultiDimensionMismatchException(new Integer[]{boundaries[0].length},new Integer[]{init.length});", 
          "type": "Delete", 
          "seed": "for (int i=0; i < init.length; i++) {\n  if (inputSigma[i] < 0)   throw new NotPositiveException(inputSigma[i]);\n  if (boundaries != null) {\n    if (inputSigma[i] > 1.0)     throw new OutOfRangeException(inputSigma[i],0,1.0);\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 853, 
          "faulty": "double diff=boundaries[1][i] - boundaries[0][i];", 
          "type": "InsertBefore", 
          "seed": "if (lambda <= 0) lambda=4 + (int)(3. * Math.log(dimension));"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 852, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  double diff=boundaries[1][i] - boundaries[0][i];\n  res[i]=(x[i] - boundaries[0][i]) / diff;\n}", 
          "type": "Delete", 
          "seed": "ccovmuSep=Math.min(1 - ccov1,ccovmu * (dimension + 1.5) / 3.);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1509/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:01:05.911475201 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1509/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:01:05.915475193 -0500\n@@ -943,8 +943,9 @@\n         private double penalty(final double[] x, final double[] repaired) {\n             double penalty = 0;\n             for (int i = 0; i < x.length; i++) {\n-                double diff = Math.abs(x[i] - repaired[i]);\n-                penalty += diff * valueRange;\n+                repaired[i] = 1.0;\n+\t\t\t\tdouble diff = Math.abs(x[i] - repaired[i]);\n+                repaired[i] = 0;\n             }\n             return isMinimize ? penalty : -penalty;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 947, 
          "faulty": "penalty+=diff * valueRange;", 
          "type": "Replace", 
          "seed": "repaired[i]=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 946, 
          "faulty": "double diff=Math.abs(x[i] - repaired[i]);", 
          "type": "InsertBefore", 
          "seed": "repaired[i]=1.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_620/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:44:38.337391384 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_620/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:44:38.337391384 -0500\n@@ -944,7 +944,6 @@\n             double penalty = 0;\n             for (int i = 0; i < x.length; i++) {\n                 double diff = Math.abs(x[i] - repaired[i]);\n-                penalty += diff * valueRange;\n             }\n             return isMinimize ? penalty : -penalty;\n         }\n\n\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 947, 
          "faulty": "penalty+=diff * valueRange;", 
          "type": "Delete", 
          "seed": "evaluations.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 121, 
          "faulty": "return getMessage(Locale.US);", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_348/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:39:44.049880093 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_348/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:39:44.053880087 -0500\n@@ -447,7 +447,7 @@\n                     if (lastResult != null &&\n                             getConvergenceChecker().converged(\n                                     iterations, current, lastResult))\n-                        break generationLoop;\n+\t\t\t\t\t\t;\n                     lastResult = current;\n                 }\n                 // Adjust step size in case of equal function values (flat fitness)\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 450, 
          "faulty": "break generationLoop;", 
          "type": "Delete", 
          "seed": "cc=(4. + mueff / dimension) / (dimension + 4. + 2. * mueff / dimension);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1290/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:57:00.696022511 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1290/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:57:00.700022501 -0500\n@@ -927,10 +927,10 @@\n                     repaired[i] = 0;\n                 else if (x[i] > 1.0)\n                     repaired[i] = 1.0;\n-                else\n-                    repaired[i] = x[i];\n+\t\t\t\telse\n+\t\t\t\t\t;\n             }\n-            return repaired;\n+            return x;\n         }\n \n         /**\n@@ -943,7 +943,7 @@\n         private double penalty(final double[] x, final double[] repaired) {\n             double penalty = 0;\n             for (int i = 0; i < x.length; i++) {\n-                double diff = Math.abs(x[i] - repaired[i]);\n+                double diff = boundaries[1][i] - boundaries[0][i];\n                 penalty += diff * valueRange;\n             }\n             return isMinimize ? penalty : -penalty;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 946, 
          "faulty": "double diff=Math.abs(x[i] - repaired[i]);", 
          "type": "Replace", 
          "seed": "double diff=boundaries[1][i] - boundaries[0][i];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 931, 
          "faulty": "repaired[i]=x[i];", 
          "type": "Delete", 
          "seed": "iterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 933, 
          "faulty": "return repaired;", 
          "type": "Replace", 
          "seed": "return x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1239/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:56:03.704153632 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1239/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:56:03.708153624 -0500\n@@ -943,7 +943,8 @@\n         private double penalty(final double[] x, final double[] repaired) {\n             double penalty = 0;\n             for (int i = 0; i < x.length; i++) {\n-                double diff = Math.abs(x[i] - repaired[i]);\n+                historySize = 10 + (int) (3. * 10. * dimension / lambda);\n+\t\t\t\tdouble diff = Math.abs(x[i] - repaired[i]);\n                 penalty += diff * valueRange;\n             }\n             return isMinimize ? penalty : -penalty;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 127, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.getDefault());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 946, 
          "faulty": "double diff=Math.abs(x[i] - repaired[i]);", 
          "type": "InsertBefore", 
          "seed": "historySize=10 + (int)(3. * 10. * dimension / lambda);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_529/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:43:00.745566075 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_529/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:43:00.745566075 -0500\n@@ -943,7 +943,8 @@\n         private double penalty(final double[] x, final double[] repaired) {\n             double penalty = 0;\n             for (int i = 0; i < x.length; i++) {\n-                double diff = Math.abs(x[i] - repaired[i]);\n+                historySize = 10 + (int) (3. * 10. * dimension / lambda);\n+\t\t\t\tdouble diff = Math.abs(x[i] - repaired[i]);\n                 penalty += diff * valueRange;\n             }\n             return isMinimize ? penalty : -penalty;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 946, 
          "faulty": "double diff=Math.abs(x[i] - repaired[i]);", 
          "type": "InsertBefore", 
          "seed": "historySize=10 + (int)(3. * 10. * dimension / lambda);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1684/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:04:22.547054703 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1684/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:04:22.547054703 -0500\n@@ -943,8 +943,8 @@\n         private double penalty(final double[] x, final double[] repaired) {\n             double penalty = 0;\n             for (int i = 0; i < x.length; i++) {\n-                double diff = Math.abs(x[i] - repaired[i]);\n-                penalty += diff * valueRange;\n+                double diff = boundaries[1][i] - boundaries[0][i];\n+                repaired[i] = 0;\n             }\n             return isMinimize ? penalty : -penalty;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 947, 
          "faulty": "penalty+=diff * valueRange;", 
          "type": "Replace", 
          "seed": "repaired[i]=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 946, 
          "faulty": "double diff=Math.abs(x[i] - repaired[i]);", 
          "type": "Replace", 
          "seed": "double diff=boundaries[1][i] - boundaries[0][i];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1762/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:05:47.090877448 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1762/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:05:47.090877448 -0500\n@@ -849,10 +849,6 @@\n             if (boundaries == null)\n                 return x;\n             double[] res = new double[x.length];\n-            for (int i = 0; i < x.length; i++) {\n-                double diff = boundaries[1][i] - boundaries[0][i];\n-                res[i] = (x[i] - boundaries[0][i]) / diff;\n-            }\n             return res;\n         }\n \n@@ -943,7 +939,9 @@\n         private double penalty(final double[] x, final double[] repaired) {\n             double penalty = 0;\n             for (int i = 0; i < x.length; i++) {\n-                double diff = Math.abs(x[i] - repaired[i]);\n+                ccovmu = Math.min(1 - ccov1, 2. * (mueff - 2. + 1. / mueff)\n+\t\t\t\t\t\t/ ((dimension + 2.) * (dimension + 2.) + mueff));\n+\t\t\t\tdouble diff = Math.abs(x[i] - repaired[i]);\n                 penalty += diff * valueRange;\n             }\n             return isMinimize ? penalty : -penalty;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 946, 
          "faulty": "double diff=Math.abs(x[i] - repaired[i]);", 
          "type": "InsertBefore", 
          "seed": "ccovmu=Math.min(1 - ccov1,2. * (mueff - 2. + 1. / mueff) / ((dimension + 2.) * (dimension + 2.) + mueff));"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 853, 
          "faulty": "double diff=boundaries[1][i] - boundaries[0][i];", 
          "type": "InsertBefore", 
          "seed": "break generationLoop;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 852, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  double diff=boundaries[1][i] - boundaries[0][i];\n  res[i]=(x[i] - boundaries[0][i]) / diff;\n}", 
          "type": "Delete", 
          "seed": "if (min(diagD) <= 0) {\n  for (int i=0; i < dimension; i++)   if (diagD.getEntry(i,0) < 0)   diagD.setEntry(i,0,0.);\n  double tfac=max(diagD) / 1e14;\n  C=C.add(eye(dimension,dimension).scalarMultiply(tfac));\n  diagD=diagD.add(ones(dimension,1).scalarMultiply(tfac));\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1348/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:58:06.523872428 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1348/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:58:06.523872428 -0500\n@@ -408,7 +408,7 @@\n                     if (getConvergenceChecker() != null && lastResult != null) {\n                         if (getConvergenceChecker().converged(\n                                 iterations, optimum, lastResult))\n-                            break generationLoop;\n+\t\t\t\t\t\t\t;\n                     }\n                 }\n                 // handle termination criteria\n@@ -930,7 +930,9 @@\n                 else\n                     repaired[i] = x[i];\n             }\n-            return repaired;\n+            if (boundaries == null)\n+\t\t\t\treturn x;\n+\t\t\treturn repaired;\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 411, 
          "faulty": "break generationLoop;", 
          "type": "Delete", 
          "seed": "dimension=guess.length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 933, 
          "faulty": "return repaired;", 
          "type": "InsertBefore", 
          "seed": "if (boundaries == null) return x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1442/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:59:54.195632165 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1442/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:59:54.195632165 -0500\n@@ -481,10 +481,6 @@\n                         new Integer[] { 2 });\n             if (boundaries[0] == null || boundaries[1] == null)\n                 throw new NoDataException();\n-            if (boundaries[0].length != init.length)\n-                throw new MultiDimensionMismatchException(\n-                        new Integer[] { boundaries[0].length },\n-                        new Integer[] { init.length });\n             if (boundaries[1].length != init.length)\n                 throw new MultiDimensionMismatchException(\n                         new Integer[] { boundaries[1].length },\n@@ -851,7 +847,9 @@\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n-                res[i] = (x[i] - boundaries[0][i]) / diff;\n+                if (boundaries == null)\n+\t\t\t\t\treturn x;\n+\t\t\t\tres[i] = (x[i] - boundaries[0][i]) / diff;\n             }\n             return res;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 484, 
          "faulty": "if (boundaries[0].length != init.length) throw new MultiDimensionMismatchException(new Integer[]{boundaries[0].length},new Integer[]{init.length});", 
          "type": "Delete", 
          "seed": "for (int i=0; i < init.length; i++) {\n  if (inputSigma[i] < 0)   throw new NotPositiveException(inputSigma[i]);\n  if (boundaries != null) {\n    if (inputSigma[i] > 1.0)     throw new OutOfRangeException(inputSigma[i],0,1.0);\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 854, 
          "faulty": "res[i]=(x[i] - boundaries[0][i]) / diff;", 
          "type": "InsertBefore", 
          "seed": "if (boundaries == null) return x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_786/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:47:35.333087878 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_786/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:47:35.337087872 -0500\n@@ -485,10 +485,6 @@\n                 throw new MultiDimensionMismatchException(\n                         new Integer[] { boundaries[0].length },\n                         new Integer[] { init.length });\n-            if (boundaries[1].length != init.length)\n-                throw new MultiDimensionMismatchException(\n-                        new Integer[] { boundaries[1].length },\n-                        new Integer[] { init.length });\n             for (int i = 0; i < init.length; i++) {\n                 if (boundaries[0][i] > init[i] || boundaries[1][i] < init[i])\n                     throw new OutOfRangeException(init[i], boundaries[0][i],\n@@ -853,7 +849,8 @@\n                 double diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = (x[i] - boundaries[0][i]) / diff;\n             }\n-            return res;\n+            cs = (mueff + 2.) / (dimension + mueff + 3.);\n+\t\t\treturn res;\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 856, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "cs=(mueff + 2.) / (dimension + mueff + 3.);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 488, 
          "faulty": "if (boundaries[1].length != init.length) throw new MultiDimensionMismatchException(new Integer[]{boundaries[1].length},new Integer[]{init.length});", 
          "type": "Delete", 
          "seed": "this.lambda=lambda;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1465/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:00:19.743575992 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1465/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:00:19.747575983 -0500\n@@ -925,10 +925,16 @@\n             for (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n-                else if (x[i] > 1.0)\n-                    repaired[i] = 1.0;\n-                else\n-                    repaired[i] = x[i];\n+\t\t\t\telse {\n+\t\t\t\t\tif (x[i] > 1.0)\n+\t\t\t\t\t\trepaired[i] = 1.0;\n+\t\t\t\t\telse\n+\t\t\t\t\t\trepaired[i] = x[i];\n+\t\t\t\t\tif (x[i] > 1.0)\n+\t\t\t\t\t\trepaired[i] = 1.0;\n+\t\t\t\t\telse\n+\t\t\t\t\t\trepaired[i] = x[i];\n+\t\t\t\t}\n             }\n             return repaired;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 929, 
          "faulty": "repaired[i]=1.0;", 
          "type": "InsertBefore", 
          "seed": "fitnessHistory[i]=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 928, 
          "faulty": "if (x[i] > 1.0) repaired[i]=1.0;\n else repaired[i]=x[i];", 
          "type": "InsertBefore", 
          "seed": "if (x[i] > 1.0) repaired[i]=1.0;\n else repaired[i]=x[i];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_139/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:35:42.006244819 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1485/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:00:40.023531607 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1485/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:00:40.027531598 -0500\n@@ -848,7 +848,9 @@\n         public double[] encode(final double[] x) {\n             if (boundaries == null)\n                 return x;\n-            double[] res = new double[x.length];\n+            chiN = Math.sqrt(dimension)\n+\t\t\t\t\t* (1. - 1. / (4. * dimension) + 1 / (21. * dimension * dimension));\n+\t\t\tdouble[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = (x[i] - boundaries[0][i]) / diff;\n@@ -925,9 +927,10 @@\n             for (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n-                else if (x[i] > 1.0)\n-                    repaired[i] = 1.0;\n-                else\n+                else if (x[i] > 1.0) {\n+\t\t\t\t\tccov1 = 2. / ((dimension + 1.3) * (dimension + 1.3) + mueff);\n+\t\t\t\t\trepaired[i] = 1.0;\n+\t\t\t\t} else\n                     repaired[i] = x[i];\n             }\n             return repaired;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 851, 
          "faulty": "double[] res=new double[x.length];", 
          "type": "InsertBefore", 
          "seed": "chiN=Math.sqrt(dimension) * (1. - 1. / (4. * dimension) + 1 / (21. * dimension * dimension));"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 929, 
          "faulty": "repaired[i]=1.0;", 
          "type": "InsertBefore", 
          "seed": "ccov1=2. / ((dimension + 1.3) * (dimension + 1.3) + mueff);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_118/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:35:17.590299516 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_118/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:35:17.590299516 -0500\n@@ -849,10 +849,6 @@\n             if (boundaries == null)\n                 return x;\n             double[] res = new double[x.length];\n-            for (int i = 0; i < x.length; i++) {\n-                double diff = boundaries[1][i] - boundaries[0][i];\n-                res[i] = (x[i] - boundaries[0][i]) / diff;\n-            }\n             return res;\n         }\n \n@@ -930,7 +926,7 @@\n                 else\n                     repaired[i] = x[i];\n             }\n-            return repaired;\n+            return x;\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 852, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  double diff=boundaries[1][i] - boundaries[0][i];\n  res[i]=(x[i] - boundaries[0][i]) / diff;\n}", 
          "type": "Delete", 
          "seed": "if (min(diagD) <= 0) {\n  for (int i=0; i < dimension; i++)   if (diagD.getEntry(i,0) < 0)   diagD.setEntry(i,0,0.);\n  double tfac=max(diagD) / 1e14;\n  C=C.add(eye(dimension,dimension).scalarMultiply(tfac));\n  diagD=diagD.add(ones(dimension,1).scalarMultiply(tfac));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 933, 
          "faulty": "return repaired;", 
          "type": "Replace", 
          "seed": "return x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_874/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:49:10.952924755 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_874/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:49:10.952924755 -0500\n@@ -485,7 +485,8 @@\n                 throw new MultiDimensionMismatchException(\n                         new Integer[] { boundaries[0].length },\n                         new Integer[] { init.length });\n-            if (boundaries[1].length != init.length)\n+            this.lambda = lambda;\n+\t\t\tif (boundaries[1].length != init.length)\n                 throw new MultiDimensionMismatchException(\n                         new Integer[] { boundaries[1].length },\n                         new Integer[] { init.length });\n@@ -921,7 +922,9 @@\n          * @return Repaired objective variables - all in bounds.\n          */\n         private double[] repair(final double[] x) {\n-            double[] repaired = new double[x.length];\n+            chiN = Math.sqrt(dimension)\n+\t\t\t\t\t* (1. - 1. / (4. * dimension) + 1 / (21. * dimension * dimension));\n+\t\t\tdouble[] repaired = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 488, 
          "faulty": "if (boundaries[1].length != init.length) throw new MultiDimensionMismatchException(new Integer[]{boundaries[1].length},new Integer[]{init.length});", 
          "type": "InsertBefore", 
          "seed": "this.lambda=lambda;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 924, 
          "faulty": "double[] repaired=new double[x.length];", 
          "type": "InsertBefore", 
          "seed": "chiN=Math.sqrt(dimension) * (1. - 1. / (4. * dimension) + 1 / (21. * dimension * dimension));"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_682/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:45:43.529270412 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_682/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:45:43.529270412 -0500\n@@ -881,7 +881,9 @@\n             double value;\n             if (boundaries != null && isRepairMode) {\n                 double[] repaired = repair(point);\n-                value = CMAESOptimizer.this\n+                if (boundaries[0] == null || boundaries[1] == null)\n+\t\t\t\t\tthrow new NoDataException();\n+\t\t\t\tvalue = CMAESOptimizer.this\n                         .computeObjectiveValue(decode(repaired)) +\n                         penalty(point, repaired);\n             } else\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 884, 
          "faulty": "value=CMAESOptimizer.this.computeObjectiveValue(decode(repaired)) + penalty(point,repaired);", 
          "type": "InsertBefore", 
          "seed": "if (boundaries[0] == null || boundaries[1] == null) throw new NoDataException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_746/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:46:53.333156156 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-29 03:24:09.607335000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_746/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-29 03:46:53.333156156 -0500\n@@ -124,7 +124,7 @@\n     /** {@inheritDoc} */\n     @Override\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        return getMessage(Locale.US);\n     }\n \n     /**\n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_746/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:46:53.333156156 -0500\n@@ -850,7 +850,9 @@\n                 return x;\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n-                double diff = boundaries[1][i] - boundaries[0][i];\n+                if (lambda <= 0)\n+\t\t\t\t\tlambda = 4 + (int) (3. * Math.log(dimension));\n+\t\t\t\tdouble diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = (x[i] - boundaries[0][i]) / diff;\n             }\n             return res;\n@@ -880,7 +882,8 @@\n         public double value(final double[] point) {\n             double value;\n             if (boundaries != null && isRepairMode) {\n-                double[] repaired = repair(point);\n+                evaluations.incrementCount();\n+\t\t\t\tdouble[] repaired = repair(point);\n                 value = CMAESOptimizer.this\n                         .computeObjectiveValue(decode(repaired)) +\n                         penalty(point, repaired);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 127, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 883, 
          "faulty": "double[] repaired=repair(point);", 
          "type": "InsertBefore", 
          "seed": "evaluations.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 853, 
          "faulty": "double diff=boundaries[1][i] - boundaries[0][i];", 
          "type": "InsertBefore", 
          "seed": "if (lambda <= 0) lambda=4 + (int)(3. * Math.log(dimension));"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_380/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:40:17.793831223 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_380/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:40:17.797831218 -0500\n@@ -481,10 +481,7 @@\n                         new Integer[] { 2 });\n             if (boundaries[0] == null || boundaries[1] == null)\n                 throw new NoDataException();\n-            if (boundaries[0].length != init.length)\n-                throw new MultiDimensionMismatchException(\n-                        new Integer[] { boundaries[0].length },\n-                        new Integer[] { init.length });\n+            this.lambda = lambda;\n             if (boundaries[1].length != init.length)\n                 throw new MultiDimensionMismatchException(\n                         new Integer[] { boundaries[1].length },\n@@ -865,7 +862,9 @@\n             if (boundaries == null)\n                 return x;\n             double[] res = new double[x.length];\n-            for (int i = 0; i < x.length; i++) {\n+            if (boundaries == null)\n+\t\t\t\treturn x;\n+\t\t\tfor (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = diff * x[i] + boundaries[0][i];\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 121, 
          "faulty": "return getMessage(Locale.US);", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 484, 
          "faulty": "if (boundaries[0].length != init.length) throw new MultiDimensionMismatchException(new Integer[]{boundaries[0].length},new Integer[]{init.length});", 
          "type": "Replace", 
          "seed": "this.lambda=lambda;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 868, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  double diff=boundaries[1][i] - boundaries[0][i];\n  res[i]=diff * x[i] + boundaries[0][i];\n}", 
          "type": "InsertBefore", 
          "seed": "if (boundaries == null) return x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1325/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:57:40.399931672 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1325/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:57:40.399931672 -0500\n@@ -922,7 +922,8 @@\n          */\n         private double[] repair(final double[] x) {\n             double[] repaired = new double[x.length];\n-            for (int i = 0; i < x.length; i++) {\n+            C = triu(C, 0).add(triu(C, 1).transpose());\n+\t\t\tfor (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n                 else if (x[i] > 1.0)\n@@ -942,7 +943,8 @@\n          */\n         private double penalty(final double[] x, final double[] repaired) {\n             double penalty = 0;\n-            for (int i = 0; i < x.length; i++) {\n+            valueRange = 1.0;\n+\t\t\tfor (int i = 0; i < x.length; i++) {\n                 double diff = Math.abs(x[i] - repaired[i]);\n                 penalty += diff * valueRange;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 945, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  double diff=Math.abs(x[i] - repaired[i]);\n  penalty+=diff * valueRange;\n}", 
          "type": "InsertBefore", 
          "seed": "valueRange=1.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 925, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  if (x[i] < 0)   repaired[i]=0;\n else   if (x[i] > 1.0)   repaired[i]=1.0;\n else   repaired[i]=x[i];\n}", 
          "type": "InsertBefore", 
          "seed": "C=triu(C,0).add(triu(C,1).transpose());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_730/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:46:35.657184142 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-29 03:24:09.607335000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_730/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-29 03:46:35.657184142 -0500\n@@ -118,7 +118,8 @@\n    /** {@inheritDoc} */\n     @Override\n     public String getMessage() {\n-        return getMessage(Locale.US);\n+        context = new HashMap<String, Object>();\n+\t\treturn getMessage(Locale.US);\n     }\n \n     /** {@inheritDoc} */\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 121, 
          "faulty": "return getMessage(Locale.US);", 
          "type": "InsertBefore", 
          "seed": "context=new HashMap<String,Object>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_377/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:40:15.261834978 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_377/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:40:15.265834973 -0500\n@@ -481,10 +481,7 @@\n                         new Integer[] { 2 });\n             if (boundaries[0] == null || boundaries[1] == null)\n                 throw new NoDataException();\n-            if (boundaries[0].length != init.length)\n-                throw new MultiDimensionMismatchException(\n-                        new Integer[] { boundaries[0].length },\n-                        new Integer[] { init.length });\n+            this.lambda = lambda;\n             if (boundaries[1].length != init.length)\n                 throw new MultiDimensionMismatchException(\n                         new Integer[] { boundaries[1].length },\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 484, 
          "faulty": "if (boundaries[0].length != init.length) throw new MultiDimensionMismatchException(new Integer[]{boundaries[0].length},new Integer[]{init.length});", 
          "type": "Replace", 
          "seed": "this.lambda=lambda;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_984/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:51:12.920706234 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-29 03:24:09.607335000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_984/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-29 03:51:12.920706234 -0500\n@@ -137,7 +137,8 @@\n     private String buildMessage(Locale locale,\n                                 String separator) {\n         final StringBuilder sb = new StringBuilder();\n-        int count = 0;\n+        context = new HashMap<String, Object>();\n+\t\tint count = 0;\n         final int len = msgPatterns.size();\n         for (int i = 0; i < len; i++) {\n             final Localizable pat = msgPatterns.get(i);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 140, 
          "faulty": "int count=0;", 
          "type": "InsertBefore", 
          "seed": "context=new HashMap<String,Object>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1471/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:00:26.111562036 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1471/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:00:26.111562036 -0500\n@@ -447,7 +447,7 @@\n                     if (lastResult != null &&\n                             getConvergenceChecker().converged(\n                                     iterations, current, lastResult))\n-                        break generationLoop;\n+\t\t\t\t\t\t;\n                     lastResult = current;\n                 }\n                 // Adjust step size in case of equal function values (flat fitness)\n@@ -921,7 +921,8 @@\n          * @return Repaired objective variables - all in bounds.\n          */\n         private double[] repair(final double[] x) {\n-            double[] repaired = new double[x.length];\n+            ccov1 = 2. / ((dimension + 1.3) * (dimension + 1.3) + mueff);\n+\t\t\tdouble[] repaired = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 450, 
          "faulty": "break generationLoop;", 
          "type": "Delete", 
          "seed": "normps=norm(ps);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 924, 
          "faulty": "double[] repaired=new double[x.length];", 
          "type": "InsertBefore", 
          "seed": "ccov1=2. / ((dimension + 1.3) * (dimension + 1.3) + mueff);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1297/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:57:06.680008756 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1297/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:57:06.680008756 -0500\n@@ -921,7 +921,9 @@\n          * @return Repaired objective variables - all in bounds.\n          */\n         private double[] repair(final double[] x) {\n-            double[] repaired = new double[x.length];\n+            chiN = Math.sqrt(dimension)\n+\t\t\t\t\t* (1. - 1. / (4. * dimension) + 1 / (21. * dimension * dimension));\n+\t\t\tdouble[] repaired = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 924, 
          "faulty": "double[] repaired=new double[x.length];", 
          "type": "InsertBefore", 
          "seed": "chiN=Math.sqrt(dimension) * (1. - 1. / (4. * dimension) + 1 / (21. * dimension * dimension));"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1836/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:07:11.094702976 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1836/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:07:11.098702968 -0500\n@@ -408,7 +408,7 @@\n                     if (getConvergenceChecker() != null && lastResult != null) {\n                         if (getConvergenceChecker().converged(\n                                 iterations, optimum, lastResult))\n-                            break generationLoop;\n+\t\t\t\t\t\t\t;\n                     }\n                 }\n                 // handle termination criteria\n@@ -850,7 +850,9 @@\n                 return x;\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n-                double diff = boundaries[1][i] - boundaries[0][i];\n+                if (lambda <= 0)\n+\t\t\t\t\tlambda = 4 + (int) (3. * Math.log(dimension));\n+\t\t\t\tdouble diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = (x[i] - boundaries[0][i]) / diff;\n             }\n             return res;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 411, 
          "faulty": "break generationLoop;", 
          "type": "Delete", 
          "seed": "cs=(mueff + 2.) / (dimension + mueff + 3.);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 853, 
          "faulty": "double diff=boundaries[1][i] - boundaries[0][i];", 
          "type": "InsertBefore", 
          "seed": "if (lambda <= 0) lambda=4 + (int)(3. * Math.log(dimension));"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1036/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:52:09.500602462 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1036/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:52:09.504602455 -0500\n@@ -850,8 +850,12 @@\n                 return x;\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n-                double diff = boundaries[1][i] - boundaries[0][i];\n-                res[i] = (x[i] - boundaries[0][i]) / diff;\n+                if (lambda <= 0)\n+\t\t\t\t\tlambda = 4 + (int) (3. * Math.log(dimension));\n+\t\t\t\tdouble diff = boundaries[1][i] - boundaries[0][i];\n+                if (boundaries == null)\n+\t\t\t\t\treturn x;\n+\t\t\t\tres[i] = (x[i] - boundaries[0][i]) / diff;\n             }\n             return res;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 854, 
          "faulty": "res[i]=(x[i] - boundaries[0][i]) / diff;", 
          "type": "InsertBefore", 
          "seed": "if (boundaries == null) return x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 853, 
          "faulty": "double diff=boundaries[1][i] - boundaries[0][i];", 
          "type": "InsertBefore", 
          "seed": "if (lambda <= 0) lambda=4 + (int)(3. * Math.log(dimension));"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_536/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:43:08.349552800 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_536/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:43:08.349552800 -0500\n@@ -850,7 +850,9 @@\n                 return x;\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n-                double diff = boundaries[1][i] - boundaries[0][i];\n+                if (lambda <= 0)\n+\t\t\t\t\tlambda = 4 + (int) (3. * Math.log(dimension));\n+\t\t\t\tdouble diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = (x[i] - boundaries[0][i]) / diff;\n             }\n             return res;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 853, 
          "faulty": "double diff=boundaries[1][i] - boundaries[0][i];", 
          "type": "InsertBefore", 
          "seed": "if (lambda <= 0) lambda=4 + (int)(3. * Math.log(dimension));"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_344/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:39:40.265885408 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_344/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:39:40.265885408 -0500\n@@ -485,10 +485,10 @@\n                 throw new MultiDimensionMismatchException(\n                         new Integer[] { boundaries[0].length },\n                         new Integer[] { init.length });\n-            if (boundaries[1].length != init.length)\n-                throw new MultiDimensionMismatchException(\n-                        new Integer[] { boundaries[1].length },\n-                        new Integer[] { init.length });\n+            if (boundaries.length != 2)\n+\t\t\t\tthrow new MultiDimensionMismatchException(\n+\t\t\t\t\t\tnew Integer[] { boundaries.length },\n+\t\t\t\t\t\tnew Integer[] { 2 });\n             for (int i = 0; i < init.length; i++) {\n                 if (boundaries[0][i] > init[i] || boundaries[1][i] < init[i])\n                     throw new OutOfRangeException(init[i], boundaries[0][i],\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 488, 
          "faulty": "if (boundaries[1].length != init.length) throw new MultiDimensionMismatchException(new Integer[]{boundaries[1].length},new Integer[]{init.length});", 
          "type": "Replace", 
          "seed": "if (boundaries.length != 2) throw new MultiDimensionMismatchException(new Integer[]{boundaries.length},new Integer[]{2});"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1521/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:01:20.115444369 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1521/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:01:20.119444361 -0500\n@@ -408,7 +408,7 @@\n                     if (getConvergenceChecker() != null && lastResult != null) {\n                         if (getConvergenceChecker().converged(\n                                 iterations, optimum, lastResult))\n-                            break generationLoop;\n+\t\t\t\t\t\t\t;\n                     }\n                 }\n                 // handle termination criteria\n@@ -880,7 +880,8 @@\n         public double value(final double[] point) {\n             double value;\n             if (boundaries != null && isRepairMode) {\n-                double[] repaired = repair(point);\n+                ccov1Sep = Math.min(1, ccov1 * (dimension + 1.5) / 3.);\n+\t\t\t\tdouble[] repaired = repair(point);\n                 value = CMAESOptimizer.this\n                         .computeObjectiveValue(decode(repaired)) +\n                         penalty(point, repaired);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 411, 
          "faulty": "break generationLoop;", 
          "type": "Delete", 
          "seed": "dimension=guess.length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 883, 
          "faulty": "double[] repaired=repair(point);", 
          "type": "InsertBefore", 
          "seed": "ccov1Sep=Math.min(1,ccov1 * (dimension + 1.5) / 3.);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1062/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:52:38.560548594 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1062/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:52:38.564548587 -0500\n@@ -925,10 +925,13 @@\n             for (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n-                else if (x[i] > 1.0)\n-                    repaired[i] = 1.0;\n-                else\n-                    repaired[i] = x[i];\n+\t\t\t\telse {\n+\t\t\t\t\trepaired[i] = 1.0;\n+\t\t\t\t\tif (x[i] > 1.0)\n+\t\t\t\t\t\trepaired[i] = 1.0;\n+\t\t\t\t\telse\n+\t\t\t\t\t\trepaired[i] = x[i];\n+\t\t\t\t}\n             }\n             return repaired;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 928, 
          "faulty": "if (x[i] > 1.0) repaired[i]=1.0;\n else repaired[i]=x[i];", 
          "type": "InsertBefore", 
          "seed": "repaired[i]=1.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1006/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:51:36.088663934 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1006/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:51:36.088663934 -0500\n@@ -447,7 +447,7 @@\n                     if (lastResult != null &&\n                             getConvergenceChecker().converged(\n                                     iterations, current, lastResult))\n-                        break generationLoop;\n+\t\t\t\t\t\t;\n                     lastResult = current;\n                 }\n                 // Adjust step size in case of equal function values (flat fitness)\n@@ -944,7 +944,7 @@\n             double penalty = 0;\n             for (int i = 0; i < x.length; i++) {\n                 double diff = Math.abs(x[i] - repaired[i]);\n-                penalty += diff * valueRange;\n+                repaired[i] = 0;\n             }\n             return isMinimize ? penalty : -penalty;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 450, 
          "faulty": "break generationLoop;", 
          "type": "Delete", 
          "seed": "cc=(4. + mueff / dimension) / (dimension + 4. + 2. * mueff / dimension);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 947, 
          "faulty": "penalty+=diff * valueRange;", 
          "type": "Replace", 
          "seed": "repaired[i]=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_495/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:42:23.933629388 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_495/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:42:23.933629388 -0500\n@@ -866,7 +866,8 @@\n                 return x;\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n-                double diff = boundaries[1][i] - boundaries[0][i];\n+                D = ones(dimension, 1);\n+\t\t\t\tdouble diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = diff * x[i] + boundaries[0][i];\n             }\n             return res;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 869, 
          "faulty": "double diff=boundaries[1][i] - boundaries[0][i];", 
          "type": "InsertBefore", 
          "seed": "D=ones(dimension,1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_608/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:44:24.557416563 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_608/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:44:24.557416563 -0500\n@@ -408,7 +408,7 @@\n                     if (getConvergenceChecker() != null && lastResult != null) {\n                         if (getConvergenceChecker().converged(\n                                 iterations, optimum, lastResult))\n-                            break generationLoop;\n+\t\t\t\t\t\t\t;\n                     }\n                 }\n                 // handle termination criteria\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 411, 
          "faulty": "break generationLoop;", 
          "type": "Delete", 
          "seed": "dimension=guess.length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 949, 
          "faulty": "return isMinimize ? penalty : -penalty;", 
          "type": "Replace", 
          "seed": "return isMinimize ? penalty : -penalty;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_492/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:42:21.113634168 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_492/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:42:21.117634162 -0500\n@@ -942,10 +942,6 @@\n          */\n         private double penalty(final double[] x, final double[] repaired) {\n             double penalty = 0;\n-            for (int i = 0; i < x.length; i++) {\n-                double diff = Math.abs(x[i] - repaired[i]);\n-                penalty += diff * valueRange;\n-            }\n             return isMinimize ? penalty : -penalty;\n         }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 945, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  double diff=Math.abs(x[i] - repaired[i]);\n  penalty+=diff * valueRange;\n}", 
          "type": "Delete", 
          "seed": "fitnessHistory=new double[historySize];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_612/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:44:29.421407693 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_612/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:44:29.421407693 -0500\n@@ -481,10 +481,6 @@\n                         new Integer[] { 2 });\n             if (boundaries[0] == null || boundaries[1] == null)\n                 throw new NoDataException();\n-            if (boundaries[0].length != init.length)\n-                throw new MultiDimensionMismatchException(\n-                        new Integer[] { boundaries[0].length },\n-                        new Integer[] { init.length });\n             if (boundaries[1].length != init.length)\n                 throw new MultiDimensionMismatchException(\n                         new Integer[] { boundaries[1].length },\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 484, 
          "faulty": "if (boundaries[0].length != init.length) throw new MultiDimensionMismatchException(new Integer[]{boundaries[0].length},new Integer[]{init.length});", 
          "type": "Delete", 
          "seed": "for (int i=0; i < init.length; i++) {\n  if (inputSigma[i] < 0)   throw new NotPositiveException(inputSigma[i]);\n  if (boundaries != null) {\n    if (inputSigma[i] > 1.0)     throw new OutOfRangeException(inputSigma[i],0,1.0);\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1493/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:00:48.603512882 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1493/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:00:48.603512882 -0500\n@@ -926,8 +926,8 @@\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n                 else if (x[i] > 1.0)\n-                    repaired[i] = 1.0;\n-                else\n+\t\t\t\t\t;\n+\t\t\t\telse\n                     repaired[i] = x[i];\n             }\n             return repaired;\n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-29 03:24:09.607335000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1493/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-29 04:00:48.607512873 -0500\n@@ -137,7 +137,8 @@\n     private String buildMessage(Locale locale,\n                                 String separator) {\n         final StringBuilder sb = new StringBuilder();\n-        int count = 0;\n+        context = new HashMap<String, Object>();\n+\t\tint count = 0;\n         final int len = msgPatterns.size();\n         for (int i = 0; i < len; i++) {\n             final Localizable pat = msgPatterns.get(i);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 929, 
          "faulty": "repaired[i]=1.0;", 
          "type": "Delete", 
          "seed": "fitnessHistory[i]=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 140, 
          "faulty": "int count=0;", 
          "type": "InsertBefore", 
          "seed": "context=new HashMap<String,Object>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1087/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:53:06.636496234 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1087/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:53:06.636496234 -0500\n@@ -925,12 +925,17 @@\n             for (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n-                else if (x[i] > 1.0)\n-                    repaired[i] = 1.0;\n-                else\n-                    repaired[i] = x[i];\n+\t\t\t\telse {\n+\t\t\t\t\trepaired[i] = 1.0;\n+\t\t\t\t\tif (x[i] > 1.0)\n+\t\t\t\t\t\trepaired[i] = 1.0;\n+\t\t\t\t\telse\n+\t\t\t\t\t\trepaired[i] = x[i];\n+\t\t\t\t}\n             }\n-            return repaired;\n+            if (boundaries == null)\n+\t\t\t\treturn x;\n+\t\t\treturn repaired;\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 928, 
          "faulty": "if (x[i] > 1.0) repaired[i]=1.0;\n else repaired[i]=x[i];", 
          "type": "InsertBefore", 
          "seed": "repaired[i]=1.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 933, 
          "faulty": "return repaired;", 
          "type": "InsertBefore", 
          "seed": "if (boundaries == null) return x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_844/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:48:40.000978570 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_844/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:48:40.004978563 -0500\n@@ -849,10 +849,7 @@\n             if (boundaries == null)\n                 return x;\n             double[] res = new double[x.length];\n-            for (int i = 0; i < x.length; i++) {\n-                double diff = boundaries[1][i] - boundaries[0][i];\n-                res[i] = (x[i] - boundaries[0][i]) / diff;\n-            }\n+            ccovmuSep = Math.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3.);\n             return res;\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 852, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  double diff=boundaries[1][i] - boundaries[0][i];\n  res[i]=(x[i] - boundaries[0][i]) / diff;\n}", 
          "type": "Replace", 
          "seed": "ccovmuSep=Math.min(1 - ccov1,ccovmu * (dimension + 1.5) / 3.);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1476/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:00:31.179550941 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1476/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:00:31.183550933 -0500\n@@ -926,8 +926,8 @@\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n                 else if (x[i] > 1.0)\n-                    repaired[i] = 1.0;\n-                else\n+\t\t\t\t\tccov1 = 2. / ((dimension + 1.3) * (dimension + 1.3) + mueff);\n+\t\t\t\telse\n                     repaired[i] = x[i];\n             }\n             return repaired;\n@@ -942,10 +942,6 @@\n          */\n         private double penalty(final double[] x, final double[] repaired) {\n             double penalty = 0;\n-            for (int i = 0; i < x.length; i++) {\n-                double diff = Math.abs(x[i] - repaired[i]);\n-                penalty += diff * valueRange;\n-            }\n             return isMinimize ? penalty : -penalty;\n         }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 945, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  double diff=Math.abs(x[i] - repaired[i]);\n  penalty+=diff * valueRange;\n}", 
          "type": "Delete", 
          "seed": "fitnessHistory=new double[historySize];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 929, 
          "faulty": "repaired[i]=1.0;", 
          "type": "Replace", 
          "seed": "ccov1=2. / ((dimension + 1.3) * (dimension + 1.3) + mueff);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1676/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:04:14.691071270 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1676/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:04:14.691071270 -0500\n@@ -447,7 +447,7 @@\n                     if (lastResult != null &&\n                             getConvergenceChecker().converged(\n                                     iterations, current, lastResult))\n-                        break generationLoop;\n+\t\t\t\t\t\t;\n                     lastResult = current;\n                 }\n                 // Adjust step size in case of equal function values (flat fitness)\n@@ -481,10 +481,6 @@\n                         new Integer[] { 2 });\n             if (boundaries[0] == null || boundaries[1] == null)\n                 throw new NoDataException();\n-            if (boundaries[0].length != init.length)\n-                throw new MultiDimensionMismatchException(\n-                        new Integer[] { boundaries[0].length },\n-                        new Integer[] { init.length });\n             if (boundaries[1].length != init.length)\n                 throw new MultiDimensionMismatchException(\n                         new Integer[] { boundaries[1].length },\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 450, 
          "faulty": "break generationLoop;", 
          "type": "Delete", 
          "seed": "cc=(4. + mueff / dimension) / (dimension + 4. + 2. * mueff / dimension);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 484, 
          "faulty": "if (boundaries[0].length != init.length) throw new MultiDimensionMismatchException(new Integer[]{boundaries[0].length},new Integer[]{init.length});", 
          "type": "Delete", 
          "seed": "for (int i=0; i < init.length; i++) {\n  if (inputSigma[i] < 0)   throw new NotPositiveException(inputSigma[i]);\n  if (boundaries != null) {\n    if (inputSigma[i] > 1.0)     throw new OutOfRangeException(inputSigma[i],0,1.0);\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1613/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:03:04.631219799 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1613/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:03:04.635219790 -0500\n@@ -926,8 +926,8 @@\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n                 else if (x[i] > 1.0)\n-                    repaired[i] = 1.0;\n-                else\n+\t\t\t\t\tccov1 = 2. / ((dimension + 1.3) * (dimension + 1.3) + mueff);\n+\t\t\t\telse\n                     repaired[i] = x[i];\n             }\n             return repaired;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 929, 
          "faulty": "repaired[i]=1.0;", 
          "type": "Replace", 
          "seed": "ccov1=2. / ((dimension + 1.3) * (dimension + 1.3) + mueff);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_909/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:49:51.968852192 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_909/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:49:51.968852192 -0500\n@@ -942,7 +942,8 @@\n          */\n         private double penalty(final double[] x, final double[] repaired) {\n             double penalty = 0;\n-            for (int i = 0; i < x.length; i++) {\n+            valueRange = 1.0;\n+\t\t\tfor (int i = 0; i < x.length; i++) {\n                 double diff = Math.abs(x[i] - repaired[i]);\n                 penalty += diff * valueRange;\n             }\n\n\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 945, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  double diff=Math.abs(x[i] - repaired[i]);\n  penalty+=diff * valueRange;\n}", 
          "type": "InsertBefore", 
          "seed": "valueRange=1.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 121, 
          "faulty": "return getMessage(Locale.US);", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1123/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:53:47.504419529 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1123/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:53:47.504419529 -0500\n@@ -485,10 +485,6 @@\n                 throw new MultiDimensionMismatchException(\n                         new Integer[] { boundaries[0].length },\n                         new Integer[] { init.length });\n-            if (boundaries[1].length != init.length)\n-                throw new MultiDimensionMismatchException(\n-                        new Integer[] { boundaries[1].length },\n-                        new Integer[] { init.length });\n             for (int i = 0; i < init.length; i++) {\n                 if (boundaries[0][i] > init[i] || boundaries[1][i] < init[i])\n                     throw new OutOfRangeException(init[i], boundaries[0][i],\n@@ -922,7 +918,8 @@\n          */\n         private double[] repair(final double[] x) {\n             double[] repaired = new double[x.length];\n-            for (int i = 0; i < x.length; i++) {\n+            iterations = 0;\n+\t\t\tfor (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n                 else if (x[i] > 1.0)\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 488, 
          "faulty": "if (boundaries[1].length != init.length) throw new MultiDimensionMismatchException(new Integer[]{boundaries[1].length},new Integer[]{init.length});", 
          "type": "Delete", 
          "seed": "this.checkFeasableCount=checkFeasableCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 925, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  if (x[i] < 0)   repaired[i]=0;\n else   if (x[i] > 1.0)   repaired[i]=1.0;\n else   repaired[i]=x[i];\n}", 
          "type": "InsertBefore", 
          "seed": "iterations=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_462/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:41:50.221685832 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_462/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:41:50.221685832 -0500\n@@ -447,7 +447,7 @@\n                     if (lastResult != null &&\n                             getConvergenceChecker().converged(\n                                     iterations, current, lastResult))\n-                        break generationLoop;\n+\t\t\t\t\t\t;\n                     lastResult = current;\n                 }\n                 // Adjust step size in case of equal function values (flat fitness)\n@@ -848,7 +848,8 @@\n         public double[] encode(final double[] x) {\n             if (boundaries == null)\n                 return x;\n-            double[] res = new double[x.length];\n+            iterations = 0;\n+\t\t\tdouble[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = (x[i] - boundaries[0][i]) / diff;\n@@ -922,7 +923,8 @@\n          */\n         private double[] repair(final double[] x) {\n             double[] repaired = new double[x.length];\n-            for (int i = 0; i < x.length; i++) {\n+            C = triu(C, 0).add(triu(C, 1).transpose());\n+\t\t\tfor (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n                 else if (x[i] > 1.0)\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 851, 
          "faulty": "double[] res=new double[x.length];", 
          "type": "InsertBefore", 
          "seed": "iterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 450, 
          "faulty": "break generationLoop;", 
          "type": "Delete", 
          "seed": "this.inputSigma=inputSigma;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 925, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  if (x[i] < 0)   repaired[i]=0;\n else   if (x[i] > 1.0)   repaired[i]=1.0;\n else   repaired[i]=x[i];\n}", 
          "type": "InsertBefore", 
          "seed": "C=triu(C,0).add(triu(C,1).transpose());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_218/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:37:12.066059774 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_218/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:37:12.066059774 -0500\n@@ -944,7 +944,6 @@\n             double penalty = 0;\n             for (int i = 0; i < x.length; i++) {\n                 double diff = Math.abs(x[i] - repaired[i]);\n-                penalty += diff * valueRange;\n             }\n             return isMinimize ? penalty : -penalty;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 947, 
          "faulty": "penalty+=diff * valueRange;", 
          "type": "Delete", 
          "seed": "if (inputSigma[i] > 1.0) throw new OutOfRangeException(inputSigma[i],0,1.0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_560/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:43:35.865504248 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_560/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:43:35.865504248 -0500\n@@ -849,10 +849,6 @@\n             if (boundaries == null)\n                 return x;\n             double[] res = new double[x.length];\n-            for (int i = 0; i < x.length; i++) {\n-                double diff = boundaries[1][i] - boundaries[0][i];\n-                res[i] = (x[i] - boundaries[0][i]) / diff;\n-            }\n             return res;\n         }\n \n@@ -943,7 +939,8 @@\n         private double penalty(final double[] x, final double[] repaired) {\n             double penalty = 0;\n             for (int i = 0; i < x.length; i++) {\n-                double diff = Math.abs(x[i] - repaired[i]);\n+                historySize = 10 + (int) (3. * 10. * dimension / lambda);\n+\t\t\t\tdouble diff = Math.abs(x[i] - repaired[i]);\n                 penalty += diff * valueRange;\n             }\n             return isMinimize ? penalty : -penalty;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 946, 
          "faulty": "double diff=Math.abs(x[i] - repaired[i]);", 
          "type": "InsertBefore", 
          "seed": "historySize=10 + (int)(3. * 10. * dimension / lambda);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 852, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  double diff=boundaries[1][i] - boundaries[0][i];\n  res[i]=(x[i] - boundaries[0][i]) / diff;\n}", 
          "type": "Delete", 
          "seed": "ccovmuSep=Math.min(1 - ccov1,ccovmu * (dimension + 1.5) / 3.);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1135/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:54:01.620392913 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 933, 
          "faulty": "return repaired;", 
          "type": "Replace", 
          "seed": "return repaired;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_918/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:50:01.920834394 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_918/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:50:01.924834386 -0500\n@@ -853,7 +853,8 @@\n                 double diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = (x[i] - boundaries[0][i]) / diff;\n             }\n-            return res;\n+            cs = (mueff + 2.) / (dimension + mueff + 3.);\n+\t\t\treturn res;\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 856, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "cs=(mueff + 2.) / (dimension + mueff + 3.);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1295/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:57:05.400011696 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-29 03:24:09.607335000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1295/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-29 03:57:05.404011687 -0500\n@@ -118,7 +118,7 @@\n    /** {@inheritDoc} */\n     @Override\n     public String getMessage() {\n-        return getMessage(Locale.US);\n+        return getMessage(Locale.getDefault());\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1295/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:57:05.404011687 -0500\n@@ -850,7 +850,9 @@\n                 return x;\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n-                double diff = boundaries[1][i] - boundaries[0][i];\n+                if (lambda <= 0)\n+\t\t\t\t\tlambda = 4 + (int) (3. * Math.log(dimension));\n+\t\t\t\tdouble diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = (x[i] - boundaries[0][i]) / diff;\n             }\n             return res;\n@@ -930,7 +932,9 @@\n                 else\n                     repaired[i] = x[i];\n             }\n-            return repaired;\n+            if (boundaries == null)\n+\t\t\t\treturn x;\n+\t\t\treturn repaired;\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 121, 
          "faulty": "return getMessage(Locale.US);", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.getDefault());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 853, 
          "faulty": "double diff=boundaries[1][i] - boundaries[0][i];", 
          "type": "InsertBefore", 
          "seed": "if (lambda <= 0) lambda=4 + (int)(3. * Math.log(dimension));"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 933, 
          "faulty": "return repaired;", 
          "type": "InsertBefore", 
          "seed": "if (boundaries == null) return x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1823/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:06:56.302733591 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1823/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:06:56.302733591 -0500\n@@ -849,10 +849,6 @@\n             if (boundaries == null)\n                 return x;\n             double[] res = new double[x.length];\n-            for (int i = 0; i < x.length; i++) {\n-                double diff = boundaries[1][i] - boundaries[0][i];\n-                res[i] = (x[i] - boundaries[0][i]) / diff;\n-            }\n             return res;\n         }\n \n@@ -865,7 +861,9 @@\n             if (boundaries == null)\n                 return x;\n             double[] res = new double[x.length];\n-            for (int i = 0; i < x.length; i++) {\n+            if (boundaries == null)\n+\t\t\t\treturn x;\n+\t\t\tfor (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = diff * x[i] + boundaries[0][i];\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 868, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  double diff=boundaries[1][i] - boundaries[0][i];\n  res[i]=diff * x[i] + boundaries[0][i];\n}", 
          "type": "InsertBefore", 
          "seed": "if (boundaries == null) return x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 852, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  double diff=boundaries[1][i] - boundaries[0][i];\n  res[i]=(x[i] - boundaries[0][i]) / diff;\n}", 
          "type": "Delete", 
          "seed": "if (min(diagD) <= 0) {\n  for (int i=0; i < dimension; i++)   if (diagD.getEntry(i,0) < 0)   diagD.setEntry(i,0,0.);\n  double tfac=max(diagD) / 1e14;\n  C=C.add(eye(dimension,dimension).scalarMultiply(tfac));\n  diagD=diagD.add(ones(dimension,1).scalarMultiply(tfac));\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1881/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:08:00.902600203 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1881/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:08:00.902600203 -0500\n@@ -944,7 +944,8 @@\n             double penalty = 0;\n             for (int i = 0; i < x.length; i++) {\n                 double diff = Math.abs(x[i] - repaired[i]);\n-                penalty += diff * valueRange;\n+                repaired[i] = 0;\n+\t\t\t\tpenalty += diff * valueRange;\n             }\n             return isMinimize ? penalty : -penalty;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 947, 
          "faulty": "penalty+=diff * valueRange;", 
          "type": "InsertBefore", 
          "seed": "repaired[i]=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1450/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:00:03.075612607 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1450/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:00:03.079612598 -0500\n@@ -408,7 +408,7 @@\n                     if (getConvergenceChecker() != null && lastResult != null) {\n                         if (getConvergenceChecker().converged(\n                                 iterations, optimum, lastResult))\n-                            break generationLoop;\n+\t\t\t\t\t\t\t;\n                     }\n                 }\n                 // handle termination criteria\n@@ -921,7 +921,9 @@\n          * @return Repaired objective variables - all in bounds.\n          */\n         private double[] repair(final double[] x) {\n-            double[] repaired = new double[x.length];\n+            chiN = Math.sqrt(dimension)\n+\t\t\t\t\t* (1. - 1. / (4. * dimension) + 1 / (21. * dimension * dimension));\n+\t\t\tdouble[] repaired = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 411, 
          "faulty": "break generationLoop;", 
          "type": "Delete", 
          "seed": "cs=(mueff + 2.) / (dimension + mueff + 3.);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 924, 
          "faulty": "double[] repaired=new double[x.length];", 
          "type": "InsertBefore", 
          "seed": "chiN=Math.sqrt(dimension) * (1. - 1. / (4. * dimension) + 1 / (21. * dimension * dimension));"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1304/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:57:14.611990559 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1304/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:57:14.615990550 -0500\n@@ -922,7 +922,8 @@\n          */\n         private double[] repair(final double[] x) {\n             double[] repaired = new double[x.length];\n-            for (int i = 0; i < x.length; i++) {\n+            iterations = 0;\n+\t\t\tfor (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n                 else if (x[i] > 1.0)\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 127, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.getDefault());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 925, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  if (x[i] < 0)   repaired[i]=0;\n else   if (x[i] > 1.0)   repaired[i]=1.0;\n else   repaired[i]=x[i];\n}", 
          "type": "InsertBefore", 
          "seed": "iterations=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_904/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:49:47.296860523 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_904/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:49:47.300860516 -0500\n@@ -927,8 +927,10 @@\n                     repaired[i] = 0;\n                 else if (x[i] > 1.0)\n                     repaired[i] = 1.0;\n-                else\n-                    repaired[i] = x[i];\n+\t\t\t\telse {\n+\t\t\t\t\titerations = 0;\n+\t\t\t\t\trepaired[i] = x[i];\n+\t\t\t\t}\n             }\n             return repaired;\n         }\n@@ -944,7 +946,8 @@\n             double penalty = 0;\n             for (int i = 0; i < x.length; i++) {\n                 double diff = Math.abs(x[i] - repaired[i]);\n-                penalty += diff * valueRange;\n+                diagC = diag(C);\n+\t\t\t\tpenalty += diff * valueRange;\n             }\n             return isMinimize ? penalty : -penalty;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 947, 
          "faulty": "penalty+=diff * valueRange;", 
          "type": "InsertBefore", 
          "seed": "diagC=diag(C);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 931, 
          "faulty": "repaired[i]=x[i];", 
          "type": "InsertBefore", 
          "seed": "iterations=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_947/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:50:33.196778058 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_947/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:50:33.200778051 -0500\n@@ -943,7 +943,9 @@\n         private double penalty(final double[] x, final double[] repaired) {\n             double penalty = 0;\n             for (int i = 0; i < x.length; i++) {\n-                double diff = Math.abs(x[i] - repaired[i]);\n+                ccovmu = Math.min(1 - ccov1, 2. * (mueff - 2. + 1. / mueff)\n+\t\t\t\t\t\t/ ((dimension + 2.) * (dimension + 2.) + mueff));\n+\t\t\t\tdouble diff = Math.abs(x[i] - repaired[i]);\n                 penalty += diff * valueRange;\n             }\n             return isMinimize ? penalty : -penalty;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 946, 
          "faulty": "double diff=Math.abs(x[i] - repaired[i]);", 
          "type": "InsertBefore", 
          "seed": "ccovmu=Math.min(1 - ccov1,2. * (mueff - 2. + 1. / mueff) / ((dimension + 2.) * (dimension + 2.) + mueff));"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 949, 
          "faulty": "return isMinimize ? penalty : -penalty;", 
          "type": "Replace", 
          "seed": "return isMinimize ? penalty : -penalty;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1220/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:55:42.816195644 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1220/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:55:42.820195636 -0500\n@@ -851,7 +851,9 @@\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n-                res[i] = (x[i] - boundaries[0][i]) / diff;\n+                if (lambda <= 0)\n+\t\t\t\t\tlambda = 4 + (int) (3. * Math.log(dimension));\n+\t\t\t\tres[i] = (x[i] - boundaries[0][i]) / diff;\n             }\n             return res;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 854, 
          "faulty": "res[i]=(x[i] - boundaries[0][i]) / diff;", 
          "type": "InsertBefore", 
          "seed": "if (lambda <= 0) lambda=4 + (int)(3. * Math.log(dimension));"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_579/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:43:55.177469726 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_579/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:43:55.181469718 -0500\n@@ -927,8 +927,10 @@\n                     repaired[i] = 0;\n                 else if (x[i] > 1.0)\n                     repaired[i] = 1.0;\n-                else\n-                    repaired[i] = x[i];\n+\t\t\t\telse {\n+\t\t\t\t\titerations = 0;\n+\t\t\t\t\trepaired[i] = x[i];\n+\t\t\t\t}\n             }\n             return repaired;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 931, 
          "faulty": "repaired[i]=x[i];", 
          "type": "InsertBefore", 
          "seed": "iterations=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_392/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:40:31.533810613 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_392/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:40:31.533810613 -0500\n@@ -922,7 +922,8 @@\n          */\n         private double[] repair(final double[] x) {\n             double[] repaired = new double[x.length];\n-            for (int i = 0; i < x.length; i++) {\n+            C = triu(C, 0).add(triu(C, 1).transpose());\n+\t\t\tfor (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n                 else if (x[i] > 1.0)\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 925, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  if (x[i] < 0)   repaired[i]=0;\n else   if (x[i] > 1.0)   repaired[i]=1.0;\n else   repaired[i]=x[i];\n}", 
          "type": "InsertBefore", 
          "seed": "C=triu(C,0).add(triu(C,1).transpose());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_210/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:37:05.154065929 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_210/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:37:05.158065926 -0500\n@@ -504,8 +504,10 @@\n                 if (inputSigma[i] < 0)\n                     throw new NotPositiveException(inputSigma[i]);\n                 if (boundaries != null) {\n-                    if (inputSigma[i] > 1.0)\n-                        throw new OutOfRangeException(inputSigma[i], 0, 1.0);\n+                    if (boundaries != null) {\n+\t\t\t\t\t\tif (inputSigma[i] > 1.0)\n+\t\t\t\t\t\t\tthrow new OutOfRangeException(inputSigma[i], 0, 1.0);\n+\t\t\t\t\t}\n                 }\n             }\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 507, 
          "faulty": "if (inputSigma[i] > 1.0) throw new OutOfRangeException(inputSigma[i],0,1.0);", 
          "type": "Replace", 
          "seed": "if (boundaries != null) {\n  if (inputSigma[i] > 1.0)   throw new OutOfRangeException(inputSigma[i],0,1.0);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1528/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:01:28.179426900 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1528/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:01:28.179426900 -0500\n@@ -851,7 +851,9 @@\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n-                res[i] = (x[i] - boundaries[0][i]) / diff;\n+                if (lambda <= 0)\n+\t\t\t\t\tlambda = 4 + (int) (3. * Math.log(dimension));\n+\t\t\t\tres[i] = (x[i] - boundaries[0][i]) / diff;\n             }\n             return res;\n         }\n@@ -944,7 +946,7 @@\n             double penalty = 0;\n             for (int i = 0; i < x.length; i++) {\n                 double diff = Math.abs(x[i] - repaired[i]);\n-                penalty += diff * valueRange;\n+                diagD = sqrt(diagD);\n             }\n             return isMinimize ? penalty : -penalty;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 947, 
          "faulty": "penalty+=diff * valueRange;", 
          "type": "Replace", 
          "seed": "diagD=sqrt(diagD);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 854, 
          "faulty": "res[i]=(x[i] - boundaries[0][i]) / diff;", 
          "type": "InsertBefore", 
          "seed": "if (lambda <= 0) lambda=4 + (int)(3. * Math.log(dimension));"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1743/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:05:27.798917738 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1743/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:05:27.798917738 -0500\n@@ -865,7 +865,9 @@\n             if (boundaries == null)\n                 return x;\n             double[] res = new double[x.length];\n-            for (int i = 0; i < x.length; i++) {\n+            ccovmu = Math.min(1 - ccov1, 2. * (mueff - 2. + 1. / mueff)\n+\t\t\t\t\t/ ((dimension + 2.) * (dimension + 2.) + mueff));\n+\t\t\tfor (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = diff * x[i] + boundaries[0][i];\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 868, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  double diff=boundaries[1][i] - boundaries[0][i];\n  res[i]=diff * x[i] + boundaries[0][i];\n}", 
          "type": "InsertBefore", 
          "seed": "ccovmu=Math.min(1 - ccov1,2. * (mueff - 2. + 1. / mueff) / ((dimension + 2.) * (dimension + 2.) + mueff));"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1608/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:02:59.319231123 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1608/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:02:59.319231123 -0500\n@@ -408,7 +408,7 @@\n                     if (getConvergenceChecker() != null && lastResult != null) {\n                         if (getConvergenceChecker().converged(\n                                 iterations, optimum, lastResult))\n-                            break generationLoop;\n+\t\t\t\t\t\t\t;\n                     }\n                 }\n                 // handle termination criteria\n@@ -943,7 +943,9 @@\n         private double penalty(final double[] x, final double[] repaired) {\n             double penalty = 0;\n             for (int i = 0; i < x.length; i++) {\n-                double diff = Math.abs(x[i] - repaired[i]);\n+                ccovmu = Math.min(1 - ccov1, 2. * (mueff - 2. + 1. / mueff)\n+\t\t\t\t\t\t/ ((dimension + 2.) * (dimension + 2.) + mueff));\n+\t\t\t\tdouble diff = Math.abs(x[i] - repaired[i]);\n                 penalty += diff * valueRange;\n             }\n             return isMinimize ? penalty : -penalty;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 411, 
          "faulty": "break generationLoop;", 
          "type": "Delete", 
          "seed": "return optimum;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 946, 
          "faulty": "double diff=Math.abs(x[i] - repaired[i]);", 
          "type": "InsertBefore", 
          "seed": "ccovmu=Math.min(1 - ccov1,2. * (mueff - 2. + 1. / mueff) / ((dimension + 2.) * (dimension + 2.) + mueff));"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1745/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:05:29.102915012 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1745/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:05:29.106915003 -0500\n@@ -850,7 +850,8 @@\n                 return x;\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n-                double diff = boundaries[1][i] - boundaries[0][i];\n+                evaluations.incrementCount();\n+\t\t\t\tdouble diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = (x[i] - boundaries[0][i]) / diff;\n             }\n             return res;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 853, 
          "faulty": "double diff=boundaries[1][i] - boundaries[0][i];", 
          "type": "InsertBefore", 
          "seed": "evaluations.incrementCount();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1416/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:59:23.507700043 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1416/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:59:23.507700043 -0500\n@@ -485,10 +485,7 @@\n                 throw new MultiDimensionMismatchException(\n                         new Integer[] { boundaries[0].length },\n                         new Integer[] { init.length });\n-            if (boundaries[1].length != init.length)\n-                throw new MultiDimensionMismatchException(\n-                        new Integer[] { boundaries[1].length },\n-                        new Integer[] { init.length });\n+            this.lambda = lambda;\n             for (int i = 0; i < init.length; i++) {\n                 if (boundaries[0][i] > init[i] || boundaries[1][i] < init[i])\n                     throw new OutOfRangeException(init[i], boundaries[0][i],\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 488, 
          "faulty": "if (boundaries[1].length != init.length) throw new MultiDimensionMismatchException(new Integer[]{boundaries[1].length},new Integer[]{init.length});", 
          "type": "Replace", 
          "seed": "this.lambda=lambda;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_685/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:45:45.733266275 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_685/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:45:45.733266275 -0500\n@@ -485,10 +485,7 @@\n                 throw new MultiDimensionMismatchException(\n                         new Integer[] { boundaries[0].length },\n                         new Integer[] { init.length });\n-            if (boundaries[1].length != init.length)\n-                throw new MultiDimensionMismatchException(\n-                        new Integer[] { boundaries[1].length },\n-                        new Integer[] { init.length });\n+            this.checkFeasableCount = checkFeasableCount;\n             for (int i = 0; i < init.length; i++) {\n                 if (boundaries[0][i] > init[i] || boundaries[1][i] < init[i])\n                     throw new OutOfRangeException(init[i], boundaries[0][i],\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 488, 
          "faulty": "if (boundaries[1].length != init.length) throw new MultiDimensionMismatchException(new Integer[]{boundaries[1].length},new Integer[]{init.length});", 
          "type": "Replace", 
          "seed": "this.checkFeasableCount=checkFeasableCount;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_761/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:47:08.981130999 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_761/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:47:08.981130999 -0500\n@@ -447,7 +447,7 @@\n                     if (lastResult != null &&\n                             getConvergenceChecker().converged(\n                                     iterations, current, lastResult))\n-                        break generationLoop;\n+\t\t\t\t\t\t;\n                     lastResult = current;\n                 }\n                 // Adjust step size in case of equal function values (flat fitness)\n@@ -922,7 +922,9 @@\n          */\n         private double[] repair(final double[] x) {\n             double[] repaired = new double[x.length];\n-            for (int i = 0; i < x.length; i++) {\n+            cc = (4. + mueff / dimension)\n+\t\t\t\t\t/ (dimension + 4. + 2. * mueff / dimension);\n+\t\t\tfor (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n                 else if (x[i] > 1.0)\n@@ -942,10 +944,6 @@\n          */\n         private double penalty(final double[] x, final double[] repaired) {\n             double penalty = 0;\n-            for (int i = 0; i < x.length; i++) {\n-                double diff = Math.abs(x[i] - repaired[i]);\n-                penalty += diff * valueRange;\n-            }\n             return isMinimize ? penalty : -penalty;\n         }\n     }\n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-29 03:24:09.607335000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_761/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-29 03:47:08.985130992 -0500\n@@ -100,7 +100,8 @@\n      * @return the localized message.\n      */\n     public String getMessage(final Locale locale) {\n-        return buildMessage(locale, \": \");\n+        context = new HashMap<String, Object>();\n+\t\treturn buildMessage(locale, \": \");\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 450, 
          "faulty": "break generationLoop;", 
          "type": "Delete", 
          "seed": "cc=(4. + mueff / dimension) / (dimension + 4. + 2. * mueff / dimension);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 945, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  double diff=Math.abs(x[i] - repaired[i]);\n  penalty+=diff * valueRange;\n}", 
          "type": "Delete", 
          "seed": "fitnessHistory=new double[historySize];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 103, 
          "faulty": "return buildMessage(locale,\": \");", 
          "type": "InsertBefore", 
          "seed": "context=new HashMap<String,Object>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 925, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  if (x[i] < 0)   repaired[i]=0;\n else   if (x[i] > 1.0)   repaired[i]=1.0;\n else   repaired[i]=x[i];\n}", 
          "type": "InsertBefore", 
          "seed": "cc=(4. + mueff / dimension) / (dimension + 4. + 2. * mueff / dimension);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1501/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:00:57.475493552 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1501/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:00:57.479493543 -0500\n@@ -408,7 +408,7 @@\n                     if (getConvergenceChecker() != null && lastResult != null) {\n                         if (getConvergenceChecker().converged(\n                                 iterations, optimum, lastResult))\n-                            break generationLoop;\n+\t\t\t\t\t\t\t;\n                     }\n                 }\n                 // handle termination criteria\n@@ -866,7 +866,8 @@\n                 return x;\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n-                double diff = boundaries[1][i] - boundaries[0][i];\n+                D = ones(dimension, 1);\n+\t\t\t\tdouble diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = diff * x[i] + boundaries[0][i];\n             }\n             return res;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 411, 
          "faulty": "break generationLoop;", 
          "type": "Delete", 
          "seed": "isMinimize=getGoalType().equals(GoalType.MINIMIZE);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 869, 
          "faulty": "double diff=boundaries[1][i] - boundaries[0][i];", 
          "type": "InsertBefore", 
          "seed": "D=ones(dimension,1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1015/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:51:45.044647509 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-29 03:24:09.607335000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1015/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-29 03:51:45.044647509 -0500\n@@ -118,7 +118,7 @@\n    /** {@inheritDoc} */\n     @Override\n     public String getMessage() {\n-        return getMessage(Locale.US);\n+        return getMessage(Locale.getDefault());\n     }\n \n     /** {@inheritDoc} */\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 121, 
          "faulty": "return getMessage(Locale.US);", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.getDefault());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_994/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:51:23.220687463 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_994/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:51:23.224687456 -0500\n@@ -869,7 +869,8 @@\n                 double diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = diff * x[i] + boundaries[0][i];\n             }\n-            return res;\n+            logMu2 = Math.log(mu + 0.5);\n+\t\t\treturn res;\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 872, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "logMu2=Math.log(mu + 0.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1045/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:52:19.820583372 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1045/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:52:19.820583372 -0500\n@@ -851,7 +851,9 @@\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n-                res[i] = (x[i] - boundaries[0][i]) / diff;\n+                if (boundaries == null)\n+\t\t\t\t\treturn x;\n+\t\t\t\tres[i] = (x[i] - boundaries[0][i]) / diff;\n             }\n             return res;\n         }\n@@ -943,7 +945,8 @@\n         private double penalty(final double[] x, final double[] repaired) {\n             double penalty = 0;\n             for (int i = 0; i < x.length; i++) {\n-                double diff = Math.abs(x[i] - repaired[i]);\n+                historySize = 10 + (int) (3. * 10. * dimension / lambda);\n+\t\t\t\tdouble diff = Math.abs(x[i] - repaired[i]);\n                 penalty += diff * valueRange;\n             }\n             return isMinimize ? penalty : -penalty;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 854, 
          "faulty": "res[i]=(x[i] - boundaries[0][i]) / diff;", 
          "type": "InsertBefore", 
          "seed": "if (boundaries == null) return x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 946, 
          "faulty": "double diff=Math.abs(x[i] - repaired[i]);", 
          "type": "InsertBefore", 
          "seed": "historySize=10 + (int)(3. * 10. * dimension / lambda);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_215/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:37:09.446062132 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_215/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:37:09.446062132 -0500\n@@ -921,7 +921,9 @@\n          * @return Repaired objective variables - all in bounds.\n          */\n         private double[] repair(final double[] x) {\n-            double[] repaired = new double[x.length];\n+            cc = (4. + mueff / dimension)\n+\t\t\t\t\t/ (dimension + 4. + 2. * mueff / dimension);\n+\t\t\tdouble[] repaired = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 924, 
          "faulty": "double[] repaired=new double[x.length];", 
          "type": "InsertBefore", 
          "seed": "cc=(4. + mueff / dimension) / (dimension + 4. + 2. * mueff / dimension);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 933, 
          "faulty": "return repaired;", 
          "type": "Replace", 
          "seed": "return repaired;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1053/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:52:29.028566302 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1053/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:52:29.032566294 -0500\n@@ -921,8 +921,11 @@\n          * @return Repaired objective variables - all in bounds.\n          */\n         private double[] repair(final double[] x) {\n-            double[] repaired = new double[x.length];\n-            for (int i = 0; i < x.length; i++) {\n+            cc = (4. + mueff / dimension)\n+\t\t\t\t\t/ (dimension + 4. + 2. * mueff / dimension);\n+\t\t\tdouble[] repaired = new double[x.length];\n+            iterations = 0;\n+\t\t\tfor (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n                 else if (x[i] > 1.0)\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 925, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  if (x[i] < 0)   repaired[i]=0;\n else   if (x[i] > 1.0)   repaired[i]=1.0;\n else   repaired[i]=x[i];\n}", 
          "type": "InsertBefore", 
          "seed": "iterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 924, 
          "faulty": "double[] repaired=new double[x.length];", 
          "type": "InsertBefore", 
          "seed": "cc=(4. + mueff / dimension) / (dimension + 4. + 2. * mueff / dimension);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_960/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:50:47.220752810 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_960/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:50:47.224752803 -0500\n@@ -447,7 +447,7 @@\n                     if (lastResult != null &&\n                             getConvergenceChecker().converged(\n                                     iterations, current, lastResult))\n-                        break generationLoop;\n+\t\t\t\t\t\t;\n                     lastResult = current;\n                 }\n                 // Adjust step size in case of equal function values (flat fitness)\n@@ -943,7 +943,7 @@\n         private double penalty(final double[] x, final double[] repaired) {\n             double penalty = 0;\n             for (int i = 0; i < x.length; i++) {\n-                double diff = Math.abs(x[i] - repaired[i]);\n+                double diff = boundaries[1][i] - boundaries[0][i];\n                 penalty += diff * valueRange;\n             }\n             return isMinimize ? penalty : -penalty;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 450, 
          "faulty": "break generationLoop;", 
          "type": "Delete", 
          "seed": "cc=(4. + mueff / dimension) / (dimension + 4. + 2. * mueff / dimension);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 946, 
          "faulty": "double diff=Math.abs(x[i] - repaired[i]);", 
          "type": "Replace", 
          "seed": "double diff=boundaries[1][i] - boundaries[0][i];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_503/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:42:32.485614826 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_503/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:42:32.489614820 -0500\n@@ -865,7 +865,8 @@\n             if (boundaries == null)\n                 return x;\n             double[] res = new double[x.length];\n-            for (int i = 0; i < x.length; i++) {\n+            diagD = sqrt(diagD);\n+\t\t\tfor (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = diff * x[i] + boundaries[0][i];\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 868, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  double diff=boundaries[1][i] - boundaries[0][i];\n  res[i]=diff * x[i] + boundaries[0][i];\n}", 
          "type": "InsertBefore", 
          "seed": "diagD=sqrt(diagD);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_654/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:45:13.581326340 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_654/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:45:13.581326340 -0500\n@@ -446,8 +446,10 @@\n                                 isMinimize ? bestFitness : -bestFitness);\n                     if (lastResult != null &&\n                             getConvergenceChecker().converged(\n-                                    iterations, current, lastResult))\n-                        break generationLoop;\n+                                    iterations, current, lastResult)) {\n+\t\t\t\t\t\tnormps = norm(ps);\n+\t\t\t\t\t\tbreak generationLoop;\n+\t\t\t\t\t}\n                     lastResult = current;\n                 }\n                 // Adjust step size in case of equal function values (flat fitness)\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 450, 
          "faulty": "break generationLoop;", 
          "type": "InsertBefore", 
          "seed": "normps=norm(ps);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1801/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:06:30.946786173 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1801/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:06:30.946786173 -0500\n@@ -485,10 +485,6 @@\n                 throw new MultiDimensionMismatchException(\n                         new Integer[] { boundaries[0].length },\n                         new Integer[] { init.length });\n-            if (boundaries[1].length != init.length)\n-                throw new MultiDimensionMismatchException(\n-                        new Integer[] { boundaries[1].length },\n-                        new Integer[] { init.length });\n             for (int i = 0; i < init.length; i++) {\n                 if (boundaries[0][i] > init[i] || boundaries[1][i] < init[i])\n                     throw new OutOfRangeException(init[i], boundaries[0][i],\n@@ -849,10 +845,6 @@\n             if (boundaries == null)\n                 return x;\n             double[] res = new double[x.length];\n-            for (int i = 0; i < x.length; i++) {\n-                double diff = boundaries[1][i] - boundaries[0][i];\n-                res[i] = (x[i] - boundaries[0][i]) / diff;\n-            }\n             return res;\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 488, 
          "faulty": "if (boundaries[1].length != init.length) throw new MultiDimensionMismatchException(new Integer[]{boundaries[1].length},new Integer[]{init.length});", 
          "type": "Delete", 
          "seed": "if (boundaries.length != 2) throw new MultiDimensionMismatchException(new Integer[]{boundaries.length},new Integer[]{2});"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 852, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  double diff=boundaries[1][i] - boundaries[0][i];\n  res[i]=(x[i] - boundaries[0][i]) / diff;\n}", 
          "type": "Delete", 
          "seed": "ccovmuSep=Math.min(1 - ccov1,ccovmu * (dimension + 1.5) / 3.);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1728/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:05:11.090952705 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1728/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:05:11.090952705 -0500\n@@ -925,9 +925,10 @@\n             for (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n-                else if (x[i] > 1.0)\n-                    repaired[i] = 1.0;\n-                else\n+                else if (x[i] > 1.0) {\n+\t\t\t\t\tfitnessHistory[i] = Double.MAX_VALUE;\n+\t\t\t\t\trepaired[i] = 1.0;\n+\t\t\t\t} else\n                     repaired[i] = x[i];\n             }\n             return repaired;\n@@ -944,7 +945,8 @@\n             double penalty = 0;\n             for (int i = 0; i < x.length; i++) {\n                 double diff = Math.abs(x[i] - repaired[i]);\n-                penalty += diff * valueRange;\n+                diagC = diag(C);\n+\t\t\t\tpenalty += diff * valueRange;\n             }\n             return isMinimize ? penalty : -penalty;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 947, 
          "faulty": "penalty+=diff * valueRange;", 
          "type": "InsertBefore", 
          "seed": "diagC=diag(C);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 929, 
          "faulty": "repaired[i]=1.0;", 
          "type": "InsertBefore", 
          "seed": "fitnessHistory[i]=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_656/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:45:14.853323976 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_656/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:45:14.853323976 -0500\n@@ -921,7 +921,9 @@\n          * @return Repaired objective variables - all in bounds.\n          */\n         private double[] repair(final double[] x) {\n-            double[] repaired = new double[x.length];\n+            if (lambda <= 0)\n+\t\t\t\tlambda = 4 + (int) (3. * Math.log(dimension));\n+\t\t\tdouble[] repaired = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 924, 
          "faulty": "double[] repaired=new double[x.length];", 
          "type": "InsertBefore", 
          "seed": "if (lambda <= 0) lambda=4 + (int)(3. * Math.log(dimension));"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_867/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:49:04.104936735 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_867/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:49:04.104936735 -0500\n@@ -921,7 +921,8 @@\n          * @return Repaired objective variables - all in bounds.\n          */\n         private double[] repair(final double[] x) {\n-            double[] repaired = new double[x.length];\n+            diagD = diag(D);\n+\t\t\tdouble[] repaired = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n@@ -943,7 +944,8 @@\n         private double penalty(final double[] x, final double[] repaired) {\n             double penalty = 0;\n             for (int i = 0; i < x.length; i++) {\n-                double diff = Math.abs(x[i] - repaired[i]);\n+                historySize = 10 + (int) (3. * 10. * dimension / lambda);\n+\t\t\t\tdouble diff = Math.abs(x[i] - repaired[i]);\n                 penalty += diff * valueRange;\n             }\n             return isMinimize ? penalty : -penalty;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 946, 
          "faulty": "double diff=Math.abs(x[i] - repaired[i]);", 
          "type": "InsertBefore", 
          "seed": "historySize=10 + (int)(3. * 10. * dimension / lambda);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 924, 
          "faulty": "double[] repaired=new double[x.length];", 
          "type": "InsertBefore", 
          "seed": "diagD=diag(D);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_600/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:44:16.325431533 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_600/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:44:16.329431525 -0500\n@@ -943,7 +943,7 @@\n         private double penalty(final double[] x, final double[] repaired) {\n             double penalty = 0;\n             for (int i = 0; i < x.length; i++) {\n-                double diff = Math.abs(x[i] - repaired[i]);\n+                double diff = boundaries[1][i] - boundaries[0][i];\n                 penalty += diff * valueRange;\n             }\n             return isMinimize ? penalty : -penalty;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 946, 
          "faulty": "double diff=Math.abs(x[i] - repaired[i]);", 
          "type": "Replace", 
          "seed": "double diff=boundaries[1][i] - boundaries[0][i];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1716/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:04:58.250979625 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1716/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:04:58.250979625 -0500\n@@ -866,7 +866,8 @@\n                 return x;\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n-                double diff = boundaries[1][i] - boundaries[0][i];\n+                D = ones(dimension, 1);\n+\t\t\t\tdouble diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = diff * x[i] + boundaries[0][i];\n             }\n             return res;\n@@ -921,7 +922,9 @@\n          * @return Repaired objective variables - all in bounds.\n          */\n         private double[] repair(final double[] x) {\n-            double[] repaired = new double[x.length];\n+            chiN = Math.sqrt(dimension)\n+\t\t\t\t\t* (1. - 1. / (4. * dimension) + 1 / (21. * dimension * dimension));\n+\t\t\tdouble[] repaired = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 869, 
          "faulty": "double diff=boundaries[1][i] - boundaries[0][i];", 
          "type": "InsertBefore", 
          "seed": "D=ones(dimension,1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 924, 
          "faulty": "double[] repaired=new double[x.length];", 
          "type": "InsertBefore", 
          "seed": "chiN=Math.sqrt(dimension) * (1. - 1. / (4. * dimension) + 1 / (21. * dimension * dimension));"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1253/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:56:18.372120477 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1253/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:56:18.372120477 -0500\n@@ -853,7 +853,7 @@\n                 double diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = (x[i] - boundaries[0][i]) / diff;\n             }\n-            return res;\n+            return x;\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 856, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_647/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:45:07.561337511 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_647/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:45:07.561337511 -0500\n@@ -848,7 +848,8 @@\n         public double[] encode(final double[] x) {\n             if (boundaries == null)\n                 return x;\n-            double[] res = new double[x.length];\n+            checkParameters();\n+\t\t\tdouble[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = (x[i] - boundaries[0][i]) / diff;\n@@ -867,7 +868,9 @@\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n-                res[i] = diff * x[i] + boundaries[0][i];\n+                cc = (4. + mueff / dimension)\n+\t\t\t\t\t\t/ (dimension + 4. + 2. * mueff / dimension);\n+\t\t\t\tres[i] = diff * x[i] + boundaries[0][i];\n             }\n             return res;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 851, 
          "faulty": "double[] res=new double[x.length];", 
          "type": "InsertBefore", 
          "seed": "checkParameters();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 870, 
          "faulty": "res[i]=diff * x[i] + boundaries[0][i];", 
          "type": "InsertBefore", 
          "seed": "cc=(4. + mueff / dimension) / (dimension + 4. + 2. * mueff / dimension);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1770/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:05:56.266858314 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1770/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:05:56.270858306 -0500\n@@ -485,10 +485,6 @@\n                 throw new MultiDimensionMismatchException(\n                         new Integer[] { boundaries[0].length },\n                         new Integer[] { init.length });\n-            if (boundaries[1].length != init.length)\n-                throw new MultiDimensionMismatchException(\n-                        new Integer[] { boundaries[1].length },\n-                        new Integer[] { init.length });\n             for (int i = 0; i < init.length; i++) {\n                 if (boundaries[0][i] > init[i] || boundaries[1][i] < init[i])\n                     throw new OutOfRangeException(init[i], boundaries[0][i],\n@@ -921,7 +917,8 @@\n          * @return Repaired objective variables - all in bounds.\n          */\n         private double[] repair(final double[] x) {\n-            double[] repaired = new double[x.length];\n+            diagD = diag(D);\n+\t\t\tdouble[] repaired = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 488, 
          "faulty": "if (boundaries[1].length != init.length) throw new MultiDimensionMismatchException(new Integer[]{boundaries[1].length},new Integer[]{init.length});", 
          "type": "Delete", 
          "seed": "if (boundaries.length != 2) throw new MultiDimensionMismatchException(new Integer[]{boundaries.length},new Integer[]{2});"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 924, 
          "faulty": "double[] repaired=new double[x.length];", 
          "type": "InsertBefore", 
          "seed": "diagD=diag(D);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_422/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:41:07.237755327 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_422/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:41:07.237755327 -0500\n@@ -921,7 +921,8 @@\n          * @return Repaired objective variables - all in bounds.\n          */\n         private double[] repair(final double[] x) {\n-            double[] repaired = new double[x.length];\n+            diagD = diag(D);\n+\t\t\tdouble[] repaired = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 924, 
          "faulty": "double[] repaired=new double[x.length];", 
          "type": "InsertBefore", 
          "seed": "diagD=diag(D);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_442/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:41:28.601721158 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_442/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:41:28.613721139 -0500\n@@ -407,8 +407,10 @@\n                             isMinimize ? bestFitness : -bestFitness);\n                     if (getConvergenceChecker() != null && lastResult != null) {\n                         if (getConvergenceChecker().converged(\n-                                iterations, optimum, lastResult))\n-                            break generationLoop;\n+                                iterations, optimum, lastResult)) {\n+\t\t\t\t\t\t\tcs = (mueff + 2.) / (dimension + mueff + 3.);\n+\t\t\t\t\t\t\tbreak generationLoop;\n+\t\t\t\t\t\t}\n                     }\n                 }\n                 // handle termination criteria\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 411, 
          "faulty": "break generationLoop;", 
          "type": "InsertBefore", 
          "seed": "cs=(mueff + 2.) / (dimension + mueff + 3.);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1878/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:07:58.390605374 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1878/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:07:58.394605367 -0500\n@@ -853,7 +853,8 @@\n                 double diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = (x[i] - boundaries[0][i]) / diff;\n             }\n-            return res;\n+            logMu2 = Math.log(mu + 0.5);\n+\t\t\treturn res;\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 856, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "logMu2=Math.log(mu + 0.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1668/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:04:05.927089771 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1668/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:04:05.931089762 -0500\n@@ -865,7 +865,9 @@\n             if (boundaries == null)\n                 return x;\n             double[] res = new double[x.length];\n-            for (int i = 0; i < x.length; i++) {\n+            if (boundaries == null)\n+\t\t\t\treturn x;\n+\t\t\tfor (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = diff * x[i] + boundaries[0][i];\n             }\n@@ -944,7 +946,7 @@\n             double penalty = 0;\n             for (int i = 0; i < x.length; i++) {\n                 double diff = Math.abs(x[i] - repaired[i]);\n-                penalty += diff * valueRange;\n+                repaired[i] = 0;\n             }\n             return isMinimize ? penalty : -penalty;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 947, 
          "faulty": "penalty+=diff * valueRange;", 
          "type": "Replace", 
          "seed": "repaired[i]=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 868, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  double diff=boundaries[1][i] - boundaries[0][i];\n  res[i]=diff * x[i] + boundaries[0][i];\n}", 
          "type": "InsertBefore", 
          "seed": "if (boundaries == null) return x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1651/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:03:47.323129117 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1651/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:03:47.327129108 -0500\n@@ -408,7 +408,7 @@\n                     if (getConvergenceChecker() != null && lastResult != null) {\n                         if (getConvergenceChecker().converged(\n                                 iterations, optimum, lastResult))\n-                            break generationLoop;\n+\t\t\t\t\t\t\t;\n                     }\n                 }\n                 // handle termination criteria\n@@ -481,10 +481,6 @@\n                         new Integer[] { 2 });\n             if (boundaries[0] == null || boundaries[1] == null)\n                 throw new NoDataException();\n-            if (boundaries[0].length != init.length)\n-                throw new MultiDimensionMismatchException(\n-                        new Integer[] { boundaries[0].length },\n-                        new Integer[] { init.length });\n             if (boundaries[1].length != init.length)\n                 throw new MultiDimensionMismatchException(\n                         new Integer[] { boundaries[1].length },\n@@ -944,7 +940,10 @@\n             double penalty = 0;\n             for (int i = 0; i < x.length; i++) {\n                 double diff = Math.abs(x[i] - repaired[i]);\n-                penalty += diff * valueRange;\n+                if (x[i] > 1.0)\n+\t\t\t\t\trepaired[i] = 1.0;\n+\t\t\t\telse\n+\t\t\t\t\trepaired[i] = x[i];\n             }\n             return isMinimize ? penalty : -penalty;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 947, 
          "faulty": "penalty+=diff * valueRange;", 
          "type": "Replace", 
          "seed": "if (x[i] > 1.0) repaired[i]=1.0;\n else repaired[i]=x[i];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 411, 
          "faulty": "break generationLoop;", 
          "type": "Delete", 
          "seed": "dimension=guess.length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 484, 
          "faulty": "if (boundaries[0].length != init.length) throw new MultiDimensionMismatchException(new Integer[]{boundaries[0].length},new Integer[]{init.length});", 
          "type": "Delete", 
          "seed": "for (int i=0; i < init.length; i++) {\n  if (inputSigma[i] < 0)   throw new NotPositiveException(inputSigma[i]);\n  if (boundaries != null) {\n    if (inputSigma[i] > 1.0)     throw new OutOfRangeException(inputSigma[i],0,1.0);\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_638/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:44:57.989355225 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_638/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:44:57.989355225 -0500\n@@ -865,7 +865,9 @@\n             if (boundaries == null)\n                 return x;\n             double[] res = new double[x.length];\n-            for (int i = 0; i < x.length; i++) {\n+            if (boundaries == null)\n+\t\t\t\treturn x;\n+\t\t\tfor (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = diff * x[i] + boundaries[0][i];\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 868, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  double diff=boundaries[1][i] - boundaries[0][i];\n  res[i]=diff * x[i] + boundaries[0][i];\n}", 
          "type": "InsertBefore", 
          "seed": "if (boundaries == null) return x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1663/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:04:00.595101037 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1663/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:04:00.595101037 -0500\n@@ -866,7 +866,8 @@\n                 return x;\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n-                double diff = boundaries[1][i] - boundaries[0][i];\n+                historySize = 10 + (int) (3. * 10. * dimension / lambda);\n+\t\t\t\tdouble diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = diff * x[i] + boundaries[0][i];\n             }\n             return res;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 869, 
          "faulty": "double diff=boundaries[1][i] - boundaries[0][i];", 
          "type": "InsertBefore", 
          "seed": "historySize=10 + (int)(3. * 10. * dimension / lambda);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1173/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:54:46.880307210 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1173/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:54:46.880307210 -0500\n@@ -481,10 +481,7 @@\n                         new Integer[] { 2 });\n             if (boundaries[0] == null || boundaries[1] == null)\n                 throw new NoDataException();\n-            if (boundaries[0].length != init.length)\n-                throw new MultiDimensionMismatchException(\n-                        new Integer[] { boundaries[0].length },\n-                        new Integer[] { init.length });\n+            this.lambda = lambda;\n             if (boundaries[1].length != init.length)\n                 throw new MultiDimensionMismatchException(\n                         new Integer[] { boundaries[1].length },\n@@ -930,7 +927,7 @@\n                 else\n                     repaired[i] = x[i];\n             }\n-            return repaired;\n+            return x;\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 484, 
          "faulty": "if (boundaries[0].length != init.length) throw new MultiDimensionMismatchException(new Integer[]{boundaries[0].length},new Integer[]{init.length});", 
          "type": "Replace", 
          "seed": "this.lambda=lambda;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 933, 
          "faulty": "return repaired;", 
          "type": "Replace", 
          "seed": "return x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1874/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:07:54.586613210 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1874/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:07:54.590613201 -0500\n@@ -481,10 +481,6 @@\n                         new Integer[] { 2 });\n             if (boundaries[0] == null || boundaries[1] == null)\n                 throw new NoDataException();\n-            if (boundaries[0].length != init.length)\n-                throw new MultiDimensionMismatchException(\n-                        new Integer[] { boundaries[0].length },\n-                        new Integer[] { init.length });\n             if (boundaries[1].length != init.length)\n                 throw new MultiDimensionMismatchException(\n                         new Integer[] { boundaries[1].length },\n@@ -926,8 +922,8 @@\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n                 else if (x[i] > 1.0)\n-                    repaired[i] = 1.0;\n-                else\n+\t\t\t\t\tccov1 = 2. / ((dimension + 1.3) * (dimension + 1.3) + mueff);\n+\t\t\t\telse\n                     repaired[i] = x[i];\n             }\n             return repaired;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 484, 
          "faulty": "if (boundaries[0].length != init.length) throw new MultiDimensionMismatchException(new Integer[]{boundaries[0].length},new Integer[]{init.length});", 
          "type": "Delete", 
          "seed": "for (int i=0; i < init.length; i++) {\n  if (inputSigma[i] < 0)   throw new NotPositiveException(inputSigma[i]);\n  if (boundaries != null) {\n    if (inputSigma[i] > 1.0)     throw new OutOfRangeException(inputSigma[i],0,1.0);\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 929, 
          "faulty": "repaired[i]=1.0;", 
          "type": "Replace", 
          "seed": "ccov1=2. / ((dimension + 1.3) * (dimension + 1.3) + mueff);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_658/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:45:16.125321612 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_658/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:45:16.129321603 -0500\n@@ -408,7 +408,7 @@\n                     if (getConvergenceChecker() != null && lastResult != null) {\n                         if (getConvergenceChecker().converged(\n                                 iterations, optimum, lastResult))\n-                            break generationLoop;\n+\t\t\t\t\t\t\t;\n                     }\n                 }\n                 // handle termination criteria\n@@ -504,8 +504,10 @@\n                 if (inputSigma[i] < 0)\n                     throw new NotPositiveException(inputSigma[i]);\n                 if (boundaries != null) {\n-                    if (inputSigma[i] > 1.0)\n-                        throw new OutOfRangeException(inputSigma[i], 0, 1.0);\n+                    if (boundaries != null) {\n+\t\t\t\t\t\tif (inputSigma[i] > 1.0)\n+\t\t\t\t\t\t\tthrow new OutOfRangeException(inputSigma[i], 0, 1.0);\n+\t\t\t\t\t}\n                 }\n             }\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 507, 
          "faulty": "if (inputSigma[i] > 1.0) throw new OutOfRangeException(inputSigma[i],0,1.0);", 
          "type": "Replace", 
          "seed": "if (boundaries != null) {\n  if (inputSigma[i] > 1.0)   throw new OutOfRangeException(inputSigma[i],0,1.0);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 411, 
          "faulty": "break generationLoop;", 
          "type": "Delete", 
          "seed": "this.diagonalOnly=diagonalOnly;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_252/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:37:49.806022610 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_252/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:37:49.810022606 -0500\n@@ -943,7 +943,9 @@\n         private double penalty(final double[] x, final double[] repaired) {\n             double penalty = 0;\n             for (int i = 0; i < x.length; i++) {\n-                double diff = Math.abs(x[i] - repaired[i]);\n+                ccovmuSep = Math\n+\t\t\t\t\t\t.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3.);\n+\t\t\t\tdouble diff = Math.abs(x[i] - repaired[i]);\n                 penalty += diff * valueRange;\n             }\n             return isMinimize ? penalty : -penalty;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 946, 
          "faulty": "double diff=Math.abs(x[i] - repaired[i]);", 
          "type": "InsertBefore", 
          "seed": "ccovmuSep=Math.min(1 - ccov1,ccovmu * (dimension + 1.5) / 3.);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1892/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:08:13.822573618 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1892/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:08:13.826573610 -0500\n@@ -942,10 +942,6 @@\n          */\n         private double penalty(final double[] x, final double[] repaired) {\n             double penalty = 0;\n-            for (int i = 0; i < x.length; i++) {\n-                double diff = Math.abs(x[i] - repaired[i]);\n-                penalty += diff * valueRange;\n-            }\n             return isMinimize ? penalty : -penalty;\n         }\n     }\n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-29 03:24:09.607335000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1892/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-29 04:08:13.826573610 -0500\n@@ -100,7 +100,8 @@\n      * @return the localized message.\n      */\n     public String getMessage(final Locale locale) {\n-        return buildMessage(locale, \": \");\n+        context = new HashMap<String, Object>();\n+\t\treturn buildMessage(locale, \": \");\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 945, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  double diff=Math.abs(x[i] - repaired[i]);\n  penalty+=diff * valueRange;\n}", 
          "type": "Delete", 
          "seed": "fitnessHistory=new double[historySize];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 103, 
          "faulty": "return buildMessage(locale,\": \");", 
          "type": "InsertBefore", 
          "seed": "context=new HashMap<String,Object>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_449/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:41:35.761709540 -0500\n@@ -1346,7 +1346,10 @@\n      */\n     public static double round(double x, int scale, int roundingMethod) {\n         try {\n-            return (new BigDecimal\n+            if (x > 0 && 1 / x == 0) {\n+\t\t\t\treturn x;\n+\t\t\t}\n+\t\t\treturn (new BigDecimal\n                    (Double.toString(x))\n                    .setScale(scale, roundingMethod))\n                    .doubleValue();\n@@ -1357,7 +1360,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1349, 
          "faulty": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();", 
          "type": "InsertBefore", 
          "seed": "if (x > 0 && 1 / x == 0) {\n  return x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_591/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:44:08.617445498 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_591/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:44:08.621445492 -0500\n@@ -850,7 +850,9 @@\n                 return x;\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n-                double diff = boundaries[1][i] - boundaries[0][i];\n+                if (lambda <= 0)\n+\t\t\t\t\tlambda = 4 + (int) (3. * Math.log(dimension));\n+\t\t\t\tdouble diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = (x[i] - boundaries[0][i]) / diff;\n             }\n             return res;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 127, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.getDefault());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 853, 
          "faulty": "double diff=boundaries[1][i] - boundaries[0][i];", 
          "type": "InsertBefore", 
          "seed": "if (lambda <= 0) lambda=4 + (int)(3. * Math.log(dimension));"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_233/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:37:28.278044524 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_233/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:37:28.278044524 -0500\n@@ -407,8 +407,10 @@\n                             isMinimize ? bestFitness : -bestFitness);\n                     if (getConvergenceChecker() != null && lastResult != null) {\n                         if (getConvergenceChecker().converged(\n-                                iterations, optimum, lastResult))\n-                            break generationLoop;\n+                                iterations, optimum, lastResult)) {\n+\t\t\t\t\t\t\tdimension = guess.length;\n+\t\t\t\t\t\t\tbreak generationLoop;\n+\t\t\t\t\t\t}\n                     }\n                 }\n                 // handle termination criteria\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 411, 
          "faulty": "break generationLoop;", 
          "type": "InsertBefore", 
          "seed": "dimension=guess.length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_524/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:42:55.565575080 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_524/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:42:55.565575080 -0500\n@@ -848,7 +848,8 @@\n         public double[] encode(final double[] x) {\n             if (boundaries == null)\n                 return x;\n-            double[] res = new double[x.length];\n+            iterations = 0;\n+\t\t\tdouble[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = (x[i] - boundaries[0][i]) / diff;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 851, 
          "faulty": "double[] res=new double[x.length];", 
          "type": "InsertBefore", 
          "seed": "iterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1704/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:04:45.191007048 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1704/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:04:45.195007039 -0500\n@@ -490,7 +490,8 @@\n                         new Integer[] { boundaries[1].length },\n                         new Integer[] { init.length });\n             for (int i = 0; i < init.length; i++) {\n-                if (boundaries[0][i] > init[i] || boundaries[1][i] < init[i])\n+                stopTolFun = 1e-12;\n+\t\t\t\tif (boundaries[0][i] > init[i] || boundaries[1][i] < init[i])\n                     throw new OutOfRangeException(init[i], boundaries[0][i],\n                             boundaries[1][i]);\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 493, 
          "faulty": "if (boundaries[0][i] > init[i] || boundaries[1][i] < init[i]) throw new OutOfRangeException(init[i],boundaries[0][i],boundaries[1][i]);", 
          "type": "InsertBefore", 
          "seed": "stopTolFun=1e-12;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1623/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:03:15.779196066 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 121, 
          "faulty": "return getMessage(Locale.US);", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_598/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:44:15.037433870 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_598/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:44:15.041433863 -0500\n@@ -925,10 +925,18 @@\n             for (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n-                else if (x[i] > 1.0)\n-                    repaired[i] = 1.0;\n-                else\n-                    repaired[i] = x[i];\n+\t\t\t\telse {\n+\t\t\t\t\tif (x[i] < 0)\n+\t\t\t\t\t\trepaired[i] = 0;\n+\t\t\t\t\telse if (x[i] > 1.0)\n+\t\t\t\t\t\trepaired[i] = 1.0;\n+\t\t\t\t\telse\n+\t\t\t\t\t\trepaired[i] = x[i];\n+\t\t\t\t\tif (x[i] > 1.0)\n+\t\t\t\t\t\trepaired[i] = 1.0;\n+\t\t\t\t\telse\n+\t\t\t\t\t\trepaired[i] = x[i];\n+\t\t\t\t}\n             }\n             return repaired;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 928, 
          "faulty": "if (x[i] > 1.0) repaired[i]=1.0;\n else repaired[i]=x[i];", 
          "type": "InsertBefore", 
          "seed": "if (x[i] < 0) repaired[i]=0;\n else if (x[i] > 1.0) repaired[i]=1.0;\n else repaired[i]=x[i];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_477/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:42:05.945659701 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_477/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:42:05.945659701 -0500\n@@ -942,7 +942,8 @@\n          */\n         private double penalty(final double[] x, final double[] repaired) {\n             double penalty = 0;\n-            for (int i = 0; i < x.length; i++) {\n+            valueRange = 1.0;\n+\t\t\tfor (int i = 0; i < x.length; i++) {\n                 double diff = Math.abs(x[i] - repaired[i]);\n                 penalty += diff * valueRange;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 945, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  double diff=Math.abs(x[i] - repaired[i]);\n  penalty+=diff * valueRange;\n}", 
          "type": "InsertBefore", 
          "seed": "valueRange=1.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_35/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:33:37.222527650 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_35/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:33:37.230527632 -0500\n@@ -921,7 +921,9 @@\n          * @return Repaired objective variables - all in bounds.\n          */\n         private double[] repair(final double[] x) {\n-            double[] repaired = new double[x.length];\n+            cc = (4. + mueff / dimension)\n+\t\t\t\t\t/ (dimension + 4. + 2. * mueff / dimension);\n+\t\t\tdouble[] repaired = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 924, 
          "faulty": "double[] repaired=new double[x.length];", 
          "type": "InsertBefore", 
          "seed": "cc=(4. + mueff / dimension) / (dimension + 4. + 2. * mueff / dimension);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_577/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:43:53.721472341 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_577/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:43:53.721472341 -0500\n@@ -946,7 +946,8 @@\n                 double diff = Math.abs(x[i] - repaired[i]);\n                 penalty += diff * valueRange;\n             }\n-            return isMinimize ? penalty : -penalty;\n+            historySize = 10 + (int) (3. * 10. * dimension / lambda);\n+\t\t\treturn isMinimize ? penalty : -penalty;\n         }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 949, 
          "faulty": "return isMinimize ? penalty : -penalty;", 
          "type": "InsertBefore", 
          "seed": "historySize=10 + (int)(3. * 10. * dimension / lambda);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_862/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:48:59.616944565 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-29 03:24:09.607335000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_862/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-29 03:48:59.616944565 -0500\n@@ -124,7 +124,7 @@\n     /** {@inheritDoc} */\n     @Override\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        return getMessage(Locale.US);\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 127, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1118/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:53:42.716428542 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1118/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:53:42.716428542 -0500\n@@ -881,7 +881,8 @@\n             double value;\n             if (boundaries != null && isRepairMode) {\n                 double[] repaired = repair(point);\n-                value = CMAESOptimizer.this\n+                C = triu(C, 0).add(triu(C, 1).transpose());\n+\t\t\t\tvalue = CMAESOptimizer.this\n                         .computeObjectiveValue(decode(repaired)) +\n                         penalty(point, repaired);\n             } else\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 884, 
          "faulty": "value=CMAESOptimizer.this.computeObjectiveValue(decode(repaired)) + penalty(point,repaired);", 
          "type": "InsertBefore", 
          "seed": "C=triu(C,0).add(triu(C,1).transpose());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_372/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:40:10.125842553 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_372/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:40:10.125842553 -0500\n@@ -848,7 +848,13 @@\n         public double[] encode(final double[] x) {\n             if (boundaries == null)\n                 return x;\n-            double[] res = new double[x.length];\n+            if (diagonalOnly > 1 && iterations > diagonalOnly) {\n+\t\t\t\tdiagonalOnly = 0;\n+\t\t\t\tB = eye(dimension, dimension);\n+\t\t\t\tBD = diag(diagD);\n+\t\t\t\tC = diag(diagC);\n+\t\t\t}\n+\t\t\tdouble[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = (x[i] - boundaries[0][i]) / diff;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 851, 
          "faulty": "double[] res=new double[x.length];", 
          "type": "InsertBefore", 
          "seed": "if (diagonalOnly > 1 && iterations > diagonalOnly) {\n  diagonalOnly=0;\n  B=eye(dimension,dimension);\n  BD=diag(diagD);\n  C=diag(diagC);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_827/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:48:21.485010328 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_827/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:48:21.489010321 -0500\n@@ -922,7 +922,9 @@\n          */\n         private double[] repair(final double[] x) {\n             double[] repaired = new double[x.length];\n-            for (int i = 0; i < x.length; i++) {\n+            cc = (4. + mueff / dimension)\n+\t\t\t\t\t/ (dimension + 4. + 2. * mueff / dimension);\n+\t\t\tfor (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n                 else if (x[i] > 1.0)\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 925, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  if (x[i] < 0)   repaired[i]=0;\n else   if (x[i] > 1.0)   repaired[i]=1.0;\n else   repaired[i]=x[i];\n}", 
          "type": "InsertBefore", 
          "seed": "cc=(4. + mueff / dimension) / (dimension + 4. + 2. * mueff / dimension);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_728/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:46:34.389186131 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_728/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:46:34.389186131 -0500\n@@ -943,7 +943,7 @@\n         private double penalty(final double[] x, final double[] repaired) {\n             double penalty = 0;\n             for (int i = 0; i < x.length; i++) {\n-                double diff = Math.abs(x[i] - repaired[i]);\n+                double diff = boundaries[1][i] - boundaries[0][i];\n                 penalty += diff * valueRange;\n             }\n             return isMinimize ? penalty : -penalty;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 946, 
          "faulty": "double diff=Math.abs(x[i] - repaired[i]);", 
          "type": "Replace", 
          "seed": "double diff=boundaries[1][i] - boundaries[0][i];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 933, 
          "faulty": "return repaired;", 
          "type": "Replace", 
          "seed": "return repaired;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1409/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:59:16.135716416 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1409/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:59:16.135716416 -0500\n@@ -851,7 +851,8 @@\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n-                res[i] = (x[i] - boundaries[0][i]) / diff;\n+                if (boundaries[0] == null || boundaries[1] == null)\n+\t\t\t\t\tthrow new NoDataException();\n             }\n             return res;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 854, 
          "faulty": "res[i]=(x[i] - boundaries[0][i]) / diff;", 
          "type": "Replace", 
          "seed": "if (boundaries[0] == null || boundaries[1] == null) throw new NoDataException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1230/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:55:54.312172512 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1230/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:55:54.312172512 -0500\n@@ -944,7 +944,7 @@\n             double penalty = 0;\n             for (int i = 0; i < x.length; i++) {\n                 double diff = Math.abs(x[i] - repaired[i]);\n-                penalty += diff * valueRange;\n+                repaired[i] = 0;\n             }\n             return isMinimize ? penalty : -penalty;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 947, 
          "faulty": "penalty+=diff * valueRange;", 
          "type": "Replace", 
          "seed": "repaired[i]=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_650/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:45:10.165332683 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_650/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:45:10.165332683 -0500\n@@ -926,8 +926,8 @@\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n                 else if (x[i] > 1.0)\n-                    repaired[i] = 1.0;\n-                else\n+\t\t\t\t\t;\n+\t\t\t\telse\n                     repaired[i] = x[i];\n             }\n             return repaired;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 929, 
          "faulty": "repaired[i]=1.0;", 
          "type": "Delete", 
          "seed": "ccov1=2. / ((dimension + 1.3) * (dimension + 1.3) + mueff);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_755/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:47:02.801140976 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_755/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:47:02.805140970 -0500\n@@ -408,7 +408,7 @@\n                     if (getConvergenceChecker() != null && lastResult != null) {\n                         if (getConvergenceChecker().converged(\n                                 iterations, optimum, lastResult))\n-                            break generationLoop;\n+\t\t\t\t\t\t\t;\n                     }\n                 }\n                 // handle termination criteria\n@@ -922,7 +922,8 @@\n          */\n         private double[] repair(final double[] x) {\n             double[] repaired = new double[x.length];\n-            for (int i = 0; i < x.length; i++) {\n+            C = triu(C, 0).add(triu(C, 1).transpose());\n+\t\t\tfor (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n                 else if (x[i] > 1.0)\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 411, 
          "faulty": "break generationLoop;", 
          "type": "Delete", 
          "seed": "cs=(mueff + 2.) / (dimension + mueff + 3.);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 925, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  if (x[i] < 0)   repaired[i]=0;\n else   if (x[i] > 1.0)   repaired[i]=1.0;\n else   repaired[i]=x[i];\n}", 
          "type": "InsertBefore", 
          "seed": "C=triu(C,0).add(triu(C,1).transpose());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1732/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:05:14.982944554 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1732/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:05:14.986944546 -0500\n@@ -408,7 +408,7 @@\n                     if (getConvergenceChecker() != null && lastResult != null) {\n                         if (getConvergenceChecker().converged(\n                                 iterations, optimum, lastResult))\n-                            break generationLoop;\n+\t\t\t\t\t\t\t;\n                     }\n                 }\n                 // handle termination criteria\n@@ -851,7 +851,9 @@\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n-                res[i] = (x[i] - boundaries[0][i]) / diff;\n+                if (boundaries == null)\n+\t\t\t\t\treturn x;\n+\t\t\t\tres[i] = (x[i] - boundaries[0][i]) / diff;\n             }\n             return res;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 411, 
          "faulty": "break generationLoop;", 
          "type": "Delete", 
          "seed": "dimension=guess.length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 854, 
          "faulty": "res[i]=(x[i] - boundaries[0][i]) / diff;", 
          "type": "InsertBefore", 
          "seed": "if (boundaries == null) return x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_593/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:44:09.893443190 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_593/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:44:09.897443183 -0500\n@@ -485,10 +485,6 @@\n                 throw new MultiDimensionMismatchException(\n                         new Integer[] { boundaries[0].length },\n                         new Integer[] { init.length });\n-            if (boundaries[1].length != init.length)\n-                throw new MultiDimensionMismatchException(\n-                        new Integer[] { boundaries[1].length },\n-                        new Integer[] { init.length });\n             for (int i = 0; i < init.length; i++) {\n                 if (boundaries[0][i] > init[i] || boundaries[1][i] < init[i])\n                     throw new OutOfRangeException(init[i], boundaries[0][i],\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 488, 
          "faulty": "if (boundaries[1].length != init.length) throw new MultiDimensionMismatchException(new Integer[]{boundaries[1].length},new Integer[]{init.length});", 
          "type": "Delete", 
          "seed": "if (boundaries.length != 2) throw new MultiDimensionMismatchException(new Integer[]{boundaries.length},new Integer[]{2});"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_800/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:47:50.325062955 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_800/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:47:50.329062948 -0500\n@@ -849,10 +849,6 @@\n             if (boundaries == null)\n                 return x;\n             double[] res = new double[x.length];\n-            for (int i = 0; i < x.length; i++) {\n-                double diff = boundaries[1][i] - boundaries[0][i];\n-                res[i] = (x[i] - boundaries[0][i]) / diff;\n-            }\n             return res;\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 852, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  double diff=boundaries[1][i] - boundaries[0][i];\n  res[i]=(x[i] - boundaries[0][i]) / diff;\n}", 
          "type": "Delete", 
          "seed": "if (min(diagD) <= 0) {\n  for (int i=0; i < dimension; i++)   if (diagD.getEntry(i,0) < 0)   diagD.setEntry(i,0,0.);\n  double tfac=max(diagD) / 1e14;\n  C=C.add(eye(dimension,dimension).scalarMultiply(tfac));\n  diagD=diagD.add(ones(dimension,1).scalarMultiply(tfac));\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1011/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:51:41.228654512 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1011/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:51:41.232654504 -0500\n@@ -880,7 +880,8 @@\n         public double value(final double[] point) {\n             double value;\n             if (boundaries != null && isRepairMode) {\n-                double[] repaired = repair(point);\n+                ccov1Sep = Math.min(1, ccov1 * (dimension + 1.5) / 3.);\n+\t\t\t\tdouble[] repaired = repair(point);\n                 value = CMAESOptimizer.this\n                         .computeObjectiveValue(decode(repaired)) +\n                         penalty(point, repaired);\n@@ -922,7 +923,8 @@\n          */\n         private double[] repair(final double[] x) {\n             double[] repaired = new double[x.length];\n-            for (int i = 0; i < x.length; i++) {\n+            cs = (mueff + 2.) / (dimension + mueff + 3.);\n+\t\t\tfor (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n                 else if (x[i] > 1.0)\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 883, 
          "faulty": "double[] repaired=repair(point);", 
          "type": "InsertBefore", 
          "seed": "ccov1Sep=Math.min(1,ccov1 * (dimension + 1.5) / 3.);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 925, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  if (x[i] < 0)   repaired[i]=0;\n else   if (x[i] > 1.0)   repaired[i]=1.0;\n else   repaired[i]=x[i];\n}", 
          "type": "InsertBefore", 
          "seed": "cs=(mueff + 2.) / (dimension + mueff + 3.);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_569/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:43:45.269487481 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_569/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:43:45.269487481 -0500\n@@ -866,7 +866,8 @@\n                 return x;\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n-                double diff = boundaries[1][i] - boundaries[0][i];\n+                historySize = 10 + (int) (3. * 10. * dimension / lambda);\n+\t\t\t\tdouble diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = diff * x[i] + boundaries[0][i];\n             }\n             return res;\n@@ -922,7 +923,8 @@\n          */\n         private double[] repair(final double[] x) {\n             double[] repaired = new double[x.length];\n-            for (int i = 0; i < x.length; i++) {\n+            C = triu(C, 0).add(triu(C, 1).transpose());\n+\t\t\tfor (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n                 else if (x[i] > 1.0)\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 925, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  if (x[i] < 0)   repaired[i]=0;\n else   if (x[i] > 1.0)   repaired[i]=1.0;\n else   repaired[i]=x[i];\n}", 
          "type": "InsertBefore", 
          "seed": "C=triu(C,0).add(triu(C,1).transpose());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 869, 
          "faulty": "double diff=boundaries[1][i] - boundaries[0][i];", 
          "type": "InsertBefore", 
          "seed": "historySize=10 + (int)(3. * 10. * dimension / lambda);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_365/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:40:03.317852504 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_365/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:40:03.317852504 -0500\n@@ -408,7 +408,7 @@\n                     if (getConvergenceChecker() != null && lastResult != null) {\n                         if (getConvergenceChecker().converged(\n                                 iterations, optimum, lastResult))\n-                            break generationLoop;\n+\t\t\t\t\t\t\t;\n                     }\n                 }\n                 // handle termination criteria\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 411, 
          "faulty": "break generationLoop;", 
          "type": "Delete", 
          "seed": "dimension=guess.length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_717/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:46:22.401204809 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_717/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:46:22.401204809 -0500\n@@ -943,7 +943,9 @@\n         private double penalty(final double[] x, final double[] repaired) {\n             double penalty = 0;\n             for (int i = 0; i < x.length; i++) {\n-                double diff = Math.abs(x[i] - repaired[i]);\n+                ccovmu = Math.min(1 - ccov1, 2. * (mueff - 2. + 1. / mueff)\n+\t\t\t\t\t\t/ ((dimension + 2.) * (dimension + 2.) + mueff));\n+\t\t\t\tdouble diff = Math.abs(x[i] - repaired[i]);\n                 penalty += diff * valueRange;\n             }\n             return isMinimize ? penalty : -penalty;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 946, 
          "faulty": "double diff=Math.abs(x[i] - repaired[i]);", 
          "type": "InsertBefore", 
          "seed": "ccovmu=Math.min(1 - ccov1,2. * (mueff - 2. + 1. / mueff) / ((dimension + 2.) * (dimension + 2.) + mueff));"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_953/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:50:39.736766299 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_953/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:50:39.740766292 -0500\n@@ -922,7 +922,8 @@\n          */\n         private double[] repair(final double[] x) {\n             double[] repaired = new double[x.length];\n-            for (int i = 0; i < x.length; i++) {\n+            iterations = 0;\n+\t\t\tfor (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n                 else if (x[i] > 1.0)\n@@ -930,7 +931,7 @@\n                 else\n                     repaired[i] = x[i];\n             }\n-            return repaired;\n+            return x;\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 925, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  if (x[i] < 0)   repaired[i]=0;\n else   if (x[i] > 1.0)   repaired[i]=1.0;\n else   repaired[i]=x[i];\n}", 
          "type": "InsertBefore", 
          "seed": "iterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 933, 
          "faulty": "return repaired;", 
          "type": "Replace", 
          "seed": "return x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_942/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:50:28.524786479 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_942/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:50:28.524786479 -0500\n@@ -848,12 +848,22 @@\n         public double[] encode(final double[] x) {\n             if (boundaries == null)\n                 return x;\n-            double[] res = new double[x.length];\n+            damps = (1. + 2. * Math.max(0,\n+\t\t\t\t\tMath.sqrt((mueff - 1.) / (dimension + 1.)) - 1.))\n+\t\t\t\t\t* Math.max(\n+\t\t\t\t\t\t\t0.3,\n+\t\t\t\t\t\t\t1.\n+\t\t\t\t\t\t\t\t\t- dimension\n+\t\t\t\t\t\t\t\t\t/ (1e-6 + Math.min(maxIterations,\n+\t\t\t\t\t\t\t\t\t\t\tgetMaxEvaluations() / lambda)))\n+\t\t\t\t\t+ cs;\n+\t\t\tdouble[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = (x[i] - boundaries[0][i]) / diff;\n             }\n-            return res;\n+            logMu2 = Math.log(mu + 0.5);\n+\t\t\treturn res;\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 851, 
          "faulty": "double[] res=new double[x.length];", 
          "type": "InsertBefore", 
          "seed": "damps=(1. + 2. * Math.max(0,Math.sqrt((mueff - 1.) / (dimension + 1.)) - 1.)) * Math.max(0.3,1. - dimension / (1e-6 + Math.min(maxIterations,getMaxEvaluations() / lambda))) + cs;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 856, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "logMu2=Math.log(mu + 0.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_420/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:41:05.909757426 -0500\n@@ -1346,7 +1346,10 @@\n      */\n     public static double round(double x, int scale, int roundingMethod) {\n         try {\n-            return (new BigDecimal\n+            if (x > 0 && 1 / x == 0) {\n+\t\t\t\treturn x;\n+\t\t\t}\n+\t\t\treturn (new BigDecimal\n                    (Double.toString(x))\n                    .setScale(scale, roundingMethod))\n                    .doubleValue();\n@@ -1357,7 +1360,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_420/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:41:05.909757426 -0500\n@@ -504,8 +504,10 @@\n                 if (inputSigma[i] < 0)\n                     throw new NotPositiveException(inputSigma[i]);\n                 if (boundaries != null) {\n-                    if (inputSigma[i] > 1.0)\n-                        throw new OutOfRangeException(inputSigma[i], 0, 1.0);\n+                    if (boundaries != null) {\n+\t\t\t\t\t\tif (inputSigma[i] > 1.0)\n+\t\t\t\t\t\t\tthrow new OutOfRangeException(inputSigma[i], 0, 1.0);\n+\t\t\t\t\t}\n                 }\n             }\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 507, 
          "faulty": "if (inputSigma[i] > 1.0) throw new OutOfRangeException(inputSigma[i],0,1.0);", 
          "type": "Replace", 
          "seed": "if (boundaries != null) {\n  if (inputSigma[i] > 1.0)   throw new OutOfRangeException(inputSigma[i],0,1.0);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1349, 
          "faulty": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();", 
          "type": "InsertBefore", 
          "seed": "if (x > 0 && 1 / x == 0) {\n  return x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1639/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:03:33.787157808 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1639/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:03:33.787157808 -0500\n@@ -408,7 +408,7 @@\n                     if (getConvergenceChecker() != null && lastResult != null) {\n                         if (getConvergenceChecker().converged(\n                                 iterations, optimum, lastResult))\n-                            break generationLoop;\n+\t\t\t\t\t\t\t;\n                     }\n                 }\n                 // handle termination criteria\n@@ -849,10 +849,6 @@\n             if (boundaries == null)\n                 return x;\n             double[] res = new double[x.length];\n-            for (int i = 0; i < x.length; i++) {\n-                double diff = boundaries[1][i] - boundaries[0][i];\n-                res[i] = (x[i] - boundaries[0][i]) / diff;\n-            }\n             return res;\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 411, 
          "faulty": "break generationLoop;", 
          "type": "Delete", 
          "seed": "return optimum;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 852, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  double diff=boundaries[1][i] - boundaries[0][i];\n  res[i]=(x[i] - boundaries[0][i]) / diff;\n}", 
          "type": "Delete", 
          "seed": "ccovmuSep=Math.min(1 - ccov1,ccovmu * (dimension + 1.5) / 3.);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 933, 
          "faulty": "return repaired;", 
          "type": "Replace", 
          "seed": "return repaired;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1576/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:02:21.735311502 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-29 03:24:09.607335000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1576/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-29 04:02:21.739311494 -0500\n@@ -100,7 +100,8 @@\n      * @return the localized message.\n      */\n     public String getMessage(final Locale locale) {\n-        return buildMessage(locale, \": \");\n+        context = new HashMap<String, Object>();\n+\t\treturn buildMessage(locale, \": \");\n     }\n \n     /**\n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1576/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:02:21.739311494 -0500\n@@ -850,7 +850,9 @@\n                 return x;\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n-                double diff = boundaries[1][i] - boundaries[0][i];\n+                if (lambda <= 0)\n+\t\t\t\t\tlambda = 4 + (int) (3. * Math.log(dimension));\n+\t\t\t\tdouble diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = (x[i] - boundaries[0][i]) / diff;\n             }\n             return res;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 103, 
          "faulty": "return buildMessage(locale,\": \");", 
          "type": "InsertBefore", 
          "seed": "context=new HashMap<String,Object>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 853, 
          "faulty": "double diff=boundaries[1][i] - boundaries[0][i];", 
          "type": "InsertBefore", 
          "seed": "if (lambda <= 0) lambda=4 + (int)(3. * Math.log(dimension));"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1243/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:56:07.864144992 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1243/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:56:07.868144982 -0500\n@@ -866,7 +866,8 @@\n                 return x;\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n-                double diff = boundaries[1][i] - boundaries[0][i];\n+                diagC = square(diagD);\n+\t\t\t\tdouble diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = diff * x[i] + boundaries[0][i];\n             }\n             return res;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 869, 
          "faulty": "double diff=boundaries[1][i] - boundaries[0][i];", 
          "type": "InsertBefore", 
          "seed": "diagC=square(diagD);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_451/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:41:37.069707408 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_451/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:41:37.073707402 -0500\n@@ -447,7 +447,7 @@\n                     if (lastResult != null &&\n                             getConvergenceChecker().converged(\n                                     iterations, current, lastResult))\n-                        break generationLoop;\n+\t\t\t\t\t\t;\n                     lastResult = current;\n                 }\n                 // Adjust step size in case of equal function values (flat fitness)\n@@ -849,10 +849,6 @@\n             if (boundaries == null)\n                 return x;\n             double[] res = new double[x.length];\n-            for (int i = 0; i < x.length; i++) {\n-                double diff = boundaries[1][i] - boundaries[0][i];\n-                res[i] = (x[i] - boundaries[0][i]) / diff;\n-            }\n             return res;\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 450, 
          "faulty": "break generationLoop;", 
          "type": "Delete", 
          "seed": "this.inputSigma=inputSigma;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 852, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  double diff=boundaries[1][i] - boundaries[0][i];\n  res[i]=(x[i] - boundaries[0][i]) / diff;\n}", 
          "type": "Delete", 
          "seed": "ccovmuSep=Math.min(1 - ccov1,ccovmu * (dimension + 1.5) / 3.);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_737/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:46:43.297172104 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_737/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:46:43.297172104 -0500\n@@ -485,7 +485,8 @@\n                 throw new MultiDimensionMismatchException(\n                         new Integer[] { boundaries[0].length },\n                         new Integer[] { init.length });\n-            if (boundaries[1].length != init.length)\n+            this.lambda = lambda;\n+\t\t\tif (boundaries[1].length != init.length)\n                 throw new MultiDimensionMismatchException(\n                         new Integer[] { boundaries[1].length },\n                         new Integer[] { init.length });\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 488, 
          "faulty": "if (boundaries[1].length != init.length) throw new MultiDimensionMismatchException(new Integer[]{boundaries[1].length},new Integer[]{init.length});", 
          "type": "InsertBefore", 
          "seed": "this.lambda=lambda;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1682/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:04:21.251057435 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1682/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:04:21.251057435 -0500\n@@ -447,7 +447,7 @@\n                     if (lastResult != null &&\n                             getConvergenceChecker().converged(\n                                     iterations, current, lastResult))\n-                        break generationLoop;\n+\t\t\t\t\t\t;\n                     lastResult = current;\n                 }\n                 // Adjust step size in case of equal function values (flat fitness)\n@@ -867,7 +867,8 @@\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n-                res[i] = diff * x[i] + boundaries[0][i];\n+                historySize = 10 + (int) (3. * 10. * dimension / lambda);\n+\t\t\t\tres[i] = diff * x[i] + boundaries[0][i];\n             }\n             return res;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 450, 
          "faulty": "break generationLoop;", 
          "type": "Delete", 
          "seed": "cc=(4. + mueff / dimension) / (dimension + 4. + 2. * mueff / dimension);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 870, 
          "faulty": "res[i]=diff * x[i] + boundaries[0][i];", 
          "type": "InsertBefore", 
          "seed": "historySize=10 + (int)(3. * 10. * dimension / lambda);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_782/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:47:31.841093644 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-29 03:24:09.607335000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_782/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-29 03:47:31.841093644 -0500\n@@ -118,13 +118,13 @@\n    /** {@inheritDoc} */\n     @Override\n     public String getMessage() {\n-        return getMessage(Locale.US);\n+        return getMessage(Locale.getDefault());\n     }\n \n     /** {@inheritDoc} */\n     @Override\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        return getMessage(Locale.US);\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 127, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 121, 
          "faulty": "return getMessage(Locale.US);", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.getDefault());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_490/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:42:19.793636402 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_490/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:42:19.797636396 -0500\n@@ -925,9 +925,10 @@\n             for (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n-                else if (x[i] > 1.0)\n-                    repaired[i] = 1.0;\n-                else\n+                else if (x[i] > 1.0) {\n+\t\t\t\t\tpc = pc.scalarMultiply(1. - cc);\n+\t\t\t\t\trepaired[i] = 1.0;\n+\t\t\t\t} else\n                     repaired[i] = x[i];\n             }\n             return repaired;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 929, 
          "faulty": "repaired[i]=1.0;", 
          "type": "InsertBefore", 
          "seed": "pc=pc.scalarMultiply(1. - cc);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1759/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:05:44.886882046 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1759/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:05:44.886882046 -0500\n@@ -867,7 +867,9 @@\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n-                res[i] = diff * x[i] + boundaries[0][i];\n+                cc = (4. + mueff / dimension)\n+\t\t\t\t\t\t/ (dimension + 4. + 2. * mueff / dimension);\n+\t\t\t\tres[i] = diff * x[i] + boundaries[0][i];\n             }\n             return res;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 870, 
          "faulty": "res[i]=diff * x[i] + boundaries[0][i];", 
          "type": "InsertBefore", 
          "seed": "cc=(4. + mueff / dimension) / (dimension + 4. + 2. * mueff / dimension);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1257/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:56:21.836112413 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1257/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:56:21.836112413 -0500\n@@ -925,9 +925,10 @@\n             for (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n-                else if (x[i] > 1.0)\n-                    repaired[i] = 1.0;\n-                else\n+                else if (x[i] > 1.0) {\n+\t\t\t\t\tccov1 = 2. / ((dimension + 1.3) * (dimension + 1.3) + mueff);\n+\t\t\t\t\trepaired[i] = 1.0;\n+\t\t\t\t} else\n                     repaired[i] = x[i];\n             }\n             return repaired;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 929, 
          "faulty": "repaired[i]=1.0;", 
          "type": "InsertBefore", 
          "seed": "ccov1=2. / ((dimension + 1.3) * (dimension + 1.3) + mueff);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_321/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:39:12.669923067 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_321/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:39:12.669923067 -0500\n@@ -848,7 +848,8 @@\n         public double[] encode(final double[] x) {\n             if (boundaries == null)\n                 return x;\n-            double[] res = new double[x.length];\n+            iterations = 0;\n+\t\t\tdouble[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = (x[i] - boundaries[0][i]) / diff;\n@@ -921,7 +922,9 @@\n          * @return Repaired objective variables - all in bounds.\n          */\n         private double[] repair(final double[] x) {\n-            double[] repaired = new double[x.length];\n+            cc = (4. + mueff / dimension)\n+\t\t\t\t\t/ (dimension + 4. + 2. * mueff / dimension);\n+\t\t\tdouble[] repaired = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 851, 
          "faulty": "double[] res=new double[x.length];", 
          "type": "InsertBefore", 
          "seed": "iterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 924, 
          "faulty": "double[] repaired=new double[x.length];", 
          "type": "InsertBefore", 
          "seed": "cc=(4. + mueff / dimension) / (dimension + 4. + 2. * mueff / dimension);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_749/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:46:55.925152014 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_749/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:46:55.929152007 -0500\n@@ -848,7 +848,8 @@\n         public double[] encode(final double[] x) {\n             if (boundaries == null)\n                 return x;\n-            double[] res = new double[x.length];\n+            iterations = 0;\n+\t\t\tdouble[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = (x[i] - boundaries[0][i]) / diff;\n@@ -921,7 +922,8 @@\n          * @return Repaired objective variables - all in bounds.\n          */\n         private double[] repair(final double[] x) {\n-            double[] repaired = new double[x.length];\n+            diagD = diag(D);\n+\t\t\tdouble[] repaired = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-29 03:24:09.607335000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_749/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-29 03:46:55.929152007 -0500\n@@ -124,7 +124,7 @@\n     /** {@inheritDoc} */\n     @Override\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        return getMessage(Locale.US);\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 851, 
          "faulty": "double[] res=new double[x.length];", 
          "type": "InsertBefore", 
          "seed": "iterations=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 127, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 924, 
          "faulty": "double[] repaired=new double[x.length];", 
          "type": "InsertBefore", 
          "seed": "diagD=diag(D);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1724/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:05:07.370960500 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1724/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:05:07.370960500 -0500\n@@ -946,7 +946,8 @@\n                 double diff = Math.abs(x[i] - repaired[i]);\n                 penalty += diff * valueRange;\n             }\n-            return isMinimize ? penalty : -penalty;\n+            B = eye(dimension, dimension);\n+\t\t\treturn isMinimize ? penalty : -penalty;\n         }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 949, 
          "faulty": "return isMinimize ? penalty : -penalty;", 
          "type": "InsertBefore", 
          "seed": "B=eye(dimension,dimension);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_769/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:47:17.381117353 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_769/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:47:17.385117346 -0500\n@@ -481,7 +481,8 @@\n                         new Integer[] { 2 });\n             if (boundaries[0] == null || boundaries[1] == null)\n                 throw new NoDataException();\n-            if (boundaries[0].length != init.length)\n+            this.lambda = lambda;\n+\t\t\tif (boundaries[0].length != init.length)\n                 throw new MultiDimensionMismatchException(\n                         new Integer[] { boundaries[0].length },\n                         new Integer[] { init.length });\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 484, 
          "faulty": "if (boundaries[0].length != init.length) throw new MultiDimensionMismatchException(new Integer[]{boundaries[0].length},new Integer[]{init.length});", 
          "type": "InsertBefore", 
          "seed": "this.lambda=lambda;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_965/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:50:51.984744205 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_965/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:50:51.984744205 -0500\n@@ -865,7 +865,8 @@\n             if (boundaries == null)\n                 return x;\n             double[] res = new double[x.length];\n-            for (int i = 0; i < x.length; i++) {\n+            diagD = diag(D);\n+\t\t\tfor (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = diff * x[i] + boundaries[0][i];\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 868, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  double diff=boundaries[1][i] - boundaries[0][i];\n  res[i]=diff * x[i] + boundaries[0][i];\n}", 
          "type": "InsertBefore", 
          "seed": "diagD=diag(D);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_809/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:48:00.757045457 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_809/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:48:00.757045457 -0500\n@@ -944,7 +944,8 @@\n             double penalty = 0;\n             for (int i = 0; i < x.length; i++) {\n                 double diff = Math.abs(x[i] - repaired[i]);\n-                penalty += diff * valueRange;\n+                diagC = diag(C);\n+\t\t\t\tpenalty += diff * valueRange;\n             }\n             return isMinimize ? penalty : -penalty;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 947, 
          "faulty": "penalty+=diff * valueRange;", 
          "type": "InsertBefore", 
          "seed": "diagC=diag(C);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_514/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:42:44.081594937 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_514/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:42:44.085594930 -0500\n@@ -850,7 +850,9 @@\n                 return x;\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n-                double diff = boundaries[1][i] - boundaries[0][i];\n+                if (lambda <= 0)\n+\t\t\t\t\tlambda = 4 + (int) (3. * Math.log(dimension));\n+\t\t\t\tdouble diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = (x[i] - boundaries[0][i]) / diff;\n             }\n             return res;\n@@ -943,7 +945,7 @@\n         private double penalty(final double[] x, final double[] repaired) {\n             double penalty = 0;\n             for (int i = 0; i < x.length; i++) {\n-                double diff = Math.abs(x[i] - repaired[i]);\n+                double diff = boundaries[1][i] - boundaries[0][i];\n                 penalty += diff * valueRange;\n             }\n             return isMinimize ? penalty : -penalty;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 946, 
          "faulty": "double diff=Math.abs(x[i] - repaired[i]);", 
          "type": "Replace", 
          "seed": "double diff=boundaries[1][i] - boundaries[0][i];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 853, 
          "faulty": "double diff=boundaries[1][i] - boundaries[0][i];", 
          "type": "InsertBefore", 
          "seed": "if (lambda <= 0) lambda=4 + (int)(3. * Math.log(dimension));"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_970/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:50:56.688735696 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_970/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:50:56.688735696 -0500\n@@ -926,8 +926,8 @@\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n                 else if (x[i] > 1.0)\n-                    repaired[i] = 1.0;\n-                else\n+\t\t\t\t\tpc = pc.scalarMultiply(1. - cc);\n+\t\t\t\telse\n                     repaired[i] = x[i];\n             }\n             return repaired;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 929, 
          "faulty": "repaired[i]=1.0;", 
          "type": "Replace", 
          "seed": "pc=pc.scalarMultiply(1. - cc);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_856/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:48:53.608955017 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 127, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.getDefault());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1093/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:53:12.948484423 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1093/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:53:12.948484423 -0500\n@@ -848,7 +848,8 @@\n         public double[] encode(final double[] x) {\n             if (boundaries == null)\n                 return x;\n-            double[] res = new double[x.length];\n+            checkParameters();\n+\t\t\tdouble[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = (x[i] - boundaries[0][i]) / diff;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 851, 
          "faulty": "double[] res=new double[x.length];", 
          "type": "InsertBefore", 
          "seed": "checkParameters();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_864/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:49:01.368941511 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_864/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:49:01.372941503 -0500\n@@ -866,7 +866,8 @@\n                 return x;\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n-                double diff = boundaries[1][i] - boundaries[0][i];\n+                D = ones(dimension, 1);\n+\t\t\t\tdouble diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = diff * x[i] + boundaries[0][i];\n             }\n             return res;\n@@ -881,7 +882,8 @@\n             double value;\n             if (boundaries != null && isRepairMode) {\n                 double[] repaired = repair(point);\n-                value = CMAESOptimizer.this\n+                C = triu(C, 0).add(triu(C, 1).transpose());\n+\t\t\t\tvalue = CMAESOptimizer.this\n                         .computeObjectiveValue(decode(repaired)) +\n                         penalty(point, repaired);\n             } else\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 884, 
          "faulty": "value=CMAESOptimizer.this.computeObjectiveValue(decode(repaired)) + penalty(point,repaired);", 
          "type": "InsertBefore", 
          "seed": "C=triu(C,0).add(triu(C,1).transpose());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 869, 
          "faulty": "double diff=boundaries[1][i] - boundaries[0][i];", 
          "type": "InsertBefore", 
          "seed": "D=ones(dimension,1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1462/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:00:17.183581607 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1462/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:00:17.183581607 -0500\n@@ -851,7 +851,9 @@\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n-                res[i] = (x[i] - boundaries[0][i]) / diff;\n+                if (boundaries == null)\n+\t\t\t\t\treturn x;\n+\t\t\t\tres[i] = (x[i] - boundaries[0][i]) / diff;\n             }\n             return res;\n         }\n@@ -921,7 +923,8 @@\n          * @return Repaired objective variables - all in bounds.\n          */\n         private double[] repair(final double[] x) {\n-            double[] repaired = new double[x.length];\n+            diagD = diag(D);\n+\t\t\tdouble[] repaired = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 854, 
          "faulty": "res[i]=(x[i] - boundaries[0][i]) / diff;", 
          "type": "InsertBefore", 
          "seed": "if (boundaries == null) return x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 924, 
          "faulty": "double[] repaired=new double[x.length];", 
          "type": "InsertBefore", 
          "seed": "diagD=diag(D);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1354/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:58:12.787858280 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1354/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:58:12.787858280 -0500\n@@ -867,7 +867,8 @@\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n-                res[i] = diff * x[i] + boundaries[0][i];\n+                historySize = 10 + (int) (3. * 10. * dimension / lambda);\n+\t\t\t\tres[i] = diff * x[i] + boundaries[0][i];\n             }\n             return res;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 870, 
          "faulty": "res[i]=diff * x[i] + boundaries[0][i];", 
          "type": "InsertBefore", 
          "seed": "historySize=10 + (int)(3. * 10. * dimension / lambda);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1903/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:08:25.610549388 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1903/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:08:25.610549388 -0500\n@@ -485,10 +485,10 @@\n                 throw new MultiDimensionMismatchException(\n                         new Integer[] { boundaries[0].length },\n                         new Integer[] { init.length });\n-            if (boundaries[1].length != init.length)\n-                throw new MultiDimensionMismatchException(\n-                        new Integer[] { boundaries[1].length },\n-                        new Integer[] { init.length });\n+            if (boundaries.length != 2)\n+\t\t\t\tthrow new MultiDimensionMismatchException(\n+\t\t\t\t\t\tnew Integer[] { boundaries.length },\n+\t\t\t\t\t\tnew Integer[] { 2 });\n             for (int i = 0; i < init.length; i++) {\n                 if (boundaries[0][i] > init[i] || boundaries[1][i] < init[i])\n                     throw new OutOfRangeException(init[i], boundaries[0][i],\n@@ -851,7 +851,9 @@\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n-                res[i] = (x[i] - boundaries[0][i]) / diff;\n+                if (boundaries == null)\n+\t\t\t\t\treturn x;\n+\t\t\t\tres[i] = (x[i] - boundaries[0][i]) / diff;\n             }\n             return res;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 854, 
          "faulty": "res[i]=(x[i] - boundaries[0][i]) / diff;", 
          "type": "InsertBefore", 
          "seed": "if (boundaries == null) return x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 488, 
          "faulty": "if (boundaries[1].length != init.length) throw new MultiDimensionMismatchException(new Integer[]{boundaries[1].length},new Integer[]{init.length});", 
          "type": "Replace", 
          "seed": "if (boundaries.length != 2) throw new MultiDimensionMismatchException(new Integer[]{boundaries.length},new Integer[]{2});"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1532/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:01:31.191420382 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-29 03:24:09.607335000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1532/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-29 04:01:31.195420374 -0500\n@@ -100,7 +100,8 @@\n      * @return the localized message.\n      */\n     public String getMessage(final Locale locale) {\n-        return buildMessage(locale, \": \");\n+        context = new HashMap<String, Object>();\n+\t\treturn buildMessage(locale, \": \");\n     }\n \n     /**\n@@ -118,7 +119,7 @@\n    /** {@inheritDoc} */\n     @Override\n     public String getMessage() {\n-        return getMessage(Locale.US);\n+        return getMessage(Locale.getDefault());\n     }\n \n     /** {@inheritDoc} */\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 127, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.getDefault());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 121, 
          "faulty": "return getMessage(Locale.US);", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.getDefault());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 103, 
          "faulty": "return buildMessage(locale,\": \");", 
          "type": "InsertBefore", 
          "seed": "context=new HashMap<String,Object>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1779/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:06:05.702838659 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-29 03:24:09.607335000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1779/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-29 04:06:05.702838659 -0500\n@@ -118,7 +118,8 @@\n    /** {@inheritDoc} */\n     @Override\n     public String getMessage() {\n-        return getMessage(Locale.US);\n+        context = new HashMap<String, Object>();\n+\t\treturn getMessage(Locale.US);\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1779/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:06:05.702838659 -0500\n@@ -930,7 +930,9 @@\n                 else\n                     repaired[i] = x[i];\n             }\n-            return repaired;\n+            if (boundaries == null)\n+\t\t\t\treturn x;\n+\t\t\treturn repaired;\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 121, 
          "faulty": "return getMessage(Locale.US);", 
          "type": "InsertBefore", 
          "seed": "context=new HashMap<String,Object>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 933, 
          "faulty": "return repaired;", 
          "type": "InsertBefore", 
          "seed": "if (boundaries == null) return x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_394/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:40:32.801808692 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_394/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:40:32.801808692 -0500\n@@ -930,7 +930,9 @@\n                 else\n                     repaired[i] = x[i];\n             }\n-            return repaired;\n+            if (boundaries == null)\n+\t\t\t\treturn x;\n+\t\t\treturn repaired;\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 933, 
          "faulty": "return repaired;", 
          "type": "InsertBefore", 
          "seed": "if (boundaries == null) return x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_485/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:42:14.537645276 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-29 03:24:09.607335000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_485/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-29 03:42:14.541645269 -0500\n@@ -100,7 +100,8 @@\n      * @return the localized message.\n      */\n     public String getMessage(final Locale locale) {\n-        return buildMessage(locale, \": \");\n+        context = new HashMap<String, Object>();\n+\t\treturn buildMessage(locale, \": \");\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 103, 
          "faulty": "return buildMessage(locale,\": \");", 
          "type": "InsertBefore", 
          "seed": "context=new HashMap<String,Object>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_933/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:50:18.968803744 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_933/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:50:18.972803737 -0500\n@@ -925,9 +925,10 @@\n             for (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n-                else if (x[i] > 1.0)\n-                    repaired[i] = 1.0;\n-                else\n+                else if (x[i] > 1.0) {\n+\t\t\t\t\tfitnessHistory[i] = Double.MAX_VALUE;\n+\t\t\t\t\trepaired[i] = 1.0;\n+\t\t\t\t} else\n                     repaired[i] = x[i];\n             }\n             return repaired;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 929, 
          "faulty": "repaired[i]=1.0;", 
          "type": "InsertBefore", 
          "seed": "fitnessHistory[i]=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1861/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:07:39.918643444 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1861/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:07:39.918643444 -0500\n@@ -880,7 +880,8 @@\n         public double value(final double[] point) {\n             double value;\n             if (boundaries != null && isRepairMode) {\n-                double[] repaired = repair(point);\n+                evaluations.incrementCount();\n+\t\t\t\tdouble[] repaired = repair(point);\n                 value = CMAESOptimizer.this\n                         .computeObjectiveValue(decode(repaired)) +\n                         penalty(point, repaired);\n@@ -922,7 +923,8 @@\n          */\n         private double[] repair(final double[] x) {\n             double[] repaired = new double[x.length];\n-            for (int i = 0; i < x.length; i++) {\n+            C = triu(C, 0).add(triu(C, 1).transpose());\n+\t\t\tfor (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n                 else if (x[i] > 1.0)\n@@ -942,7 +944,8 @@\n          */\n         private double penalty(final double[] x, final double[] repaired) {\n             double penalty = 0;\n-            for (int i = 0; i < x.length; i++) {\n+            valueRange = 1.0;\n+\t\t\tfor (int i = 0; i < x.length; i++) {\n                 double diff = Math.abs(x[i] - repaired[i]);\n                 penalty += diff * valueRange;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 945, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  double diff=Math.abs(x[i] - repaired[i]);\n  penalty+=diff * valueRange;\n}", 
          "type": "InsertBefore", 
          "seed": "valueRange=1.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 883, 
          "faulty": "double[] repaired=repair(point);", 
          "type": "InsertBefore", 
          "seed": "evaluations.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 925, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  if (x[i] < 0)   repaired[i]=0;\n else   if (x[i] > 1.0)   repaired[i]=1.0;\n else   repaired[i]=x[i];\n}", 
          "type": "InsertBefore", 
          "seed": "C=triu(C,0).add(triu(C,1).transpose());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_176/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:36:25.234148594 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_176/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:36:25.238148585 -0500\n@@ -922,7 +922,8 @@\n          */\n         private double[] repair(final double[] x) {\n             double[] repaired = new double[x.length];\n-            for (int i = 0; i < x.length; i++) {\n+            iterations = 0;\n+\t\t\tfor (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n                 else if (x[i] > 1.0)\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 925, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  if (x[i] < 0)   repaired[i]=0;\n else   if (x[i] > 1.0)   repaired[i]=1.0;\n else   repaired[i]=x[i];\n}", 
          "type": "InsertBefore", 
          "seed": "iterations=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_798/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:47:49.021065134 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_798/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:47:49.025065127 -0500\n@@ -930,7 +930,7 @@\n                 else\n                     repaired[i] = x[i];\n             }\n-            return repaired;\n+            return x;\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 933, 
          "faulty": "return repaired;", 
          "type": "Replace", 
          "seed": "return x;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_469/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:41:57.537673719 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_469/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:41:57.541673712 -0500\n@@ -851,7 +851,9 @@\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n-                res[i] = (x[i] - boundaries[0][i]) / diff;\n+                if (boundaries == null)\n+\t\t\t\t\treturn x;\n+\t\t\t\tres[i] = (x[i] - boundaries[0][i]) / diff;\n             }\n             return res;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 854, 
          "faulty": "res[i]=(x[i] - boundaries[0][i]) / diff;", 
          "type": "InsertBefore", 
          "seed": "if (boundaries == null) return x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_425/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:41:09.793751280 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-29 03:24:09.607335000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_425/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-29 03:41:09.797751274 -0500\n@@ -124,7 +124,7 @@\n     /** {@inheritDoc} */\n     @Override\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        return getMessage(Locale.US);\n     }\n \n     /**\n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_425/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:41:09.797751274 -0500\n@@ -481,10 +481,7 @@\n                         new Integer[] { 2 });\n             if (boundaries[0] == null || boundaries[1] == null)\n                 throw new NoDataException();\n-            if (boundaries[0].length != init.length)\n-                throw new MultiDimensionMismatchException(\n-                        new Integer[] { boundaries[0].length },\n-                        new Integer[] { init.length });\n+            this.lambda = lambda;\n             if (boundaries[1].length != init.length)\n                 throw new MultiDimensionMismatchException(\n                         new Integer[] { boundaries[1].length },\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 127, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 484, 
          "faulty": "if (boundaries[0].length != init.length) throw new MultiDimensionMismatchException(new Integer[]{boundaries[0].length},new Integer[]{init.length});", 
          "type": "Replace", 
          "seed": "this.lambda=lambda;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_883/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:49:21.352906483 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_883/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:49:21.356906476 -0500\n@@ -922,7 +922,8 @@\n          */\n         private double[] repair(final double[] x) {\n             double[] repaired = new double[x.length];\n-            for (int i = 0; i < x.length; i++) {\n+            C = triu(C, 0).add(triu(C, 1).transpose());\n+\t\t\tfor (int i = 0; i < x.length; i++) {\n                 if (x[i] < 0)\n                     repaired[i] = 0;\n                 else if (x[i] > 1.0)\n@@ -943,7 +944,9 @@\n         private double penalty(final double[] x, final double[] repaired) {\n             double penalty = 0;\n             for (int i = 0; i < x.length; i++) {\n-                double diff = Math.abs(x[i] - repaired[i]);\n+                ccovmu = Math.min(1 - ccov1, 2. * (mueff - 2. + 1. / mueff)\n+\t\t\t\t\t\t/ ((dimension + 2.) * (dimension + 2.) + mueff));\n+\t\t\t\tdouble diff = Math.abs(x[i] - repaired[i]);\n                 penalty += diff * valueRange;\n             }\n             return isMinimize ? penalty : -penalty;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 946, 
          "faulty": "double diff=Math.abs(x[i] - repaired[i]);", 
          "type": "InsertBefore", 
          "seed": "ccovmu=Math.min(1 - ccov1,2. * (mueff - 2. + 1. / mueff) / ((dimension + 2.) * (dimension + 2.) + mueff));"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 925, 
          "faulty": "for (int i=0; i < x.length; i++) {\n  if (x[i] < 0)   repaired[i]=0;\n else   if (x[i] > 1.0)   repaired[i]=1.0;\n else   repaired[i]=x[i];\n}", 
          "type": "InsertBefore", 
          "seed": "C=triu(C,0).add(triu(C,1).transpose());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_665/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:45:23.485307907 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_665/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:45:23.485307907 -0500\n@@ -853,7 +853,8 @@\n                 double diff = boundaries[1][i] - boundaries[0][i];\n                 res[i] = (x[i] - boundaries[0][i]) / diff;\n             }\n-            return res;\n+            mu = lambda / 2;\n+\t\t\treturn res;\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 856, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "mu=lambda / 2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 03:24:09.831340000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1481/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java\t2018-12-29 04:00:36.063540260 -0500\n@@ -1357,7 +1357,8 @@\n                 return Double.NaN;\n             }\n         } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n+            return (new BigDecimal(Double.toString(x)).setScale(scale,\n+\t\t\t\t\troundingMethod)).doubleValue();\n         }\n     }\n \n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 03:24:09.727337000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1481/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\t2018-12-29 04:00:36.067540251 -0500\n@@ -943,7 +943,13 @@\n         private double penalty(final double[] x, final double[] repaired) {\n             double penalty = 0;\n             for (int i = 0; i < x.length; i++) {\n-                double diff = Math.abs(x[i] - repaired[i]);\n+                if (diagonalOnly > 1 && iterations > diagonalOnly) {\n+\t\t\t\t\tdiagonalOnly = 0;\n+\t\t\t\t\tB = eye(dimension, dimension);\n+\t\t\t\t\tBD = diag(diagD);\n+\t\t\t\t\tC = diag(diagC);\n+\t\t\t\t}\n+\t\t\t\tdouble diff = Math.abs(x[i] - repaired[i]);\n                 penalty += diff * valueRange;\n             }\n             return isMinimize ? penalty : -penalty;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java", 
          "line": 946, 
          "faulty": "double diff=Math.abs(x[i] - repaired[i]);", 
          "type": "InsertBefore", 
          "seed": "if (diagonalOnly > 1 && iterations > diagonalOnly) {\n  diagonalOnly=0;\n  B=eye(dimension,dimension);\n  BD=diag(diagD);\n  C=diag(diagC);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/MathUtils.java", 
          "line": 1360, 
          "faulty": "throw new MathRuntimeException(ex);", 
          "type": "Replace", 
          "seed": "return (new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();"
        }
      ]
    }
  ]
}