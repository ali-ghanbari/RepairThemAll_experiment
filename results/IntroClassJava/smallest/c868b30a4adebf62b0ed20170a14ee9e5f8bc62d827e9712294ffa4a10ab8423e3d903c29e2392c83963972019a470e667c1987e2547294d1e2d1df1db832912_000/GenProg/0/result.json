{
  "repair_end": "2018-11-28 16:20:16.713231", 
  "repair_begin": "2018-11-28 16:12:48.344556", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "smallest.value=numbers[0];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": ";"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "smallest.value=numbers[0];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": ";"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 78, 
          "faulty": "smallest.value=numbers[0];", 
          "type": "InsertBefore", 
          "seed": "numbers[j.value - 1]=numbers[j.value];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "Replace", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": ";"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "InsertBefore", 
          "seed": "temp.value=numbers[j.value - 1];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 60, 
          "faulty": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();", 
          "type": "InsertBefore", 
          "seed": ";"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 78, 
          "faulty": "smallest.value=numbers[0];", 
          "type": "InsertBefore", 
          "seed": "numbers[j.value - 1]=numbers[j.value];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 66, 
          "faulty": "x.value=scanner.nextInt();", 
          "type": "Replace", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 60, 
          "faulty": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();", 
          "type": "Replace", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "for (i.value=0; i.value < 3; i.value++) {\n  x.value=scanner.nextInt();\n  numbers[i.value]=x.value;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "Replace", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "smallest.value=numbers[0];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 60, 
          "faulty": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();", 
          "type": "InsertBefore", 
          "seed": ";"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": ";", 
          "type": "Delete", 
          "seed": "int[] numbers=new int[4];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "numbers[j.value - 1]=numbers[j.value];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": ";", 
          "type": "Replace", 
          "seed": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "smallest.value=numbers[0];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": ";", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 78, 
          "faulty": "smallest.value=numbers[0];", 
          "type": "InsertBefore", 
          "seed": "numbers[j.value - 1]=numbers[j.value];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "Replace", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "for (i.value=0; i.value < 3; i.value++) {\n  x.value=scanner.nextInt();\n  numbers[i.value]=x.value;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "smallest.value=numbers[0];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 78, 
          "faulty": "smallest.value=numbers[0];", 
          "type": "InsertBefore", 
          "seed": "numbers[j.value - 1]=numbers[j.value];"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 78, 
          "faulty": "smallest.value=numbers[0];", 
          "type": "InsertBefore", 
          "seed": "numbers[j.value - 1]=numbers[j.value];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 66, 
          "faulty": "x.value=scanner.nextInt();", 
          "type": "Replace", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 60, 
          "faulty": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();", 
          "type": "Replace", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "for (i.value=0; i.value < 3; i.value++) {\n  x.value=scanner.nextInt();\n  numbers[i.value]=x.value;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "Replace", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "smallest.value=numbers[0];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 60, 
          "faulty": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();", 
          "type": "InsertBefore", 
          "seed": ";"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "smallest.value=numbers[0];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": ";"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 79, 
          "faulty": "output+=(String.format(\"%d is the smallest\\n\",smallest.value));", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 78, 
          "faulty": "smallest.value=numbers[0];", 
          "type": "InsertBefore", 
          "seed": "numbers[j.value - 1]=numbers[j.value];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 66, 
          "faulty": "x.value=scanner.nextInt();", 
          "type": "Replace", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 60, 
          "faulty": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();", 
          "type": "Replace", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "for (i.value=0; i.value < 3; i.value++) {\n  x.value=scanner.nextInt();\n  numbers[i.value]=x.value;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 78, 
          "faulty": "smallest.value=numbers[0];", 
          "type": "InsertBefore", 
          "seed": "numbers[j.value - 1]=numbers[j.value];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 60, 
          "faulty": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();", 
          "type": "Replace", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "for (i.value=0; i.value < 3; i.value++) {\n  x.value=scanner.nextInt();\n  numbers[i.value]=x.value;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Replace", 
          "seed": "output+=(String.format(\"Please enter 4 numbers separated by spaces > \"));"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": ";", 
          "type": "Delete", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 73, 
          "faulty": "numbers[j.value - 1]=numbers[j.value];", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": ";", 
          "type": "Delete", 
          "seed": "int[] numbers=new int[4];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "Replace", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "smallest.value=numbers[0];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": ";", 
          "type": "Delete", 
          "seed": "int[] numbers=new int[4];"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "smallest.value=numbers[0];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "smallest.value=numbers[0];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": ";"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 62, 
          "faulty": "int[] numbers=new int[4];", 
          "type": "Replace", 
          "seed": ";"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 63, 
          "faulty": "output+=(String.format(\"Please enter 4 numbers separated by spaces > \"));", 
          "type": "InsertBefore", 
          "seed": "int[] numbers=new int[4];"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "smallest.value=numbers[0];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": ";", 
          "type": "Delete", 
          "seed": "temp.value=numbers[j.value - 1];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 73, 
          "faulty": "numbers[j.value - 1]=numbers[j.value];", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "smallest.value=numbers[0];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": ";"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "smallest.value=numbers[0];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "smallest.value=numbers[0];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": ";"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 79, 
          "faulty": "output+=(String.format(\"%d is the smallest\\n\",smallest.value));", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": ";", 
          "type": "InsertBefore", 
          "seed": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "numbers[j.value]=temp.value;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 60, 
          "faulty": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();", 
          "type": "Replace", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "for (i.value=0; i.value < 3; i.value++) {\n  x.value=scanner.nextInt();\n  numbers[i.value]=x.value;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 60, 
          "faulty": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();", 
          "type": "Replace", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "for (i.value=0; i.value < 3; i.value++) {\n  x.value=scanner.nextInt();\n  numbers[i.value]=x.value;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Replace", 
          "seed": "output+=(String.format(\"Please enter 4 numbers separated by spaces > \"));"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": ";", 
          "type": "Delete", 
          "seed": "output+=(String.format(\"Please enter 4 numbers separated by spaces > \"));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 78, 
          "faulty": "smallest.value=numbers[0];", 
          "type": "InsertBefore", 
          "seed": "numbers[j.value - 1]=numbers[j.value];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 66, 
          "faulty": "x.value=scanner.nextInt();", 
          "type": "Replace", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "temp.value=numbers[j.value - 1];"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 78, 
          "faulty": "smallest.value=numbers[0];", 
          "type": "InsertBefore", 
          "seed": "numbers[j.value - 1]=numbers[j.value];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 66, 
          "faulty": "x.value=scanner.nextInt();", 
          "type": "Replace", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 60, 
          "faulty": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();", 
          "type": "Replace", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "for (i.value=0; i.value < 3; i.value++) {\n  x.value=scanner.nextInt();\n  numbers[i.value]=x.value;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": ";"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 79, 
          "faulty": "output+=(String.format(\"%d is the smallest\\n\",smallest.value));", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": ";", 
          "type": "InsertBefore", 
          "seed": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 73, 
          "faulty": "numbers[j.value - 1]=numbers[j.value];", 
          "type": "Replace", 
          "seed": "temp.value=numbers[j.value - 1];"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "smallest.value=numbers[0];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": ";"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 62, 
          "faulty": "int[] numbers=new int[4];", 
          "type": "Replace", 
          "seed": ";"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 63, 
          "faulty": "output+=(String.format(\"Please enter 4 numbers separated by spaces > \"));", 
          "type": "InsertBefore", 
          "seed": "int[] numbers=new int[4];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Replace", 
          "seed": "numbers[j.value]=temp.value;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": ";"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 79, 
          "faulty": "output+=(String.format(\"%d is the smallest\\n\",smallest.value));", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": ";", 
          "type": "InsertBefore", 
          "seed": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "numbers[j.value]=temp.value;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 78, 
          "faulty": "smallest.value=numbers[0];", 
          "type": "InsertBefore", 
          "seed": "numbers[j.value - 1]=numbers[j.value];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 60, 
          "faulty": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();", 
          "type": "Replace", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "for (i.value=0; i.value < 3; i.value++) {\n  x.value=scanner.nextInt();\n  numbers[i.value]=x.value;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Replace", 
          "seed": "output+=(String.format(\"Please enter 4 numbers separated by spaces > \"));"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": ";", 
          "type": "Delete", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 73, 
          "faulty": "numbers[j.value - 1]=numbers[j.value];", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": ";", 
          "type": "Delete", 
          "seed": "int[] numbers=new int[4];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "Replace", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "smallest.value=numbers[0];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": ";", 
          "type": "Delete", 
          "seed": "int[] numbers=new int[4];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "numbers[j.value - 1]=numbers[j.value];"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 78, 
          "faulty": "smallest.value=numbers[0];", 
          "type": "InsertBefore", 
          "seed": "numbers[j.value - 1]=numbers[j.value];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 66, 
          "faulty": "x.value=scanner.nextInt();", 
          "type": "Replace", 
          "seed": "x.value=scanner.nextInt();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 78, 
          "faulty": "smallest.value=numbers[0];", 
          "type": "InsertBefore", 
          "seed": "numbers[j.value - 1]=numbers[j.value];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 66, 
          "faulty": "x.value=scanner.nextInt();", 
          "type": "Replace", 
          "seed": "x.value=scanner.nextInt();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 78, 
          "faulty": "smallest.value=numbers[0];", 
          "type": "InsertBefore", 
          "seed": "numbers[j.value - 1]=numbers[j.value];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 66, 
          "faulty": "x.value=scanner.nextInt();", 
          "type": "Replace", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 60, 
          "faulty": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();", 
          "type": "Replace", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "for (i.value=0; i.value < 3; i.value++) {\n  x.value=scanner.nextInt();\n  numbers[i.value]=x.value;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 60, 
          "faulty": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();", 
          "type": "InsertBefore", 
          "seed": ";"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 78, 
          "faulty": "smallest.value=numbers[0];", 
          "type": "InsertBefore", 
          "seed": "numbers[j.value - 1]=numbers[j.value];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 66, 
          "faulty": "x.value=scanner.nextInt();", 
          "type": "Replace", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 60, 
          "faulty": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();", 
          "type": "Replace", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "for (i.value=0; i.value < 3; i.value++) {\n  x.value=scanner.nextInt();\n  numbers[i.value]=x.value;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "Replace", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "smallest.value=numbers[0];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": ";"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 62, 
          "faulty": "int[] numbers=new int[4];", 
          "type": "Replace", 
          "seed": ";"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 63, 
          "faulty": "output+=(String.format(\"Please enter 4 numbers separated by spaces > \"));", 
          "type": "InsertBefore", 
          "seed": "int[] numbers=new int[4];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": ";", 
          "type": "Delete", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "smallest.value=numbers[0];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 79, 
          "faulty": "output+=(String.format(\"%d is the smallest\\n\",smallest.value));", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": ";", 
          "type": "InsertBefore", 
          "seed": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": ";", 
          "type": "Delete", 
          "seed": "temp.value=numbers[j.value - 1];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 73, 
          "faulty": "numbers[j.value - 1]=numbers[j.value];", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 78, 
          "faulty": "smallest.value=numbers[0];", 
          "type": "InsertBefore", 
          "seed": "numbers[j.value - 1]=numbers[j.value];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 60, 
          "faulty": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();", 
          "type": "Replace", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "for (i.value=0; i.value < 3; i.value++) {\n  x.value=scanner.nextInt();\n  numbers[i.value]=x.value;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 60, 
          "faulty": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();", 
          "type": "Replace", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "for (i.value=0; i.value < 3; i.value++) {\n  x.value=scanner.nextInt();\n  numbers[i.value]=x.value;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Replace", 
          "seed": "output+=(String.format(\"Please enter 4 numbers separated by spaces > \"));"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "smallest.value=numbers[0];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "smallest.value=numbers[0];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": ";"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "smallest.value=numbers[0];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": ";"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 62, 
          "faulty": "int[] numbers=new int[4];", 
          "type": "Replace", 
          "seed": ";"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 63, 
          "faulty": "output+=(String.format(\"Please enter 4 numbers separated by spaces > \"));", 
          "type": "InsertBefore", 
          "seed": "int[] numbers=new int[4];"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 66, 
          "faulty": "x.value=scanner.nextInt();", 
          "type": "Replace", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 60, 
          "faulty": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();", 
          "type": "Replace", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "for (i.value=0; i.value < 3; i.value++) {\n  x.value=scanner.nextInt();\n  numbers[i.value]=x.value;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 79, 
          "faulty": "output+=(String.format(\"%d is the smallest\\n\",smallest.value));", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": ";"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 79, 
          "faulty": "output+=(String.format(\"%d is the smallest\\n\",smallest.value));", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Replace", 
          "seed": "output+=(String.format(\"Please enter 4 numbers separated by spaces > \"));"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": ";", 
          "type": "Delete", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 73, 
          "faulty": "numbers[j.value - 1]=numbers[j.value];", 
          "type": "InsertBefore", 
          "seed": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "output+=(String.format(\"%d is the smallest\\n\",smallest.value));"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "Replace", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Replace", 
          "seed": "output+=(String.format(\"Please enter 4 numbers separated by spaces > \"));"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": ";", 
          "type": "Delete", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 73, 
          "faulty": "numbers[j.value - 1]=numbers[j.value];", 
          "type": "InsertBefore", 
          "seed": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 60, 
          "faulty": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();", 
          "type": "InsertBefore", 
          "seed": ";"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "smallest.value=numbers[0];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "smallest.value=numbers[0];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 78, 
          "faulty": "smallest.value=numbers[0];", 
          "type": "InsertBefore", 
          "seed": "numbers[j.value - 1]=numbers[j.value];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "Replace", 
          "seed": ";"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "Replace", 
          "seed": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "smallest.value=numbers[0];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "smallest.value=numbers[0];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": ";"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 79, 
          "faulty": "output+=(String.format(\"%d is the smallest\\n\",smallest.value));", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": ";", 
          "type": "InsertBefore", 
          "seed": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": ";"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 62, 
          "faulty": "int[] numbers=new int[4];", 
          "type": "Replace", 
          "seed": ";"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 63, 
          "faulty": "output+=(String.format(\"Please enter 4 numbers separated by spaces > \"));", 
          "type": "InsertBefore", 
          "seed": "int[] numbers=new int[4];"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 78, 
          "faulty": "smallest.value=numbers[0];", 
          "type": "InsertBefore", 
          "seed": "numbers[j.value - 1]=numbers[j.value];"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 78, 
          "faulty": "smallest.value=numbers[0];", 
          "type": "InsertBefore", 
          "seed": "numbers[j.value - 1]=numbers[j.value];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "Replace", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 78, 
          "faulty": "smallest.value=numbers[0];", 
          "type": "InsertBefore", 
          "seed": "numbers[j.value - 1]=numbers[j.value];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "Replace", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": ";"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 60, 
          "faulty": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();", 
          "type": "Replace", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "for (i.value=0; i.value < 3; i.value++) {\n  x.value=scanner.nextInt();\n  numbers[i.value]=x.value;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Delete", 
          "seed": "numbers[j.value]=temp.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 71, 
          "faulty": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}", 
          "type": "InsertBefore", 
          "seed": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 72, 
          "faulty": "temp.value=numbers[j.value - 1];", 
          "type": "Replace", 
          "seed": "output+=(String.format(\"Please enter 4 numbers separated by spaces > \"));"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": ";", 
          "type": "Delete", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 73, 
          "faulty": "numbers[j.value - 1]=numbers[j.value];", 
          "type": "InsertBefore", 
          "seed": "if (numbers[j.value - 1] > numbers[j.value]) {\n  temp.value=numbers[j.value - 1];\n  numbers[j.value - 1]=numbers[j.value];\n  numbers[j.value]=temp.value;\n}"
        }
      ]
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 70, 
          "faulty": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "numbers[i.value]=x.value;"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Replace", 
          "seed": "smallest.value=numbers[0];"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 74, 
          "faulty": "numbers[j.value]=temp.value;", 
          "type": "Delete", 
          "seed": "IntObj x=new IntObj(), i=new IntObj(), smallest=new IntObj(), j=new IntObj(), k=new IntObj(), temp=new IntObj();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 69, 
          "faulty": "for (k.value=3; k.value > 0; k.value--) {\n  for (j.value=1; j.value <= k.value; j.value++) {\n    if (numbers[j.value - 1] > numbers[j.value]) {\n      temp.value=numbers[j.value - 1];\n      numbers[j.value - 1]=numbers[j.value];\n      numbers[j.value]=temp.value;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "x.value=scanner.nextInt();"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_c868b30a_000.java", 
          "line": 81, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "for (j.value=1; j.value <= k.value; j.value++) {\n  if (numbers[j.value - 1] > numbers[j.value]) {\n    temp.value=numbers[j.value - 1];\n    numbers[j.value - 1]=numbers[j.value];\n    numbers[j.value]=temp.value;\n  }\n}"
        }
      ]
    }
  ]
}