{
  "repair_end": "2018-12-03 00:20:23.955794", 
  "repair_begin": "2018-12-03 00:12:37.314424", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 68, 
          "faulty": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 76, 
          "faulty": "if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "Replace", 
          "seed": "output+=(String.format(\"%d is the smallest\\n\",A.value));"
        }
      ], 
      "patch": "--- /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-11-05 17:59:11.757692000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/patches_tfq1/Patch_651/patched/tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-12-02 18:15:22.775021001 -0500\n@@ -66,6 +66,27 @@\n         C.value = scanner.nextInt ();\n         D.value = scanner.nextInt ();\n         if (A.value < B.value && A.value < C.value && A.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", B.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", C.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", D.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t}\n+\t\tif (A.value < B.value && A.value < C.value && A.value < D.value) {\n             output += (String.format (\"%d is the smallest\\n\", A.value));\n             if (true)\n                 return;;\n@@ -73,14 +94,7 @@\n             output += (String.format (\"%d is the smallest\\n\", B.value));\n             if (true)\n                 return;;\n-        } else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n-            output += (String.format (\"%d is the smallest\\n\", C.value));\n-            if (true)\n-                return;;\n-        } else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n-            output += (String.format (\"%d is the smallest\\n\", D.value));\n-            if (true)\n-                return;;\n-        }\n+        } else\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n     }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 68, 
          "faulty": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 76, 
          "faulty": "if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "Replace", 
          "seed": "output+=(String.format(\"%d is the smallest\\n\",A.value));"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 80, 
          "faulty": "if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": ";"
        }
      ], 
      "patch": "--- /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-11-05 17:59:11.757692000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/patches_tfq1/Patch_1493/patched/tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-12-02 18:18:42.778801317 -0500\n@@ -66,6 +66,27 @@\n         C.value = scanner.nextInt ();\n         D.value = scanner.nextInt ();\n         if (A.value < B.value && A.value < C.value && A.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", B.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", C.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", D.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t}\n+\t\tif (A.value < B.value && A.value < C.value && A.value < D.value) {\n             output += (String.format (\"%d is the smallest\\n\", A.value));\n             if (true)\n                 return;;\n@@ -73,14 +94,7 @@\n             output += (String.format (\"%d is the smallest\\n\", B.value));\n             if (true)\n                 return;;\n-        } else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n-            output += (String.format (\"%d is the smallest\\n\", C.value));\n-            if (true)\n-                return;;\n-        } else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n-            output += (String.format (\"%d is the smallest\\n\", D.value));\n-            if (true)\n-                return;;\n-        }\n+        } else\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n     }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 68, 
          "faulty": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 76, 
          "faulty": "if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "Replace", 
          "seed": "output+=(String.format(\"%d is the smallest\\n\",A.value));"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 80, 
          "faulty": "if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "Replace", 
          "seed": "A.value=scanner.nextInt();"
        }
      ], 
      "patch": "--- /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-11-05 17:59:11.757692000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/patches_tfq1/Patch_1320/patched/tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-12-02 18:18:02.610859934 -0500\n@@ -65,7 +65,23 @@\n         B.value = scanner.nextInt ();\n         C.value = scanner.nextInt ();\n         D.value = scanner.nextInt ();\n-        if (A.value < B.value && A.value < C.value && A.value < D.value) {\n+        if (B.value < A.value && B.value < C.value && B.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", B.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", C.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", D.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t}\n+\t\tif (A.value < B.value && A.value < C.value && A.value < D.value) {\n             output += (String.format (\"%d is the smallest\\n\", A.value));\n             if (true)\n                 return;;\n@@ -73,14 +89,7 @@\n             output += (String.format (\"%d is the smallest\\n\", B.value));\n             if (true)\n                 return;;\n-        } else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n-            output += (String.format (\"%d is the smallest\\n\", C.value));\n-            if (true)\n-                return;;\n-        } else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n-            output += (String.format (\"%d is the smallest\\n\", D.value));\n-            if (true)\n-                return;;\n-        }\n+        } else\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n     }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 66, 
          "faulty": "C.value=scanner.nextInt();", 
          "type": "InsertBefore", 
          "seed": ";"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 68, 
          "faulty": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 76, 
          "faulty": "if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "Replace", 
          "seed": "output+=(String.format(\"%d is the smallest\\n\",A.value));"
        }
      ], 
      "patch": "--- /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-11-05 17:59:11.757692000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/patches_tfq1/Patch_1600/patched/tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-12-02 18:19:07.798766756 -0500\n@@ -63,9 +63,26 @@\n             (String.format (\"Please enter 4 numbers separated by spaces > \"));\n         A.value = scanner.nextInt ();\n         B.value = scanner.nextInt ();\n-        C.value = scanner.nextInt ();\n+        ;\n+\t\tC.value = scanner.nextInt ();\n         D.value = scanner.nextInt ();\n-        if (A.value < B.value && A.value < C.value && A.value < D.value) {\n+        if (B.value < A.value && B.value < C.value && B.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", B.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", C.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", D.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t}\n+\t\tif (A.value < B.value && A.value < C.value && A.value < D.value) {\n             output += (String.format (\"%d is the smallest\\n\", A.value));\n             if (true)\n                 return;;\n@@ -73,14 +90,7 @@\n             output += (String.format (\"%d is the smallest\\n\", B.value));\n             if (true)\n                 return;;\n-        } else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n-            output += (String.format (\"%d is the smallest\\n\", C.value));\n-            if (true)\n-                return;;\n-        } else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n-            output += (String.format (\"%d is the smallest\\n\", D.value));\n-            if (true)\n-                return;;\n-        }\n+        } else\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n     }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 65, 
          "faulty": "B.value=scanner.nextInt();", 
          "type": "InsertBefore", 
          "seed": ";"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 68, 
          "faulty": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 76, 
          "faulty": "if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "Replace", 
          "seed": "output+=(String.format(\"%d is the smallest\\n\",A.value));"
        }
      ], 
      "patch": "--- /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-11-05 17:59:11.757692000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/patches_tfq1/Patch_1792/patched/tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-12-02 18:19:52.898707732 -0500\n@@ -62,10 +62,32 @@\n         output +=\n             (String.format (\"Please enter 4 numbers separated by spaces > \"));\n         A.value = scanner.nextInt ();\n-        B.value = scanner.nextInt ();\n+        ;\n+\t\tB.value = scanner.nextInt ();\n         C.value = scanner.nextInt ();\n         D.value = scanner.nextInt ();\n         if (A.value < B.value && A.value < C.value && A.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", B.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", C.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", D.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t}\n+\t\tif (A.value < B.value && A.value < C.value && A.value < D.value) {\n             output += (String.format (\"%d is the smallest\\n\", A.value));\n             if (true)\n                 return;;\n@@ -73,14 +95,7 @@\n             output += (String.format (\"%d is the smallest\\n\", B.value));\n             if (true)\n                 return;;\n-        } else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n-            output += (String.format (\"%d is the smallest\\n\", C.value));\n-            if (true)\n-                return;;\n-        } else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n-            output += (String.format (\"%d is the smallest\\n\", D.value));\n-            if (true)\n-                return;;\n-        }\n+        } else\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n     }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 68, 
          "faulty": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 76, 
          "faulty": "if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "Replace", 
          "seed": "output+=(String.format(\"%d is the smallest\\n\",A.value));"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 80, 
          "faulty": "if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "Delete", 
          "seed": "A.value=scanner.nextInt();"
        }
      ], 
      "patch": "--- /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-11-05 17:59:11.757692000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/patches_tfq1/Patch_1360/patched/tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-12-02 18:18:11.722846273 -0500\n@@ -66,6 +66,27 @@\n         C.value = scanner.nextInt ();\n         D.value = scanner.nextInt ();\n         if (A.value < B.value && A.value < C.value && A.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", B.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", C.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", D.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t}\n+\t\tif (A.value < B.value && A.value < C.value && A.value < D.value) {\n             output += (String.format (\"%d is the smallest\\n\", A.value));\n             if (true)\n                 return;;\n@@ -73,14 +94,7 @@\n             output += (String.format (\"%d is the smallest\\n\", B.value));\n             if (true)\n                 return;;\n-        } else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n-            output += (String.format (\"%d is the smallest\\n\", C.value));\n-            if (true)\n-                return;;\n-        } else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n-            output += (String.format (\"%d is the smallest\\n\", D.value));\n-            if (true)\n-                return;;\n-        }\n+        } else\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n     }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 68, 
          "faulty": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 76, 
          "faulty": "if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "Replace", 
          "seed": "output+=(String.format(\"%d is the smallest\\n\",A.value));"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 80, 
          "faulty": "if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "A.value=scanner.nextInt();"
        }
      ], 
      "patch": "--- /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-11-05 17:59:11.757692000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/patches_tfq1/Patch_1110/patched/tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-12-02 18:17:13.054938434 -0500\n@@ -66,6 +66,27 @@\n         C.value = scanner.nextInt ();\n         D.value = scanner.nextInt ();\n         if (A.value < B.value && A.value < C.value && A.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", B.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", C.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", D.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t}\n+\t\tif (A.value < B.value && A.value < C.value && A.value < D.value) {\n             output += (String.format (\"%d is the smallest\\n\", A.value));\n             if (true)\n                 return;;\n@@ -73,14 +94,7 @@\n             output += (String.format (\"%d is the smallest\\n\", B.value));\n             if (true)\n                 return;;\n-        } else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n-            output += (String.format (\"%d is the smallest\\n\", C.value));\n-            if (true)\n-                return;;\n-        } else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n-            output += (String.format (\"%d is the smallest\\n\", D.value));\n-            if (true)\n-                return;;\n-        }\n+        } else\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n     }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 68, 
          "faulty": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 76, 
          "faulty": "if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "Replace", 
          "seed": "output+=(String.format(\"%d is the smallest\\n\",A.value));"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 80, 
          "faulty": "if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "Replace", 
          "seed": "A.value=scanner.nextInt();"
        }
      ], 
      "patch": "--- /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-11-05 17:59:11.757692000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/patches_tfq1/Patch_1211/patched/tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-12-02 18:17:36.642900142 -0500\n@@ -66,6 +66,27 @@\n         C.value = scanner.nextInt ();\n         D.value = scanner.nextInt ();\n         if (A.value < B.value && A.value < C.value && A.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", B.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", C.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", D.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t}\n+\t\tif (A.value < B.value && A.value < C.value && A.value < D.value) {\n             output += (String.format (\"%d is the smallest\\n\", A.value));\n             if (true)\n                 return;;\n@@ -73,14 +94,7 @@\n             output += (String.format (\"%d is the smallest\\n\", B.value));\n             if (true)\n                 return;;\n-        } else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n-            output += (String.format (\"%d is the smallest\\n\", C.value));\n-            if (true)\n-                return;;\n-        } else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n-            output += (String.format (\"%d is the smallest\\n\", D.value));\n-            if (true)\n-                return;;\n-        }\n+        } else\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n     }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 68, 
          "faulty": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 76, 
          "faulty": "if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "Replace", 
          "seed": "output+=(String.format(\"%d is the smallest\\n\",A.value));"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 80, 
          "faulty": "if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-11-05 17:59:11.757692000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/patches_tfq1/Patch_1828/patched/tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-12-02 18:20:01.014697514 -0500\n@@ -66,6 +66,27 @@\n         C.value = scanner.nextInt ();\n         D.value = scanner.nextInt ();\n         if (A.value < B.value && A.value < C.value && A.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", B.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", C.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", D.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t}\n+\t\tif (A.value < B.value && A.value < C.value && A.value < D.value) {\n             output += (String.format (\"%d is the smallest\\n\", A.value));\n             if (true)\n                 return;;\n@@ -73,14 +94,7 @@\n             output += (String.format (\"%d is the smallest\\n\", B.value));\n             if (true)\n                 return;;\n-        } else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n-            output += (String.format (\"%d is the smallest\\n\", C.value));\n-            if (true)\n-                return;;\n-        } else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n-            output += (String.format (\"%d is the smallest\\n\", D.value));\n-            if (true)\n-                return;;\n-        }\n+        } else\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n     }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 64, 
          "faulty": "A.value=scanner.nextInt();", 
          "type": "InsertBefore", 
          "seed": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 68, 
          "faulty": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 76, 
          "faulty": "if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "Replace", 
          "seed": "output+=(String.format(\"%d is the smallest\\n\",A.value));"
        }
      ], 
      "patch": "--- /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-11-05 17:59:11.757692000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/patches_tfq1/Patch_1113/patched/tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-12-02 18:17:13.514937670 -0500\n@@ -61,11 +61,48 @@\n             new IntObj ();\n         output +=\n             (String.format (\"Please enter 4 numbers separated by spaces > \"));\n-        A.value = scanner.nextInt ();\n+        if (A.value < B.value && A.value < C.value && A.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", B.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", C.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", D.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t}\n+\t\tA.value = scanner.nextInt ();\n         B.value = scanner.nextInt ();\n         C.value = scanner.nextInt ();\n         D.value = scanner.nextInt ();\n-        if (A.value < B.value && A.value < C.value && A.value < D.value) {\n+        if (B.value < A.value && B.value < C.value && B.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", B.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", C.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", D.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t}\n+\t\tif (A.value < B.value && A.value < C.value && A.value < D.value) {\n             output += (String.format (\"%d is the smallest\\n\", A.value));\n             if (true)\n                 return;;\n@@ -73,14 +110,7 @@\n             output += (String.format (\"%d is the smallest\\n\", B.value));\n             if (true)\n                 return;;\n-        } else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n-            output += (String.format (\"%d is the smallest\\n\", C.value));\n-            if (true)\n-                return;;\n-        } else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n-            output += (String.format (\"%d is the smallest\\n\", D.value));\n-            if (true)\n-                return;;\n-        }\n+        } else\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n     }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 62, 
          "faulty": "output+=(String.format(\"Please enter 4 numbers separated by spaces > \"));", 
          "type": "InsertBefore", 
          "seed": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 68, 
          "faulty": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 76, 
          "faulty": "if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "Replace", 
          "seed": "output+=(String.format(\"%d is the smallest\\n\",A.value));"
        }
      ], 
      "patch": "--- /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-11-05 17:59:11.757692000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/patches_tfq1/Patch_1580/patched/tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-12-02 18:19:03.230772962 -0500\n@@ -59,13 +59,50 @@\n     public void exec () throws Exception {\n         IntObj A = new IntObj (), B = new IntObj (), C = new IntObj (), D =\n             new IntObj ();\n-        output +=\n+        if (A.value < B.value && A.value < C.value && A.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", B.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", C.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", D.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t}\n+\t\toutput +=\n             (String.format (\"Please enter 4 numbers separated by spaces > \"));\n         A.value = scanner.nextInt ();\n         B.value = scanner.nextInt ();\n         C.value = scanner.nextInt ();\n         D.value = scanner.nextInt ();\n-        if (A.value < B.value && A.value < C.value && A.value < D.value) {\n+        if (B.value < A.value && B.value < C.value && B.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", B.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", C.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", D.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t}\n+\t\tif (A.value < B.value && A.value < C.value && A.value < D.value) {\n             output += (String.format (\"%d is the smallest\\n\", A.value));\n             if (true)\n                 return;;\n@@ -73,14 +110,7 @@\n             output += (String.format (\"%d is the smallest\\n\", B.value));\n             if (true)\n                 return;;\n-        } else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n-            output += (String.format (\"%d is the smallest\\n\", C.value));\n-            if (true)\n-                return;;\n-        } else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n-            output += (String.format (\"%d is the smallest\\n\", D.value));\n-            if (true)\n-                return;;\n-        }\n+        } else\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n     }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 68, 
          "faulty": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 76, 
          "faulty": "if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "Replace", 
          "seed": "output+=(String.format(\"%d is the smallest\\n\",A.value));"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 80, 
          "faulty": "if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "D.value=scanner.nextInt();"
        }
      ], 
      "patch": "--- /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-11-05 17:59:11.757692000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/patches_tfq1/Patch_520/patched/tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-12-02 18:14:51.407019550 -0500\n@@ -65,7 +65,23 @@\n         B.value = scanner.nextInt ();\n         C.value = scanner.nextInt ();\n         D.value = scanner.nextInt ();\n-        if (A.value < B.value && A.value < C.value && A.value < D.value) {\n+        if (B.value < A.value && B.value < C.value && B.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", B.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", C.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", D.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t}\n+\t\tif (A.value < B.value && A.value < C.value && A.value < D.value) {\n             output += (String.format (\"%d is the smallest\\n\", A.value));\n             if (true)\n                 return;;\n@@ -73,14 +89,7 @@\n             output += (String.format (\"%d is the smallest\\n\", B.value));\n             if (true)\n                 return;;\n-        } else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n-            output += (String.format (\"%d is the smallest\\n\", C.value));\n-            if (true)\n-                return;;\n-        } else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n-            output += (String.format (\"%d is the smallest\\n\", D.value));\n-            if (true)\n-                return;;\n-        }\n+        } else\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n     }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 66, 
          "faulty": "C.value=scanner.nextInt();", 
          "type": "InsertBefore", 
          "seed": "if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 68, 
          "faulty": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 76, 
          "faulty": "if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "Replace", 
          "seed": "output+=(String.format(\"%d is the smallest\\n\",A.value));"
        }
      ], 
      "patch": "--- /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-11-05 17:59:11.757692000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/patches_tfq1/Patch_644/patched/tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-12-02 18:15:21.331020935 -0500\n@@ -63,9 +63,31 @@\n             (String.format (\"Please enter 4 numbers separated by spaces > \"));\n         A.value = scanner.nextInt ();\n         B.value = scanner.nextInt ();\n-        C.value = scanner.nextInt ();\n+        if (D.value < A.value && D.value < B.value && D.value < C.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", D.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t}\n+\t\tC.value = scanner.nextInt ();\n         D.value = scanner.nextInt ();\n-        if (A.value < B.value && A.value < C.value && A.value < D.value) {\n+        if (B.value < A.value && B.value < C.value && B.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", B.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", C.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", D.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t}\n+\t\tif (A.value < B.value && A.value < C.value && A.value < D.value) {\n             output += (String.format (\"%d is the smallest\\n\", A.value));\n             if (true)\n                 return;;\n@@ -73,14 +95,7 @@\n             output += (String.format (\"%d is the smallest\\n\", B.value));\n             if (true)\n                 return;;\n-        } else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n-            output += (String.format (\"%d is the smallest\\n\", C.value));\n-            if (true)\n-                return;;\n-        } else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n-            output += (String.format (\"%d is the smallest\\n\", D.value));\n-            if (true)\n-                return;;\n-        }\n+        } else\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n     }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 68, 
          "faulty": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 76, 
          "faulty": "if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "Replace", 
          "seed": "output+=(String.format(\"%d is the smallest\\n\",A.value));"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 80, 
          "faulty": "if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "Delete", 
          "seed": "if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-11-05 17:59:11.757692000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/patches_tfq1/Patch_1769/patched/tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-12-02 18:19:47.910714069 -0500\n@@ -65,7 +65,23 @@\n         B.value = scanner.nextInt ();\n         C.value = scanner.nextInt ();\n         D.value = scanner.nextInt ();\n-        if (A.value < B.value && A.value < C.value && A.value < D.value) {\n+        if (B.value < A.value && B.value < C.value && B.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", B.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", C.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", D.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t}\n+\t\tif (A.value < B.value && A.value < C.value && A.value < D.value) {\n             output += (String.format (\"%d is the smallest\\n\", A.value));\n             if (true)\n                 return;;\n@@ -73,14 +89,7 @@\n             output += (String.format (\"%d is the smallest\\n\", B.value));\n             if (true)\n                 return;;\n-        } else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n-            output += (String.format (\"%d is the smallest\\n\", C.value));\n-            if (true)\n-                return;;\n-        } else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n-            output += (String.format (\"%d is the smallest\\n\", D.value));\n-            if (true)\n-                return;;\n-        }\n+        } else\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n     }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 65, 
          "faulty": "B.value=scanner.nextInt();", 
          "type": "InsertBefore", 
          "seed": "if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 68, 
          "faulty": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 76, 
          "faulty": "if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "Replace", 
          "seed": "output+=(String.format(\"%d is the smallest\\n\",A.value));"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 80, 
          "faulty": "if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "A.value=scanner.nextInt();"
        }
      ], 
      "patch": "--- /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-11-05 17:59:11.757692000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/patches_tfq1/Patch_1463/patched/tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-12-02 18:18:35.874811105 -0500\n@@ -62,10 +62,42 @@\n         output +=\n             (String.format (\"Please enter 4 numbers separated by spaces > \"));\n         A.value = scanner.nextInt ();\n-        B.value = scanner.nextInt ();\n+        if (B.value < A.value && B.value < C.value && B.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", B.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", C.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", D.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t}\n+\t\tB.value = scanner.nextInt ();\n         C.value = scanner.nextInt ();\n         D.value = scanner.nextInt ();\n-        if (A.value < B.value && A.value < C.value && A.value < D.value) {\n+        if (B.value < A.value && B.value < C.value && B.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", B.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", C.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", D.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t}\n+\t\tif (A.value < B.value && A.value < C.value && A.value < D.value) {\n             output += (String.format (\"%d is the smallest\\n\", A.value));\n             if (true)\n                 return;;\n@@ -73,14 +105,7 @@\n             output += (String.format (\"%d is the smallest\\n\", B.value));\n             if (true)\n                 return;;\n-        } else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n-            output += (String.format (\"%d is the smallest\\n\", C.value));\n-            if (true)\n-                return;;\n-        } else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n-            output += (String.format (\"%d is the smallest\\n\", D.value));\n-            if (true)\n-                return;;\n-        }\n+        } else\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n     }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 68, 
          "faulty": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 76, 
          "faulty": "if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "Replace", 
          "seed": "output+=(String.format(\"%d is the smallest\\n\",A.value));"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 80, 
          "faulty": "if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "output+=(String.format(\"%d is the smallest\\n\",B.value));"
        }
      ], 
      "patch": "--- /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-11-05 17:59:11.757692000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/patches_tfq1/Patch_670/patched/tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-12-02 18:15:27.147021204 -0500\n@@ -65,7 +65,23 @@\n         B.value = scanner.nextInt ();\n         C.value = scanner.nextInt ();\n         D.value = scanner.nextInt ();\n-        if (A.value < B.value && A.value < C.value && A.value < D.value) {\n+        if (B.value < A.value && B.value < C.value && B.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", B.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", C.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", D.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t}\n+\t\tif (A.value < B.value && A.value < C.value && A.value < D.value) {\n             output += (String.format (\"%d is the smallest\\n\", A.value));\n             if (true)\n                 return;;\n@@ -73,14 +89,7 @@\n             output += (String.format (\"%d is the smallest\\n\", B.value));\n             if (true)\n                 return;;\n-        } else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n-            output += (String.format (\"%d is the smallest\\n\", C.value));\n-            if (true)\n-                return;;\n-        } else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n-            output += (String.format (\"%d is the smallest\\n\", D.value));\n-            if (true)\n-                return;;\n-        }\n+        } else\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n     }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 60, 
          "faulty": "IntObj A=new IntObj(), B=new IntObj(), C=new IntObj(), D=new IntObj();", 
          "type": "InsertBefore", 
          "seed": ";"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 68, 
          "faulty": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 76, 
          "faulty": "if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "Replace", 
          "seed": "output+=(String.format(\"%d is the smallest\\n\",A.value));"
        }
      ], 
      "patch": "--- /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-11-05 17:59:11.757692000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/patches_tfq1/Patch_1872/patched/tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-12-02 18:20:11.206684844 -0500\n@@ -57,7 +57,8 @@\n     }\n \n     public void exec () throws Exception {\n-        IntObj A = new IntObj (), B = new IntObj (), C = new IntObj (), D =\n+        ;\n+\t\tIntObj A = new IntObj (), B = new IntObj (), C = new IntObj (), D =\n             new IntObj ();\n         output +=\n             (String.format (\"Please enter 4 numbers separated by spaces > \"));\n@@ -66,6 +67,27 @@\n         C.value = scanner.nextInt ();\n         D.value = scanner.nextInt ();\n         if (A.value < B.value && A.value < C.value && A.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", B.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", C.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", D.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t}\n+\t\tif (A.value < B.value && A.value < C.value && A.value < D.value) {\n             output += (String.format (\"%d is the smallest\\n\", A.value));\n             if (true)\n                 return;;\n@@ -73,14 +95,7 @@\n             output += (String.format (\"%d is the smallest\\n\", B.value));\n             if (true)\n                 return;;\n-        } else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n-            output += (String.format (\"%d is the smallest\\n\", C.value));\n-            if (true)\n-                return;;\n-        } else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n-            output += (String.format (\"%d is the smallest\\n\", D.value));\n-            if (true)\n-                return;;\n-        }\n+        } else\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n     }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 68, 
          "faulty": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 76, 
          "faulty": "if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "Replace", 
          "seed": "output+=(String.format(\"%d is the smallest\\n\",A.value));"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 80, 
          "faulty": "if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-11-05 17:59:11.757692000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/patches_tfq1/Patch_1785/patched/tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-12-02 18:19:51.486709522 -0500\n@@ -65,7 +65,23 @@\n         B.value = scanner.nextInt ();\n         C.value = scanner.nextInt ();\n         D.value = scanner.nextInt ();\n-        if (A.value < B.value && A.value < C.value && A.value < D.value) {\n+        if (B.value < A.value && B.value < C.value && B.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", B.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", C.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", D.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t}\n+\t\tif (A.value < B.value && A.value < C.value && A.value < D.value) {\n             output += (String.format (\"%d is the smallest\\n\", A.value));\n             if (true)\n                 return;;\n@@ -73,14 +89,7 @@\n             output += (String.format (\"%d is the smallest\\n\", B.value));\n             if (true)\n                 return;;\n-        } else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n-            output += (String.format (\"%d is the smallest\\n\", C.value));\n-            if (true)\n-                return;;\n-        } else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n-            output += (String.format (\"%d is the smallest\\n\", D.value));\n-            if (true)\n-                return;;\n-        }\n+        } else\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n     }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 68, 
          "faulty": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 76, 
          "faulty": "if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "Replace", 
          "seed": "output+=(String.format(\"%d is the smallest\\n\",A.value));"
        }
      ], 
      "patch": "--- /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-11-05 17:59:11.757692000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/patches_tfq1/Patch_163/patched/tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-12-02 18:13:23.811015498 -0500\n@@ -65,7 +65,23 @@\n         B.value = scanner.nextInt ();\n         C.value = scanner.nextInt ();\n         D.value = scanner.nextInt ();\n-        if (A.value < B.value && A.value < C.value && A.value < D.value) {\n+        if (B.value < A.value && B.value < C.value && B.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", B.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", C.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", D.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t}\n+\t\tif (A.value < B.value && A.value < C.value && A.value < D.value) {\n             output += (String.format (\"%d is the smallest\\n\", A.value));\n             if (true)\n                 return;;\n@@ -73,14 +89,7 @@\n             output += (String.format (\"%d is the smallest\\n\", B.value));\n             if (true)\n                 return;;\n-        } else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n-            output += (String.format (\"%d is the smallest\\n\", C.value));\n-            if (true)\n-                return;;\n-        } else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n-            output += (String.format (\"%d is the smallest\\n\", D.value));\n-            if (true)\n-                return;;\n-        }\n+        } else\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n     }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 68, 
          "faulty": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 76, 
          "faulty": "if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "output+=(String.format(\"%d is the smallest\\n\",A.value));"
        }
      ], 
      "patch": "--- /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-11-05 17:59:11.757692000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/patches_tfq1/Patch_768/patched/tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-12-02 18:15:50.699022293 -0500\n@@ -65,7 +65,23 @@\n         B.value = scanner.nextInt ();\n         C.value = scanner.nextInt ();\n         D.value = scanner.nextInt ();\n-        if (A.value < B.value && A.value < C.value && A.value < D.value) {\n+        if (B.value < A.value && B.value < C.value && B.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", B.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", C.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", D.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t}\n+\t\tif (A.value < B.value && A.value < C.value && A.value < D.value) {\n             output += (String.format (\"%d is the smallest\\n\", A.value));\n             if (true)\n                 return;;\n@@ -73,14 +89,20 @@\n             output += (String.format (\"%d is the smallest\\n\", B.value));\n             if (true)\n                 return;;\n-        } else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n-            output += (String.format (\"%d is the smallest\\n\", C.value));\n-            if (true)\n-                return;;\n-        } else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n-            output += (String.format (\"%d is the smallest\\n\", D.value));\n-            if (true)\n-                return;;\n-        }\n+        } else {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n+\t\t\tif (C.value < A.value && C.value < B.value && C.value < D.value) {\n+\t\t\t\toutput += (String.format(\"%d is the smallest\\n\", C.value));\n+\t\t\t\tif (true)\n+\t\t\t\t\treturn;\n+\t\t\t\t;\n+\t\t\t} else if (D.value < A.value && D.value < B.value\n+\t\t\t\t\t&& D.value < C.value) {\n+\t\t\t\toutput += (String.format(\"%d is the smallest\\n\", D.value));\n+\t\t\t\tif (true)\n+\t\t\t\t\treturn;\n+\t\t\t\t;\n+\t\t\t}\n+\t\t}\n     }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 68, 
          "faulty": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 76, 
          "faulty": "if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "output+=(String.format(\"%d is the smallest\\n\",A.value));"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 80, 
          "faulty": "if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "A.value=scanner.nextInt();"
        }
      ], 
      "patch": "--- /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-11-05 17:59:11.757692000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/patches_tfq1/Patch_1115/patched/tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-12-02 18:17:13.750937279 -0500\n@@ -65,7 +65,23 @@\n         B.value = scanner.nextInt ();\n         C.value = scanner.nextInt ();\n         D.value = scanner.nextInt ();\n-        if (A.value < B.value && A.value < C.value && A.value < D.value) {\n+        if (B.value < A.value && B.value < C.value && B.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", B.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", C.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", D.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t}\n+\t\tif (A.value < B.value && A.value < C.value && A.value < D.value) {\n             output += (String.format (\"%d is the smallest\\n\", A.value));\n             if (true)\n                 return;;\n@@ -73,14 +89,20 @@\n             output += (String.format (\"%d is the smallest\\n\", B.value));\n             if (true)\n                 return;;\n-        } else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n-            output += (String.format (\"%d is the smallest\\n\", C.value));\n-            if (true)\n-                return;;\n-        } else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n-            output += (String.format (\"%d is the smallest\\n\", D.value));\n-            if (true)\n-                return;;\n-        }\n+        } else {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n+\t\t\tif (C.value < A.value && C.value < B.value && C.value < D.value) {\n+\t\t\t\toutput += (String.format(\"%d is the smallest\\n\", C.value));\n+\t\t\t\tif (true)\n+\t\t\t\t\treturn;\n+\t\t\t\t;\n+\t\t\t} else if (D.value < A.value && D.value < B.value\n+\t\t\t\t\t&& D.value < C.value) {\n+\t\t\t\toutput += (String.format(\"%d is the smallest\\n\", D.value));\n+\t\t\t\tif (true)\n+\t\t\t\t\treturn;\n+\t\t\t\t;\n+\t\t\t}\n+\t\t}\n     }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 62, 
          "faulty": "output+=(String.format(\"Please enter 4 numbers separated by spaces > \"));", 
          "type": "InsertBefore", 
          "seed": ";"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 68, 
          "faulty": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 76, 
          "faulty": "if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "Replace", 
          "seed": "output+=(String.format(\"%d is the smallest\\n\",A.value));"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 80, 
          "faulty": "if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "A.value=scanner.nextInt();"
        }
      ], 
      "patch": "--- /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-11-05 17:59:11.757692000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/patches_tfq1/Patch_1800/patched/tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-12-02 18:19:54.578705608 -0500\n@@ -59,13 +59,35 @@\n     public void exec () throws Exception {\n         IntObj A = new IntObj (), B = new IntObj (), C = new IntObj (), D =\n             new IntObj ();\n-        output +=\n+        ;\n+\t\toutput +=\n             (String.format (\"Please enter 4 numbers separated by spaces > \"));\n         A.value = scanner.nextInt ();\n         B.value = scanner.nextInt ();\n         C.value = scanner.nextInt ();\n         D.value = scanner.nextInt ();\n         if (A.value < B.value && A.value < C.value && A.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", B.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", C.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", D.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t}\n+\t\tif (A.value < B.value && A.value < C.value && A.value < D.value) {\n             output += (String.format (\"%d is the smallest\\n\", A.value));\n             if (true)\n                 return;;\n@@ -73,14 +95,7 @@\n             output += (String.format (\"%d is the smallest\\n\", B.value));\n             if (true)\n                 return;;\n-        } else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n-            output += (String.format (\"%d is the smallest\\n\", C.value));\n-            if (true)\n-                return;;\n-        } else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n-            output += (String.format (\"%d is the smallest\\n\", D.value));\n-            if (true)\n-                return;;\n-        }\n+        } else\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n     }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 60, 
          "faulty": "IntObj A=new IntObj(), B=new IntObj(), C=new IntObj(), D=new IntObj();", 
          "type": "InsertBefore", 
          "seed": ";"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 68, 
          "faulty": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 76, 
          "faulty": "if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "Replace", 
          "seed": "output+=(String.format(\"%d is the smallest\\n\",A.value));"
        }
      ], 
      "patch": "--- /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-11-05 17:59:11.757692000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/patches_tfq1/Patch_1330/patched/tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-12-02 18:18:04.754856699 -0500\n@@ -57,7 +57,8 @@\n     }\n \n     public void exec () throws Exception {\n-        IntObj A = new IntObj (), B = new IntObj (), C = new IntObj (), D =\n+        ;\n+\t\tIntObj A = new IntObj (), B = new IntObj (), C = new IntObj (), D =\n             new IntObj ();\n         output +=\n             (String.format (\"Please enter 4 numbers separated by spaces > \"));\n@@ -65,7 +66,23 @@\n         B.value = scanner.nextInt ();\n         C.value = scanner.nextInt ();\n         D.value = scanner.nextInt ();\n-        if (A.value < B.value && A.value < C.value && A.value < D.value) {\n+        if (B.value < A.value && B.value < C.value && B.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", B.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", C.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", D.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t}\n+\t\tif (A.value < B.value && A.value < C.value && A.value < D.value) {\n             output += (String.format (\"%d is the smallest\\n\", A.value));\n             if (true)\n                 return;;\n@@ -73,14 +90,7 @@\n             output += (String.format (\"%d is the smallest\\n\", B.value));\n             if (true)\n                 return;;\n-        } else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n-            output += (String.format (\"%d is the smallest\\n\", C.value));\n-            if (true)\n-                return;;\n-        } else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n-            output += (String.format (\"%d is the smallest\\n\", D.value));\n-            if (true)\n-                return;;\n-        }\n+        } else\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n     }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 68, 
          "faulty": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "if (A.value < B.value && A.value < C.value && A.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",A.value));\n  if (true)   return;\n  ;\n}\n else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",B.value));\n  if (true)   return;\n  ;\n}\n else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 76, 
          "faulty": "if (C.value < A.value && C.value < B.value && C.value < D.value) {\n  output+=(String.format(\"%d is the smallest\\n\",C.value));\n  if (true)   return;\n  ;\n}\n else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "Replace", 
          "seed": "output+=(String.format(\"%d is the smallest\\n\",A.value));"
        }, 
        {
          "path": "src/main/java/introclassJava/smallest_1b31fa5c_003.java", 
          "line": 80, 
          "faulty": "if (D.value < A.value && D.value < B.value && D.value < C.value) {\n  output+=(String.format(\"%d is the smallest\\n\",D.value));\n  if (true)   return;\n  ;\n}", 
          "type": "InsertBefore", 
          "seed": "D.value=scanner.nextInt();"
        }
      ], 
      "patch": "--- /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-11-05 17:59:11.757692000 -0500\n+++ /tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/patches_tfq1/Patch_1414/patched/tmp/Arja_IntroClassJava_smallest_1b31fa5c50f7725ce468ebf24282f2d080a83aed87e4ee35522ae7710c8e0136bc263cc460b8ec7bf2c3519cb59af4a138e114d36541515b2609ab56ad2b8ee9_003/src/main/java/introclassJava/smallest_1b31fa5c_003.java\t2018-12-02 18:18:24.422827597 -0500\n@@ -66,6 +66,27 @@\n         C.value = scanner.nextInt ();\n         D.value = scanner.nextInt ();\n         if (A.value < B.value && A.value < C.value && A.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (B.value < A.value && B.value < C.value && B.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", B.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", C.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t} else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", D.value));\n+\t\t\tif (true)\n+\t\t\t\treturn;\n+\t\t\t;\n+\t\t}\n+\t\tif (A.value < B.value && A.value < C.value && A.value < D.value) {\n             output += (String.format (\"%d is the smallest\\n\", A.value));\n             if (true)\n                 return;;\n@@ -73,14 +94,7 @@\n             output += (String.format (\"%d is the smallest\\n\", B.value));\n             if (true)\n                 return;;\n-        } else if (C.value < A.value && C.value < B.value && C.value < D.value) {\n-            output += (String.format (\"%d is the smallest\\n\", C.value));\n-            if (true)\n-                return;;\n-        } else if (D.value < A.value && D.value < B.value && D.value < C.value) {\n-            output += (String.format (\"%d is the smallest\\n\", D.value));\n-            if (true)\n-                return;;\n-        }\n+        } else\n+\t\t\toutput += (String.format(\"%d is the smallest\\n\", A.value));\n     }\n }\n\n\n"
    }
  ]
}