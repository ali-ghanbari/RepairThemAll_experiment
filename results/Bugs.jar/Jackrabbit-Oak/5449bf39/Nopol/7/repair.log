cd /tmp/Nopol_Bug_dot_jar_Jackrabbit-Oak_5449bf39;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -Xmx4g -Xms1g -cp /home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin//../lib/tools.jar fr.inria.lille.repair.Main \
	--mode repair \
	--type pre_then_cond \
	--oracle angelic \
	--synthesis smt \
	--flocal gzoltar \
	--json \
	--solver z3 \
	--solver-path /home/tdurieux/defects4j4repair/script/../libs/z3/build/z3 \
	--complianceLevel 7 \
	--source oak-commons/src/main/java \
	--classpath "oak-commons/target/classes:oak-commons/target/test-classes:/tmp/Nopol_Bug_dot_jar_Jackrabbit-Oak_5449bf39/oak-mk-api/target/classes:/tmp/Nopol_Bug_dot_jar_Jackrabbit-Oak_5449bf39/oak-mk/target/classes:/tmp/Nopol_Bug_dot_jar_Jackrabbit-Oak_5449bf39/oak-mk-remote/target/classes:/tmp/Nopol_Bug_dot_jar_Jackrabbit-Oak_5449bf39/oak-it/mk/target/classes:/tmp/Nopol_Bug_dot_jar_Jackrabbit-Oak_5449bf39/oak-core/target/classes:/tmp/Nopol_Bug_dot_jar_Jackrabbit-Oak_5449bf39/oak-jcr/target/classes:/tmp/Nopol_Bug_dot_jar_Jackrabbit-Oak_5449bf39/oak-sling/target/classes:/tmp/Nopol_Bug_dot_jar_Jackrabbit-Oak_5449bf39/oak-http/target/classes:/tmp/Nopol_Bug_dot_jar_Jackrabbit-Oak_5449bf39/oak-run/target/classes:/tmp/Nopol_Bug_dot_jar_Jackrabbit-Oak_5449bf39/oak-it/osgi/target/classes:/tmp/Nopol_Bug_dot_jar_Jackrabbit-Oak_5449bf39/oak-bench/base/target/classes:/tmp/Nopol_Bug_dot_jar_Jackrabbit-Oak_5449bf39/oak-bench/latest/target/classes:/home/tdurieux/.m2/repository/ch/qos/logback/logback-core/1.0.1/logback-core-1.0.1.jar:/home/tdurieux/.m2/repository/org/ops4j/base/ops4j-base-net/1.3.0/ops4j-base-net-1.3.0.jar:/home/tdurieux/.m2/repository/org/osgi/org.osgi.core/4.2.0/org.osgi.core-4.2.0.jar:/home/tdurieux/.m2/repository/org/sonatype/aether/aether-spi/1.11/aether-spi-1.11.jar:/home/tdurieux/.m2/repository/org/ops4j/pax/swissbox/pax-swissbox-optional-jcl/1.5.0/pax-swissbox-optional-jcl-1.5.0.jar:/home/tdurieux/.m2/repository/org/slf4j/slf4j-api/1.6.4/slf4j-api-1.6.4.jar:/home/tdurieux/.m2/repository/org/mongodb/mongo-java-driver/2.7.1/mongo-java-driver-2.7.1.jar:/home/tdurieux/.m2/repository/org/apache/jackrabbit/oak-it-mk/0.5-SNAPSHOT/oak-it-mk-0.5-SNAPSHOT.jar:/home/tdurieux/.m2/repository/org/ops4j/pax/exam/pax-exam-junit4/2.4.0/pax-exam-junit4-2.4.0.jar:/home/tdurieux/.m2/repository/org/apache/xbean/xbean-reflect/3.4/xbean-reflect-3.4.jar:/home/tdurieux/.m2/repository/org/eclipse/jetty/jetty-io/8.1.2.v20120308/jetty-io-8.1.2.v20120308.jar:/home/tdurieux/.m2/repository/org/ops4j/base/ops4j-base-lang/1.3.0/ops4j-base-lang-1.3.0.jar:/home/tdurieux/.m2/repository/javax/servlet/servlet-api/2.5/servlet-api-2.5.jar:/home/tdurieux/.m2/repository/org/ops4j/pax/exam/pax-exam/2.4.0/pax-exam-2.4.0.jar:/home/tdurieux/.m2/repository/com/googlecode/json-simple/json-simple/1.1/json-simple-1.1.jar:/home/tdurieux/.m2/repository/org/slf4j/slf4j-api/1.5.8/slf4j-api-1.5.8.jar:/home/tdurieux/.m2/repository/org/apache/maven/maven-model-builder/3.0.3/maven-model-builder-3.0.3.jar:/home/tdurieux/.m2/repository/com/google/code/findbugs/jsr305/2.0.0/jsr305-2.0.0.jar:/home/tdurieux/.m2/repository/org/apache/jackrabbit/jackrabbit-spi-commons/2.6-SNAPSHOT/jackrabbit-spi-commons-2.6-SNAPSHOT.jar:/home/tdurieux/.m2/repository/org/apache/felix/org.apache.felix.framework/4.0.1/org.apache.felix.framework-4.0.1.jar:/home/tdurieux/.m2/repository/org/sonatype/aether/aether-impl/1.11/aether-impl-1.11.jar:/home/tdurieux/.m2/repository/org/ops4j/base/ops4j-base-spi/1.3.0/ops4j-base-spi-1.3.0.jar:/home/tdurieux/.m2/repository/org/ops4j/pax/url/pax-url-classpath/1.4.0/pax-url-classpath-1.4.0.jar:/home/tdurieux/.m2/repository/org/ops4j/pax/tinybundles/tinybundles/1.0.0/tinybundles-1.0.0.jar:/home/tdurieux/.m2/repository/org/apache/jackrabbit/oak-http/0.5-SNAPSHOT/oak-http-0.5-SNAPSHOT.jar:/home/tdurieux/.m2/repository/org/ops4j/pax/swissbox/pax-swissbox-core/1.5.0/pax-swissbox-core-1.5.0.jar:/home/tdurieux/.m2/repository/org/apache/sling/org.apache.sling.jcr.api/2.1.0/org.apache.sling.jcr.api-2.1.0.jar:/home/tdurieux/.m2/repository/org/apache/maven/wagon/wagon-file/1.0-beta-7/wagon-file-1.0-beta-7.jar:/home/tdurieux/.m2/repository/org/apache/maven/wagon/wagon-http-shared/1.0-beta-7/wagon-http-shared-1.0-beta-7.jar:/home/tdurieux/.m2/repository/com/google/collections/google-collections/1.0/google-collections-1.0.jar:/home/tdurieux/.m2/repository/org/slf4j/slf4j-nop/1.5.8/slf4j-nop-1.5.8.jar:/home/tdurieux/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.0.0/jackson-databind-2.0.0.jar:/home/tdurieux/.m2/repository/org/ops4j/pax/swissbox/pax-swissbox-framework/1.5.0/pax-swissbox-framework-1.5.0.jar:/home/tdurieux/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-smile/2.0.2/jackson-dataformat-smile-2.0.2.jar:/home/tdurieux/.m2/repository/commons-logging/commons-logging/1.0.4/commons-logging-1.0.4.jar:/home/tdurieux/.m2/repository/org/ops4j/pax/url/pax-url-commons/1.4.0/pax-url-commons-1.4.0.jar:/home/tdurieux/.m2/repository/org/sonatype/aether/aether-connector-wagon/1.11/aether-connector-wagon-1.11.jar:/home/tdurieux/.m2/repository/asm/asm/3.0/asm-3.0.jar:/home/tdurieux/.m2/repository/org/sonatype/aether/aether-api/1.11/aether-api-1.11.jar:/home/tdurieux/.m2/repository/biz/aQute/bndlib/1.50.0/bndlib-1.50.0.jar:/home/tdurieux/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.0.0/jackson-core-2.0.0.jar:/home/tdurieux/.m2/repository/commons-fileupload/commons-fileupload/1.2.1/commons-fileupload-1.2.1.jar:/home/tdurieux/.m2/repository/org/hamcrest/hamcrest-core/1.1/hamcrest-core-1.1.jar:/home/tdurieux/.m2/repository/javax/jcr/jcr/2.0/jcr-2.0.jar:/home/tdurieux/.m2/repository/org/eclipse/jetty/jetty-http/8.1.2.v20120308/jetty-http-8.1.2.v20120308.jar:/home/tdurieux/.m2/repository/org/apache/geronimo/specs/geronimo-atinject_1.0_spec/1.0/geronimo-atinject_1.0_spec-1.0.jar:/home/tdurieux/.m2/repository/org/ops4j/base/ops4j-base-store/1.3.0/ops4j-base-store-1.3.0.jar:/home/tdurieux/.m2/repository/org/apache/felix/org.apache.felix.scr.annotations/1.6.0/org.apache.felix.scr.annotations-1.6.0.jar:/home/tdurieux/.m2/repository/org/apache/maven/wagon/wagon-provider-api/1.0-beta-7/wagon-provider-api-1.0-beta-7.jar:/home/tdurieux/.m2/repository/org/apache/jackrabbit/jackrabbit-api/2.6-SNAPSHOT/jackrabbit-api-2.6-SNAPSHOT.jar:/home/tdurieux/.m2/repository/commons-codec/commons-codec/1.2/commons-codec-1.2.jar:/home/tdurieux/.m2/repository/org/apache/jackrabbit/jackrabbit-spi/2.6-SNAPSHOT/jackrabbit-spi-2.6-SNAPSHOT.jar:/home/tdurieux/.m2/repository/com/h2database/h2/1.3.158/h2-1.3.158.jar:/home/tdurieux/.m2/repository/org/apache/jackrabbit/oak-jcr/0.5-SNAPSHOT/oak-jcr-0.5-SNAPSHOT.jar:/home/tdurieux/.m2/repository/org/apache/jackrabbit/oak-core/0.5-SNAPSHOT/oak-core-0.5-SNAPSHOT.jar:/home/tdurieux/.m2/repository/org/slf4j/jcl-over-slf4j/1.6.4/jcl-over-slf4j-1.6.4.jar:/home/tdurieux/.m2/repository/concurrent/concurrent/1.3.4/concurrent-1.3.4.jar:/home/tdurieux/.m2/repository/org/ops4j/base/ops4j-base-io/1.3.0/ops4j-base-io-1.3.0.jar:/home/tdurieux/.m2/repository/org/apache/jackrabbit/jackrabbit-webdav/2.6-SNAPSHOT/jackrabbit-webdav-2.6-SNAPSHOT.jar:/home/tdurieux/.m2/repository/org/ops4j/pax/url/pax-url-aether/1.3.3/pax-url-aether-1.3.3.jar:/home/tdurieux/.m2/repository/org/eclipse/jetty/orbit/javax.servlet/3.0.0.v201112011016/javax.servlet-3.0.0.v201112011016.jar:/home/tdurieux/.m2/repository/org/apache/maven/maven-model/3.0.3/maven-model-3.0.3.jar:/home/tdurieux/.m2/repository/org/ops4j/pax/swissbox/pax-swissbox-lifecycle/1.5.0/pax-swissbox-lifecycle-1.5.0.jar:/home/tdurieux/.m2/repository/org/apache/jackrabbit/oak-mk-remote/0.5-SNAPSHOT/oak-mk-remote-0.5-SNAPSHOT.jar:/home/tdurieux/.m2/repository/org/ops4j/base/ops4j-base-util-property/1.3.0/ops4j-base-util-property-1.3.0.jar:/home/tdurieux/.m2/repository/org/ops4j/pax/url/pax-url-link/1.4.0/pax-url-link-1.4.0.jar:/home/tdurieux/.m2/repository/org/eclipse/jetty/jetty-server/8.1.2.v20120308/jetty-server-8.1.2.v20120308.jar:/home/tdurieux/.m2/repository/org/apache/jackrabbit/jackrabbit-jcr-tests/2.6-SNAPSHOT/jackrabbit-jcr-tests-2.6-SNAPSHOT.jar:/home/tdurieux/.m2/repository/org/apache/maven/maven-aether-provider/3.0.3/maven-aether-provider-3.0.3.jar:/home/tdurieux/.m2/repository/org/eclipse/jetty/jetty-util/8.1.2.v20120308/jetty-util-8.1.2.v20120308.jar:/home/tdurieux/.m2/repository/org/ops4j/base/ops4j-base-monitors/1.3.0/ops4j-base-monitors-1.3.0.jar:/home/tdurieux/.m2/repository/org/sonatype/aether/aether-util/1.11/aether-util-1.11.jar:/home/tdurieux/.m2/repository/org/eclipse/jetty/jetty-servlet/8.1.2.v20120308/jetty-servlet-8.1.2.v20120308.jar:/home/tdurieux/.m2/repository/commons-httpclient/commons-httpclient/3.1/commons-httpclient-3.1.jar:/home/tdurieux/.m2/repository/org/ops4j/base/ops4j-base-exec/1.3.0/ops4j-base-exec-1.3.0.jar:/home/tdurieux/.m2/repository/org/ops4j/pax/exam/pax-exam-link-assembly/2.4.0/pax-exam-link-assembly-2.4.0.jar:/home/tdurieux/.m2/repository/org/apache/lucene/lucene-analyzers-common/4.0.0-ALPHA/lucene-analyzers-common-4.0.0-ALPHA.jar:/home/tdurieux/.m2/repository/org/codehaus/plexus/plexus-classworlds/2.4/plexus-classworlds-2.4.jar:/home/tdurieux/.m2/repository/org/osgi/org.osgi.compendium/4.2.0/org.osgi.compendium-4.2.0.jar:/home/tdurieux/.m2/repository/commons-io/commons-io/1.4/commons-io-1.4.jar:/home/tdurieux/.m2/repository/org/codehaus/plexus/plexus-interpolation/1.14/plexus-interpolation-1.14.jar:/home/tdurieux/.m2/repository/org/apache/maven/wagon/wagon-http-lightweight/1.0-beta-7/wagon-http-lightweight-1.0-beta-7.jar:/home/tdurieux/.m2/repository/org/apache/commons/commons-math/2.0/commons-math-2.0.jar:/home/tdurieux/.m2/repository/org/eclipse/jetty/jetty-security/8.1.2.v20120308/jetty-security-8.1.2.v20120308.jar:/home/tdurieux/.m2/repository/org/eclipse/jetty/jetty-continuation/8.1.2.v20120308/jetty-continuation-8.1.2.v20120308.jar:/home/tdurieux/.m2/repository/org/apache/maven/maven-repository-metadata/3.0.3/maven-repository-metadata-3.0.3.jar:/home/tdurieux/.m2/repository/org/apache/lucene/lucene-analyzers-common/4.0.0-BETA/lucene-analyzers-common-4.0.0-BETA.jar:/home/tdurieux/.m2/repository/org/apache/jackrabbit/oak-mk-api/0.5-SNAPSHOT/oak-mk-api-0.5-SNAPSHOT.jar:/home/tdurieux/.m2/repository/ch/qos/logback/logback-classic/1.0.1/logback-classic-1.0.1.jar:/home/tdurieux/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.0.0/jackson-annotations-2.0.0.jar:/home/tdurieux/.m2/repository/com/google/guava/guava/12.0.1/guava-12.0.1.jar:/home/tdurieux/.m2/repository/org/codehaus/plexus/plexus-utils/2.0.5/plexus-utils-2.0.5.jar:/home/tdurieux/.m2/repository/org/apache/lucene/lucene-core/4.0.0-BETA/lucene-core-4.0.0-BETA.jar:/home/tdurieux/.m2/repository/org/slf4j/slf4j-simple/1.6.1/slf4j-simple-1.6.1.jar:/home/tdurieux/.m2/repository/org/ops4j/pax/exam/pax-exam-container-native/2.4.0/pax-exam-container-native-2.4.0.jar:/home/tdurieux/.m2/repository/org/ops4j/pax/swissbox/pax-swissbox-property/1.5.0/pax-swissbox-property-1.5.0.jar:/home/tdurieux/.m2/repository/org/apache/lucene/lucene-core/4.0.0-ALPHA/lucene-core-4.0.0-ALPHA.jar:/home/tdurieux/.m2/repository/org/apache/jackrabbit/oak-bench-base/0.5-SNAPSHOT/oak-bench-base-0.5-SNAPSHOT.jar:/home/tdurieux/.m2/repository/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.jar:/home/tdurieux/.m2/repository/junit/junit/4.10/junit-4.10.jar:/home/tdurieux/.m2/repository/org/apache/jackrabbit/oak-commons/0.5-SNAPSHOT/oak-commons-0.5-SNAPSHOT.jar:/home/tdurieux/.m2/repository/org/apache/jackrabbit/jackrabbit-jcr-commons/2.6-SNAPSHOT/jackrabbit-jcr-commons-2.6-SNAPSHOT.jar:/home/tdurieux/.m2/repository/org/ops4j/pax/exam/pax-exam-spi/2.4.0/pax-exam-spi-2.4.0.jar:/home/tdurieux/.m2/repository/org/apache/jackrabbit/oak-mk/0.5-SNAPSHOT/oak-mk-0.5-SNAPSHOT.jar:/home/tdurieux/.m2/repository/org/apache/tika/tika-core/1.2/tika-core-1.2.jar:/home/tdurieux/.m2/repository/org/apache/jackrabbit/jackrabbit-jcr-server/2.6-SNAPSHOT/jackrabbit-jcr-server-2.6-SNAPSHOT.jar:/home/tdurieux/.m2/repository/org/apache/tika/tika-core/1.1/tika-core-1.1.jar:/home/tdurieux/.m2/repository/org/codehaus/plexus/plexus-container-default/1.5.4/plexus-container-default-1.5.4.jar:/home/tdurieux/.m2/repository/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar";
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
11:13:32.396 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Source files: [oak-commons/src/main/java]
11:13:32.407 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Classpath: [file:/tmp/Nopol_Bug_dot_jar_Jackrabbit-Oak_5449bf39/oak-commons/target/classes/, file:/tmp/Nopol_Bug_dot_jar_Jackrabbit-Oak_5449bf39/oak-commons/target/test-classes/, file:/tmp/Nopol_Bug_dot_jar_Jackrabbit-Oak_5449bf39/oak-mk-api/target/classes/, file:/tmp/Nopol_Bug_dot_jar_Jackrabbit-Oak_5449bf39/oak-mk/target/classes/, file:/tmp/Nopol_Bug_dot_jar_Jackrabbit-Oak_5449bf39/oak-mk-remote/target/classes/, file:/tmp/Nopol_Bug_dot_jar_Jackrabbit-Oak_5449bf39/oak-it/mk/target/classes/, file:/tmp/Nopol_Bug_dot_jar_Jackrabbit-Oak_5449bf39/oak-core/target/classes/, file:/tmp/Nopol_Bug_dot_jar_Jackrabbit-Oak_5449bf39/oak-jcr/target/classes/, file:/tmp/Nopol_Bug_dot_jar_Jackrabbit-Oak_5449bf39/oak-sling/target/classes/, file:/tmp/Nopol_Bug_dot_jar_Jackrabbit-Oak_5449bf39/oak-http/target/classes/, file:/tmp/Nopol_Bug_dot_jar_Jackrabbit-Oak_5449bf39/oak-run/target/classes/, file:/tmp/Nopol_Bug_dot_jar_Jackrabbit-Oak_5449bf39/oak-it/osgi/target/classes/, file:/tmp/Nopol_Bug_dot_jar_Jackrabbit-Oak_5449bf39/oak-bench/base/target/classes/, file:/tmp/Nopol_Bug_dot_jar_Jackrabbit-Oak_5449bf39/oak-bench/latest/target/classes/, file:/home/tdurieux/.m2/repository/ch/qos/logback/logback-core/1.0.1/logback-core-1.0.1.jar, file:/home/tdurieux/.m2/repository/org/ops4j/base/ops4j-base-net/1.3.0/ops4j-base-net-1.3.0.jar, file:/home/tdurieux/.m2/repository/org/osgi/org.osgi.core/4.2.0/org.osgi.core-4.2.0.jar, file:/home/tdurieux/.m2/repository/org/sonatype/aether/aether-spi/1.11/aether-spi-1.11.jar, file:/home/tdurieux/.m2/repository/org/ops4j/pax/swissbox/pax-swissbox-optional-jcl/1.5.0/pax-swissbox-optional-jcl-1.5.0.jar, file:/home/tdurieux/.m2/repository/org/slf4j/slf4j-api/1.6.4/slf4j-api-1.6.4.jar, file:/home/tdurieux/.m2/repository/org/mongodb/mongo-java-driver/2.7.1/mongo-java-driver-2.7.1.jar, file:/home/tdurieux/.m2/repository/org/apache/jackrabbit/oak-it-mk/0.5-SNAPSHOT/oak-it-mk-0.5-SNAPSHOT.jar, file:/home/tdurieux/.m2/repository/org/ops4j/pax/exam/pax-exam-junit4/2.4.0/pax-exam-junit4-2.4.0.jar, file:/home/tdurieux/.m2/repository/org/apache/xbean/xbean-reflect/3.4/xbean-reflect-3.4.jar, file:/home/tdurieux/.m2/repository/org/eclipse/jetty/jetty-io/8.1.2.v20120308/jetty-io-8.1.2.v20120308.jar, file:/home/tdurieux/.m2/repository/org/ops4j/base/ops4j-base-lang/1.3.0/ops4j-base-lang-1.3.0.jar, file:/home/tdurieux/.m2/repository/javax/servlet/servlet-api/2.5/servlet-api-2.5.jar, file:/home/tdurieux/.m2/repository/org/ops4j/pax/exam/pax-exam/2.4.0/pax-exam-2.4.0.jar, file:/home/tdurieux/.m2/repository/com/googlecode/json-simple/json-simple/1.1/json-simple-1.1.jar, file:/home/tdurieux/.m2/repository/org/slf4j/slf4j-api/1.5.8/slf4j-api-1.5.8.jar, file:/home/tdurieux/.m2/repository/org/apache/maven/maven-model-builder/3.0.3/maven-model-builder-3.0.3.jar, file:/home/tdurieux/.m2/repository/com/google/code/findbugs/jsr305/2.0.0/jsr305-2.0.0.jar, file:/home/tdurieux/.m2/repository/org/apache/jackrabbit/jackrabbit-spi-commons/2.6-SNAPSHOT/jackrabbit-spi-commons-2.6-SNAPSHOT.jar, file:/home/tdurieux/.m2/repository/org/apache/felix/org.apache.felix.framework/4.0.1/org.apache.felix.framework-4.0.1.jar, file:/home/tdurieux/.m2/repository/org/sonatype/aether/aether-impl/1.11/aether-impl-1.11.jar, file:/home/tdurieux/.m2/repository/org/ops4j/base/ops4j-base-spi/1.3.0/ops4j-base-spi-1.3.0.jar, file:/home/tdurieux/.m2/repository/org/ops4j/pax/url/pax-url-classpath/1.4.0/pax-url-classpath-1.4.0.jar, file:/home/tdurieux/.m2/repository/org/ops4j/pax/tinybundles/tinybundles/1.0.0/tinybundles-1.0.0.jar, file:/home/tdurieux/.m2/repository/org/apache/jackrabbit/oak-http/0.5-SNAPSHOT/oak-http-0.5-SNAPSHOT.jar, file:/home/tdurieux/.m2/repository/org/ops4j/pax/swissbox/pax-swissbox-core/1.5.0/pax-swissbox-core-1.5.0.jar, file:/home/tdurieux/.m2/repository/org/apache/sling/org.apache.sling.jcr.api/2.1.0/org.apache.sling.jcr.api-2.1.0.jar, file:/home/tdurieux/.m2/repository/org/apache/maven/wagon/wagon-file/1.0-beta-7/wagon-file-1.0-beta-7.jar, file:/home/tdurieux/.m2/repository/org/apache/maven/wagon/wagon-http-shared/1.0-beta-7/wagon-http-shared-1.0-beta-7.jar, file:/home/tdurieux/.m2/repository/com/google/collections/google-collections/1.0/google-collections-1.0.jar, file:/home/tdurieux/.m2/repository/org/slf4j/slf4j-nop/1.5.8/slf4j-nop-1.5.8.jar, file:/home/tdurieux/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.0.0/jackson-databind-2.0.0.jar, file:/home/tdurieux/.m2/repository/org/ops4j/pax/swissbox/pax-swissbox-framework/1.5.0/pax-swissbox-framework-1.5.0.jar, file:/home/tdurieux/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-smile/2.0.2/jackson-dataformat-smile-2.0.2.jar, file:/home/tdurieux/.m2/repository/commons-logging/commons-logging/1.0.4/commons-logging-1.0.4.jar, file:/home/tdurieux/.m2/repository/org/ops4j/pax/url/pax-url-commons/1.4.0/pax-url-commons-1.4.0.jar, file:/home/tdurieux/.m2/repository/org/sonatype/aether/aether-connector-wagon/1.11/aether-connector-wagon-1.11.jar, file:/home/tdurieux/.m2/repository/asm/asm/3.0/asm-3.0.jar, file:/home/tdurieux/.m2/repository/org/sonatype/aether/aether-api/1.11/aether-api-1.11.jar, file:/home/tdurieux/.m2/repository/biz/aQute/bndlib/1.50.0/bndlib-1.50.0.jar, file:/home/tdurieux/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.0.0/jackson-core-2.0.0.jar, file:/home/tdurieux/.m2/repository/commons-fileupload/commons-fileupload/1.2.1/commons-fileupload-1.2.1.jar, file:/home/tdurieux/.m2/repository/org/hamcrest/hamcrest-core/1.1/hamcrest-core-1.1.jar, file:/home/tdurieux/.m2/repository/javax/jcr/jcr/2.0/jcr-2.0.jar, file:/home/tdurieux/.m2/repository/org/eclipse/jetty/jetty-http/8.1.2.v20120308/jetty-http-8.1.2.v20120308.jar, file:/home/tdurieux/.m2/repository/org/apache/geronimo/specs/geronimo-atinject_1.0_spec/1.0/geronimo-atinject_1.0_spec-1.0.jar, file:/home/tdurieux/.m2/repository/org/ops4j/base/ops4j-base-store/1.3.0/ops4j-base-store-1.3.0.jar, file:/home/tdurieux/.m2/repository/org/apache/felix/org.apache.felix.scr.annotations/1.6.0/org.apache.felix.scr.annotations-1.6.0.jar, file:/home/tdurieux/.m2/repository/org/apache/maven/wagon/wagon-provider-api/1.0-beta-7/wagon-provider-api-1.0-beta-7.jar, file:/home/tdurieux/.m2/repository/org/apache/jackrabbit/jackrabbit-api/2.6-SNAPSHOT/jackrabbit-api-2.6-SNAPSHOT.jar, file:/home/tdurieux/.m2/repository/commons-codec/commons-codec/1.2/commons-codec-1.2.jar, file:/home/tdurieux/.m2/repository/org/apache/jackrabbit/jackrabbit-spi/2.6-SNAPSHOT/jackrabbit-spi-2.6-SNAPSHOT.jar, file:/home/tdurieux/.m2/repository/com/h2database/h2/1.3.158/h2-1.3.158.jar, file:/home/tdurieux/.m2/repository/org/apache/jackrabbit/oak-jcr/0.5-SNAPSHOT/oak-jcr-0.5-SNAPSHOT.jar, file:/home/tdurieux/.m2/repository/org/apache/jackrabbit/oak-core/0.5-SNAPSHOT/oak-core-0.5-SNAPSHOT.jar, file:/home/tdurieux/.m2/repository/org/slf4j/jcl-over-slf4j/1.6.4/jcl-over-slf4j-1.6.4.jar, file:/home/tdurieux/.m2/repository/concurrent/concurrent/1.3.4/concurrent-1.3.4.jar, file:/home/tdurieux/.m2/repository/org/ops4j/base/ops4j-base-io/1.3.0/ops4j-base-io-1.3.0.jar, file:/home/tdurieux/.m2/repository/org/apache/jackrabbit/jackrabbit-webdav/2.6-SNAPSHOT/jackrabbit-webdav-2.6-SNAPSHOT.jar, file:/home/tdurieux/.m2/repository/org/ops4j/pax/url/pax-url-aether/1.3.3/pax-url-aether-1.3.3.jar, file:/home/tdurieux/.m2/repository/org/eclipse/jetty/orbit/javax.servlet/3.0.0.v201112011016/javax.servlet-3.0.0.v201112011016.jar, file:/home/tdurieux/.m2/repository/org/apache/maven/maven-model/3.0.3/maven-model-3.0.3.jar, file:/home/tdurieux/.m2/repository/org/ops4j/pax/swissbox/pax-swissbox-lifecycle/1.5.0/pax-swissbox-lifecycle-1.5.0.jar, file:/home/tdurieux/.m2/repository/org/apache/jackrabbit/oak-mk-remote/0.5-SNAPSHOT/oak-mk-remote-0.5-SNAPSHOT.jar, file:/home/tdurieux/.m2/repository/org/ops4j/base/ops4j-base-util-property/1.3.0/ops4j-base-util-property-1.3.0.jar, file:/home/tdurieux/.m2/repository/org/ops4j/pax/url/pax-url-link/1.4.0/pax-url-link-1.4.0.jar, file:/home/tdurieux/.m2/repository/org/eclipse/jetty/jetty-server/8.1.2.v20120308/jetty-server-8.1.2.v20120308.jar, file:/home/tdurieux/.m2/repository/org/apache/jackrabbit/jackrabbit-jcr-tests/2.6-SNAPSHOT/jackrabbit-jcr-tests-2.6-SNAPSHOT.jar, file:/home/tdurieux/.m2/repository/org/apache/maven/maven-aether-provider/3.0.3/maven-aether-provider-3.0.3.jar, file:/home/tdurieux/.m2/repository/org/eclipse/jetty/jetty-util/8.1.2.v20120308/jetty-util-8.1.2.v20120308.jar, file:/home/tdurieux/.m2/repository/org/ops4j/base/ops4j-base-monitors/1.3.0/ops4j-base-monitors-1.3.0.jar, file:/home/tdurieux/.m2/repository/org/sonatype/aether/aether-util/1.11/aether-util-1.11.jar, file:/home/tdurieux/.m2/repository/org/eclipse/jetty/jetty-servlet/8.1.2.v20120308/jetty-servlet-8.1.2.v20120308.jar, file:/home/tdurieux/.m2/repository/commons-httpclient/commons-httpclient/3.1/commons-httpclient-3.1.jar, file:/home/tdurieux/.m2/repository/org/ops4j/base/ops4j-base-exec/1.3.0/ops4j-base-exec-1.3.0.jar, file:/home/tdurieux/.m2/repository/org/ops4j/pax/exam/pax-exam-link-assembly/2.4.0/pax-exam-link-assembly-2.4.0.jar, file:/home/tdurieux/.m2/repository/org/apache/lucene/lucene-analyzers-common/4.0.0-ALPHA/lucene-analyzers-common-4.0.0-ALPHA.jar, file:/home/tdurieux/.m2/repository/org/codehaus/plexus/plexus-classworlds/2.4/plexus-classworlds-2.4.jar, file:/home/tdurieux/.m2/repository/org/osgi/org.osgi.compendium/4.2.0/org.osgi.compendium-4.2.0.jar, file:/home/tdurieux/.m2/repository/commons-io/commons-io/1.4/commons-io-1.4.jar, file:/home/tdurieux/.m2/repository/org/codehaus/plexus/plexus-interpolation/1.14/plexus-interpolation-1.14.jar, file:/home/tdurieux/.m2/repository/org/apache/maven/wagon/wagon-http-lightweight/1.0-beta-7/wagon-http-lightweight-1.0-beta-7.jar, file:/home/tdurieux/.m2/repository/org/apache/commons/commons-math/2.0/commons-math-2.0.jar, file:/home/tdurieux/.m2/repository/org/eclipse/jetty/jetty-security/8.1.2.v20120308/jetty-security-8.1.2.v20120308.jar, file:/home/tdurieux/.m2/repository/org/eclipse/jetty/jetty-continuation/8.1.2.v20120308/jetty-continuation-8.1.2.v20120308.jar, file:/home/tdurieux/.m2/repository/org/apache/maven/maven-repository-metadata/3.0.3/maven-repository-metadata-3.0.3.jar, file:/home/tdurieux/.m2/repository/org/apache/lucene/lucene-analyzers-common/4.0.0-BETA/lucene-analyzers-common-4.0.0-BETA.jar, file:/home/tdurieux/.m2/repository/org/apache/jackrabbit/oak-mk-api/0.5-SNAPSHOT/oak-mk-api-0.5-SNAPSHOT.jar, file:/home/tdurieux/.m2/repository/ch/qos/logback/logback-classic/1.0.1/logback-classic-1.0.1.jar, file:/home/tdurieux/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.0.0/jackson-annotations-2.0.0.jar, file:/home/tdurieux/.m2/repository/com/google/guava/guava/12.0.1/guava-12.0.1.jar, file:/home/tdurieux/.m2/repository/org/codehaus/plexus/plexus-utils/2.0.5/plexus-utils-2.0.5.jar, file:/home/tdurieux/.m2/repository/org/apache/lucene/lucene-core/4.0.0-BETA/lucene-core-4.0.0-BETA.jar, file:/home/tdurieux/.m2/repository/org/slf4j/slf4j-simple/1.6.1/slf4j-simple-1.6.1.jar, file:/home/tdurieux/.m2/repository/org/ops4j/pax/exam/pax-exam-container-native/2.4.0/pax-exam-container-native-2.4.0.jar, file:/home/tdurieux/.m2/repository/org/ops4j/pax/swissbox/pax-swissbox-property/1.5.0/pax-swissbox-property-1.5.0.jar, file:/home/tdurieux/.m2/repository/org/apache/lucene/lucene-core/4.0.0-ALPHA/lucene-core-4.0.0-ALPHA.jar, file:/home/tdurieux/.m2/repository/org/apache/jackrabbit/oak-bench-base/0.5-SNAPSHOT/oak-bench-base-0.5-SNAPSHOT.jar, file:/home/tdurieux/.m2/repository/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.jar, file:/home/tdurieux/.m2/repository/junit/junit/4.10/junit-4.10.jar, file:/home/tdurieux/.m2/repository/org/apache/jackrabbit/oak-commons/0.5-SNAPSHOT/oak-commons-0.5-SNAPSHOT.jar, file:/home/tdurieux/.m2/repository/org/apache/jackrabbit/jackrabbit-jcr-commons/2.6-SNAPSHOT/jackrabbit-jcr-commons-2.6-SNAPSHOT.jar, file:/home/tdurieux/.m2/repository/org/ops4j/pax/exam/pax-exam-spi/2.4.0/pax-exam-spi-2.4.0.jar, file:/home/tdurieux/.m2/repository/org/apache/jackrabbit/oak-mk/0.5-SNAPSHOT/oak-mk-0.5-SNAPSHOT.jar, file:/home/tdurieux/.m2/repository/org/apache/tika/tika-core/1.2/tika-core-1.2.jar, file:/home/tdurieux/.m2/repository/org/apache/jackrabbit/jackrabbit-jcr-server/2.6-SNAPSHOT/jackrabbit-jcr-server-2.6-SNAPSHOT.jar, file:/home/tdurieux/.m2/repository/org/apache/tika/tika-core/1.1/tika-core-1.1.jar, file:/home/tdurieux/.m2/repository/org/codehaus/plexus/plexus-container-default/1.5.4/plexus-container-default-1.5.4.jar, file:/home/tdurieux/.m2/repository/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar, file:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar]
11:13:32.407 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Statement type: PRE_THEN_COND
11:13:32.407 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Args: [org.apache.jackrabbit.mk.test.DataStoreIT, org.apache.jackrabbit.mk.test.MicroKernelIT, org.apache.jackrabbit.oak.commons.PathTest]
11:13:32.409 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/home/tdurieux/defects4j4repair/script/../libs/z3/build/z3', projectSources=[oak-commons/src/main/java], projectClasspath='[Ljava.net.URL;@66d33a', projectTests=[org.apache.jackrabbit.mk.test.DataStoreIT, org.apache.jackrabbit.mk.test.MicroKernelIT, org.apache.jackrabbit.oak.commons.PathTest], complianceLevel=7, outputFolder=., json=true}
11:13:32.409 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Available processors (cores): 4
11:13:32.414 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Free memory: 909 MB
11:13:32.414 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Maximum memory: 3 GB
11:13:32.414 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Total memory available to JVM: 981 MB
11:13:32.415 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Java version: 1.8.0_181
11:13:32.416 [main] INFO  fr.inria.lille.repair.nopol.NoPol - JAVA_HOME: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/
11:13:32.416 [main] INFO  fr.inria.lille.repair.nopol.NoPol - PATH: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:/usr/lib/oar/oardodo:/usr/lib/oar/oardodo:/usr/local/bin:/usr/bin:/bin:/usr/games
11:13:36.263 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #1
11:13:36.263 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.mk.test.AbstractMicroKernelIT:63 which is executed by 2 tests
11:13:36.264 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.jackrabbit.mk.test.AbstractMicroKernelIT:63
11:13:36.264 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #2
11:13:36.264 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.mk.test.AbstractMicroKernelIT:59 which is executed by 2 tests
11:13:36.264 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.jackrabbit.mk.test.AbstractMicroKernelIT:59
11:13:36.264 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #3
11:13:36.264 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.mk.test.AbstractMicroKernelIT:57 which is executed by 2 tests
11:13:36.265 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.jackrabbit.mk.test.AbstractMicroKernelIT:57
11:13:36.265 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #4
11:13:36.265 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.mk.test.AbstractMicroKernelIT:56 which is executed by 2 tests
11:13:36.265 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.jackrabbit.mk.test.AbstractMicroKernelIT:56
11:13:36.265 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #5
11:13:36.265 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.mk.test.AbstractMicroKernelIT:55 which is executed by 2 tests
11:13:36.265 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.jackrabbit.mk.test.AbstractMicroKernelIT:55
11:13:36.265 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #6
11:13:36.266 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.mk.test.AbstractMicroKernelIT:53 which is executed by 2 tests
11:13:36.266 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.jackrabbit.mk.test.AbstractMicroKernelIT:53
11:13:36.266 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #7
11:13:36.266 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.oak.commons.PathUtils$2:215 which is executed by 1 tests
1617144685
11:13:36.652 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #8
11:13:36.653 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.oak.commons.PathUtils$1:174 which is executed by 1 tests
1617144685
11:13:37.030 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #9
11:13:37.030 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.oak.commons.PathUtils$1:201 which is executed by 1 tests
1617144685
11:13:37.195 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:37.229 [pool-4-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 6
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

11:13:37.728 [pool-3-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
PathUtils.java:125: error: ')' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                    ^
PathUtils.java:125: error: illegal start of expression
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                      ^
PathUtils.java:125: error: ';' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                       ^
PathUtils.java:125: error: illegal start of expression
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                           ^
PathUtils.java:125: error: ';' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                               ^
PathUtils.java:126: error: ')' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                     ^
PathUtils.java:126: error: illegal start of expression
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                       ^
PathUtils.java:126: error: ';' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                        ^
PathUtils.java:126: error: illegal start of expression
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                            ^
PathUtils.java:126: error: ';' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                 ^
11:13:37.769 [pool-3-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class PathUtils {
    private PathUtils() {
    }

    public static boolean denotesRoot(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path);
    }

    private static boolean denotesRootPath(java.lang.String path) {
        return "/".equals(path);
    }

    public static boolean isAbsolute(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(path);
    }

    private static boolean isAbsolutePath(java.lang.String path) {
        return (!(path.isEmpty())) && ((path.charAt(0)) == '/');
    }

    @javax.annotation.Nonnull
    public static java.lang.String getParentPath(java.lang.String path) {
        return org.apache.jackrabbit.oak.commons.PathUtils.getAncestorPath(path, 1);
    }

    @javax.annotation.Nonnull
    public static java.lang.String getAncestorPath(java.lang.String path, int nth) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if (((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) || (nth <= 0)) {
            return path;
        }
        int end = (path.length()) - 1;
        int pos = -1;
        while ((nth--) > 0) {
            pos = path.lastIndexOf('/', end);
            if (pos > 0) {
                end = pos - 1;
            }else
                if (pos == 0) {
                    return "/";
                }else {
                    return "";
                }

        } 
        return path.substring(0, pos);
    }

    @javax.annotation.Nonnull
    public static java.lang.String getName(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return "";
        }
        int end = (path.length()) - 1;
        int pos = path.lastIndexOf('/', end);
        if (pos != (-1)) {
            return path.substring((pos + 1), (end + 1));
        }
        return path;
    }

    public static int getDepth(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        int count = 1;
        int i = 0;
        if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(path)) {
            if (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path)) {
                return 0;
            }
            i++;
        }
        while (true) {
            i = (path.indexOf('/', i)) + 1;
            if (i == 0) {
                return count;
            }
            count++;
        } 
    }

    @javax.annotation.Nonnull
    public static java.lang.Iterable<java.lang.String> elements(final java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        final java.util.Iterator<java.lang.String> it = new java.util.Iterator<java.lang.String>() {
            int pos = (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolute(path)) ? 1 : 0;

            java.lang.String next;

            @java.lang.Override
            public boolean hasNext() {
                if ((next) == null) {
                    if ((pos) >= (path.length())) {
                        return false;
                    }
                    int i = path.indexOf('/', pos);
                    if (i < 0) {
                        next = path.substring(pos);
                        pos = path.length();
                    }else {
                        next = path.substring(pos, i);
                        pos = i + 1;
                    }
                }
                return true;
            }

            @java.lang.Override
            public java.lang.String next() {
                if (hasNext()) {
                    java.lang.String next = this.next;
                    this.next = null;
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(0).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("next",next);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        return next;

                }
                throw new java.util.NoSuchElementException();
            }

            @java.lang.Override
            public void remove() {
                throw new java.lang.UnsupportedOperationException("remove");
            }
        };
        return new java.lang.Iterable<java.lang.String>() {
            @java.lang.Override
            public java.util.Iterator<java.lang.String> iterator() {
                return it;
            }
        };
    }

    @javax.annotation.Nonnull
    public static java.lang.String concat(java.lang.String parentPath, java.lang.String... relativePaths) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        int parentLen = parentPath.length();
        int size = relativePaths.length;
        java.lang.StringBuilder buff = new java.lang.StringBuilder((parentLen + (size * 5)));
        buff.append(parentPath);
        boolean needSlash = (parentLen > 0) && (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)));
        for (java.lang.String s : relativePaths) {
            assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(s);
            if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(s)) {
                throw new java.lang.IllegalArgumentException(("Cannot append absolute path " + s));
            }
            if (!(s.isEmpty())) {
                if (needSlash) {
                    buff.append('/');
                }
                buff.append(s);
                needSlash = true;
            }
        }
        return buff.toString();
    }

    @javax.annotation.Nonnull
    public static java.lang.String concat(java.lang.String parentPath, java.lang.String subPath) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(subPath);
        if (parentPath.isEmpty()) {
            return subPath;
        }else
            if (subPath.isEmpty()) {
                return parentPath;
            }else
                if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(subPath)) {
                    throw new java.lang.IllegalArgumentException(("Cannot append absolute path " + subPath));
                }


        java.lang.StringBuilder buff = new java.lang.StringBuilder(parentPath);
        if (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath))) {
            buff.append('/');
        }
        buff.append(subPath);
        return buff.toString();
    }

    public static boolean isAncestor(java.lang.String ancestor, java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(ancestor);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if ((ancestor.isEmpty()) || (path.isEmpty())) {
            return false;
        }
        if (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRoot(ancestor))) {
            ancestor += "/";
        }
        return path.startsWith(ancestor);
    }

    @javax.annotation.Nonnull
    public static java.lang.String relativize(java.lang.String parentPath, java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if (parentPath.equals(path)) {
            return "";
        }
        java.lang.String prefix = (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)) ? parentPath : parentPath + '/';
        if (path.startsWith(prefix)) {
            return path.substring(prefix.length());
        }
        throw new java.lang.IllegalArgumentException(((("Cannot relativize " + path) + " wrt. ") + parentPath));
    }

    public static int getNextSlash(java.lang.String path, int index) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return path.indexOf('/', index);
    }

    public static void validate(java.lang.String path) {
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return;
        }else
            if ((path.charAt(((path.length()) - 1))) == '/') {
                throw new java.lang.IllegalArgumentException(("Path may not end with '/': " + path));
            }

        char last = 0;
        for (int index = 0, len = path.length(); index < len; index++) {
            char c = path.charAt(index);
            if (c == '/') {
                if (last == '/') {
                    throw new java.lang.IllegalArgumentException(("Path may not contains '//': " + path));
                }
            }
            last = c;
        }
    }

    public static boolean isValid(java.lang.String path) {
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return true;
        }else
            if ((path.charAt(((path.length()) - 1))) == '/') {
                return false;
            }

        char last = 0;
        for (int index = 0, len = path.length(); index < len; index++) {
            char c = path.charAt(index);
            if (c == '/') {
                if (last == '/') {
                    return false;
                }
            }
            last = c;
        }
        return true;
    }
}
11:13:37.770 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
11:13:37.770 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #10
11:13:37.770 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.oak.commons.PathUtils$1:200 which is executed by 1 tests
1617144685
11:13:37.945 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:37.952 [pool-6-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (3 ms)
<> Total tests run: 6
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

11:13:38.188 [pool-5-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
PathUtils.java:124: error: ')' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                    ^
PathUtils.java:124: error: illegal start of expression
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                      ^
PathUtils.java:124: error: ';' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                       ^
PathUtils.java:124: error: illegal start of expression
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                           ^
PathUtils.java:124: error: ';' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                               ^
PathUtils.java:125: error: ')' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                     ^
PathUtils.java:125: error: illegal start of expression
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                       ^
PathUtils.java:125: error: ';' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                        ^
PathUtils.java:125: error: illegal start of expression
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                            ^
PathUtils.java:125: error: ';' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                 ^
11:13:38.224 [pool-5-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class PathUtils {
    private PathUtils() {
    }

    public static boolean denotesRoot(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path);
    }

    private static boolean denotesRootPath(java.lang.String path) {
        return "/".equals(path);
    }

    public static boolean isAbsolute(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(path);
    }

    private static boolean isAbsolutePath(java.lang.String path) {
        return (!(path.isEmpty())) && ((path.charAt(0)) == '/');
    }

    @javax.annotation.Nonnull
    public static java.lang.String getParentPath(java.lang.String path) {
        return org.apache.jackrabbit.oak.commons.PathUtils.getAncestorPath(path, 1);
    }

    @javax.annotation.Nonnull
    public static java.lang.String getAncestorPath(java.lang.String path, int nth) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if (((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) || (nth <= 0)) {
            return path;
        }
        int end = (path.length()) - 1;
        int pos = -1;
        while ((nth--) > 0) {
            pos = path.lastIndexOf('/', end);
            if (pos > 0) {
                end = pos - 1;
            }else
                if (pos == 0) {
                    return "/";
                }else {
                    return "";
                }

        } 
        return path.substring(0, pos);
    }

    @javax.annotation.Nonnull
    public static java.lang.String getName(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return "";
        }
        int end = (path.length()) - 1;
        int pos = path.lastIndexOf('/', end);
        if (pos != (-1)) {
            return path.substring((pos + 1), (end + 1));
        }
        return path;
    }

    public static int getDepth(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        int count = 1;
        int i = 0;
        if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(path)) {
            if (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path)) {
                return 0;
            }
            i++;
        }
        while (true) {
            i = (path.indexOf('/', i)) + 1;
            if (i == 0) {
                return count;
            }
            count++;
        } 
    }

    @javax.annotation.Nonnull
    public static java.lang.Iterable<java.lang.String> elements(final java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        final java.util.Iterator<java.lang.String> it = new java.util.Iterator<java.lang.String>() {
            int pos = (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolute(path)) ? 1 : 0;

            java.lang.String next;

            @java.lang.Override
            public boolean hasNext() {
                if ((next) == null) {
                    if ((pos) >= (path.length())) {
                        return false;
                    }
                    int i = path.indexOf('/', pos);
                    if (i < 0) {
                        next = path.substring(pos);
                        pos = path.length();
                    }else {
                        next = path.substring(pos, i);
                        pos = i + 1;
                    }
                }
                return true;
            }

            @java.lang.Override
            public java.lang.String next() {
                if (hasNext()) {
                    java.lang.String next = this.next;
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(1).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("next",next);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        this.next = null;

                    return next;
                }
                throw new java.util.NoSuchElementException();
            }

            @java.lang.Override
            public void remove() {
                throw new java.lang.UnsupportedOperationException("remove");
            }
        };
        return new java.lang.Iterable<java.lang.String>() {
            @java.lang.Override
            public java.util.Iterator<java.lang.String> iterator() {
                return it;
            }
        };
    }

    @javax.annotation.Nonnull
    public static java.lang.String concat(java.lang.String parentPath, java.lang.String... relativePaths) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        int parentLen = parentPath.length();
        int size = relativePaths.length;
        java.lang.StringBuilder buff = new java.lang.StringBuilder((parentLen + (size * 5)));
        buff.append(parentPath);
        boolean needSlash = (parentLen > 0) && (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)));
        for (java.lang.String s : relativePaths) {
            assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(s);
            if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(s)) {
                throw new java.lang.IllegalArgumentException(("Cannot append absolute path " + s));
            }
            if (!(s.isEmpty())) {
                if (needSlash) {
                    buff.append('/');
                }
                buff.append(s);
                needSlash = true;
            }
        }
        return buff.toString();
    }

    @javax.annotation.Nonnull
    public static java.lang.String concat(java.lang.String parentPath, java.lang.String subPath) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(subPath);
        if (parentPath.isEmpty()) {
            return subPath;
        }else
            if (subPath.isEmpty()) {
                return parentPath;
            }else
                if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(subPath)) {
                    throw new java.lang.IllegalArgumentException(("Cannot append absolute path " + subPath));
                }


        java.lang.StringBuilder buff = new java.lang.StringBuilder(parentPath);
        if (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath))) {
            buff.append('/');
        }
        buff.append(subPath);
        return buff.toString();
    }

    public static boolean isAncestor(java.lang.String ancestor, java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(ancestor);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if ((ancestor.isEmpty()) || (path.isEmpty())) {
            return false;
        }
        if (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRoot(ancestor))) {
            ancestor += "/";
        }
        return path.startsWith(ancestor);
    }

    @javax.annotation.Nonnull
    public static java.lang.String relativize(java.lang.String parentPath, java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if (parentPath.equals(path)) {
            return "";
        }
        java.lang.String prefix = (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)) ? parentPath : parentPath + '/';
        if (path.startsWith(prefix)) {
            return path.substring(prefix.length());
        }
        throw new java.lang.IllegalArgumentException(((("Cannot relativize " + path) + " wrt. ") + parentPath));
    }

    public static int getNextSlash(java.lang.String path, int index) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return path.indexOf('/', index);
    }

    public static void validate(java.lang.String path) {
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return;
        }else
            if ((path.charAt(((path.length()) - 1))) == '/') {
                throw new java.lang.IllegalArgumentException(("Path may not end with '/': " + path));
            }

        char last = 0;
        for (int index = 0, len = path.length(); index < len; index++) {
            char c = path.charAt(index);
            if (c == '/') {
                if (last == '/') {
                    throw new java.lang.IllegalArgumentException(("Path may not contains '//': " + path));
                }
            }
            last = c;
        }
    }

    public static boolean isValid(java.lang.String path) {
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return true;
        }else
            if ((path.charAt(((path.length()) - 1))) == '/') {
                return false;
            }

        char last = 0;
        for (int index = 0, len = path.length(); index < len; index++) {
            char c = path.charAt(index);
            if (c == '/') {
                if (last == '/') {
                    return false;
                }
            }
            last = c;
        }
        return true;
    }
}
11:13:38.225 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
11:13:38.225 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #11
11:13:38.225 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.oak.commons.PathUtils$1:199 which is executed by 1 tests
1617144685
11:13:38.370 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #12
11:13:38.370 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.oak.commons.PathUtils$1:198 which is executed by 1 tests
1617144685
11:13:38.516 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:38.525 [pool-8-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (3 ms)
<> Total tests run: 6
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

11:13:38.760 [pool-7-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
PathUtils.java:121: error: ')' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                ^
PathUtils.java:121: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                  ^
PathUtils.java:121: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                   ^
PathUtils.java:121: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                       ^
PathUtils.java:121: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                           ^
PathUtils.java:122: error: ')' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                 ^
PathUtils.java:122: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                   ^
PathUtils.java:122: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                    ^
PathUtils.java:122: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                        ^
PathUtils.java:122: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                             ^
11:13:38.794 [pool-7-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class PathUtils {
    private PathUtils() {
    }

    public static boolean denotesRoot(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path);
    }

    private static boolean denotesRootPath(java.lang.String path) {
        return "/".equals(path);
    }

    public static boolean isAbsolute(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(path);
    }

    private static boolean isAbsolutePath(java.lang.String path) {
        return (!(path.isEmpty())) && ((path.charAt(0)) == '/');
    }

    @javax.annotation.Nonnull
    public static java.lang.String getParentPath(java.lang.String path) {
        return org.apache.jackrabbit.oak.commons.PathUtils.getAncestorPath(path, 1);
    }

    @javax.annotation.Nonnull
    public static java.lang.String getAncestorPath(java.lang.String path, int nth) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if (((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) || (nth <= 0)) {
            return path;
        }
        int end = (path.length()) - 1;
        int pos = -1;
        while ((nth--) > 0) {
            pos = path.lastIndexOf('/', end);
            if (pos > 0) {
                end = pos - 1;
            }else
                if (pos == 0) {
                    return "/";
                }else {
                    return "";
                }

        } 
        return path.substring(0, pos);
    }

    @javax.annotation.Nonnull
    public static java.lang.String getName(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return "";
        }
        int end = (path.length()) - 1;
        int pos = path.lastIndexOf('/', end);
        if (pos != (-1)) {
            return path.substring((pos + 1), (end + 1));
        }
        return path;
    }

    public static int getDepth(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        int count = 1;
        int i = 0;
        if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(path)) {
            if (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path)) {
                return 0;
            }
            i++;
        }
        while (true) {
            i = (path.indexOf('/', i)) + 1;
            if (i == 0) {
                return count;
            }
            count++;
        } 
    }

    @javax.annotation.Nonnull
    public static java.lang.Iterable<java.lang.String> elements(final java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        final java.util.Iterator<java.lang.String> it = new java.util.Iterator<java.lang.String>() {
            int pos = (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolute(path)) ? 1 : 0;

            java.lang.String next;

            @java.lang.Override
            public boolean hasNext() {
                if ((next) == null) {
                    if ((pos) >= (path.length())) {
                        return false;
                    }
                    int i = path.indexOf('/', pos);
                    if (i < 0) {
                        next = path.substring(pos);
                        pos = path.length();
                    }else {
                        next = path.substring(pos, i);
                        pos = i + 1;
                    }
                }
                return true;
            }

            @java.lang.Override
            public java.lang.String next() {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(2).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectionEnds();
                }
                if (runtimeAngelicValue) if (hasNext()) {
                    java.lang.String next = this.next;
                    this.next = null;
                    return next;
                }
                throw new java.util.NoSuchElementException();
            }

            @java.lang.Override
            public void remove() {
                throw new java.lang.UnsupportedOperationException("remove");
            }
        };
        return new java.lang.Iterable<java.lang.String>() {
            @java.lang.Override
            public java.util.Iterator<java.lang.String> iterator() {
                return it;
            }
        };
    }

    @javax.annotation.Nonnull
    public static java.lang.String concat(java.lang.String parentPath, java.lang.String... relativePaths) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        int parentLen = parentPath.length();
        int size = relativePaths.length;
        java.lang.StringBuilder buff = new java.lang.StringBuilder((parentLen + (size * 5)));
        buff.append(parentPath);
        boolean needSlash = (parentLen > 0) && (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)));
        for (java.lang.String s : relativePaths) {
            assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(s);
            if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(s)) {
                throw new java.lang.IllegalArgumentException(("Cannot append absolute path " + s));
            }
            if (!(s.isEmpty())) {
                if (needSlash) {
                    buff.append('/');
                }
                buff.append(s);
                needSlash = true;
            }
        }
        return buff.toString();
    }

    @javax.annotation.Nonnull
    public static java.lang.String concat(java.lang.String parentPath, java.lang.String subPath) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(subPath);
        if (parentPath.isEmpty()) {
            return subPath;
        }else
            if (subPath.isEmpty()) {
                return parentPath;
            }else
                if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(subPath)) {
                    throw new java.lang.IllegalArgumentException(("Cannot append absolute path " + subPath));
                }


        java.lang.StringBuilder buff = new java.lang.StringBuilder(parentPath);
        if (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath))) {
            buff.append('/');
        }
        buff.append(subPath);
        return buff.toString();
    }

    public static boolean isAncestor(java.lang.String ancestor, java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(ancestor);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if ((ancestor.isEmpty()) || (path.isEmpty())) {
            return false;
        }
        if (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRoot(ancestor))) {
            ancestor += "/";
        }
        return path.startsWith(ancestor);
    }

    @javax.annotation.Nonnull
    public static java.lang.String relativize(java.lang.String parentPath, java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if (parentPath.equals(path)) {
            return "";
        }
        java.lang.String prefix = (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)) ? parentPath : parentPath + '/';
        if (path.startsWith(prefix)) {
            return path.substring(prefix.length());
        }
        throw new java.lang.IllegalArgumentException(((("Cannot relativize " + path) + " wrt. ") + parentPath));
    }

    public static int getNextSlash(java.lang.String path, int index) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return path.indexOf('/', index);
    }

    public static void validate(java.lang.String path) {
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return;
        }else
            if ((path.charAt(((path.length()) - 1))) == '/') {
                throw new java.lang.IllegalArgumentException(("Path may not end with '/': " + path));
            }

        char last = 0;
        for (int index = 0, len = path.length(); index < len; index++) {
            char c = path.charAt(index);
            if (c == '/') {
                if (last == '/') {
                    throw new java.lang.IllegalArgumentException(("Path may not contains '//': " + path));
                }
            }
            last = c;
        }
    }

    public static boolean isValid(java.lang.String path) {
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return true;
        }else
            if ((path.charAt(((path.length()) - 1))) == '/') {
                return false;
            }

        char last = 0;
        for (int index = 0, len = path.length(); index < len; index++) {
            char c = path.charAt(index);
            if (c == '/') {
                if (last == '/') {
                    return false;
                }
            }
            last = c;
        }
        return true;
    }
}
11:13:38.795 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
11:13:38.795 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:38.802 [pool-10-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (4 ms)
<> Total tests run: 6
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

11:13:39.030 [pool-9-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
PathUtils.java:121: error: ')' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                ^
PathUtils.java:121: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                  ^
PathUtils.java:121: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                   ^
PathUtils.java:121: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                       ^
PathUtils.java:121: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                           ^
PathUtils.java:122: error: ')' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                 ^
PathUtils.java:122: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                   ^
PathUtils.java:122: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                    ^
PathUtils.java:122: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                        ^
PathUtils.java:122: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                             ^
11:13:39.061 [pool-9-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class PathUtils {
    private PathUtils() {
    }

    public static boolean denotesRoot(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path);
    }

    private static boolean denotesRootPath(java.lang.String path) {
        return "/".equals(path);
    }

    public static boolean isAbsolute(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(path);
    }

    private static boolean isAbsolutePath(java.lang.String path) {
        return (!(path.isEmpty())) && ((path.charAt(0)) == '/');
    }

    @javax.annotation.Nonnull
    public static java.lang.String getParentPath(java.lang.String path) {
        return org.apache.jackrabbit.oak.commons.PathUtils.getAncestorPath(path, 1);
    }

    @javax.annotation.Nonnull
    public static java.lang.String getAncestorPath(java.lang.String path, int nth) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if (((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) || (nth <= 0)) {
            return path;
        }
        int end = (path.length()) - 1;
        int pos = -1;
        while ((nth--) > 0) {
            pos = path.lastIndexOf('/', end);
            if (pos > 0) {
                end = pos - 1;
            }else
                if (pos == 0) {
                    return "/";
                }else {
                    return "";
                }

        } 
        return path.substring(0, pos);
    }

    @javax.annotation.Nonnull
    public static java.lang.String getName(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return "";
        }
        int end = (path.length()) - 1;
        int pos = path.lastIndexOf('/', end);
        if (pos != (-1)) {
            return path.substring((pos + 1), (end + 1));
        }
        return path;
    }

    public static int getDepth(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        int count = 1;
        int i = 0;
        if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(path)) {
            if (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path)) {
                return 0;
            }
            i++;
        }
        while (true) {
            i = (path.indexOf('/', i)) + 1;
            if (i == 0) {
                return count;
            }
            count++;
        } 
    }

    @javax.annotation.Nonnull
    public static java.lang.Iterable<java.lang.String> elements(final java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        final java.util.Iterator<java.lang.String> it = new java.util.Iterator<java.lang.String>() {
            int pos = (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolute(path)) ? 1 : 0;

            java.lang.String next;

            @java.lang.Override
            public boolean hasNext() {
                if ((next) == null) {
                    if ((pos) >= (path.length())) {
                        return false;
                    }
                    int i = path.indexOf('/', pos);
                    if (i < 0) {
                        next = path.substring(pos);
                        pos = path.length();
                    }else {
                        next = path.substring(pos, i);
                        pos = i + 1;
                    }
                }
                return true;
            }

            @java.lang.Override
            public java.lang.String next() {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = hasNext();
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(3).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectionEnds();
                }
                if (runtimeAngelicValue) {
                    java.lang.String next = this.next;
                    this.next = null;
                    return next;
                }
                throw new java.util.NoSuchElementException();
            }

            @java.lang.Override
            public void remove() {
                throw new java.lang.UnsupportedOperationException("remove");
            }
        };
        return new java.lang.Iterable<java.lang.String>() {
            @java.lang.Override
            public java.util.Iterator<java.lang.String> iterator() {
                return it;
            }
        };
    }

    @javax.annotation.Nonnull
    public static java.lang.String concat(java.lang.String parentPath, java.lang.String... relativePaths) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        int parentLen = parentPath.length();
        int size = relativePaths.length;
        java.lang.StringBuilder buff = new java.lang.StringBuilder((parentLen + (size * 5)));
        buff.append(parentPath);
        boolean needSlash = (parentLen > 0) && (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)));
        for (java.lang.String s : relativePaths) {
            assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(s);
            if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(s)) {
                throw new java.lang.IllegalArgumentException(("Cannot append absolute path " + s));
            }
            if (!(s.isEmpty())) {
                if (needSlash) {
                    buff.append('/');
                }
                buff.append(s);
                needSlash = true;
            }
        }
        return buff.toString();
    }

    @javax.annotation.Nonnull
    public static java.lang.String concat(java.lang.String parentPath, java.lang.String subPath) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(subPath);
        if (parentPath.isEmpty()) {
            return subPath;
        }else
            if (subPath.isEmpty()) {
                return parentPath;
            }else
                if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(subPath)) {
                    throw new java.lang.IllegalArgumentException(("Cannot append absolute path " + subPath));
                }


        java.lang.StringBuilder buff = new java.lang.StringBuilder(parentPath);
        if (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath))) {
            buff.append('/');
        }
        buff.append(subPath);
        return buff.toString();
    }

    public static boolean isAncestor(java.lang.String ancestor, java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(ancestor);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if ((ancestor.isEmpty()) || (path.isEmpty())) {
            return false;
        }
        if (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRoot(ancestor))) {
            ancestor += "/";
        }
        return path.startsWith(ancestor);
    }

    @javax.annotation.Nonnull
    public static java.lang.String relativize(java.lang.String parentPath, java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if (parentPath.equals(path)) {
            return "";
        }
        java.lang.String prefix = (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)) ? parentPath : parentPath + '/';
        if (path.startsWith(prefix)) {
            return path.substring(prefix.length());
        }
        throw new java.lang.IllegalArgumentException(((("Cannot relativize " + path) + " wrt. ") + parentPath));
    }

    public static int getNextSlash(java.lang.String path, int index) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return path.indexOf('/', index);
    }

    public static void validate(java.lang.String path) {
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return;
        }else
            if ((path.charAt(((path.length()) - 1))) == '/') {
                throw new java.lang.IllegalArgumentException(("Path may not end with '/': " + path));
            }

        char last = 0;
        for (int index = 0, len = path.length(); index < len; index++) {
            char c = path.charAt(index);
            if (c == '/') {
                if (last == '/') {
                    throw new java.lang.IllegalArgumentException(("Path may not contains '//': " + path));
                }
            }
            last = c;
        }
    }

    public static boolean isValid(java.lang.String path) {
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return true;
        }else
            if ((path.charAt(((path.length()) - 1))) == '/') {
                return false;
            }

        char last = 0;
        for (int index = 0, len = path.length(); index < len; index++) {
            char c = path.charAt(index);
            if (c == '/') {
                if (last == '/') {
                    return false;
                }
            }
            last = c;
        }
        return true;
    }
}
11:13:39.062 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
11:13:39.062 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #13
11:13:39.062 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.oak.commons.PathUtils$1:193 which is executed by 1 tests
1617144685
11:13:39.223 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #14
11:13:39.224 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.oak.commons.PathUtils$1:190 which is executed by 1 tests
1617144685
11:13:39.397 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:39.404 [pool-12-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (3 ms)
<> Total tests run: 6
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

11:13:39.611 [pool-11-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
PathUtils.java:114: error: ')' expected
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                        ^
PathUtils.java:114: error: illegal start of expression
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                          ^
PathUtils.java:114: error: ';' expected
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                           ^
PathUtils.java:114: error: illegal start of expression
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                               ^
PathUtils.java:114: error: ';' expected
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                   ^
PathUtils.java:115: error: ')' expected
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                         ^
PathUtils.java:115: error: illegal start of expression
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                           ^
PathUtils.java:115: error: ';' expected
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                            ^
PathUtils.java:115: error: illegal start of expression
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                ^
PathUtils.java:115: error: ';' expected
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                     ^
11:13:39.642 [pool-11-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class PathUtils {
    private PathUtils() {
    }

    public static boolean denotesRoot(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path);
    }

    private static boolean denotesRootPath(java.lang.String path) {
        return "/".equals(path);
    }

    public static boolean isAbsolute(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(path);
    }

    private static boolean isAbsolutePath(java.lang.String path) {
        return (!(path.isEmpty())) && ((path.charAt(0)) == '/');
    }

    @javax.annotation.Nonnull
    public static java.lang.String getParentPath(java.lang.String path) {
        return org.apache.jackrabbit.oak.commons.PathUtils.getAncestorPath(path, 1);
    }

    @javax.annotation.Nonnull
    public static java.lang.String getAncestorPath(java.lang.String path, int nth) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if (((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) || (nth <= 0)) {
            return path;
        }
        int end = (path.length()) - 1;
        int pos = -1;
        while ((nth--) > 0) {
            pos = path.lastIndexOf('/', end);
            if (pos > 0) {
                end = pos - 1;
            }else
                if (pos == 0) {
                    return "/";
                }else {
                    return "";
                }

        } 
        return path.substring(0, pos);
    }

    @javax.annotation.Nonnull
    public static java.lang.String getName(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return "";
        }
        int end = (path.length()) - 1;
        int pos = path.lastIndexOf('/', end);
        if (pos != (-1)) {
            return path.substring((pos + 1), (end + 1));
        }
        return path;
    }

    public static int getDepth(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        int count = 1;
        int i = 0;
        if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(path)) {
            if (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path)) {
                return 0;
            }
            i++;
        }
        while (true) {
            i = (path.indexOf('/', i)) + 1;
            if (i == 0) {
                return count;
            }
            count++;
        } 
    }

    @javax.annotation.Nonnull
    public static java.lang.Iterable<java.lang.String> elements(final java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        final java.util.Iterator<java.lang.String> it = new java.util.Iterator<java.lang.String>() {
            int pos = (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolute(path)) ? 1 : 0;

            java.lang.String next;

            @java.lang.Override
            public boolean hasNext() {
                if ((next) == null) {
                    if ((pos) >= (path.length())) {
                        return false;
                    }
                    int i = path.indexOf('/', pos);
                    if (i < 0) {
                        next = path.substring(pos);
                        pos = path.length();
                    }else {
                        next = path.substring(pos, i);
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(4).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("i",i);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                            fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            pos = i + 1;

                    }
                }
                return true;
            }

            @java.lang.Override
            public java.lang.String next() {
                if (hasNext()) {
                    java.lang.String next = this.next;
                    this.next = null;
                    return next;
                }
                throw new java.util.NoSuchElementException();
            }

            @java.lang.Override
            public void remove() {
                throw new java.lang.UnsupportedOperationException("remove");
            }
        };
        return new java.lang.Iterable<java.lang.String>() {
            @java.lang.Override
            public java.util.Iterator<java.lang.String> iterator() {
                return it;
            }
        };
    }

    @javax.annotation.Nonnull
    public static java.lang.String concat(java.lang.String parentPath, java.lang.String... relativePaths) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        int parentLen = parentPath.length();
        int size = relativePaths.length;
        java.lang.StringBuilder buff = new java.lang.StringBuilder((parentLen + (size * 5)));
        buff.append(parentPath);
        boolean needSlash = (parentLen > 0) && (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)));
        for (java.lang.String s : relativePaths) {
            assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(s);
            if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(s)) {
                throw new java.lang.IllegalArgumentException(("Cannot append absolute path " + s));
            }
            if (!(s.isEmpty())) {
                if (needSlash) {
                    buff.append('/');
                }
                buff.append(s);
                needSlash = true;
            }
        }
        return buff.toString();
    }

    @javax.annotation.Nonnull
    public static java.lang.String concat(java.lang.String parentPath, java.lang.String subPath) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(subPath);
        if (parentPath.isEmpty()) {
            return subPath;
        }else
            if (subPath.isEmpty()) {
                return parentPath;
            }else
                if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(subPath)) {
                    throw new java.lang.IllegalArgumentException(("Cannot append absolute path " + subPath));
                }


        java.lang.StringBuilder buff = new java.lang.StringBuilder(parentPath);
        if (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath))) {
            buff.append('/');
        }
        buff.append(subPath);
        return buff.toString();
    }

    public static boolean isAncestor(java.lang.String ancestor, java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(ancestor);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if ((ancestor.isEmpty()) || (path.isEmpty())) {
            return false;
        }
        if (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRoot(ancestor))) {
            ancestor += "/";
        }
        return path.startsWith(ancestor);
    }

    @javax.annotation.Nonnull
    public static java.lang.String relativize(java.lang.String parentPath, java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if (parentPath.equals(path)) {
            return "";
        }
        java.lang.String prefix = (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)) ? parentPath : parentPath + '/';
        if (path.startsWith(prefix)) {
            return path.substring(prefix.length());
        }
        throw new java.lang.IllegalArgumentException(((("Cannot relativize " + path) + " wrt. ") + parentPath));
    }

    public static int getNextSlash(java.lang.String path, int index) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return path.indexOf('/', index);
    }

    public static void validate(java.lang.String path) {
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return;
        }else
            if ((path.charAt(((path.length()) - 1))) == '/') {
                throw new java.lang.IllegalArgumentException(("Path may not end with '/': " + path));
            }

        char last = 0;
        for (int index = 0, len = path.length(); index < len; index++) {
            char c = path.charAt(index);
            if (c == '/') {
                if (last == '/') {
                    throw new java.lang.IllegalArgumentException(("Path may not contains '//': " + path));
                }
            }
            last = c;
        }
    }

    public static boolean isValid(java.lang.String path) {
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return true;
        }else
            if ((path.charAt(((path.length()) - 1))) == '/') {
                return false;
            }

        char last = 0;
        for (int index = 0, len = path.length(); index < len; index++) {
            char c = path.charAt(index);
            if (c == '/') {
                if (last == '/') {
                    return false;
                }
            }
            last = c;
        }
        return true;
    }
}
11:13:39.642 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
11:13:39.643 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #15
11:13:39.643 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.oak.commons.PathUtils$1:189 which is executed by 1 tests
1617144685
11:13:39.787 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:39.793 [pool-14-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (3 ms)
<> Total tests run: 6
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

11:13:40.001 [pool-13-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
PathUtils.java:113: error: ')' expected
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                        ^
PathUtils.java:113: error: illegal start of expression
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                          ^
PathUtils.java:113: error: ';' expected
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                           ^
PathUtils.java:113: error: illegal start of expression
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                               ^
PathUtils.java:113: error: ';' expected
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                   ^
PathUtils.java:114: error: ')' expected
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                         ^
PathUtils.java:114: error: illegal start of expression
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                           ^
PathUtils.java:114: error: ';' expected
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                            ^
PathUtils.java:114: error: illegal start of expression
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                ^
PathUtils.java:114: error: ';' expected
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                     ^
11:13:40.049 [pool-13-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class PathUtils {
    private PathUtils() {
    }

    public static boolean denotesRoot(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path);
    }

    private static boolean denotesRootPath(java.lang.String path) {
        return "/".equals(path);
    }

    public static boolean isAbsolute(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(path);
    }

    private static boolean isAbsolutePath(java.lang.String path) {
        return (!(path.isEmpty())) && ((path.charAt(0)) == '/');
    }

    @javax.annotation.Nonnull
    public static java.lang.String getParentPath(java.lang.String path) {
        return org.apache.jackrabbit.oak.commons.PathUtils.getAncestorPath(path, 1);
    }

    @javax.annotation.Nonnull
    public static java.lang.String getAncestorPath(java.lang.String path, int nth) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if (((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) || (nth <= 0)) {
            return path;
        }
        int end = (path.length()) - 1;
        int pos = -1;
        while ((nth--) > 0) {
            pos = path.lastIndexOf('/', end);
            if (pos > 0) {
                end = pos - 1;
            }else
                if (pos == 0) {
                    return "/";
                }else {
                    return "";
                }

        } 
        return path.substring(0, pos);
    }

    @javax.annotation.Nonnull
    public static java.lang.String getName(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return "";
        }
        int end = (path.length()) - 1;
        int pos = path.lastIndexOf('/', end);
        if (pos != (-1)) {
            return path.substring((pos + 1), (end + 1));
        }
        return path;
    }

    public static int getDepth(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        int count = 1;
        int i = 0;
        if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(path)) {
            if (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path)) {
                return 0;
            }
            i++;
        }
        while (true) {
            i = (path.indexOf('/', i)) + 1;
            if (i == 0) {
                return count;
            }
            count++;
        } 
    }

    @javax.annotation.Nonnull
    public static java.lang.Iterable<java.lang.String> elements(final java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        final java.util.Iterator<java.lang.String> it = new java.util.Iterator<java.lang.String>() {
            int pos = (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolute(path)) ? 1 : 0;

            java.lang.String next;

            @java.lang.Override
            public boolean hasNext() {
                if ((next) == null) {
                    if ((pos) >= (path.length())) {
                        return false;
                    }
                    int i = path.indexOf('/', pos);
                    if (i < 0) {
                        next = path.substring(pos);
                        pos = path.length();
                    }else {
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(5).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("i",i);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                            fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            next = path.substring(pos, i);

                        pos = i + 1;
                    }
                }
                return true;
            }

            @java.lang.Override
            public java.lang.String next() {
                if (hasNext()) {
                    java.lang.String next = this.next;
                    this.next = null;
                    return next;
                }
                throw new java.util.NoSuchElementException();
            }

            @java.lang.Override
            public void remove() {
                throw new java.lang.UnsupportedOperationException("remove");
            }
        };
        return new java.lang.Iterable<java.lang.String>() {
            @java.lang.Override
            public java.util.Iterator<java.lang.String> iterator() {
                return it;
            }
        };
    }

    @javax.annotation.Nonnull
    public static java.lang.String concat(java.lang.String parentPath, java.lang.String... relativePaths) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        int parentLen = parentPath.length();
        int size = relativePaths.length;
        java.lang.StringBuilder buff = new java.lang.StringBuilder((parentLen + (size * 5)));
        buff.append(parentPath);
        boolean needSlash = (parentLen > 0) && (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)));
        for (java.lang.String s : relativePaths) {
            assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(s);
            if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(s)) {
                throw new java.lang.IllegalArgumentException(("Cannot append absolute path " + s));
            }
            if (!(s.isEmpty())) {
                if (needSlash) {
                    buff.append('/');
                }
                buff.append(s);
                needSlash = true;
            }
        }
        return buff.toString();
    }

    @javax.annotation.Nonnull
    public static java.lang.String concat(java.lang.String parentPath, java.lang.String subPath) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(subPath);
        if (parentPath.isEmpty()) {
            return subPath;
        }else
            if (subPath.isEmpty()) {
                return parentPath;
            }else
                if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(subPath)) {
                    throw new java.lang.IllegalArgumentException(("Cannot append absolute path " + subPath));
                }


        java.lang.StringBuilder buff = new java.lang.StringBuilder(parentPath);
        if (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath))) {
            buff.append('/');
        }
        buff.append(subPath);
        return buff.toString();
    }

    public static boolean isAncestor(java.lang.String ancestor, java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(ancestor);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if ((ancestor.isEmpty()) || (path.isEmpty())) {
            return false;
        }
        if (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRoot(ancestor))) {
            ancestor += "/";
        }
        return path.startsWith(ancestor);
    }

    @javax.annotation.Nonnull
    public static java.lang.String relativize(java.lang.String parentPath, java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if (parentPath.equals(path)) {
            return "";
        }
        java.lang.String prefix = (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)) ? parentPath : parentPath + '/';
        if (path.startsWith(prefix)) {
            return path.substring(prefix.length());
        }
        throw new java.lang.IllegalArgumentException(((("Cannot relativize " + path) + " wrt. ") + parentPath));
    }

    public static int getNextSlash(java.lang.String path, int index) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return path.indexOf('/', index);
    }

    public static void validate(java.lang.String path) {
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return;
        }else
            if ((path.charAt(((path.length()) - 1))) == '/') {
                throw new java.lang.IllegalArgumentException(("Path may not end with '/': " + path));
            }

        char last = 0;
        for (int index = 0, len = path.length(); index < len; index++) {
            char c = path.charAt(index);
            if (c == '/') {
                if (last == '/') {
                    throw new java.lang.IllegalArgumentException(("Path may not contains '//': " + path));
                }
            }
            last = c;
        }
    }

    public static boolean isValid(java.lang.String path) {
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return true;
        }else
            if ((path.charAt(((path.length()) - 1))) == '/') {
                return false;
            }

        char last = 0;
        for (int index = 0, len = path.length(); index < len; index++) {
            char c = path.charAt(index);
            if (c == '/') {
                if (last == '/') {
                    return false;
                }
            }
            last = c;
        }
        return true;
    }
}
11:13:40.050 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
11:13:40.050 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #16
11:13:40.050 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.oak.commons.PathUtils$1:187 which is executed by 1 tests
1617144685
11:13:40.189 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:40.196 [pool-16-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (3 ms)
<> Total tests run: 6
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

11:13:40.401 [pool-15-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
PathUtils.java:111: error: ')' expected
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                        ^
PathUtils.java:111: error: illegal start of expression
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                          ^
PathUtils.java:111: error: ';' expected
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                           ^
PathUtils.java:111: error: illegal start of expression
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                               ^
PathUtils.java:111: error: ';' expected
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                   ^
PathUtils.java:112: error: ')' expected
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                         ^
PathUtils.java:112: error: illegal start of expression
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                           ^
PathUtils.java:112: error: ';' expected
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                            ^
PathUtils.java:112: error: illegal start of expression
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                ^
PathUtils.java:112: error: ';' expected
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                     ^
11:13:40.430 [pool-15-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class PathUtils {
    private PathUtils() {
    }

    public static boolean denotesRoot(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path);
    }

    private static boolean denotesRootPath(java.lang.String path) {
        return "/".equals(path);
    }

    public static boolean isAbsolute(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(path);
    }

    private static boolean isAbsolutePath(java.lang.String path) {
        return (!(path.isEmpty())) && ((path.charAt(0)) == '/');
    }

    @javax.annotation.Nonnull
    public static java.lang.String getParentPath(java.lang.String path) {
        return org.apache.jackrabbit.oak.commons.PathUtils.getAncestorPath(path, 1);
    }

    @javax.annotation.Nonnull
    public static java.lang.String getAncestorPath(java.lang.String path, int nth) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if (((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) || (nth <= 0)) {
            return path;
        }
        int end = (path.length()) - 1;
        int pos = -1;
        while ((nth--) > 0) {
            pos = path.lastIndexOf('/', end);
            if (pos > 0) {
                end = pos - 1;
            }else
                if (pos == 0) {
                    return "/";
                }else {
                    return "";
                }

        } 
        return path.substring(0, pos);
    }

    @javax.annotation.Nonnull
    public static java.lang.String getName(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return "";
        }
        int end = (path.length()) - 1;
        int pos = path.lastIndexOf('/', end);
        if (pos != (-1)) {
            return path.substring((pos + 1), (end + 1));
        }
        return path;
    }

    public static int getDepth(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        int count = 1;
        int i = 0;
        if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(path)) {
            if (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path)) {
                return 0;
            }
            i++;
        }
        while (true) {
            i = (path.indexOf('/', i)) + 1;
            if (i == 0) {
                return count;
            }
            count++;
        } 
    }

    @javax.annotation.Nonnull
    public static java.lang.Iterable<java.lang.String> elements(final java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        final java.util.Iterator<java.lang.String> it = new java.util.Iterator<java.lang.String>() {
            int pos = (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolute(path)) ? 1 : 0;

            java.lang.String next;

            @java.lang.Override
            public boolean hasNext() {
                if ((next) == null) {
                    if ((pos) >= (path.length())) {
                        return false;
                    }
                    int i = path.indexOf('/', pos);
                    if (i < 0) {
                        next = path.substring(pos);
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(6).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("i",i);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                            fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            pos = path.length();

                    }else {
                        next = path.substring(pos, i);
                        pos = i + 1;
                    }
                }
                return true;
            }

            @java.lang.Override
            public java.lang.String next() {
                if (hasNext()) {
                    java.lang.String next = this.next;
                    this.next = null;
                    return next;
                }
                throw new java.util.NoSuchElementException();
            }

            @java.lang.Override
            public void remove() {
                throw new java.lang.UnsupportedOperationException("remove");
            }
        };
        return new java.lang.Iterable<java.lang.String>() {
            @java.lang.Override
            public java.util.Iterator<java.lang.String> iterator() {
                return it;
            }
        };
    }

    @javax.annotation.Nonnull
    public static java.lang.String concat(java.lang.String parentPath, java.lang.String... relativePaths) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        int parentLen = parentPath.length();
        int size = relativePaths.length;
        java.lang.StringBuilder buff = new java.lang.StringBuilder((parentLen + (size * 5)));
        buff.append(parentPath);
        boolean needSlash = (parentLen > 0) && (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)));
        for (java.lang.String s : relativePaths) {
            assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(s);
            if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(s)) {
                throw new java.lang.IllegalArgumentException(("Cannot append absolute path " + s));
            }
            if (!(s.isEmpty())) {
                if (needSlash) {
                    buff.append('/');
                }
                buff.append(s);
                needSlash = true;
            }
        }
        return buff.toString();
    }

    @javax.annotation.Nonnull
    public static java.lang.String concat(java.lang.String parentPath, java.lang.String subPath) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(subPath);
        if (parentPath.isEmpty()) {
            return subPath;
        }else
            if (subPath.isEmpty()) {
                return parentPath;
            }else
                if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(subPath)) {
                    throw new java.lang.IllegalArgumentException(("Cannot append absolute path " + subPath));
                }


        java.lang.StringBuilder buff = new java.lang.StringBuilder(parentPath);
        if (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath))) {
            buff.append('/');
        }
        buff.append(subPath);
        return buff.toString();
    }

    public static boolean isAncestor(java.lang.String ancestor, java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(ancestor);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if ((ancestor.isEmpty()) || (path.isEmpty())) {
            return false;
        }
        if (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRoot(ancestor))) {
            ancestor += "/";
        }
        return path.startsWith(ancestor);
    }

    @javax.annotation.Nonnull
    public static java.lang.String relativize(java.lang.String parentPath, java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if (parentPath.equals(path)) {
            return "";
        }
        java.lang.String prefix = (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)) ? parentPath : parentPath + '/';
        if (path.startsWith(prefix)) {
            return path.substring(prefix.length());
        }
        throw new java.lang.IllegalArgumentException(((("Cannot relativize " + path) + " wrt. ") + parentPath));
    }

    public static int getNextSlash(java.lang.String path, int index) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return path.indexOf('/', index);
    }

    public static void validate(java.lang.String path) {
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return;
        }else
            if ((path.charAt(((path.length()) - 1))) == '/') {
                throw new java.lang.IllegalArgumentException(("Path may not end with '/': " + path));
            }

        char last = 0;
        for (int index = 0, len = path.length(); index < len; index++) {
            char c = path.charAt(index);
            if (c == '/') {
                if (last == '/') {
                    throw new java.lang.IllegalArgumentException(("Path may not contains '//': " + path));
                }
            }
            last = c;
        }
    }

    public static boolean isValid(java.lang.String path) {
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return true;
        }else
            if ((path.charAt(((path.length()) - 1))) == '/') {
                return false;
            }

        char last = 0;
        for (int index = 0, len = path.length(); index < len; index++) {
            char c = path.charAt(index);
            if (c == '/') {
                if (last == '/') {
                    return false;
                }
            }
            last = c;
        }
        return true;
    }
}
11:13:40.431 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
11:13:40.431 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #17
11:13:40.431 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.oak.commons.PathUtils$1:186 which is executed by 1 tests
1617144685
11:13:40.569 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:40.575 [pool-18-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (3 ms)
<> Total tests run: 6
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

11:13:40.775 [pool-17-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
PathUtils.java:110: error: ')' expected
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                        ^
PathUtils.java:110: error: illegal start of expression
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                          ^
PathUtils.java:110: error: ';' expected
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                           ^
PathUtils.java:110: error: illegal start of expression
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                               ^
PathUtils.java:110: error: ';' expected
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                   ^
PathUtils.java:111: error: ')' expected
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                         ^
PathUtils.java:111: error: illegal start of expression
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                           ^
PathUtils.java:111: error: ';' expected
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                            ^
PathUtils.java:111: error: illegal start of expression
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                ^
PathUtils.java:111: error: ';' expected
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                     ^
11:13:40.831 [pool-17-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class PathUtils {
    private PathUtils() {
    }

    public static boolean denotesRoot(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path);
    }

    private static boolean denotesRootPath(java.lang.String path) {
        return "/".equals(path);
    }

    public static boolean isAbsolute(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(path);
    }

    private static boolean isAbsolutePath(java.lang.String path) {
        return (!(path.isEmpty())) && ((path.charAt(0)) == '/');
    }

    @javax.annotation.Nonnull
    public static java.lang.String getParentPath(java.lang.String path) {
        return org.apache.jackrabbit.oak.commons.PathUtils.getAncestorPath(path, 1);
    }

    @javax.annotation.Nonnull
    public static java.lang.String getAncestorPath(java.lang.String path, int nth) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if (((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) || (nth <= 0)) {
            return path;
        }
        int end = (path.length()) - 1;
        int pos = -1;
        while ((nth--) > 0) {
            pos = path.lastIndexOf('/', end);
            if (pos > 0) {
                end = pos - 1;
            }else
                if (pos == 0) {
                    return "/";
                }else {
                    return "";
                }

        } 
        return path.substring(0, pos);
    }

    @javax.annotation.Nonnull
    public static java.lang.String getName(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return "";
        }
        int end = (path.length()) - 1;
        int pos = path.lastIndexOf('/', end);
        if (pos != (-1)) {
            return path.substring((pos + 1), (end + 1));
        }
        return path;
    }

    public static int getDepth(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        int count = 1;
        int i = 0;
        if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(path)) {
            if (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path)) {
                return 0;
            }
            i++;
        }
        while (true) {
            i = (path.indexOf('/', i)) + 1;
            if (i == 0) {
                return count;
            }
            count++;
        } 
    }

    @javax.annotation.Nonnull
    public static java.lang.Iterable<java.lang.String> elements(final java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        final java.util.Iterator<java.lang.String> it = new java.util.Iterator<java.lang.String>() {
            int pos = (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolute(path)) ? 1 : 0;

            java.lang.String next;

            @java.lang.Override
            public boolean hasNext() {
                if ((next) == null) {
                    if ((pos) >= (path.length())) {
                        return false;
                    }
                    int i = path.indexOf('/', pos);
                    if (i < 0) {
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(7).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("i",i);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                            fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            next = path.substring(pos);

                        pos = path.length();
                    }else {
                        next = path.substring(pos, i);
                        pos = i + 1;
                    }
                }
                return true;
            }

            @java.lang.Override
            public java.lang.String next() {
                if (hasNext()) {
                    java.lang.String next = this.next;
                    this.next = null;
                    return next;
                }
                throw new java.util.NoSuchElementException();
            }

            @java.lang.Override
            public void remove() {
                throw new java.lang.UnsupportedOperationException("remove");
            }
        };
        return new java.lang.Iterable<java.lang.String>() {
            @java.lang.Override
            public java.util.Iterator<java.lang.String> iterator() {
                return it;
            }
        };
    }

    @javax.annotation.Nonnull
    public static java.lang.String concat(java.lang.String parentPath, java.lang.String... relativePaths) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        int parentLen = parentPath.length();
        int size = relativePaths.length;
        java.lang.StringBuilder buff = new java.lang.StringBuilder((parentLen + (size * 5)));
        buff.append(parentPath);
        boolean needSlash = (parentLen > 0) && (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)));
        for (java.lang.String s : relativePaths) {
            assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(s);
            if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(s)) {
                throw new java.lang.IllegalArgumentException(("Cannot append absolute path " + s));
            }
            if (!(s.isEmpty())) {
                if (needSlash) {
                    buff.append('/');
                }
                buff.append(s);
                needSlash = true;
            }
        }
        return buff.toString();
    }

    @javax.annotation.Nonnull
    public static java.lang.String concat(java.lang.String parentPath, java.lang.String subPath) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(subPath);
        if (parentPath.isEmpty()) {
            return subPath;
        }else
            if (subPath.isEmpty()) {
                return parentPath;
            }else
                if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(subPath)) {
                    throw new java.lang.IllegalArgumentException(("Cannot append absolute path " + subPath));
                }


        java.lang.StringBuilder buff = new java.lang.StringBuilder(parentPath);
        if (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath))) {
            buff.append('/');
        }
        buff.append(subPath);
        return buff.toString();
    }

    public static boolean isAncestor(java.lang.String ancestor, java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(ancestor);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if ((ancestor.isEmpty()) || (path.isEmpty())) {
            return false;
        }
        if (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRoot(ancestor))) {
            ancestor += "/";
        }
        return path.startsWith(ancestor);
    }

    @javax.annotation.Nonnull
    public static java.lang.String relativize(java.lang.String parentPath, java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if (parentPath.equals(path)) {
            return "";
        }
        java.lang.String prefix = (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)) ? parentPath : parentPath + '/';
        if (path.startsWith(prefix)) {
            return path.substring(prefix.length());
        }
        throw new java.lang.IllegalArgumentException(((("Cannot relativize " + path) + " wrt. ") + parentPath));
    }

    public static int getNextSlash(java.lang.String path, int index) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return path.indexOf('/', index);
    }

    public static void validate(java.lang.String path) {
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return;
        }else
            if ((path.charAt(((path.length()) - 1))) == '/') {
                throw new java.lang.IllegalArgumentException(("Path may not end with '/': " + path));
            }

        char last = 0;
        for (int index = 0, len = path.length(); index < len; index++) {
            char c = path.charAt(index);
            if (c == '/') {
                if (last == '/') {
                    throw new java.lang.IllegalArgumentException(("Path may not contains '//': " + path));
                }
            }
            last = c;
        }
    }

    public static boolean isValid(java.lang.String path) {
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return true;
        }else
            if ((path.charAt(((path.length()) - 1))) == '/') {
                return false;
            }

        char last = 0;
        for (int index = 0, len = path.length(); index < len; index++) {
            char c = path.charAt(index);
            if (c == '/') {
                if (last == '/') {
                    return false;
                }
            }
            last = c;
        }
        return true;
    }
}
11:13:40.831 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
11:13:40.831 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #18
11:13:40.831 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.oak.commons.PathUtils$1:185 which is executed by 1 tests
1617144685
11:13:41.032 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:41.038 [pool-20-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (3 ms)
<> Total tests run: 6
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

11:13:41.264 [pool-19-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
PathUtils.java:110: error: ')' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                    ^
PathUtils.java:110: error: illegal start of expression
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                      ^
PathUtils.java:110: error: ';' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                       ^
PathUtils.java:110: error: illegal start of expression
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                           ^
PathUtils.java:110: error: ';' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                               ^
PathUtils.java:112: error: ')' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                     ^
PathUtils.java:112: error: illegal start of expression
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                       ^
PathUtils.java:112: error: ';' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                        ^
PathUtils.java:112: error: illegal start of expression
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                            ^
PathUtils.java:112: error: ';' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                 ^
11:13:41.293 [pool-19-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class PathUtils {
    private PathUtils() {
    }

    public static boolean denotesRoot(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path);
    }

    private static boolean denotesRootPath(java.lang.String path) {
        return "/".equals(path);
    }

    public static boolean isAbsolute(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(path);
    }

    private static boolean isAbsolutePath(java.lang.String path) {
        return (!(path.isEmpty())) && ((path.charAt(0)) == '/');
    }

    @javax.annotation.Nonnull
    public static java.lang.String getParentPath(java.lang.String path) {
        return org.apache.jackrabbit.oak.commons.PathUtils.getAncestorPath(path, 1);
    }

    @javax.annotation.Nonnull
    public static java.lang.String getAncestorPath(java.lang.String path, int nth) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if (((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) || (nth <= 0)) {
            return path;
        }
        int end = (path.length()) - 1;
        int pos = -1;
        while ((nth--) > 0) {
            pos = path.lastIndexOf('/', end);
            if (pos > 0) {
                end = pos - 1;
            }else
                if (pos == 0) {
                    return "/";
                }else {
                    return "";
                }

        } 
        return path.substring(0, pos);
    }

    @javax.annotation.Nonnull
    public static java.lang.String getName(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return "";
        }
        int end = (path.length()) - 1;
        int pos = path.lastIndexOf('/', end);
        if (pos != (-1)) {
            return path.substring((pos + 1), (end + 1));
        }
        return path;
    }

    public static int getDepth(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        int count = 1;
        int i = 0;
        if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(path)) {
            if (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path)) {
                return 0;
            }
            i++;
        }
        while (true) {
            i = (path.indexOf('/', i)) + 1;
            if (i == 0) {
                return count;
            }
            count++;
        } 
    }

    @javax.annotation.Nonnull
    public static java.lang.Iterable<java.lang.String> elements(final java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        final java.util.Iterator<java.lang.String> it = new java.util.Iterator<java.lang.String>() {
            int pos = (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolute(path)) ? 1 : 0;

            java.lang.String next;

            @java.lang.Override
            public boolean hasNext() {
                if ((next) == null) {
                    if ((pos) >= (path.length())) {
                        return false;
                    }
                    int i = path.indexOf('/', pos);
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(8).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("0",0);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("i",i);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("i < 0",i < 0);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectionEnds();
                    }
                    if (runtimeAngelicValue) if (i < 0) {
                        next = path.substring(pos);
                        pos = path.length();
                    }else {
                        next = path.substring(pos, i);
                        pos = i + 1;
                    }
                }
                return true;
            }

            @java.lang.Override
            public java.lang.String next() {
                if (hasNext()) {
                    java.lang.String next = this.next;
                    this.next = null;
                    return next;
                }
                throw new java.util.NoSuchElementException();
            }

            @java.lang.Override
            public void remove() {
                throw new java.lang.UnsupportedOperationException("remove");
            }
        };
        return new java.lang.Iterable<java.lang.String>() {
            @java.lang.Override
            public java.util.Iterator<java.lang.String> iterator() {
                return it;
            }
        };
    }

    @javax.annotation.Nonnull
    public static java.lang.String concat(java.lang.String parentPath, java.lang.String... relativePaths) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        int parentLen = parentPath.length();
        int size = relativePaths.length;
        java.lang.StringBuilder buff = new java.lang.StringBuilder((parentLen + (size * 5)));
        buff.append(parentPath);
        boolean needSlash = (parentLen > 0) && (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)));
        for (java.lang.String s : relativePaths) {
            assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(s);
            if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(s)) {
                throw new java.lang.IllegalArgumentException(("Cannot append absolute path " + s));
            }
            if (!(s.isEmpty())) {
                if (needSlash) {
                    buff.append('/');
                }
                buff.append(s);
                needSlash = true;
            }
        }
        return buff.toString();
    }

    @javax.annotation.Nonnull
    public static java.lang.String concat(java.lang.String parentPath, java.lang.String subPath) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(subPath);
        if (parentPath.isEmpty()) {
            return subPath;
        }else
            if (subPath.isEmpty()) {
                return parentPath;
            }else
                if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(subPath)) {
                    throw new java.lang.IllegalArgumentException(("Cannot append absolute path " + subPath));
                }


        java.lang.StringBuilder buff = new java.lang.StringBuilder(parentPath);
        if (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath))) {
            buff.append('/');
        }
        buff.append(subPath);
        return buff.toString();
    }

    public static boolean isAncestor(java.lang.String ancestor, java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(ancestor);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if ((ancestor.isEmpty()) || (path.isEmpty())) {
            return false;
        }
        if (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRoot(ancestor))) {
            ancestor += "/";
        }
        return path.startsWith(ancestor);
    }

    @javax.annotation.Nonnull
    public static java.lang.String relativize(java.lang.String parentPath, java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if (parentPath.equals(path)) {
            return "";
        }
        java.lang.String prefix = (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)) ? parentPath : parentPath + '/';
        if (path.startsWith(prefix)) {
            return path.substring(prefix.length());
        }
        throw new java.lang.IllegalArgumentException(((("Cannot relativize " + path) + " wrt. ") + parentPath));
    }

    public static int getNextSlash(java.lang.String path, int index) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return path.indexOf('/', index);
    }

    public static void validate(java.lang.String path) {
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return;
        }else
            if ((path.charAt(((path.length()) - 1))) == '/') {
                throw new java.lang.IllegalArgumentException(("Path may not end with '/': " + path));
            }

        char last = 0;
        for (int index = 0, len = path.length(); index < len; index++) {
            char c = path.charAt(index);
            if (c == '/') {
                if (last == '/') {
                    throw new java.lang.IllegalArgumentException(("Path may not contains '//': " + path));
                }
            }
            last = c;
        }
    }

    public static boolean isValid(java.lang.String path) {
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return true;
        }else
            if ((path.charAt(((path.length()) - 1))) == '/') {
                return false;
            }

        char last = 0;
        for (int index = 0, len = path.length(); index < len; index++) {
            char c = path.charAt(index);
            if (c == '/') {
                if (last == '/') {
                    return false;
                }
            }
            last = c;
        }
        return true;
    }
}
11:13:41.293 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
11:13:41.293 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:41.299 [pool-22-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (3 ms)
<> Total tests run: 6
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

11:13:41.497 [pool-21-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
PathUtils.java:110: error: ')' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                    ^
PathUtils.java:110: error: illegal start of expression
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                      ^
PathUtils.java:110: error: ';' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                       ^
PathUtils.java:110: error: illegal start of expression
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                           ^
PathUtils.java:110: error: ';' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                               ^
PathUtils.java:112: error: ')' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                     ^
PathUtils.java:112: error: illegal start of expression
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                       ^
PathUtils.java:112: error: ';' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                        ^
PathUtils.java:112: error: illegal start of expression
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                            ^
PathUtils.java:112: error: ';' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                 ^
11:13:41.525 [pool-21-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class PathUtils {
    private PathUtils() {
    }

    public static boolean denotesRoot(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path);
    }

    private static boolean denotesRootPath(java.lang.String path) {
        return "/".equals(path);
    }

    public static boolean isAbsolute(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(path);
    }

    private static boolean isAbsolutePath(java.lang.String path) {
        return (!(path.isEmpty())) && ((path.charAt(0)) == '/');
    }

    @javax.annotation.Nonnull
    public static java.lang.String getParentPath(java.lang.String path) {
        return org.apache.jackrabbit.oak.commons.PathUtils.getAncestorPath(path, 1);
    }

    @javax.annotation.Nonnull
    public static java.lang.String getAncestorPath(java.lang.String path, int nth) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if (((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) || (nth <= 0)) {
            return path;
        }
        int end = (path.length()) - 1;
        int pos = -1;
        while ((nth--) > 0) {
            pos = path.lastIndexOf('/', end);
            if (pos > 0) {
                end = pos - 1;
            }else
                if (pos == 0) {
                    return "/";
                }else {
                    return "";
                }

        } 
        return path.substring(0, pos);
    }

    @javax.annotation.Nonnull
    public static java.lang.String getName(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return "";
        }
        int end = (path.length()) - 1;
        int pos = path.lastIndexOf('/', end);
        if (pos != (-1)) {
            return path.substring((pos + 1), (end + 1));
        }
        return path;
    }

    public static int getDepth(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        int count = 1;
        int i = 0;
        if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(path)) {
            if (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path)) {
                return 0;
            }
            i++;
        }
        while (true) {
            i = (path.indexOf('/', i)) + 1;
            if (i == 0) {
                return count;
            }
            count++;
        } 
    }

    @javax.annotation.Nonnull
    public static java.lang.Iterable<java.lang.String> elements(final java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        final java.util.Iterator<java.lang.String> it = new java.util.Iterator<java.lang.String>() {
            int pos = (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolute(path)) ? 1 : 0;

            java.lang.String next;

            @java.lang.Override
            public boolean hasNext() {
                if ((next) == null) {
                    if ((pos) >= (path.length())) {
                        return false;
                    }
                    int i = path.indexOf('/', pos);
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = i < 0;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(9).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("0",0);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("i",i);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("i < 0",i < 0);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectionEnds();
                    }
                    if (runtimeAngelicValue) {
                        next = path.substring(pos);
                        pos = path.length();
                    }else {
                        next = path.substring(pos, i);
                        pos = i + 1;
                    }
                }
                return true;
            }

            @java.lang.Override
            public java.lang.String next() {
                if (hasNext()) {
                    java.lang.String next = this.next;
                    this.next = null;
                    return next;
                }
                throw new java.util.NoSuchElementException();
            }

            @java.lang.Override
            public void remove() {
                throw new java.lang.UnsupportedOperationException("remove");
            }
        };
        return new java.lang.Iterable<java.lang.String>() {
            @java.lang.Override
            public java.util.Iterator<java.lang.String> iterator() {
                return it;
            }
        };
    }

    @javax.annotation.Nonnull
    public static java.lang.String concat(java.lang.String parentPath, java.lang.String... relativePaths) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        int parentLen = parentPath.length();
        int size = relativePaths.length;
        java.lang.StringBuilder buff = new java.lang.StringBuilder((parentLen + (size * 5)));
        buff.append(parentPath);
        boolean needSlash = (parentLen > 0) && (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)));
        for (java.lang.String s : relativePaths) {
            assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(s);
            if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(s)) {
                throw new java.lang.IllegalArgumentException(("Cannot append absolute path " + s));
            }
            if (!(s.isEmpty())) {
                if (needSlash) {
                    buff.append('/');
                }
                buff.append(s);
                needSlash = true;
            }
        }
        return buff.toString();
    }

    @javax.annotation.Nonnull
    public static java.lang.String concat(java.lang.String parentPath, java.lang.String subPath) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(subPath);
        if (parentPath.isEmpty()) {
            return subPath;
        }else
            if (subPath.isEmpty()) {
                return parentPath;
            }else
                if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(subPath)) {
                    throw new java.lang.IllegalArgumentException(("Cannot append absolute path " + subPath));
                }


        java.lang.StringBuilder buff = new java.lang.StringBuilder(parentPath);
        if (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath))) {
            buff.append('/');
        }
        buff.append(subPath);
        return buff.toString();
    }

    public static boolean isAncestor(java.lang.String ancestor, java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(ancestor);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if ((ancestor.isEmpty()) || (path.isEmpty())) {
            return false;
        }
        if (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRoot(ancestor))) {
            ancestor += "/";
        }
        return path.startsWith(ancestor);
    }

    @javax.annotation.Nonnull
    public static java.lang.String relativize(java.lang.String parentPath, java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if (parentPath.equals(path)) {
            return "";
        }
        java.lang.String prefix = (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)) ? parentPath : parentPath + '/';
        if (path.startsWith(prefix)) {
            return path.substring(prefix.length());
        }
        throw new java.lang.IllegalArgumentException(((("Cannot relativize " + path) + " wrt. ") + parentPath));
    }

    public static int getNextSlash(java.lang.String path, int index) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return path.indexOf('/', index);
    }

    public static void validate(java.lang.String path) {
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return;
        }else
            if ((path.charAt(((path.length()) - 1))) == '/') {
                throw new java.lang.IllegalArgumentException(("Path may not end with '/': " + path));
            }

        char last = 0;
        for (int index = 0, len = path.length(); index < len; index++) {
            char c = path.charAt(index);
            if (c == '/') {
                if (last == '/') {
                    throw new java.lang.IllegalArgumentException(("Path may not contains '//': " + path));
                }
            }
            last = c;
        }
    }

    public static boolean isValid(java.lang.String path) {
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return true;
        }else
            if ((path.charAt(((path.length()) - 1))) == '/') {
                return false;
            }

        char last = 0;
        for (int index = 0, len = path.length(); index < len; index++) {
            char c = path.charAt(index);
            if (c == '/') {
                if (last == '/') {
                    return false;
                }
            }
            last = c;
        }
        return true;
    }
}
11:13:41.525 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
11:13:41.526 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #19
11:13:41.526 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.oak.commons.PathUtils$1:184 which is executed by 1 tests
1617144685
11:13:41.658 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #20
11:13:41.658 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.oak.commons.PathUtils$1:182 which is executed by 1 tests
1617144685
11:13:41.786 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:41.806 [pool-24-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (2 ms)
<> Total tests run: 6
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

11:13:41.998 [pool-23-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
PathUtils.java:105: error: ')' expected
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                         ^
PathUtils.java:105: error: illegal start of expression
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                           ^
PathUtils.java:105: error: ';' expected
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                            ^
PathUtils.java:105: error: illegal start of expression
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                ^
PathUtils.java:105: error: ';' expected
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                    ^
PathUtils.java:106: error: ')' expected
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                          ^
PathUtils.java:106: error: illegal start of expression
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                            ^
PathUtils.java:106: error: ';' expected
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                             ^
PathUtils.java:106: error: illegal start of expression
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                 ^
PathUtils.java:106: error: ';' expected
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                      ^
11:13:42.046 [pool-23-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class PathUtils {
    private PathUtils() {
    }

    public static boolean denotesRoot(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path);
    }

    private static boolean denotesRootPath(java.lang.String path) {
        return "/".equals(path);
    }

    public static boolean isAbsolute(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(path);
    }

    private static boolean isAbsolutePath(java.lang.String path) {
        return (!(path.isEmpty())) && ((path.charAt(0)) == '/');
    }

    @javax.annotation.Nonnull
    public static java.lang.String getParentPath(java.lang.String path) {
        return org.apache.jackrabbit.oak.commons.PathUtils.getAncestorPath(path, 1);
    }

    @javax.annotation.Nonnull
    public static java.lang.String getAncestorPath(java.lang.String path, int nth) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if (((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) || (nth <= 0)) {
            return path;
        }
        int end = (path.length()) - 1;
        int pos = -1;
        while ((nth--) > 0) {
            pos = path.lastIndexOf('/', end);
            if (pos > 0) {
                end = pos - 1;
            }else
                if (pos == 0) {
                    return "/";
                }else {
                    return "";
                }

        } 
        return path.substring(0, pos);
    }

    @javax.annotation.Nonnull
    public static java.lang.String getName(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return "";
        }
        int end = (path.length()) - 1;
        int pos = path.lastIndexOf('/', end);
        if (pos != (-1)) {
            return path.substring((pos + 1), (end + 1));
        }
        return path;
    }

    public static int getDepth(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        int count = 1;
        int i = 0;
        if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(path)) {
            if (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path)) {
                return 0;
            }
            i++;
        }
        while (true) {
            i = (path.indexOf('/', i)) + 1;
            if (i == 0) {
                return count;
            }
            count++;
        } 
    }

    @javax.annotation.Nonnull
    public static java.lang.Iterable<java.lang.String> elements(final java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        final java.util.Iterator<java.lang.String> it = new java.util.Iterator<java.lang.String>() {
            int pos = (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolute(path)) ? 1 : 0;

            java.lang.String next;

            @java.lang.Override
            public boolean hasNext() {
                if ((next) == null) {
                    if ((pos) >= (path.length())) {
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(10).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                            fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            return false;

                    }
                    int i = path.indexOf('/', pos);
                    if (i < 0) {
                        next = path.substring(pos);
                        pos = path.length();
                    }else {
                        next = path.substring(pos, i);
                        pos = i + 1;
                    }
                }
                return true;
            }

            @java.lang.Override
            public java.lang.String next() {
                if (hasNext()) {
                    java.lang.String next = this.next;
                    this.next = null;
                    return next;
                }
                throw new java.util.NoSuchElementException();
            }

            @java.lang.Override
            public void remove() {
                throw new java.lang.UnsupportedOperationException("remove");
            }
        };
        return new java.lang.Iterable<java.lang.String>() {
            @java.lang.Override
            public java.util.Iterator<java.lang.String> iterator() {
                return it;
            }
        };
    }

    @javax.annotation.Nonnull
    public static java.lang.String concat(java.lang.String parentPath, java.lang.String... relativePaths) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        int parentLen = parentPath.length();
        int size = relativePaths.length;
        java.lang.StringBuilder buff = new java.lang.StringBuilder((parentLen + (size * 5)));
        buff.append(parentPath);
        boolean needSlash = (parentLen > 0) && (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)));
        for (java.lang.String s : relativePaths) {
            assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(s);
            if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(s)) {
                throw new java.lang.IllegalArgumentException(("Cannot append absolute path " + s));
            }
            if (!(s.isEmpty())) {
                if (needSlash) {
                    buff.append('/');
                }
                buff.append(s);
                needSlash = true;
            }
        }
        return buff.toString();
    }

    @javax.annotation.Nonnull
    public static java.lang.String concat(java.lang.String parentPath, java.lang.String subPath) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(subPath);
        if (parentPath.isEmpty()) {
            return subPath;
        }else
            if (subPath.isEmpty()) {
                return parentPath;
            }else
                if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(subPath)) {
                    throw new java.lang.IllegalArgumentException(("Cannot append absolute path " + subPath));
                }


        java.lang.StringBuilder buff = new java.lang.StringBuilder(parentPath);
        if (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath))) {
            buff.append('/');
        }
        buff.append(subPath);
        return buff.toString();
    }

    public static boolean isAncestor(java.lang.String ancestor, java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(ancestor);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if ((ancestor.isEmpty()) || (path.isEmpty())) {
            return false;
        }
        if (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRoot(ancestor))) {
            ancestor += "/";
        }
        return path.startsWith(ancestor);
    }

    @javax.annotation.Nonnull
    public static java.lang.String relativize(java.lang.String parentPath, java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if (parentPath.equals(path)) {
            return "";
        }
        java.lang.String prefix = (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)) ? parentPath : parentPath + '/';
        if (path.startsWith(prefix)) {
            return path.substring(prefix.length());
        }
        throw new java.lang.IllegalArgumentException(((("Cannot relativize " + path) + " wrt. ") + parentPath));
    }

    public static int getNextSlash(java.lang.String path, int index) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return path.indexOf('/', index);
    }

    public static void validate(java.lang.String path) {
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return;
        }else
            if ((path.charAt(((path.length()) - 1))) == '/') {
                throw new java.lang.IllegalArgumentException(("Path may not end with '/': " + path));
            }

        char last = 0;
        for (int index = 0, len = path.length(); index < len; index++) {
            char c = path.charAt(index);
            if (c == '/') {
                if (last == '/') {
                    throw new java.lang.IllegalArgumentException(("Path may not contains '//': " + path));
                }
            }
            last = c;
        }
    }

    public static boolean isValid(java.lang.String path) {
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return true;
        }else
            if ((path.charAt(((path.length()) - 1))) == '/') {
                return false;
            }

        char last = 0;
        for (int index = 0, len = path.length(); index < len; index++) {
            char c = path.charAt(index);
            if (c == '/') {
                if (last == '/') {
                    return false;
                }
            }
            last = c;
        }
        return true;
    }
}
11:13:42.047 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
11:13:42.047 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #21
11:13:42.047 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.oak.commons.PathUtils$1:181 which is executed by 1 tests
1617144685
11:13:42.179 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:42.184 [pool-26-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (2 ms)
<> Total tests run: 6
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

11:13:42.371 [pool-25-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
PathUtils.java:104: error: ')' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                     ^
PathUtils.java:104: error: illegal start of expression
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                       ^
PathUtils.java:104: error: ';' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                        ^
PathUtils.java:104: error: illegal start of expression
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                            ^
PathUtils.java:104: error: ';' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                ^
PathUtils.java:105: error: ')' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                      ^
PathUtils.java:105: error: illegal start of expression
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                        ^
PathUtils.java:105: error: ';' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                         ^
PathUtils.java:105: error: illegal start of expression
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                             ^
PathUtils.java:105: error: ';' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                  ^
11:13:42.398 [pool-25-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class PathUtils {
    private PathUtils() {
    }

    public static boolean denotesRoot(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path);
    }

    private static boolean denotesRootPath(java.lang.String path) {
        return "/".equals(path);
    }

    public static boolean isAbsolute(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(path);
    }

    private static boolean isAbsolutePath(java.lang.String path) {
        return (!(path.isEmpty())) && ((path.charAt(0)) == '/');
    }

    @javax.annotation.Nonnull
    public static java.lang.String getParentPath(java.lang.String path) {
        return org.apache.jackrabbit.oak.commons.PathUtils.getAncestorPath(path, 1);
    }

    @javax.annotation.Nonnull
    public static java.lang.String getAncestorPath(java.lang.String path, int nth) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if (((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) || (nth <= 0)) {
            return path;
        }
        int end = (path.length()) - 1;
        int pos = -1;
        while ((nth--) > 0) {
            pos = path.lastIndexOf('/', end);
            if (pos > 0) {
                end = pos - 1;
            }else
                if (pos == 0) {
                    return "/";
                }else {
                    return "";
                }

        } 
        return path.substring(0, pos);
    }

    @javax.annotation.Nonnull
    public static java.lang.String getName(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return "";
        }
        int end = (path.length()) - 1;
        int pos = path.lastIndexOf('/', end);
        if (pos != (-1)) {
            return path.substring((pos + 1), (end + 1));
        }
        return path;
    }

    public static int getDepth(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        int count = 1;
        int i = 0;
        if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(path)) {
            if (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path)) {
                return 0;
            }
            i++;
        }
        while (true) {
            i = (path.indexOf('/', i)) + 1;
            if (i == 0) {
                return count;
            }
            count++;
        } 
    }

    @javax.annotation.Nonnull
    public static java.lang.Iterable<java.lang.String> elements(final java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        final java.util.Iterator<java.lang.String> it = new java.util.Iterator<java.lang.String>() {
            int pos = (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolute(path)) ? 1 : 0;

            java.lang.String next;

            @java.lang.Override
            public boolean hasNext() {
                if ((next) == null) {
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(11).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectionEnds();
                    }
                    if (runtimeAngelicValue) if ((pos) >= (path.length())) {
                        return false;
                    }
                    int i = path.indexOf('/', pos);
                    if (i < 0) {
                        next = path.substring(pos);
                        pos = path.length();
                    }else {
                        next = path.substring(pos, i);
                        pos = i + 1;
                    }
                }
                return true;
            }

            @java.lang.Override
            public java.lang.String next() {
                if (hasNext()) {
                    java.lang.String next = this.next;
                    this.next = null;
                    return next;
                }
                throw new java.util.NoSuchElementException();
            }

            @java.lang.Override
            public void remove() {
                throw new java.lang.UnsupportedOperationException("remove");
            }
        };
        return new java.lang.Iterable<java.lang.String>() {
            @java.lang.Override
            public java.util.Iterator<java.lang.String> iterator() {
                return it;
            }
        };
    }

    @javax.annotation.Nonnull
    public static java.lang.String concat(java.lang.String parentPath, java.lang.String... relativePaths) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        int parentLen = parentPath.length();
        int size = relativePaths.length;
        java.lang.StringBuilder buff = new java.lang.StringBuilder((parentLen + (size * 5)));
        buff.append(parentPath);
        boolean needSlash = (parentLen > 0) && (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)));
        for (java.lang.String s : relativePaths) {
            assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(s);
            if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(s)) {
                throw new java.lang.IllegalArgumentException(("Cannot append absolute path " + s));
            }
            if (!(s.isEmpty())) {
                if (needSlash) {
                    buff.append('/');
                }
                buff.append(s);
                needSlash = true;
            }
        }
        return buff.toString();
    }

    @javax.annotation.Nonnull
    public static java.lang.String concat(java.lang.String parentPath, java.lang.String subPath) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(subPath);
        if (parentPath.isEmpty()) {
            return subPath;
        }else
            if (subPath.isEmpty()) {
                return parentPath;
            }else
                if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(subPath)) {
                    throw new java.lang.IllegalArgumentException(("Cannot append absolute path " + subPath));
                }


        java.lang.StringBuilder buff = new java.lang.StringBuilder(parentPath);
        if (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath))) {
            buff.append('/');
        }
        buff.append(subPath);
        return buff.toString();
    }

    public static boolean isAncestor(java.lang.String ancestor, java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(ancestor);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if ((ancestor.isEmpty()) || (path.isEmpty())) {
            return false;
        }
        if (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRoot(ancestor))) {
            ancestor += "/";
        }
        return path.startsWith(ancestor);
    }

    @javax.annotation.Nonnull
    public static java.lang.String relativize(java.lang.String parentPath, java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if (parentPath.equals(path)) {
            return "";
        }
        java.lang.String prefix = (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)) ? parentPath : parentPath + '/';
        if (path.startsWith(prefix)) {
            return path.substring(prefix.length());
        }
        throw new java.lang.IllegalArgumentException(((("Cannot relativize " + path) + " wrt. ") + parentPath));
    }

    public static int getNextSlash(java.lang.String path, int index) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return path.indexOf('/', index);
    }

    public static void validate(java.lang.String path) {
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return;
        }else
            if ((path.charAt(((path.length()) - 1))) == '/') {
                throw new java.lang.IllegalArgumentException(("Path may not end with '/': " + path));
            }

        char last = 0;
        for (int index = 0, len = path.length(); index < len; index++) {
            char c = path.charAt(index);
            if (c == '/') {
                if (last == '/') {
                    throw new java.lang.IllegalArgumentException(("Path may not contains '//': " + path));
                }
            }
            last = c;
        }
    }

    public static boolean isValid(java.lang.String path) {
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return true;
        }else
            if ((path.charAt(((path.length()) - 1))) == '/') {
                return false;
            }

        char last = 0;
        for (int index = 0, len = path.length(); index < len; index++) {
            char c = path.charAt(index);
            if (c == '/') {
                if (last == '/') {
                    return false;
                }
            }
            last = c;
        }
        return true;
    }
}
11:13:42.398 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
11:13:42.398 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:42.403 [pool-28-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (2 ms)
<> Total tests run: 6
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

11:13:42.589 [pool-27-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
PathUtils.java:104: error: ')' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                     ^
PathUtils.java:104: error: illegal start of expression
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                       ^
PathUtils.java:104: error: ';' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                        ^
PathUtils.java:104: error: illegal start of expression
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                            ^
PathUtils.java:104: error: ';' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                ^
PathUtils.java:105: error: ')' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                      ^
PathUtils.java:105: error: illegal start of expression
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                        ^
PathUtils.java:105: error: ';' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                         ^
PathUtils.java:105: error: illegal start of expression
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                             ^
PathUtils.java:105: error: ';' expected
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                                  ^
11:13:42.613 [pool-27-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class PathUtils {
    private PathUtils() {
    }

    public static boolean denotesRoot(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path);
    }

    private static boolean denotesRootPath(java.lang.String path) {
        return "/".equals(path);
    }

    public static boolean isAbsolute(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(path);
    }

    private static boolean isAbsolutePath(java.lang.String path) {
        return (!(path.isEmpty())) && ((path.charAt(0)) == '/');
    }

    @javax.annotation.Nonnull
    public static java.lang.String getParentPath(java.lang.String path) {
        return org.apache.jackrabbit.oak.commons.PathUtils.getAncestorPath(path, 1);
    }

    @javax.annotation.Nonnull
    public static java.lang.String getAncestorPath(java.lang.String path, int nth) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if (((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) || (nth <= 0)) {
            return path;
        }
        int end = (path.length()) - 1;
        int pos = -1;
        while ((nth--) > 0) {
            pos = path.lastIndexOf('/', end);
            if (pos > 0) {
                end = pos - 1;
            }else
                if (pos == 0) {
                    return "/";
                }else {
                    return "";
                }

        } 
        return path.substring(0, pos);
    }

    @javax.annotation.Nonnull
    public static java.lang.String getName(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return "";
        }
        int end = (path.length()) - 1;
        int pos = path.lastIndexOf('/', end);
        if (pos != (-1)) {
            return path.substring((pos + 1), (end + 1));
        }
        return path;
    }

    public static int getDepth(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        int count = 1;
        int i = 0;
        if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(path)) {
            if (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path)) {
                return 0;
            }
            i++;
        }
        while (true) {
            i = (path.indexOf('/', i)) + 1;
            if (i == 0) {
                return count;
            }
            count++;
        } 
    }

    @javax.annotation.Nonnull
    public static java.lang.Iterable<java.lang.String> elements(final java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        final java.util.Iterator<java.lang.String> it = new java.util.Iterator<java.lang.String>() {
            int pos = (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolute(path)) ? 1 : 0;

            java.lang.String next;

            @java.lang.Override
            public boolean hasNext() {
                if ((next) == null) {
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = (pos) >= (path.length());
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(12).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectionEnds();
                    }
                    if (runtimeAngelicValue) {
                        return false;
                    }
                    int i = path.indexOf('/', pos);
                    if (i < 0) {
                        next = path.substring(pos);
                        pos = path.length();
                    }else {
                        next = path.substring(pos, i);
                        pos = i + 1;
                    }
                }
                return true;
            }

            @java.lang.Override
            public java.lang.String next() {
                if (hasNext()) {
                    java.lang.String next = this.next;
                    this.next = null;
                    return next;
                }
                throw new java.util.NoSuchElementException();
            }

            @java.lang.Override
            public void remove() {
                throw new java.lang.UnsupportedOperationException("remove");
            }
        };
        return new java.lang.Iterable<java.lang.String>() {
            @java.lang.Override
            public java.util.Iterator<java.lang.String> iterator() {
                return it;
            }
        };
    }

    @javax.annotation.Nonnull
    public static java.lang.String concat(java.lang.String parentPath, java.lang.String... relativePaths) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        int parentLen = parentPath.length();
        int size = relativePaths.length;
        java.lang.StringBuilder buff = new java.lang.StringBuilder((parentLen + (size * 5)));
        buff.append(parentPath);
        boolean needSlash = (parentLen > 0) && (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)));
        for (java.lang.String s : relativePaths) {
            assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(s);
            if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(s)) {
                throw new java.lang.IllegalArgumentException(("Cannot append absolute path " + s));
            }
            if (!(s.isEmpty())) {
                if (needSlash) {
                    buff.append('/');
                }
                buff.append(s);
                needSlash = true;
            }
        }
        return buff.toString();
    }

    @javax.annotation.Nonnull
    public static java.lang.String concat(java.lang.String parentPath, java.lang.String subPath) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(subPath);
        if (parentPath.isEmpty()) {
            return subPath;
        }else
            if (subPath.isEmpty()) {
                return parentPath;
            }else
                if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(subPath)) {
                    throw new java.lang.IllegalArgumentException(("Cannot append absolute path " + subPath));
                }


        java.lang.StringBuilder buff = new java.lang.StringBuilder(parentPath);
        if (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath))) {
            buff.append('/');
        }
        buff.append(subPath);
        return buff.toString();
    }

    public static boolean isAncestor(java.lang.String ancestor, java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(ancestor);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if ((ancestor.isEmpty()) || (path.isEmpty())) {
            return false;
        }
        if (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRoot(ancestor))) {
            ancestor += "/";
        }
        return path.startsWith(ancestor);
    }

    @javax.annotation.Nonnull
    public static java.lang.String relativize(java.lang.String parentPath, java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if (parentPath.equals(path)) {
            return "";
        }
        java.lang.String prefix = (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)) ? parentPath : parentPath + '/';
        if (path.startsWith(prefix)) {
            return path.substring(prefix.length());
        }
        throw new java.lang.IllegalArgumentException(((("Cannot relativize " + path) + " wrt. ") + parentPath));
    }

    public static int getNextSlash(java.lang.String path, int index) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return path.indexOf('/', index);
    }

    public static void validate(java.lang.String path) {
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return;
        }else
            if ((path.charAt(((path.length()) - 1))) == '/') {
                throw new java.lang.IllegalArgumentException(("Path may not end with '/': " + path));
            }

        char last = 0;
        for (int index = 0, len = path.length(); index < len; index++) {
            char c = path.charAt(index);
            if (c == '/') {
                if (last == '/') {
                    throw new java.lang.IllegalArgumentException(("Path may not contains '//': " + path));
                }
            }
            last = c;
        }
    }

    public static boolean isValid(java.lang.String path) {
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return true;
        }else
            if ((path.charAt(((path.length()) - 1))) == '/') {
                return false;
            }

        char last = 0;
        for (int index = 0, len = path.length(); index < len; index++) {
            char c = path.charAt(index);
            if (c == '/') {
                if (last == '/') {
                    return false;
                }
            }
            last = c;
        }
        return true;
    }
}
11:13:42.613 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
11:13:42.614 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #22
11:13:42.614 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.oak.commons.PathUtils$1:180 which is executed by 1 tests
1617144685
11:13:42.766 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:42.772 [pool-30-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (3 ms)
<> Total tests run: 6
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

11:13:42.992 [pool-29-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
PathUtils.java:103: error: ')' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                 ^
PathUtils.java:103: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                   ^
PathUtils.java:103: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                    ^
PathUtils.java:103: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                        ^
PathUtils.java:103: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                            ^
PathUtils.java:105: error: ')' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                  ^
PathUtils.java:105: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                    ^
PathUtils.java:105: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                     ^
PathUtils.java:105: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                         ^
PathUtils.java:105: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                              ^
11:13:43.054 [pool-29-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class PathUtils {
    private PathUtils() {
    }

    public static boolean denotesRoot(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path);
    }

    private static boolean denotesRootPath(java.lang.String path) {
        return "/".equals(path);
    }

    public static boolean isAbsolute(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(path);
    }

    private static boolean isAbsolutePath(java.lang.String path) {
        return (!(path.isEmpty())) && ((path.charAt(0)) == '/');
    }

    @javax.annotation.Nonnull
    public static java.lang.String getParentPath(java.lang.String path) {
        return org.apache.jackrabbit.oak.commons.PathUtils.getAncestorPath(path, 1);
    }

    @javax.annotation.Nonnull
    public static java.lang.String getAncestorPath(java.lang.String path, int nth) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if (((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) || (nth <= 0)) {
            return path;
        }
        int end = (path.length()) - 1;
        int pos = -1;
        while ((nth--) > 0) {
            pos = path.lastIndexOf('/', end);
            if (pos > 0) {
                end = pos - 1;
            }else
                if (pos == 0) {
                    return "/";
                }else {
                    return "";
                }

        } 
        return path.substring(0, pos);
    }

    @javax.annotation.Nonnull
    public static java.lang.String getName(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return "";
        }
        int end = (path.length()) - 1;
        int pos = path.lastIndexOf('/', end);
        if (pos != (-1)) {
            return path.substring((pos + 1), (end + 1));
        }
        return path;
    }

    public static int getDepth(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        int count = 1;
        int i = 0;
        if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(path)) {
            if (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path)) {
                return 0;
            }
            i++;
        }
        while (true) {
            i = (path.indexOf('/', i)) + 1;
            if (i == 0) {
                return count;
            }
            count++;
        } 
    }

    @javax.annotation.Nonnull
    public static java.lang.Iterable<java.lang.String> elements(final java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        final java.util.Iterator<java.lang.String> it = new java.util.Iterator<java.lang.String>() {
            int pos = (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolute(path)) ? 1 : 0;

            java.lang.String next;

            @java.lang.Override
            public boolean hasNext() {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(13).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("null",null);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("(next) == null",(next) == null);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectionEnds();
                }
                if (runtimeAngelicValue) if ((next) == null) {
                    if ((pos) >= (path.length())) {
                        return false;
                    }
                    int i = path.indexOf('/', pos);
                    if (i < 0) {
                        next = path.substring(pos);
                        pos = path.length();
                    }else {
                        next = path.substring(pos, i);
                        pos = i + 1;
                    }
                }
                return true;
            }

            @java.lang.Override
            public java.lang.String next() {
                if (hasNext()) {
                    java.lang.String next = this.next;
                    this.next = null;
                    return next;
                }
                throw new java.util.NoSuchElementException();
            }

            @java.lang.Override
            public void remove() {
                throw new java.lang.UnsupportedOperationException("remove");
            }
        };
        return new java.lang.Iterable<java.lang.String>() {
            @java.lang.Override
            public java.util.Iterator<java.lang.String> iterator() {
                return it;
            }
        };
    }

    @javax.annotation.Nonnull
    public static java.lang.String concat(java.lang.String parentPath, java.lang.String... relativePaths) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        int parentLen = parentPath.length();
        int size = relativePaths.length;
        java.lang.StringBuilder buff = new java.lang.StringBuilder((parentLen + (size * 5)));
        buff.append(parentPath);
        boolean needSlash = (parentLen > 0) && (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)));
        for (java.lang.String s : relativePaths) {
            assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(s);
            if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(s)) {
                throw new java.lang.IllegalArgumentException(("Cannot append absolute path " + s));
            }
            if (!(s.isEmpty())) {
                if (needSlash) {
                    buff.append('/');
                }
                buff.append(s);
                needSlash = true;
            }
        }
        return buff.toString();
    }

    @javax.annotation.Nonnull
    public static java.lang.String concat(java.lang.String parentPath, java.lang.String subPath) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(subPath);
        if (parentPath.isEmpty()) {
            return subPath;
        }else
            if (subPath.isEmpty()) {
                return parentPath;
            }else
                if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(subPath)) {
                    throw new java.lang.IllegalArgumentException(("Cannot append absolute path " + subPath));
                }


        java.lang.StringBuilder buff = new java.lang.StringBuilder(parentPath);
        if (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath))) {
            buff.append('/');
        }
        buff.append(subPath);
        return buff.toString();
    }

    public static boolean isAncestor(java.lang.String ancestor, java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(ancestor);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if ((ancestor.isEmpty()) || (path.isEmpty())) {
            return false;
        }
        if (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRoot(ancestor))) {
            ancestor += "/";
        }
        return path.startsWith(ancestor);
    }

    @javax.annotation.Nonnull
    public static java.lang.String relativize(java.lang.String parentPath, java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if (parentPath.equals(path)) {
            return "";
        }
        java.lang.String prefix = (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)) ? parentPath : parentPath + '/';
        if (path.startsWith(prefix)) {
            return path.substring(prefix.length());
        }
        throw new java.lang.IllegalArgumentException(((("Cannot relativize " + path) + " wrt. ") + parentPath));
    }

    public static int getNextSlash(java.lang.String path, int index) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return path.indexOf('/', index);
    }

    public static void validate(java.lang.String path) {
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return;
        }else
            if ((path.charAt(((path.length()) - 1))) == '/') {
                throw new java.lang.IllegalArgumentException(("Path may not end with '/': " + path));
            }

        char last = 0;
        for (int index = 0, len = path.length(); index < len; index++) {
            char c = path.charAt(index);
            if (c == '/') {
                if (last == '/') {
                    throw new java.lang.IllegalArgumentException(("Path may not contains '//': " + path));
                }
            }
            last = c;
        }
    }

    public static boolean isValid(java.lang.String path) {
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return true;
        }else
            if ((path.charAt(((path.length()) - 1))) == '/') {
                return false;
            }

        char last = 0;
        for (int index = 0, len = path.length(); index < len; index++) {
            char c = path.charAt(index);
            if (c == '/') {
                if (last == '/') {
                    return false;
                }
            }
            last = c;
        }
        return true;
    }
}
11:13:43.055 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
11:13:43.055 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:43.061 [pool-32-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (3 ms)
<> Total tests run: 6
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

11:13:43.328 [pool-31-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
PathUtils.java:103: error: ')' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                 ^
PathUtils.java:103: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                   ^
PathUtils.java:103: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                    ^
PathUtils.java:103: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                        ^
PathUtils.java:103: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                            ^
PathUtils.java:105: error: ')' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                  ^
PathUtils.java:105: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                    ^
PathUtils.java:105: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                     ^
PathUtils.java:105: error: illegal start of expression
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                         ^
PathUtils.java:105: error: ';' expected
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                                                                                                                                                                                              ^
11:13:43.382 [pool-31-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class PathUtils {
    private PathUtils() {
    }

    public static boolean denotesRoot(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path);
    }

    private static boolean denotesRootPath(java.lang.String path) {
        return "/".equals(path);
    }

    public static boolean isAbsolute(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(path);
    }

    private static boolean isAbsolutePath(java.lang.String path) {
        return (!(path.isEmpty())) && ((path.charAt(0)) == '/');
    }

    @javax.annotation.Nonnull
    public static java.lang.String getParentPath(java.lang.String path) {
        return org.apache.jackrabbit.oak.commons.PathUtils.getAncestorPath(path, 1);
    }

    @javax.annotation.Nonnull
    public static java.lang.String getAncestorPath(java.lang.String path, int nth) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if (((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) || (nth <= 0)) {
            return path;
        }
        int end = (path.length()) - 1;
        int pos = -1;
        while ((nth--) > 0) {
            pos = path.lastIndexOf('/', end);
            if (pos > 0) {
                end = pos - 1;
            }else
                if (pos == 0) {
                    return "/";
                }else {
                    return "";
                }

        } 
        return path.substring(0, pos);
    }

    @javax.annotation.Nonnull
    public static java.lang.String getName(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return "";
        }
        int end = (path.length()) - 1;
        int pos = path.lastIndexOf('/', end);
        if (pos != (-1)) {
            return path.substring((pos + 1), (end + 1));
        }
        return path;
    }

    public static int getDepth(java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        int count = 1;
        int i = 0;
        if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(path)) {
            if (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path)) {
                return 0;
            }
            i++;
        }
        while (true) {
            i = (path.indexOf('/', i)) + 1;
            if (i == 0) {
                return count;
            }
            count++;
        } 
    }

    @javax.annotation.Nonnull
    public static java.lang.Iterable<java.lang.String> elements(final java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        final java.util.Iterator<java.lang.String> it = new java.util.Iterator<java.lang.String>() {
            int pos = (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolute(path)) ? 1 : 0;

            java.lang.String next;

            @java.lang.Override
            public boolean hasNext() {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = (next) == null;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(14).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos",org.apache.jackrabbit.oak.commons.PathUtils.1.this.pos);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("null",null);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("org.apache.jackrabbit.oak.commons.PathUtils.1.this.next",org.apache.jackrabbit.oak.commons.PathUtils.1.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("(next) == null",(next) == null);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectionEnds();
                }
                if (runtimeAngelicValue) {
                    if ((pos) >= (path.length())) {
                        return false;
                    }
                    int i = path.indexOf('/', pos);
                    if (i < 0) {
                        next = path.substring(pos);
                        pos = path.length();
                    }else {
                        next = path.substring(pos, i);
                        pos = i + 1;
                    }
                }
                return true;
            }

            @java.lang.Override
            public java.lang.String next() {
                if (hasNext()) {
                    java.lang.String next = this.next;
                    this.next = null;
                    return next;
                }
                throw new java.util.NoSuchElementException();
            }

            @java.lang.Override
            public void remove() {
                throw new java.lang.UnsupportedOperationException("remove");
            }
        };
        return new java.lang.Iterable<java.lang.String>() {
            @java.lang.Override
            public java.util.Iterator<java.lang.String> iterator() {
                return it;
            }
        };
    }

    @javax.annotation.Nonnull
    public static java.lang.String concat(java.lang.String parentPath, java.lang.String... relativePaths) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        int parentLen = parentPath.length();
        int size = relativePaths.length;
        java.lang.StringBuilder buff = new java.lang.StringBuilder((parentLen + (size * 5)));
        buff.append(parentPath);
        boolean needSlash = (parentLen > 0) && (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)));
        for (java.lang.String s : relativePaths) {
            assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(s);
            if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(s)) {
                throw new java.lang.IllegalArgumentException(("Cannot append absolute path " + s));
            }
            if (!(s.isEmpty())) {
                if (needSlash) {
                    buff.append('/');
                }
                buff.append(s);
                needSlash = true;
            }
        }
        return buff.toString();
    }

    @javax.annotation.Nonnull
    public static java.lang.String concat(java.lang.String parentPath, java.lang.String subPath) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(subPath);
        if (parentPath.isEmpty()) {
            return subPath;
        }else
            if (subPath.isEmpty()) {
                return parentPath;
            }else
                if (org.apache.jackrabbit.oak.commons.PathUtils.isAbsolutePath(subPath)) {
                    throw new java.lang.IllegalArgumentException(("Cannot append absolute path " + subPath));
                }


        java.lang.StringBuilder buff = new java.lang.StringBuilder(parentPath);
        if (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath))) {
            buff.append('/');
        }
        buff.append(subPath);
        return buff.toString();
    }

    public static boolean isAncestor(java.lang.String ancestor, java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(ancestor);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if ((ancestor.isEmpty()) || (path.isEmpty())) {
            return false;
        }
        if (!(org.apache.jackrabbit.oak.commons.PathUtils.denotesRoot(ancestor))) {
            ancestor += "/";
        }
        return path.startsWith(ancestor);
    }

    @javax.annotation.Nonnull
    public static java.lang.String relativize(java.lang.String parentPath, java.lang.String path) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(parentPath);
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        if (parentPath.equals(path)) {
            return "";
        }
        java.lang.String prefix = (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(parentPath)) ? parentPath : parentPath + '/';
        if (path.startsWith(prefix)) {
            return path.substring(prefix.length());
        }
        throw new java.lang.IllegalArgumentException(((("Cannot relativize " + path) + " wrt. ") + parentPath));
    }

    public static int getNextSlash(java.lang.String path, int index) {
        assert org.apache.jackrabbit.oak.commons.PathUtils.isValid(path);
        return path.indexOf('/', index);
    }

    public static void validate(java.lang.String path) {
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return;
        }else
            if ((path.charAt(((path.length()) - 1))) == '/') {
                throw new java.lang.IllegalArgumentException(("Path may not end with '/': " + path));
            }

        char last = 0;
        for (int index = 0, len = path.length(); index < len; index++) {
            char c = path.charAt(index);
            if (c == '/') {
                if (last == '/') {
                    throw new java.lang.IllegalArgumentException(("Path may not contains '//': " + path));
                }
            }
            last = c;
        }
    }

    public static boolean isValid(java.lang.String path) {
        if ((path.isEmpty()) || (org.apache.jackrabbit.oak.commons.PathUtils.denotesRootPath(path))) {
            return true;
        }else
            if ((path.charAt(((path.length()) - 1))) == '/') {
                return false;
            }

        char last = 0;
        for (int index = 0, len = path.length(); index < len; index++) {
            char c = path.charAt(index);
            if (c == '/') {
                if (last == '/') {
                    return false;
                }
            }
            last = c;
        }
        return true;
    }
}
11:13:43.383 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
11:13:43.383 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #23
11:13:43.383 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.oak.commons.PathUtils:294 which is executed by 1 tests
1617144685
11:13:43.534 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #24
11:13:43.535 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.oak.commons.PathUtils:291 which is executed by 1 tests
1617144685
11:13:43.661 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:43.716 [pool-34-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 6
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:44.351 [pool-35-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (5 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:44.352 [pool-36-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

11:13:44.353 [pool-33-thread-1] DEBUG tests.output - Failing tests with false: 
[test(org.apache.jackrabbit.oak.commons.PathTest): null]
11:13:44.353 [pool-33-thread-1] DEBUG tests.output - Failing tests with true: 
[test(org.apache.jackrabbit.oak.commons.PathTest): null]
11:13:44.353 [pool-33-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.jackrabbit.oak.commons.PathUtils:291.
11:13:44.353 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:44.358 [pool-38-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (2 ms)
<> Total tests run: 6
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:44.674 [pool-39-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:202)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:56)
11:13:44.679 [pool-40-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:202)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:56)

11:13:44.679 [pool-37-thread-1] DEBUG tests.output - Failing tests with false: 
[test(org.apache.jackrabbit.oak.commons.PathTest): null]
11:13:44.679 [pool-37-thread-1] DEBUG tests.output - Failing tests with true: 
[test(org.apache.jackrabbit.oak.commons.PathTest): null]
11:13:44.679 [pool-37-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.jackrabbit.oak.commons.PathUtils:291.
11:13:44.679 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #25
11:13:44.679 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.oak.commons.PathUtils:288 which is executed by 1 tests
1617144685
11:13:44.808 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:44.814 [pool-42-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (3 ms)
<> Total tests run: 6
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:45.105 [pool-43-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:45.106 [pool-44-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

11:13:45.107 [pool-41-thread-1] DEBUG tests.output - Failing tests with false: 
[test(org.apache.jackrabbit.oak.commons.PathTest): null]
11:13:45.107 [pool-41-thread-1] DEBUG tests.output - Failing tests with true: 
[test(org.apache.jackrabbit.oak.commons.PathTest): null]
11:13:45.107 [pool-41-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.jackrabbit.oak.commons.PathUtils:288.
11:13:45.107 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:45.114 [pool-46-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (3 ms)
<> Total tests run: 6
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:45.391 [pool-47-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:202)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:56)
11:13:45.393 [pool-48-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:202)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:56)

11:13:45.393 [pool-45-thread-1] DEBUG tests.output - Failing tests with false: 
[test(org.apache.jackrabbit.oak.commons.PathTest): null]
11:13:45.394 [pool-45-thread-1] DEBUG tests.output - Failing tests with true: 
[test(org.apache.jackrabbit.oak.commons.PathTest): null]
11:13:45.394 [pool-45-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.jackrabbit.oak.commons.PathUtils:288.
11:13:45.394 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #26
11:13:45.394 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.oak.commons.PathUtils:287 which is executed by 1 tests
1617144685
11:13:45.524 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:45.530 [pool-50-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (3 ms)
<> Total tests run: 6
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:45.805 [pool-51-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:45.806 [pool-52-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

11:13:45.806 [pool-49-thread-1] DEBUG tests.output - Failing tests with false: 
[test(org.apache.jackrabbit.oak.commons.PathTest): null]
11:13:45.806 [pool-49-thread-1] DEBUG tests.output - Failing tests with true: 
[test(org.apache.jackrabbit.oak.commons.PathTest): null]
11:13:45.806 [pool-49-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.jackrabbit.oak.commons.PathUtils:287.
11:13:45.806 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #27
11:13:45.807 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.oak.commons.PathUtils:286 which is executed by 1 tests
1617144685
11:13:45.965 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:45.971 [pool-54-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (3 ms)
<> Total tests run: 6
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:46.328 [pool-55-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:46.330 [pool-56-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

11:13:46.341 [pool-53-thread-1] DEBUG tests.output - Failing tests with false: 
[test(org.apache.jackrabbit.oak.commons.PathTest): null]
11:13:46.342 [pool-53-thread-1] DEBUG tests.output - Failing tests with true: 
[test(org.apache.jackrabbit.oak.commons.PathTest): null]
11:13:46.342 [pool-53-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.jackrabbit.oak.commons.PathUtils:286.
11:13:46.342 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #28
11:13:46.342 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.oak.commons.PathUtils:150 which is executed by 1 tests
1617144685
11:13:46.531 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:46.542 [pool-58-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (2 ms)
<> Total tests run: 6
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

junit.framework.AssertionFailedError: expected:<0> but was:<1>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:234)
    at junit.framework.Assert.assertEquals(Assert.java:241)
    at junit.framework.TestCase.assertEquals(TestCase.java:409)
11:13:46.799 [pool-59-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[expected:<0> but was:<1>]
junit.framework.AssertionFailedError: expected:<0> but was:<1>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:234)
    at junit.framework.Assert.assertEquals(Assert.java:241)
    at junit.framework.TestCase.assertEquals(TestCase.java:409)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:46.801 [pool-60-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

11:13:46.801 [pool-57-thread-1] DEBUG tests.output - Failing tests with false: 
[test(org.apache.jackrabbit.oak.commons.PathTest): expected:<0> but was:<1>]
11:13:46.801 [pool-57-thread-1] DEBUG tests.output - Failing tests with true: 
[test(org.apache.jackrabbit.oak.commons.PathTest): null]
11:13:46.801 [pool-57-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.jackrabbit.oak.commons.PathUtils:150.
11:13:46.802 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #29
11:13:46.802 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.oak.commons.PathUtils:268 which is executed by 2 tests
1617144685
11:13:46.941 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:46.946 [pool-62-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (2 ms)
<> Total tests run: 6
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

junit.framework.ComparisonFailure: expected:<parent/[]child> but was:<parent/[//]child>
    at junit.framework.Assert.assertEquals(Assert.java:100)
    at junit.framework.Assert.assertEquals(Assert.java:107)
    at junit.framework.TestCase.assertEquals(TestCase.java:269)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:99)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:56)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:13:47.208 [pool-63-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[expected:<parent/[]child> but was:<parent/[//]child>]
junit.framework.ComparisonFailure: expected:<parent/[]child> but was:<parent/[//]child>    at junit.framework.Assert.assertEquals(Assert.java:100)
    at junit.framework.Assert.assertEquals(Assert.java:107)
    at junit.framework.TestCase.assertEquals(TestCase.java:269)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:99)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:56)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:47.210 [pool-64-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

11:13:47.210 [pool-61-thread-1] DEBUG tests.output - Failing tests with false: 
[test(org.apache.jackrabbit.oak.commons.PathTest): expected:<parent/[]child> but was:<parent/[//]child>]
11:13:47.210 [pool-61-thread-1] DEBUG tests.output - Failing tests with true: 
[test(org.apache.jackrabbit.oak.commons.PathTest): null]
11:13:47.210 [pool-61-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.jackrabbit.oak.commons.PathUtils:268.
11:13:47.210 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #30
11:13:47.211 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.oak.commons.PathUtils:248 which is executed by 2 tests
1617144685
11:13:47.335 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #31
11:13:47.335 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.oak.commons.PathUtils:245 which is executed by 2 tests
1617144685
11:13:47.458 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:47.463 [pool-66-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (2 ms)
<> Total tests run: 6
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

junit.framework.ComparisonFailure: expected:<child[/]child> but was:<child[]child>
    at junit.framework.Assert.assertEquals(Assert.java:100)
    at junit.framework.Assert.assertEquals(Assert.java:107)
    at junit.framework.TestCase.assertEquals(TestCase.java:269)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:123)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:56)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:13:47.732 [pool-67-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[expected:<child[/]child> but was:<child[]child>]
junit.framework.ComparisonFailure: expected:<child[/]child> but was:<child[]child>    at junit.framework.Assert.assertEquals(Assert.java:100)
    at junit.framework.Assert.assertEquals(Assert.java:107)
    at junit.framework.TestCase.assertEquals(TestCase.java:269)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:123)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:56)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:47.734 [pool-68-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

11:13:47.735 [pool-65-thread-1] DEBUG tests.output - Failing tests with false: 
[test(org.apache.jackrabbit.oak.commons.PathTest): expected:<child[/]child> but was:<child[]child>]
11:13:47.735 [pool-65-thread-1] DEBUG tests.output - Failing tests with true: 
[test(org.apache.jackrabbit.oak.commons.PathTest): null]
11:13:47.735 [pool-65-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.jackrabbit.oak.commons.PathUtils:245.
11:13:47.735 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #32
11:13:47.735 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.oak.commons.PathUtils:244 which is executed by 2 tests
1617144685
11:13:47.860 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:47.865 [pool-70-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (2 ms)
<> Total tests run: 6
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

junit.framework.ComparisonFailure: expected:<parent/[child/child]> but was:<parent/[/]>
    at junit.framework.Assert.assertEquals(Assert.java:100)
    at junit.framework.Assert.assertEquals(Assert.java:107)
    at junit.framework.TestCase.assertEquals(TestCase.java:269)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:120)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:56)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:13:48.122 [pool-71-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[expected:<parent/[child/child]> but was:<parent/[/]>]
junit.framework.ComparisonFailure: expected:<parent/[child/child]> but was:<parent/[/]>    at junit.framework.Assert.assertEquals(Assert.java:100)
    at junit.framework.Assert.assertEquals(Assert.java:107)
    at junit.framework.TestCase.assertEquals(TestCase.java:269)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:120)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:56)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:48.123 [pool-72-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

11:13:48.126 [pool-69-thread-1] DEBUG tests.output - Failing tests with false: 
[test(org.apache.jackrabbit.oak.commons.PathTest): expected:<parent/[child/child]> but was:<parent/[/]>]
11:13:48.126 [pool-69-thread-1] DEBUG tests.output - Failing tests with true: 
[test(org.apache.jackrabbit.oak.commons.PathTest): null]
11:13:48.126 [pool-69-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.jackrabbit.oak.commons.PathUtils:244.
11:13:48.126 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #33
11:13:48.126 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.oak.commons.PathUtils:242 which is executed by 2 tests
1617144685
11:13:48.252 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:48.257 [pool-74-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (2 ms)
<> Total tests run: 6
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

junit.framework.ComparisonFailure: expected:<parent[/child/]child> but was:<parent[child]child>
    at junit.framework.Assert.assertEquals(Assert.java:100)
    at junit.framework.Assert.assertEquals(Assert.java:107)
    at junit.framework.TestCase.assertEquals(TestCase.java:269)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:120)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:56)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:13:48.514 [pool-75-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[expected:<parent[/child/]child> but was:<parent[child]child>]
junit.framework.ComparisonFailure: expected:<parent[/child/]child> but was:<parent[child]child>    at junit.framework.Assert.assertEquals(Assert.java:100)
    at junit.framework.Assert.assertEquals(Assert.java:107)
    at junit.framework.TestCase.assertEquals(TestCase.java:269)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:120)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:56)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:48.515 [pool-76-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

11:13:48.517 [pool-73-thread-1] DEBUG tests.output - Failing tests with false: 
[test(org.apache.jackrabbit.oak.commons.PathTest): expected:<parent[/child/]child> but was:<parent[child]child>]
11:13:48.517 [pool-73-thread-1] DEBUG tests.output - Failing tests with true: 
[test(org.apache.jackrabbit.oak.commons.PathTest): null]
11:13:48.518 [pool-73-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.jackrabbit.oak.commons.PathUtils:242.
11:13:48.518 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #34
11:13:48.518 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.oak.commons.PathUtils:241 which is executed by 2 tests
1617144685
11:13:48.652 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:48.657 [pool-78-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (2 ms)
<> Total tests run: 6
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

junit.framework.ComparisonFailure: expected:<parent[/child/]child> but was:<parent[child]child>
    at junit.framework.Assert.assertEquals(Assert.java:100)
    at junit.framework.Assert.assertEquals(Assert.java:107)
    at junit.framework.TestCase.assertEquals(TestCase.java:269)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:120)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:56)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:13:48.947 [pool-79-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[expected:<parent[/child/]child> but was:<parent[child]child>]
junit.framework.ComparisonFailure: expected:<parent[/child/]child> but was:<parent[child]child>    at junit.framework.Assert.assertEquals(Assert.java:100)
    at junit.framework.Assert.assertEquals(Assert.java:107)
    at junit.framework.TestCase.assertEquals(TestCase.java:269)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:120)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:56)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:48.948 [pool-80-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

11:13:48.950 [pool-77-thread-1] DEBUG tests.output - Failing tests with false: 
[test(org.apache.jackrabbit.oak.commons.PathTest): expected:<parent[/child/]child> but was:<parent[child]child>]
11:13:48.950 [pool-77-thread-1] DEBUG tests.output - Failing tests with true: 
[test(org.apache.jackrabbit.oak.commons.PathTest): null]
11:13:48.950 [pool-77-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.jackrabbit.oak.commons.PathUtils:241.
11:13:48.951 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:48.956 [pool-82-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (2 ms)
<> Total tests run: 6
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

junit.framework.ComparisonFailure: expected:<parent[/child/]child> but was:<parent[child]child>
    at junit.framework.Assert.assertEquals(Assert.java:100)
    at junit.framework.Assert.assertEquals(Assert.java:107)
    at junit.framework.TestCase.assertEquals(TestCase.java:269)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:120)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:56)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:13:49.200 [pool-83-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[expected:<parent[/child/]child> but was:<parent[child]child>]
junit.framework.ComparisonFailure: expected:<parent[/child/]child> but was:<parent[child]child>    at junit.framework.Assert.assertEquals(Assert.java:100)
    at junit.framework.Assert.assertEquals(Assert.java:107)
    at junit.framework.TestCase.assertEquals(TestCase.java:269)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:120)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:56)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

junit.framework.ComparisonFailure: expected:<[]child/child> but was:<[/]child/child>
    at junit.framework.Assert.assertEquals(Assert.java:100)
    at junit.framework.Assert.assertEquals(Assert.java:107)
    at junit.framework.TestCase.assertEquals(TestCase.java:269)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:123)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:56)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:13:49.202 [pool-84-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[expected:<[]child/child> but was:<[/]child/child>]
junit.framework.ComparisonFailure: expected:<[]child/child> but was:<[/]child/child>    at junit.framework.Assert.assertEquals(Assert.java:100)
    at junit.framework.Assert.assertEquals(Assert.java:107)
    at junit.framework.TestCase.assertEquals(TestCase.java:269)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:123)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:56)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:13:49.202 [pool-81-thread-1] DEBUG tests.output - Failing tests with false: 
[test(org.apache.jackrabbit.oak.commons.PathTest): expected:<parent[/child/]child> but was:<parent[child]child>]
11:13:49.202 [pool-81-thread-1] DEBUG tests.output - Failing tests with true: 
[test(org.apache.jackrabbit.oak.commons.PathTest): expected:<[]child/child> but was:<[/]child/child>]
11:13:49.203 [pool-81-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.jackrabbit.oak.commons.PathUtils:241.
11:13:49.203 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #35
11:13:49.203 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.oak.commons.PathUtils:240 which is executed by 2 tests
1617144685
11:13:49.323 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:49.328 [pool-86-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (2 ms)
<> Total tests run: 6
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

junit.framework.ComparisonFailure: expected:<parent[/child/child]> but was:<parent[]>
    at junit.framework.Assert.assertEquals(Assert.java:100)
    at junit.framework.Assert.assertEquals(Assert.java:107)
    at junit.framework.TestCase.assertEquals(TestCase.java:269)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:120)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:56)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:13:49.599 [pool-87-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[expected:<parent[/child/child]> but was:<parent[]>]
junit.framework.ComparisonFailure: expected:<parent[/child/child]> but was:<parent[]>    at junit.framework.Assert.assertEquals(Assert.java:100)
    at junit.framework.Assert.assertEquals(Assert.java:107)
    at junit.framework.TestCase.assertEquals(TestCase.java:269)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:120)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:56)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:49.600 [pool-88-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

11:13:49.601 [pool-85-thread-1] DEBUG tests.output - Failing tests with false: 
[test(org.apache.jackrabbit.oak.commons.PathTest): expected:<parent[/child/child]> but was:<parent[]>]
11:13:49.601 [pool-85-thread-1] DEBUG tests.output - Failing tests with true: 
[test(org.apache.jackrabbit.oak.commons.PathTest): null]
11:13:49.601 [pool-85-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.jackrabbit.oak.commons.PathUtils:240.
11:13:49.601 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:49.606 [pool-90-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (3 ms)
<> Total tests run: 6
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

junit.framework.ComparisonFailure: expected:<parent[/child/child]> but was:<parent[]>
    at junit.framework.Assert.assertEquals(Assert.java:100)
    at junit.framework.Assert.assertEquals(Assert.java:107)
    at junit.framework.TestCase.assertEquals(TestCase.java:269)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:120)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:56)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:13:49.852 [pool-91-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[expected:<parent[/child/child]> but was:<parent[]>]
junit.framework.ComparisonFailure: expected:<parent[/child/child]> but was:<parent[]>    at junit.framework.Assert.assertEquals(Assert.java:100)
    at junit.framework.Assert.assertEquals(Assert.java:107)
    at junit.framework.TestCase.assertEquals(TestCase.java:269)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:120)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:56)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

junit.framework.ComparisonFailure: expected:<parent/[]child> but was:<parent/[/]child>
    at junit.framework.Assert.assertEquals(Assert.java:100)
    at junit.framework.Assert.assertEquals(Assert.java:107)
    at junit.framework.TestCase.assertEquals(TestCase.java:269)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:121)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:56)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:13:49.853 [pool-92-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[expected:<parent/[]child> but was:<parent/[/]child>]
junit.framework.ComparisonFailure: expected:<parent/[]child> but was:<parent/[/]child>    at junit.framework.Assert.assertEquals(Assert.java:100)
    at junit.framework.Assert.assertEquals(Assert.java:107)
    at junit.framework.TestCase.assertEquals(TestCase.java:269)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:121)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:56)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:13:49.854 [pool-89-thread-1] DEBUG tests.output - Failing tests with false: 
[test(org.apache.jackrabbit.oak.commons.PathTest): expected:<parent[/child/child]> but was:<parent[]>]
11:13:49.854 [pool-89-thread-1] DEBUG tests.output - Failing tests with true: 
[test(org.apache.jackrabbit.oak.commons.PathTest): expected:<parent/[]child> but was:<parent/[/]child>]
11:13:49.854 [pool-89-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.jackrabbit.oak.commons.PathUtils:240.
11:13:49.854 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #36
11:13:49.854 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.oak.commons.PathUtils:159 which is executed by 2 tests
1617144685
11:13:49.975 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:49.980 [pool-94-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (2 ms)
<> Total tests run: 6
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

junit.framework.AssertionFailedError: expected:<2> but was:<1>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:234)
    at junit.framework.Assert.assertEquals(Assert.java:241)
    at junit.framework.TestCase.assertEquals(TestCase.java:409)
11:13:50.211 [pool-95-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[expected:<2> but was:<1>]
junit.framework.AssertionFailedError: expected:<2> but was:<1>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:234)
    at junit.framework.Assert.assertEquals(Assert.java:241)
    at junit.framework.TestCase.assertEquals(TestCase.java:409)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:50.212 [pool-96-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

11:13:50.213 [pool-93-thread-1] DEBUG tests.output - Failing tests with false: 
[test(org.apache.jackrabbit.oak.commons.PathTest): expected:<2> but was:<1>]
11:13:50.213 [pool-93-thread-1] DEBUG tests.output - Failing tests with true: 
[test(org.apache.jackrabbit.oak.commons.PathTest): null]
11:13:50.213 [pool-93-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.jackrabbit.oak.commons.PathUtils:159.
11:13:50.213 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #37
11:13:50.213 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.oak.commons.PathUtils:157 which is executed by 2 tests
1617144685
11:13:50.331 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)
11:13:50.337 [pool-98-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (2 ms)
<> Total tests run: 6
<> Ignored tests: 0
<> Failed tests: 1
~ test(org.apache.jackrabbit.oak.commons.PathTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertFalse(Assert.java:39)
    at junit.framework.Assert.assertFalse(Assert.java:47)
    at junit.framework.TestCase.assertFalse(TestCase.java:219)
    at org.apache.jackrabbit.oak.commons.PathTest.test(PathTest.java:199)

11:18:11.964 [pool-97-thread-1] DEBUG xxl.java.junit.TestSuiteExecution - Timeout after 200 seconds. Infinite loop?
11:19:55.061 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
11:20:29.878 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #38
11:21:37.212 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.jackrabbit.oak.commons.PathUtils:156 which is executed by 2 tests
12:27:24.922 [main] ERROR fr.inria.lille.repair.Main - Timeout: execution time > 60 MINUTES
java.util.concurrent.TimeoutException: null
	at java.util.concurrent.FutureTask.get(FutureTask.java:205) ~[na:1.8.0_181]
	at fr.inria.lille.repair.Main.main(Main.java:106) ~[nopol.jar:na]
TIMEOUT
Command exited with non-zero status 255
18611.22user 11.95system 1:18:35elapsed 394%CPU (0avgtext+0avgdata 4488920maxresident)k
39880inputs+11664outputs (4major+1214336minor)pagefaults 0swaps


Node: graphene-24.nancy.grid5000.fr



Date: Sat Dec 29 12:32:07 EST 2018

