cd /tmp/Nopol_Bug_dot_jar_Commons-Math_4cc9a49d;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -Xmx4g -Xms1g -cp /home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin//../lib/tools.jar fr.inria.lille.repair.Main \
	--mode repair \
	--type pre_then_cond \
	--oracle angelic \
	--synthesis smt \
	--flocal gzoltar \
	--json \
	--solver z3 \
	--solver-path /home/tdurieux/defects4j4repair/script/../libs/z3/build/z3 \
	--complianceLevel 7 \
	--source src/main/java \
	--classpath "target/classes:target/test-classes:/home/tdurieux/.m2/repository/junit/junit/4.4/junit-4.4.jar:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar";
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
09:17:18.432 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Source files: [src/main/java]
09:17:18.758 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Classpath: [file:/tmp/Nopol_Bug_dot_jar_Commons-Math_4cc9a49d/target/classes/, file:/tmp/Nopol_Bug_dot_jar_Commons-Math_4cc9a49d/target/test-classes/, file:/home/tdurieux/.m2/repository/junit/junit/4.4/junit-4.4.jar, file:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar]
09:17:18.759 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Statement type: PRE_THEN_COND
09:17:18.759 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Args: [org.apache.commons.math.ArgumentOutsideDomainExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.DuplicateSampleAbscissaExceptionTest, org.apache.commons.math.FunctionEvaluationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.analysis.BinaryFunctionTest, org.apache.commons.math.analysis.ComposableFunctionTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.SmoothingBicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.dfp.DfpDecTest, org.apache.commons.math.dfp.DfpMathTest, org.apache.commons.math.dfp.DfpTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.estimation.EstimatedParameterTest, org.apache.commons.math.estimation.GaussNewtonEstimatorTest, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest, org.apache.commons.math.estimation.MinpackTest, org.apache.commons.math.estimation.WeightedMeasurementTest, org.apache.commons.math.exception.DimensionMismatchExceptionTest, org.apache.commons.math.exception.MatrixDimensionMismatchExceptionTest, org.apache.commons.math.exception.NonMonotonousSequenceExceptionTest, org.apache.commons.math.exception.NotPositiveExceptionTest, org.apache.commons.math.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math.exception.OutOfRangeExceptionTest, org.apache.commons.math.exception.util.ArgUtilsTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.geometry.FrenchVector3DFormatTest, org.apache.commons.math.geometry.RotationOrderTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.Vector3DFormatTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.linear.AbstractRealVectorTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BigMatrixImplTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.InvalidMatrixExceptionTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.MatrixIndexExceptionTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.RealMatrixImplTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.events.EventStateTest, org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobiansTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.direct.MultiDirectionalTest, org.apache.commons.math.optimization.direct.NelderMeadTest, org.apache.commons.math.optimization.direct.PowellOptimizerTest, org.apache.commons.math.optimization.fitting.CurveFitterTest, org.apache.commons.math.optimization.fitting.GaussianFitterTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.ParametricGaussianFunctionTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.univariate.BracketFinderTest, org.apache.commons.math.optimization.univariate.BrentOptimizerTest, org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.random.Well1024aTest, org.apache.commons.math.random.Well19937aTest, org.apache.commons.math.random.Well19937cTest, org.apache.commons.math.random.Well44497aTest, org.apache.commons.math.random.Well44497bTest, org.apache.commons.math.random.Well512aTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.FastMathTest, org.apache.commons.math.util.IncrementorTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.MultidimensionalCounterTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.TransformerMapTest]
09:17:18.761 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/home/tdurieux/defects4j4repair/script/../libs/z3/build/z3', projectSources=[src/main/java], projectClasspath='[Ljava.net.URL;@66d33a', projectTests=[org.apache.commons.math.ArgumentOutsideDomainExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.DuplicateSampleAbscissaExceptionTest, org.apache.commons.math.FunctionEvaluationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.analysis.BinaryFunctionTest, org.apache.commons.math.analysis.ComposableFunctionTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.SmoothingBicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.dfp.DfpDecTest, org.apache.commons.math.dfp.DfpMathTest, org.apache.commons.math.dfp.DfpTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.estimation.EstimatedParameterTest, org.apache.commons.math.estimation.GaussNewtonEstimatorTest, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest, org.apache.commons.math.estimation.MinpackTest, org.apache.commons.math.estimation.WeightedMeasurementTest, org.apache.commons.math.exception.DimensionMismatchExceptionTest, org.apache.commons.math.exception.MatrixDimensionMismatchExceptionTest, org.apache.commons.math.exception.NonMonotonousSequenceExceptionTest, org.apache.commons.math.exception.NotPositiveExceptionTest, org.apache.commons.math.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math.exception.OutOfRangeExceptionTest, org.apache.commons.math.exception.util.ArgUtilsTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.geometry.FrenchVector3DFormatTest, org.apache.commons.math.geometry.RotationOrderTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.Vector3DFormatTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.linear.AbstractRealVectorTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BigMatrixImplTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.InvalidMatrixExceptionTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.MatrixIndexExceptionTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.RealMatrixImplTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.events.EventStateTest, org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobiansTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.direct.MultiDirectionalTest, org.apache.commons.math.optimization.direct.NelderMeadTest, org.apache.commons.math.optimization.direct.PowellOptimizerTest, org.apache.commons.math.optimization.fitting.CurveFitterTest, org.apache.commons.math.optimization.fitting.GaussianFitterTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.ParametricGaussianFunctionTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.univariate.BracketFinderTest, org.apache.commons.math.optimization.univariate.BrentOptimizerTest, org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.random.Well1024aTest, org.apache.commons.math.random.Well19937aTest, org.apache.commons.math.random.Well19937cTest, org.apache.commons.math.random.Well44497aTest, org.apache.commons.math.random.Well44497bTest, org.apache.commons.math.random.Well512aTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.FastMathTest, org.apache.commons.math.util.IncrementorTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.MultidimensionalCounterTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.TransformerMapTest], complianceLevel=7, outputFolder=., json=true}
09:17:18.762 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Available processors (cores): 4
09:17:18.768 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Free memory: 925 MB
09:17:18.768 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Maximum memory: 3 GB
09:17:18.768 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Total memory available to JVM: 981 MB
09:17:18.768 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Java version: 1.8.0_181
09:17:18.769 [main] INFO  fr.inria.lille.repair.nopol.NoPol - JAVA_HOME: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/
09:17:18.769 [main] INFO  fr.inria.lille.repair.nopol.NoPol - PATH: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:/usr/lib/oar/oardodo:/usr/lib/oar/oardodo:/usr/local/bin:/usr/bin:/bin:/usr/games
09:17:54.125 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #1
09:17:54.125 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.MathRuntimeException$4:401 which is executed by 1 tests
-1593974112
09:17:54.448 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #2
09:17:54.448 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.MathRuntimeException$4:395 which is executed by 1 tests
-1593974112
09:17:54.671 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #3
09:17:54.671 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.PoissonDistributionImpl:173 which is executed by 1 tests
-1580159410
09:17:54.766 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #4
09:17:54.766 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.PoissonDistributionImpl:172 which is executed by 1 tests
-1580159410
09:17:54.861 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:17:55.229 [pool-4-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (341 ms)
<> Total tests run: 12
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

junit.framework.AssertionFailedError: negative mean: NotStrictlyPositiveException expected
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.TestCase.fail(TestCase.java:227)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:141)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
09:17:56.535 [pool-5-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[negative mean: NotStrictlyPositiveException expected]
junit.framework.AssertionFailedError: negative mean: NotStrictlyPositiveException expected    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.TestCase.fail(TestCase.java:227)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:141)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:74)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:40)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:18)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:17:56.547 [pool-6-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (10 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:74)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:40)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:18)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

09:17:56.548 [pool-3-thread-1] DEBUG tests.output - Failing tests with false: 
[testMean(org.apache.commons.math.distribution.PoissonDistributionTest): negative mean: NotStrictlyPositiveException expected]
09:17:56.548 [pool-3-thread-1] DEBUG tests.output - Failing tests with true: 
[testMean(org.apache.commons.math.distribution.PoissonDistributionTest): the Poisson mean must be positive (-1)]
09:17:56.549 [pool-3-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.PoissonDistributionImpl:172.
09:17:56.549 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #5
09:17:56.549 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.MathRuntimeException:39 which is executed by 2 tests
-1593974112
09:17:56.665 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #6
09:17:56.665 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.MathRuntimeException:136 which is executed by 3 tests
-1593974112
09:17:56.770 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #7
09:17:56.770 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.PoissonDistributionImpl:179 which is executed by 15 tests
-1580159410
09:17:56.862 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #8
09:17:56.862 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.PoissonDistributionImpl:178 which is executed by 15 tests
-1580159410
09:17:56.953 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:17:57.196 [pool-8-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (235 ms)
<> Total tests run: 12
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:54)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:40)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:18)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:17:57.428 [pool-9-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (38 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:54)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:40)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:18)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:54)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:40)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:18)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:17:57.440 [pool-10-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:54)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:40)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:18)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

09:17:57.442 [pool-7-thread-1] DEBUG tests.output - Failing tests with false: 
[testMean(org.apache.commons.math.distribution.PoissonDistributionTest): the Poisson mean must be positive (-1)]
09:17:57.442 [pool-7-thread-1] DEBUG tests.output - Failing tests with true: 
[testMean(org.apache.commons.math.distribution.PoissonDistributionTest): the Poisson mean must be positive (-1)]
09:17:57.442 [pool-7-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.PoissonDistributionImpl:178.
09:17:57.442 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #9
09:17:57.442 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.PoissonDistributionImpl:177 which is executed by 15 tests
-1580159410
09:17:57.533 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:17:57.854 [pool-12-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (317 ms)
<> Total tests run: 12
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:54)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:40)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:18)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:17:58.071 [pool-13-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (37 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:54)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:40)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:18)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:54)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:40)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:18)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:17:58.075 [pool-14-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:54)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:40)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:18)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

09:17:58.076 [pool-11-thread-1] DEBUG tests.output - Failing tests with false: 
[testMean(org.apache.commons.math.distribution.PoissonDistributionTest): the Poisson mean must be positive (-1)]
09:17:58.076 [pool-11-thread-1] DEBUG tests.output - Failing tests with true: 
[testMean(org.apache.commons.math.distribution.PoissonDistributionTest): the Poisson mean must be positive (-1)]
09:17:58.076 [pool-11-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.PoissonDistributionImpl:177.
09:17:58.076 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #10
09:17:58.077 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.PoissonDistributionImpl:176 which is executed by 15 tests
-1580159410
09:17:58.166 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:17:58.396 [pool-16-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (224 ms)
<> Total tests run: 12
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.NullPointerException
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:79)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:40)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:18)
    at org.apache.commons.math.distribution.PoissonDistributionTest.makeDistribution(PoissonDistributionTest.java:49)
    at org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setUp(IntegerDistributionAbstractTest.java:114)
    at junit.framework.TestCase.runBare(TestCase.java:139)
09:17:58.589 [pool-17-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (28 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[null]
java.lang.NullPointerException    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:79)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:40)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:18)
    at org.apache.commons.math.distribution.PoissonDistributionTest.makeDistribution(PoissonDistributionTest.java:49)
    at org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setUp(IntegerDistributionAbstractTest.java:114)
    at junit.framework.TestCase.runBare(TestCase.java:139)

org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:54)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:40)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:18)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:17:58.601 [pool-18-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (9 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:54)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:40)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:18)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

09:17:58.601 [pool-15-thread-1] DEBUG tests.output - Failing tests with false: 
[testMean(org.apache.commons.math.distribution.PoissonDistributionTest): null]
09:17:58.602 [pool-15-thread-1] DEBUG tests.output - Failing tests with true: 
[testMean(org.apache.commons.math.distribution.PoissonDistributionTest): the Poisson mean must be positive (-1)]
09:17:58.602 [pool-15-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.PoissonDistributionImpl:176.
09:17:58.602 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #11
09:17:58.602 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.PoissonDistributionImpl:175 which is executed by 15 tests
-1580159410
09:17:58.703 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:17:58.942 [pool-20-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (224 ms)
<> Total tests run: 12
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:54)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:40)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:18)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:17:59.173 [pool-21-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (40 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:54)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:40)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:18)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:54)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:40)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:18)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:17:59.176 [pool-22-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:54)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:40)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:18)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

09:17:59.176 [pool-19-thread-1] DEBUG tests.output - Failing tests with false: 
[testMean(org.apache.commons.math.distribution.PoissonDistributionTest): the Poisson mean must be positive (-1)]
09:17:59.176 [pool-19-thread-1] DEBUG tests.output - Failing tests with true: 
[testMean(org.apache.commons.math.distribution.PoissonDistributionTest): the Poisson mean must be positive (-1)]
09:17:59.177 [pool-19-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.PoissonDistributionImpl:175.
09:17:59.177 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #12
09:17:59.177 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.PoissonDistributionImpl:171 which is executed by 15 tests
-1580159410
09:17:59.285 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:17:59.534 [pool-24-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (221 ms)
<> Total tests run: 12
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

junit.framework.AssertionFailedError: negative mean: NotStrictlyPositiveException expected
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.TestCase.fail(TestCase.java:227)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:141)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
09:17:59.723 [pool-25-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (28 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[negative mean: NotStrictlyPositiveException expected]
junit.framework.AssertionFailedError: negative mean: NotStrictlyPositiveException expected    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.TestCase.fail(TestCase.java:227)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:141)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:75)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:40)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:18)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:17:59.734 [pool-26-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (10 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:75)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:40)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:18)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

09:17:59.734 [pool-23-thread-1] DEBUG tests.output - Failing tests with false: 
[testMean(org.apache.commons.math.distribution.PoissonDistributionTest): negative mean: NotStrictlyPositiveException expected]
09:17:59.735 [pool-23-thread-1] DEBUG tests.output - Failing tests with true: 
[testMean(org.apache.commons.math.distribution.PoissonDistributionTest): the Poisson mean must be positive (-1)]
09:17:59.735 [pool-23-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.PoissonDistributionImpl:171.
09:17:59.735 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:17:59.958 [pool-28-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (219 ms)
<> Total tests run: 12
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

junit.framework.AssertionFailedError: negative mean: NotStrictlyPositiveException expected
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.TestCase.fail(TestCase.java:227)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:141)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
09:18:00.144 [pool-29-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (28 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[negative mean: NotStrictlyPositiveException expected]
junit.framework.AssertionFailedError: negative mean: NotStrictlyPositiveException expected    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.TestCase.fail(TestCase.java:227)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:141)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (4)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:75)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:40)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:18)
    at org.apache.commons.math.distribution.PoissonDistributionTest.makeDistribution(PoissonDistributionTest.java:49)
    at org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setUp(IntegerDistributionAbstractTest.java:114)
09:18:00.165 [pool-30-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (10 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (4)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (4)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:75)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:40)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:18)
    at org.apache.commons.math.distribution.PoissonDistributionTest.makeDistribution(PoissonDistributionTest.java:49)
    at org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setUp(IntegerDistributionAbstractTest.java:114)

09:18:00.165 [pool-27-thread-1] DEBUG tests.output - Failing tests with false: 
[testMean(org.apache.commons.math.distribution.PoissonDistributionTest): negative mean: NotStrictlyPositiveException expected]
09:18:00.166 [pool-27-thread-1] DEBUG tests.output - Failing tests with true: 
[testMean(org.apache.commons.math.distribution.PoissonDistributionTest): the Poisson mean must be positive (4)]
09:18:00.166 [pool-27-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.PoissonDistributionImpl:171.
09:18:00.166 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #13
09:18:00.166 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.NormalDistributionImpl:134 which is executed by 17 tests
1270563308
09:18:00.256 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #14
09:18:00.256 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.NormalDistributionImpl:133 which is executed by 17 tests
1270563308
09:18:00.346 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:18:00.578 [pool-32-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (226 ms)
<> Total tests run: 12
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:18:00.770 [pool-33-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (38 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:18:00.772 [pool-34-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

09:18:00.773 [pool-31-thread-1] DEBUG tests.output - Failing tests with false: 
[testMean(org.apache.commons.math.distribution.PoissonDistributionTest): the Poisson mean must be positive (-1)]
09:18:00.773 [pool-31-thread-1] DEBUG tests.output - Failing tests with true: 
[testMean(org.apache.commons.math.distribution.PoissonDistributionTest): the Poisson mean must be positive (-1)]
09:18:00.773 [pool-31-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.NormalDistributionImpl:133.
09:18:00.773 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #15
09:18:00.773 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.NormalDistributionImpl:108 which is executed by 17 tests
1270563308
09:18:00.865 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #16
09:18:00.865 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.NormalDistributionImpl:107 which is executed by 17 tests
1270563308
09:18:00.953 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:18:01.174 [pool-36-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (215 ms)
<> Total tests run: 12
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:18:01.362 [pool-37-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (39 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:18:01.372 [pool-38-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

09:18:01.372 [pool-35-thread-1] DEBUG tests.output - Failing tests with false: 
[testMean(org.apache.commons.math.distribution.PoissonDistributionTest): the Poisson mean must be positive (-1)]
09:18:01.372 [pool-35-thread-1] DEBUG tests.output - Failing tests with true: 
[testMean(org.apache.commons.math.distribution.PoissonDistributionTest): the Poisson mean must be positive (-1)]
09:18:01.372 [pool-35-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.NormalDistributionImpl:107.
09:18:01.372 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #17
09:18:01.373 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.exception.util.LocalizedFormats:341 which is executed by 28 tests
-1352183934
09:18:01.510 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #18
09:18:01.510 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.exception.util.LocalizedFormats:329 which is executed by 28 tests
-1352183934
09:18:01.646 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #19
09:18:01.646 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.exception.util.LocalizedFormats:328 which is executed by 28 tests
-1352183934
09:18:01.784 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #20
09:18:01.785 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.NormalDistributionImpl:147 which is executed by 30 tests
1270563308
09:18:01.881 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #21
09:18:01.881 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.NormalDistributionImpl:146 which is executed by 30 tests
1270563308
09:18:01.973 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:18:02.203 [pool-40-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (224 ms)
<> Total tests run: 12
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:18:02.394 [pool-41-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (38 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:18:02.400 [pool-42-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

09:18:02.400 [pool-39-thread-1] DEBUG tests.output - Failing tests with false: 
[testMean(org.apache.commons.math.distribution.PoissonDistributionTest): the Poisson mean must be positive (-1)]
09:18:02.400 [pool-39-thread-1] DEBUG tests.output - Failing tests with true: 
[testMean(org.apache.commons.math.distribution.PoissonDistributionTest): the Poisson mean must be positive (-1)]
09:18:02.401 [pool-39-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.NormalDistributionImpl:146.
09:18:02.401 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #22
09:18:02.401 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.NormalDistributionImpl:141 which is executed by 30 tests
1270563308
09:18:02.491 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:18:02.853 [pool-44-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (355 ms)
<> Total tests run: 12
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:18:03.068 [pool-45-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (40 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:18:03.071 [pool-46-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

09:18:03.072 [pool-43-thread-1] DEBUG tests.output - Failing tests with false: 
[testMean(org.apache.commons.math.distribution.PoissonDistributionTest): the Poisson mean must be positive (-1)]
09:18:03.073 [pool-43-thread-1] DEBUG tests.output - Failing tests with true: 
[testMean(org.apache.commons.math.distribution.PoissonDistributionTest): the Poisson mean must be positive (-1)]
09:18:03.073 [pool-43-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.NormalDistributionImpl:141.
09:18:03.073 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:18:03.542 [pool-48-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (451 ms)
<> Total tests run: 12
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:18:03.754 [pool-49-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (41 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math.MathRuntimeException$4: standard deviation must be positive (1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviationInternal(NormalDistributionImpl.java:73)
    at org.apache.commons.math.distribution.NormalDistributionImpl.<init>(NormalDistributionImpl.java:22)
    at org.apache.commons.math.distribution.NormalDistributionImpl.<init>(NormalDistributionImpl.java:16)
    at org.apache.commons.math.distribution.NormalDistributionImpl.<init>(NormalDistributionImpl.java:27)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
09:18:03.756 [pool-50-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[standard deviation must be positive (1)]
org.apache.commons.math.MathRuntimeException$4: standard deviation must be positive (1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviationInternal(NormalDistributionImpl.java:73)
    at org.apache.commons.math.distribution.NormalDistributionImpl.<init>(NormalDistributionImpl.java:22)
    at org.apache.commons.math.distribution.NormalDistributionImpl.<init>(NormalDistributionImpl.java:16)
    at org.apache.commons.math.distribution.NormalDistributionImpl.<init>(NormalDistributionImpl.java:27)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)

09:18:03.756 [pool-47-thread-1] DEBUG tests.output - Failing tests with false: 
[testMean(org.apache.commons.math.distribution.PoissonDistributionTest): the Poisson mean must be positive (-1)]
09:18:03.757 [pool-47-thread-1] DEBUG tests.output - Failing tests with true: 
[testMean(org.apache.commons.math.distribution.PoissonDistributionTest): standard deviation must be positive (1)]
09:18:03.757 [pool-47-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.NormalDistributionImpl:141.
09:18:03.757 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #23
09:18:03.757 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.NormalDistributionImpl:115 which is executed by 30 tests
1270563308
09:18:03.865 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #24
09:18:03.866 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.NormalDistributionImpl:114 which is executed by 30 tests
1270563308
09:18:03.973 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:18:04.202 [pool-52-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (224 ms)
<> Total tests run: 12
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:18:04.430 [pool-53-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (42 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
09:18:04.432 [pool-54-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testMean(org.apache.commons.math.distribution.PoissonDistributionTest)
[the Poisson mean must be positive (-1)]
org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)    at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:387)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.setNormalAndMeanInternal(PoissonDistributionImpl.java:172)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:137)
    at org.apache.commons.math.distribution.PoissonDistributionImpl.<init>(PoissonDistributionImpl.java:80)
    at org.apache.commons.math.distribution.PoissonDistributionTest.testMean(PoissonDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

09:18:04.433 [pool-51-thread-1] DEBUG tests.output - Failing tests with false: 
[testMean(org.apache.commons.math.distribution.PoissonDistributionTest): the Poisson mean must be positive (-1)]
09:18:04.433 [pool-51-thread-1] DEBUG tests.output - Failing tests with true: 
[testMean(org.apache.commons.math.distribution.PoissonDistributionTest): the Poisson mean must be positive (-1)]
09:18:04.433 [pool-51-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.NormalDistributionImpl:114.
09:18:04.434 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #25
09:18:04.434 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:136 which is executed by 46 tests
09:18:04.434 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:136
09:18:04.434 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #26
09:18:04.434 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:135 which is executed by 46 tests
09:18:04.434 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:135
09:18:04.434 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #27
09:18:04.434 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:134 which is executed by 46 tests
09:18:04.434 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:134
09:18:04.434 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #28
09:18:04.434 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:133 which is executed by 46 tests
09:18:04.434 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:133
09:18:04.435 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #29
09:18:04.435 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:132 which is executed by 46 tests
09:18:04.435 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:132
09:18:04.435 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #30
09:18:04.435 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:131 which is executed by 46 tests
09:18:04.435 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:131
09:18:04.435 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #31
09:18:04.435 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:130 which is executed by 46 tests
09:18:04.435 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:130
09:18:04.435 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #32
09:18:04.435 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:129 which is executed by 46 tests
09:18:04.435 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:129
09:18:04.435 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #33
09:18:04.435 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:128 which is executed by 46 tests
09:18:04.436 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:128
09:18:04.436 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #34
09:18:04.436 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:121 which is executed by 46 tests
09:18:04.436 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:121
09:18:04.436 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #35
09:18:04.436 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:120 which is executed by 46 tests
09:18:04.436 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:120
09:18:04.436 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #36
09:18:04.436 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:119 which is executed by 46 tests
09:18:04.436 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:119
09:18:04.436 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #37
09:18:04.436 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:118 which is executed by 46 tests
09:18:04.436 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:118
09:18:04.436 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #38
09:18:04.437 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:117 which is executed by 46 tests
09:18:04.437 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:117
09:18:04.437 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #39
09:18:04.437 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:116 which is executed by 46 tests
09:18:04.437 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:116
09:18:04.437 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #40
09:18:04.437 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:115 which is executed by 46 tests
09:18:04.437 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:115
09:18:04.437 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #41
09:18:04.437 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:114 which is executed by 46 tests
09:18:04.437 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:114
09:18:04.437 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #42
09:18:04.437 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:113 which is executed by 46 tests
09:18:04.438 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.IntegerDistributionAbstractTest:113
09:18:04.438 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #43
09:18:04.438 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.MathRuntimeException:387 which is executed by 182 tests
-1593974112
09:18:04.538 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #44
09:18:04.539 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:219 which is executed by 578 tests
1033054629
09:18:04.690 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - ----INFORMATION----
09:18:04.892 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb classes : 473
09:18:04.892 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb methods : 3314
09:18:04.892 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb Statements Analyzed : 13
09:18:04.892 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb Statements with Angelic Value Found : 0
09:18:04.892 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb inputs in SMT : 0
09:18:04.894 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb SMT level: 0
09:18:04.894 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb variables in SMT : 0
09:18:04.894 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - NoPol Execution time : 46261ms
09:18:04.894 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - 
NO_ANGELIC_VALUE
Command exited with non-zero status 255
110.23user 3.14system 0:48.14elapsed 235%CPU (0avgtext+0avgdata 1064144maxresident)k
44816inputs+5576outputs (3major+484045minor)pagefaults 0swaps


Node: graphene-140.nancy.grid5000.fr



Date: Sat Dec 29 09:18:05 EST 2018

