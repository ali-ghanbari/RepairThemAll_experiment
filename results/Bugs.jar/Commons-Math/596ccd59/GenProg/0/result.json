{
  "repair_end": "2018-12-30 18:44:06.016601", 
  "repair_begin": "2018-12-30 18:13:23.949582", 
  "patches": [
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_287/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:26.982406948 -0500\n@@ -319,21 +319,19 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            int newCluster = -1;\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "int newCluster=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_838/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:09.020796251 -0500\n@@ -273,10 +273,9 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n         // copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n@@ -325,15 +324,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_161/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:40.129685373 -0500\n@@ -284,11 +284,6 @@\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -325,15 +320,11 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_423/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:01.590929634 -0500\n@@ -315,7 +315,8 @@\n      * Update the cluster centers.\n      */\n     private void updateClusterCenters() {\n-        int j = 0;\n+        int iteration = 0;\n+\t\tint j = 0;\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n@@ -323,17 +324,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n+            double bestVarianceSum = Double.POSITIVE_INFINITY;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final Map<Clusterable,PointStatus> visited=new HashMap<Clusterable,PointStatus>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Replace", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 318, 
          "faulty": "int j=0;", 
          "type": "InsertBefore", 
          "seed": "int iteration=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_338/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:38.650584076 -0500\n@@ -271,24 +271,23 @@\n         // sanity checks\n         MathUtils.checkNotNull(dataPoints);\n \n-        final int size = dataPoints.size();\n+        double minDistance = Double.MAX_VALUE;\n+\t\tfinal int size = dataPoints.size();\n \n         // number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\tint pointIndex = 0;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -319,21 +318,17 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            int newCluster = -1;\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n-                i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "int newCluster=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 274, 
          "faulty": "final int size=dataPoints.size();", 
          "type": "InsertBefore", 
          "seed": "double minDistance=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "int pointIndex=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_637/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:11.243959742 -0500\n@@ -273,10 +273,7 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>();\n \n         // copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n@@ -325,17 +322,13 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n-        clusters.clear();\n+        final int pointDimension = points.get(0).getPoint().length;\n         clusters = newClusters;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 338, 
          "faulty": "clusters.clear();", 
          "type": "Replace", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_256/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:13.610202744 -0500\n@@ -325,15 +325,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_165/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:41.037699527 -0500\n@@ -278,7 +278,9 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -303,7 +305,10 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n+            if (size == 0) {\n+\t\t\t\treturn clusters;\n+\t\t\t}\n+\t\t\tupdateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -324,10 +329,7 @@\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n@@ -335,7 +337,7 @@\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n             j++;\n         }\n-        clusters.clear();\n+        clusters = newClusters;\n         clusters = newClusters;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 338, 
          "faulty": "clusters.clear();", 
          "type": "Replace", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Delete", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "InsertBefore", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_699/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:23.820143064 -0500\n@@ -273,12 +273,12 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -323,17 +323,12 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n-                i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "this.k=k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "this.epsilon=epsilon;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_130/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:34.033590165 -0500\n@@ -280,7 +280,10 @@\n \n         // copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n-        clusters = new ArrayList<CentroidCluster<T>>();\n+        if (size < k) {\n+\t\t\tthrow new NumberIsTooSmallException(size, k, false);\n+\t\t}\n+\t\tclusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n@@ -325,9 +328,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 283, 
          "faulty": "clusters=new ArrayList<CentroidCluster<T>>();", 
          "type": "InsertBefore", 
          "seed": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_587/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:54.819719183 -0500\n@@ -278,18 +278,16 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n-        final double[][] oldMatrix = new double[size][k];\n+        double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\tfinal double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n-        initializeMembershipMatrix();\n+        clusters.clear();\n+\t\tinitializeMembershipMatrix();\n \n         // there is at least one point\n         final int pointDimension = points.get(0).getPoint().length;\n@@ -319,21 +317,19 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            double maxMembership = 0.0;\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -344,7 +340,8 @@\n      * the highest membership.\n      */\n     private void updateMembershipMatrix() {\n-        for (int i = 0; i < points.size(); i++) {\n+        List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>();\n+\t\tfor (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n             int newCluster = -1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "this.k=k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 347, 
          "faulty": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}", 
          "type": "InsertBefore", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 285, 
          "faulty": "final double[][] oldMatrix=new double[size][k];", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "InsertBefore", 
          "seed": "clusters.clear();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "double maxMembership=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_687/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:20.816099342 -0500\n@@ -273,10 +273,7 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>();\n \n         // copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n@@ -293,13 +290,17 @@\n \n         // there is at least one point\n         final int pointDimension = points.get(0).getPoint().length;\n-        for (int i = 0; i < k; i++) {\n+        int j = 0;\n+\t\tfor (int i = 0; i < k; i++) {\n             clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n         }\n \n         int iteration = 0;\n         final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n-        double difference = 0.0;\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n+\t\tdouble difference = 0.0;\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n@@ -324,16 +325,12 @@\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                final List<CentroidCluster<T>> resultSet = new ArrayList<CentroidCluster<T>>();\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 296, 
          "faulty": "for (int i=0; i < k; i++) {\n  clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n}", 
          "type": "InsertBefore", 
          "seed": "int j=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 302, 
          "faulty": "double difference=0.0;", 
          "type": "InsertBefore", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "final List<CentroidCluster<T>> resultSet=new ArrayList<CentroidCluster<T>>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_126/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:33.225577521 -0500\n@@ -284,11 +284,6 @@\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -325,15 +320,10 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n-                i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "return points;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_1014/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:46.077325864 -0500\n@@ -284,10 +284,7 @@\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n+        int newCluster = -1;\n \n         initializeMembershipMatrix();\n \n@@ -325,9 +322,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "int newCluster=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_719/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:27.224192560 -0500\n@@ -273,14 +273,11 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n-\n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n-        clusters = new ArrayList<CentroidCluster<T>>();\n+        this.clusters = null;\n+\t\tclusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n@@ -291,7 +288,8 @@\n \n         initializeMembershipMatrix();\n \n-        // there is at least one point\n+        final List<T> neighbors = new ArrayList<T>();\n+\t\t// there is at least one point\n         final int pointDimension = points.get(0).getPoint().length;\n         for (int i = 0; i < k; i++) {\n             clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n@@ -323,17 +321,12 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                boolean emptyCluster = false;\n                 sum += u;\n-                i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "this.k=k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "this.epsilon=epsilon;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 283, 
          "faulty": "clusters=new ArrayList<CentroidCluster<T>>();", 
          "type": "InsertBefore", 
          "seed": "this.clusters=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 295, 
          "faulty": "final int pointDimension=points.get(0).getPoint().length;", 
          "type": "InsertBefore", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Delete", 
          "seed": "this.maxIterations=maxIterations;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "boolean emptyCluster=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_786/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:46.660474190 -0500\n@@ -273,12 +273,12 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -303,7 +303,6 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -317,24 +316,6 @@\n     private void updateClusterCenters() {\n         int j = 0;\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n-        for (final CentroidCluster<T> cluster : clusters) {\n-            final Clusterable center = cluster.getCenter();\n-            int i = 0;\n-            double[] arr = new double[center.getPoint().length];\n-            double sum = 0.0;\n-            for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n-                sum += u;\n-                i++;\n-            }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n-            newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n-        }\n         clusters.clear();\n         clusters = newClusters;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "updateMembershipMatrix();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "int j=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "Delete", 
          "seed": "final List<CentroidCluster<T>> resultSet=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 323, 
          "faulty": "double[] arr=new double[center.getPoint().length];", 
          "type": "Delete", 
          "seed": "initializeMembershipMatrix();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 320, 
          "faulty": "for (final CentroidCluster<T> cluster : clusters) {\n  final Clusterable center=cluster.getCenter();\n  int i=0;\n  double[] arr=new double[center.getPoint().length];\n  double sum=0.0;\n  for (  final T point : points) {\n    final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);\n    final double[] pointArr=point.getPoint();\n    for (int idx=0; idx < arr.length; idx++) {\n      arr[idx]+=u * pointArr[idx];\n    }\n    sum+=u;\n    i++;\n  }\n  MathArrays.scaleInPlace(1.0 / sum,arr);\n  newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n  j++;\n}", 
          "type": "Delete", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 324, 
          "faulty": "double sum=0.0;", 
          "type": "InsertBefore", 
          "seed": "int clusterIndex=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_798/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:54.624589128 -0500\n@@ -273,12 +273,12 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -303,7 +303,6 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -319,17 +318,15 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            updateMembershipMatrix();\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n-                i++;\n+                double minDistance = Double.MAX_VALUE;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "this.epsilon=epsilon;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "this.epsilon=epsilon;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "updateMembershipMatrix();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "int j=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 285, 
          "faulty": "final double[][] oldMatrix=new double[size][k];", 
          "type": "Replace", 
          "seed": "final double[][] oldMatrix=new double[size][k];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Replace", 
          "seed": "double minDistance=Double.MAX_VALUE;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_475/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:13.187103036 -0500\n@@ -273,22 +273,19 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -325,15 +322,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_936/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:29.025082756 -0500\n@@ -303,7 +303,6 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -319,21 +318,17 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            clusters.clear();\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n-                sum += u;\n+                double minDistance = Double.MAX_VALUE;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n-            newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "clusters.clear();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 335, 
          "faulty": "newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));", 
          "type": "Delete", 
          "seed": "int pointIndex=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 331, 
          "faulty": "sum+=u;", 
          "type": "Replace", 
          "seed": "double minDistance=Double.MAX_VALUE;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_405/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:52.418791884 -0500\n@@ -278,18 +278,18 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n         if (size == 0) {\n-            return clusters;\n-        }\n-\n-        initializeMembershipMatrix();\n+\t\t\treturn clusters;\n+\t\t}\n+\t\tinitializeMembershipMatrix();\n \n         // there is at least one point\n         final int pointDimension = points.get(0).getPoint().length;\n@@ -323,17 +323,13 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 292, 
          "faulty": "initializeMembershipMatrix();", 
          "type": "InsertBefore", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Delete", 
          "seed": "initializeMembershipMatrix();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_642/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:12.163973179 -0500\n@@ -273,14 +273,18 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n-        clusters = new ArrayList<CentroidCluster<T>>();\n+        final Cluster<T> cluster = new Cluster<T>();\n+\t\tthis.clusters = null;\n+\t\tclusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n@@ -323,17 +327,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "this.k=k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 283, 
          "faulty": "clusters=new ArrayList<CentroidCluster<T>>();", 
          "type": "InsertBefore", 
          "seed": "final Cluster<T> cluster=new Cluster<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 283, 
          "faulty": "clusters=new ArrayList<CentroidCluster<T>>();", 
          "type": "InsertBefore", 
          "seed": "this.clusters=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_891/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:20.328958389 -0500\n@@ -273,12 +273,12 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -303,7 +303,6 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -319,21 +318,18 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            clusters.clear();\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n-            newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "clusters.clear();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 335, 
          "faulty": "newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));", 
          "type": "Delete", 
          "seed": "int pointIndex=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_273/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:17.802266903 -0500\n@@ -278,26 +278,25 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n         final int pointDimension = points.get(0).getPoint().length;\n         for (int i = 0; i < k; i++) {\n-            clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n+            int assignedDifferently = 0;\n+\t\t\tclusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n         }\n \n-        int iteration = 0;\n+        int assignedDifferently = 0;\n+\t\tint iteration = 0;\n         final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n         double difference = 0.0;\n \n@@ -325,15 +324,11 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 300, 
          "faulty": "int iteration=0;", 
          "type": "InsertBefore", 
          "seed": "int assignedDifferently=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 297, 
          "faulty": "clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));", 
          "type": "InsertBefore", 
          "seed": "int assignedDifferently=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_94/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:26.685474964 -0500\n@@ -273,11 +273,6 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n-\n         // copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n@@ -297,7 +292,10 @@\n             clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n         }\n \n-        int iteration = 0;\n+        if (size < k) {\n+\t\t\tthrow new NumberIsTooSmallException(size, k, false);\n+\t\t}\n+\t\tint iteration = 0;\n         final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n         double difference = 0.0;\n \n@@ -325,9 +323,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 300, 
          "faulty": "int iteration=0;", 
          "type": "InsertBefore", 
          "seed": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_396/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:51.046771233 -0500\n@@ -278,11 +278,14 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n-        final double[][] oldMatrix = new double[size][k];\n+        final List<T> neighbors = new ArrayList<T>();\n+\t\tfinal double[][] oldMatrix = new double[size][k];\n \n         // if no points are provided, return an empty list of clusters\n         if (size == 0) {\n@@ -323,11 +326,9 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 285, 
          "faulty": "final double[][] oldMatrix=new double[size][k];", 
          "type": "InsertBefore", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "if (fuzziness <= 1.0d) {\n  throw new NumberIsTooSmallException(fuzziness,1.0,false);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_439/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:04.738976790 -0500\n@@ -278,7 +278,9 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -323,17 +325,15 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_1068/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:44:01.645546975 -0500\n@@ -273,21 +273,22 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\t// number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n+        double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\tfinal Cluster<T> cluster = new Cluster<T>();\n \n         initializeMembershipMatrix();\n \n@@ -324,16 +325,13 @@\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                boolean emptyCluster = false;\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -347,7 +345,8 @@\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n-            int newCluster = -1;\n+            double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\t\tint newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n                 final double distA = FastMath.abs(distance(point, clusters.get(j).getCenter()));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Delete", 
          "seed": "if (fuzziness <= 1.0d) {\n  throw new NumberIsTooSmallException(fuzziness,1.0,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 350, 
          "faulty": "int newCluster=-1;", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "i++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "int newCluster=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "final Cluster<T> cluster=new Cluster<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "boolean emptyCluster=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_772/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:44.108437304 -0500\n@@ -324,16 +324,12 @@\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                final List<CentroidCluster<T>> resultSet = new ArrayList<CentroidCluster<T>>();\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "final List<CentroidCluster<T>> resultSet=new ArrayList<CentroidCluster<T>>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_934/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:28.689077956 -0500\n@@ -278,7 +278,8 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -325,11 +326,8 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n-                i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n@@ -347,7 +345,8 @@\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n-            int newCluster = -1;\n+            double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\t\tint newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n                 final double distA = FastMath.abs(distance(point, clusters.get(j).getCenter()));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 350, 
          "faulty": "int newCluster=-1;", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "i++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "double sum=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_147/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:37.845649739 -0500\n@@ -303,7 +303,10 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n+            if (size == 0) {\n+\t\t\t\treturn clusters;\n+\t\t\t}\n+\t\t\tupdateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -325,9 +328,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "InsertBefore", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_271/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:17.518262560 -0500\n@@ -278,17 +278,14 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -325,15 +322,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n+            int assignedDifferently = 0;\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -347,7 +341,10 @@\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n-            int newCluster = -1;\n+            if (fuzziness <= 1.0d) {\n+\t\t\t\tthrow new NumberIsTooSmallException(fuzziness, 1.0, false);\n+\t\t\t}\n+\t\t\tint newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n                 final double distA = FastMath.abs(distance(point, clusters.get(j).getCenter()));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Replace", 
          "seed": "int assignedDifferently=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 350, 
          "faulty": "int newCluster=-1;", 
          "type": "InsertBefore", 
          "seed": "if (fuzziness <= 1.0d) {\n  throw new NumberIsTooSmallException(fuzziness,1.0,false);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_384/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:48.590734232 -0500\n@@ -271,7 +271,8 @@\n         // sanity checks\n         MathUtils.checkNotNull(dataPoints);\n \n-        final int size = dataPoints.size();\n+        double minDistance = Double.MAX_VALUE;\n+\t\tfinal int size = dataPoints.size();\n \n         // number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n@@ -319,21 +320,17 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            int newCluster = -1;\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n-                i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "int newCluster=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 274, 
          "faulty": "final int size=dataPoints.size();", 
          "type": "InsertBefore", 
          "seed": "double minDistance=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "this.k=k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_193/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:52.429876506 -0500\n@@ -289,7 +289,8 @@\n             return clusters;\n         }\n \n-        initializeMembershipMatrix();\n+        clusters.clear();\n+\t\tinitializeMembershipMatrix();\n \n         // there is at least one point\n         final int pointDimension = points.get(0).getPoint().length;\n@@ -315,19 +316,19 @@\n      * Update the cluster centers.\n      */\n     private void updateClusterCenters() {\n-        int j = 0;\n+        updateMembershipMatrix();\n+\t\tint j = 0;\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n             int i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n-            for (final T point : points) {\n+            List<CentroidCluster<T>> best = null;\n+\t\t\tfor (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 318, 
          "faulty": "int j=0;", 
          "type": "InsertBefore", 
          "seed": "updateMembershipMatrix();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 292, 
          "faulty": "initializeMembershipMatrix();", 
          "type": "InsertBefore", 
          "seed": "clusters.clear();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 325, 
          "faulty": "for (final T point : points) {\n  final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);\n  final double[] pointArr=point.getPoint();\n  for (int idx=0; idx < arr.length; idx++) {\n    arr[idx]+=u * pointArr[idx];\n  }\n  sum+=u;\n  i++;\n}", 
          "type": "InsertBefore", 
          "seed": "List<CentroidCluster<T>> best=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_121/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:32.377564244 -0500\n@@ -297,7 +297,10 @@\n             clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n         }\n \n-        int iteration = 0;\n+        if (size < k) {\n+\t\t\tthrow new NumberIsTooSmallException(size, k, false);\n+\t\t}\n+\t\tint iteration = 0;\n         final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n         double difference = 0.0;\n \n@@ -325,9 +328,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 300, 
          "faulty": "int iteration=0;", 
          "type": "InsertBefore", 
          "seed": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_203/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:54.493908456 -0500\n@@ -322,12 +322,11 @@\n             int i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n-            for (final T point : points) {\n+            List<CentroidCluster<T>> best = null;\n+\t\t\tfor (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 325, 
          "faulty": "for (final T point : points) {\n  final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);\n  final double[] pointArr=point.getPoint();\n  for (int idx=0; idx < arr.length; idx++) {\n    arr[idx]+=u * pointArr[idx];\n  }\n  sum+=u;\n  i++;\n}", 
          "type": "InsertBefore", 
          "seed": "List<CentroidCluster<T>> best=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_512/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:26.679303776 -0500\n@@ -323,17 +323,13 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -344,7 +340,8 @@\n      * the highest membership.\n      */\n     private void updateMembershipMatrix() {\n-        for (int i = 0; i < points.size(); i++) {\n+        List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>();\n+\t\tfor (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n             int newCluster = -1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "this.k=k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 347, 
          "faulty": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}", 
          "type": "InsertBefore", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_1064/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:44:01.085539035 -0500\n@@ -273,21 +273,22 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n-\n-        // copy the input collection to an unmodifiable list with indexed access\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\tif (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n+\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n+        int newCluster = -1;\n \n         initializeMembershipMatrix();\n \n@@ -323,17 +324,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int nextPointIndex = -1;\n                 sum += u;\n-                i++;\n+                membershipMatrix[i][j] = 1.0 / sum;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Delete", 
          "seed": "if (fuzziness <= 1.0d) {\n  throw new NumberIsTooSmallException(fuzziness,1.0,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "int newCluster=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=1.0 / sum;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_617/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:07.319902389 -0500\n@@ -293,13 +293,17 @@\n \n         // there is at least one point\n         final int pointDimension = points.get(0).getPoint().length;\n-        for (int i = 0; i < k; i++) {\n+        int j = 0;\n+\t\tfor (int i = 0; i < k; i++) {\n             clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n         }\n \n         int iteration = 0;\n         final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n-        double difference = 0.0;\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n+\t\tdouble difference = 0.0;\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n@@ -324,16 +328,13 @@\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                final List<CentroidCluster<T>> resultSet = new ArrayList<CentroidCluster<T>>();\n                 sum += u;\n-                i++;\n+                final int pointDimension = points.get(0).getPoint().length;\n+\t\t\t\ti++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -344,7 +345,8 @@\n      * the highest membership.\n      */\n     private void updateMembershipMatrix() {\n-        for (int i = 0; i < points.size(); i++) {\n+        List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>();\n+\t\tfor (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n             int newCluster = -1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 347, 
          "faulty": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}", 
          "type": "InsertBefore", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "InsertBefore", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 296, 
          "faulty": "for (int i=0; i < k; i++) {\n  clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n}", 
          "type": "InsertBefore", 
          "seed": "int j=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 302, 
          "faulty": "double difference=0.0;", 
          "type": "InsertBefore", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "final List<CentroidCluster<T>> resultSet=new ArrayList<CentroidCluster<T>>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_1047/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:57.829492848 -0500\n@@ -273,12 +273,16 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\tclusters = new ArrayList<CentroidCluster<T>>();\n+\t\t// number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -323,17 +327,15 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int assignedDifferently = 0;\n+\t\t\t\tint nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Delete", 
          "seed": "if (fuzziness <= 1.0d) {\n  throw new NumberIsTooSmallException(fuzziness,1.0,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "InsertBefore", 
          "seed": "int assignedDifferently=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_661/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:15.804026300 -0500\n@@ -273,12 +273,13 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -325,11 +326,8 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n-                i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "this.epsilon=epsilon;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_676/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:18.936071958 -0500\n@@ -273,21 +273,20 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n-        clusters = new ArrayList<CentroidCluster<T>>();\n+        final Cluster<T> cluster = new Cluster<T>();\n+\t\tclusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n-        final double[][] oldMatrix = new double[size][k];\n-\n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n+        points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n+\t\tfinal double[][] oldMatrix = new double[size][k];\n \n         initializeMembershipMatrix();\n \n@@ -323,17 +322,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "this.k=k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 283, 
          "faulty": "clusters=new ArrayList<CentroidCluster<T>>();", 
          "type": "InsertBefore", 
          "seed": "final Cluster<T> cluster=new Cluster<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 285, 
          "faulty": "final double[][] oldMatrix=new double[size][k];", 
          "type": "InsertBefore", 
          "seed": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_492/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:22.595243124 -0500\n@@ -273,12 +273,12 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -325,15 +325,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_269/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:17.210257851 -0500\n@@ -278,17 +278,14 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -297,7 +294,8 @@\n             clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n         }\n \n-        int iteration = 0;\n+        int assignedDifferently = 0;\n+\t\tint iteration = 0;\n         final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n         double difference = 0.0;\n \n@@ -325,15 +323,11 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 300, 
          "faulty": "int iteration=0;", 
          "type": "InsertBefore", 
          "seed": "int assignedDifferently=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_779/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:45.420456270 -0500\n@@ -273,12 +273,12 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -303,7 +303,7 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n+            points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -319,21 +319,17 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            updateMembershipMatrix();\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                final List<CentroidCluster<T>> resultSet = new ArrayList<CentroidCluster<T>>();\n                 sum += u;\n-                i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "this.epsilon=epsilon;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "this.epsilon=epsilon;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "updateMembershipMatrix();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "final List<CentroidCluster<T>> resultSet=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Replace", 
          "seed": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_1026/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:54.077439585 -0500\n@@ -273,21 +273,20 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\t// number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n+        int newCluster = -1;\n \n         initializeMembershipMatrix();\n \n@@ -325,15 +324,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n+            final List<T> neighbors = new ArrayList<T>();\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -347,7 +343,8 @@\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n-            int newCluster = -1;\n+            double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\t\tint newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n                 final double distA = FastMath.abs(distance(point, clusters.get(j).getCenter()));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 350, 
          "faulty": "int newCluster=-1;", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "i++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "int newCluster=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Replace", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_456/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:08.943039668 -0500\n@@ -278,7 +278,8 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -304,7 +305,8 @@\n         do {\n             saveMembershipMatrix(oldMatrix);\n             updateClusterCenters();\n-            updateMembershipMatrix();\n+            membershipMatrix = new double[size][k];\n+\t\t\tupdateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n \n@@ -325,15 +327,13 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n-                sum += u;\n+                membershipMatrix[i] = MathArrays.normalizeArray(\n+\t\t\t\t\t\tmembershipMatrix[i], 1.0);\n+\t\t\t\tsum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 307, 
          "faulty": "updateMembershipMatrix();", 
          "type": "InsertBefore", 
          "seed": "membershipMatrix=new double[size][k];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "InsertBefore", 
          "seed": "membershipMatrix[i]=MathArrays.normalizeArray(membershipMatrix[i],1.0);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_717/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:26.940188433 -0500\n@@ -273,12 +273,12 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -323,19 +323,13 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n-                i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n-        clusters.clear();\n         clusters = newClusters;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "this.k=k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "this.epsilon=epsilon;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 338, 
          "faulty": "clusters.clear();", 
          "type": "Delete", 
          "seed": "int j=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_403/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:52.130787550 -0500\n@@ -278,17 +278,14 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -323,17 +320,13 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final List<CentroidCluster<T>> resultSet=new ArrayList<CentroidCluster<T>>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_82/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:23.649427224 -0500\n@@ -325,9 +325,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "points.add(point);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_409/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:52.990800491 -0500\n@@ -278,7 +278,10 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -325,9 +328,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_503/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:25.335283826 -0500\n@@ -273,22 +273,21 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n+        points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n+\t\t// number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -303,8 +302,8 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n-            updateMembershipMatrix();\n+            membershipMatrix = new double[size][k];\n+\t\t\tupdateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n \n@@ -325,15 +324,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n-                sum += u;\n-                i++;\n+                membershipMatrix[i] = MathArrays.normalizeArray(\n+\t\t\t\t\t\tmembershipMatrix[i], 1.0);\n+\t\t\t\ti++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 307, 
          "faulty": "updateMembershipMatrix();", 
          "type": "InsertBefore", 
          "seed": "membershipMatrix=new double[size][k];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "InsertBefore", 
          "seed": "membershipMatrix[i]=MathArrays.normalizeArray(membershipMatrix[i],1.0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "double maxMembership=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 331, 
          "faulty": "sum+=u;", 
          "type": "Delete", 
          "seed": "this.random=random;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_447/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:06.783007375 -0500\n@@ -271,14 +271,17 @@\n         // sanity checks\n         MathUtils.checkNotNull(dataPoints);\n \n-        final int size = dataPoints.size();\n+        int newCluster = -1;\n+\t\tfinal int size = dataPoints.size();\n \n         // number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tint nextPointIndex = -1;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -325,17 +328,14 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n-        clusters.clear();\n+        int minCluster = 0;\n+\t\tclusters.clear();\n         clusters = newClusters;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 274, 
          "faulty": "final int size=dataPoints.size();", 
          "type": "InsertBefore", 
          "seed": "int newCluster=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 338, 
          "faulty": "clusters.clear();", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "this.membershipMatrix=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "int nextPointIndex=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_753/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:34.228294237 -0500\n@@ -273,12 +273,12 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -303,7 +303,6 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -319,21 +318,17 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            updateMembershipMatrix();\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n-                i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "this.epsilon=epsilon;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "this.epsilon=epsilon;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "updateMembershipMatrix();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "int j=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 285, 
          "faulty": "final double[][] oldMatrix=new double[size][k];", 
          "type": "Replace", 
          "seed": "final double[][] oldMatrix=new double[size][k];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_1030/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:54.669447992 -0500\n@@ -273,21 +273,21 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\t// number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n+        double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\tfinal Cluster<T> cluster = new Cluster<T>();\n \n         initializeMembershipMatrix();\n \n@@ -324,14 +324,14 @@\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n-                sum += u;\n+                boolean emptyCluster = false;\n+                int index = 0;\n+                final double distA = FastMath.abs(distance(point,\n+\t\t\t\t\t\tclusters.get(j).getCenter()));\n+\t\t\t\tsum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n+            double bestVarianceSum = Double.POSITIVE_INFINITY;\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n             j++;\n         }\n@@ -347,7 +347,8 @@\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n-            int newCluster = -1;\n+            double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\t\tint newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n                 final double distA = FastMath.abs(distance(point, clusters.get(j).getCenter()));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 350, 
          "faulty": "int newCluster=-1;", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "i++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "int newCluster=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "final Cluster<T> cluster=new Cluster<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "boolean emptyCluster=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Replace", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 331, 
          "faulty": "sum+=u;", 
          "type": "InsertBefore", 
          "seed": "final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_521/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:28.747334451 -0500\n@@ -273,12 +273,15 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -304,7 +307,8 @@\n         do {\n             saveMembershipMatrix(oldMatrix);\n             updateClusterCenters();\n-            updateMembershipMatrix();\n+            membershipMatrix = new double[size][k];\n+\t\t\tupdateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n \n@@ -325,15 +329,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 307, 
          "faulty": "updateMembershipMatrix();", 
          "type": "InsertBefore", 
          "seed": "membershipMatrix=new double[size][k];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_449/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:07.067011623 -0500\n@@ -271,14 +271,19 @@\n         // sanity checks\n         MathUtils.checkNotNull(dataPoints);\n \n-        final int size = dataPoints.size();\n+        int newCluster = -1;\n+\t\tfinal int size = dataPoints.size();\n \n         // number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tfinal List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -325,9 +330,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 274, 
          "faulty": "final int size=dataPoints.size();", 
          "type": "InsertBefore", 
          "seed": "int newCluster=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_1022/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:53.285428335 -0500\n@@ -284,10 +284,7 @@\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n+        int newCluster = -1;\n \n         initializeMembershipMatrix();\n \n@@ -325,9 +322,6 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "int newCluster=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "int index=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_1016/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:46.389330303 -0500\n@@ -273,15 +273,20 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n-\n-        // copy the input collection to an unmodifiable list with indexed access\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\tif (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n+\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n-        membershipMatrix = new double[size][k];\n+        final List<CentroidCluster<T>> resultSet = new ArrayList<CentroidCluster<T>>();\n+\t\tmembershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n         // if no points are provided, return an empty list of clusters\n@@ -323,17 +328,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Delete", 
          "seed": "if (fuzziness <= 1.0d) {\n  throw new NumberIsTooSmallException(fuzziness,1.0,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 284, 
          "faulty": "membershipMatrix=new double[size][k];", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> resultSet=new ArrayList<CentroidCluster<T>>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_184/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:44.837758683 -0500\n@@ -278,7 +278,9 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -303,7 +305,10 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n+            if (size == 0) {\n+\t\t\t\treturn clusters;\n+\t\t\t}\n+\t\t\tupdateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -318,16 +323,14 @@\n         int j = 0;\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n-            final Clusterable center = cluster.getCenter();\n+            boolean emptyCluster = false;\n+\t\t\tfinal Clusterable center = cluster.getCenter();\n             int i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "points.add(point);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 321, 
          "faulty": "final Clusterable center=cluster.getCenter();", 
          "type": "InsertBefore", 
          "seed": "boolean emptyCluster=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Delete", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "InsertBefore", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_301/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:30.554461274 -0500\n@@ -278,7 +278,9 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -319,15 +321,13 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            int newCluster = -1;\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "int newCluster=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_182/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:44.513753644 -0500\n@@ -303,7 +303,10 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n+            if (size == 0) {\n+\t\t\t\treturn clusters;\n+\t\t\t}\n+\t\t\tupdateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -325,17 +328,17 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n-                sum += u;\n+                int nextPointIndex = -1;\n+                membershipMatrix[i] = MathArrays.normalizeArray(\n+\t\t\t\t\t\tmembershipMatrix[i], 1.0);\n+\t\t\t\tsum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n             j++;\n         }\n-        clusters.clear();\n+        clusters = newClusters;\n         clusters = newClusters;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 338, 
          "faulty": "clusters.clear();", 
          "type": "Replace", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "InsertBefore", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 331, 
          "faulty": "sum+=u;", 
          "type": "InsertBefore", 
          "seed": "membershipMatrix[i]=MathArrays.normalizeArray(membershipMatrix[i],1.0);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_1039/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:56.261470594 -0500\n@@ -273,21 +273,21 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\t// number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n+        double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\tfinal Cluster<T> cluster = new Cluster<T>();\n \n         initializeMembershipMatrix();\n \n@@ -303,7 +303,7 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n+            double maxMembership = 0.0;\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -315,7 +315,8 @@\n      * Update the cluster centers.\n      */\n     private void updateClusterCenters() {\n-        int j = 0;\n+        double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\tint j = 0;\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n@@ -324,10 +325,8 @@\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                boolean emptyCluster = false;\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n@@ -347,7 +346,8 @@\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n-            int newCluster = -1;\n+            double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\t\tint newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n                 final double distA = FastMath.abs(distance(point, clusters.get(j).getCenter()));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 350, 
          "faulty": "int newCluster=-1;", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "i++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "int newCluster=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "final Cluster<T> cluster=new Cluster<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "boolean emptyCluster=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 318, 
          "faulty": "int j=0;", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Replace", 
          "seed": "double maxMembership=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_1050/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:58.401500964 -0500\n@@ -273,12 +273,18 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n-\n-        // copy the input collection to an unmodifiable list with indexed access\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\tclusters = new ArrayList<CentroidCluster<T>>();\n+\t\tif (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n+\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -323,17 +329,15 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int newCluster = -1;\n+\t\t\t\tint nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Delete", 
          "seed": "if (fuzziness <= 1.0d) {\n  throw new NumberIsTooSmallException(fuzziness,1.0,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "InsertBefore", 
          "seed": "int newCluster=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_415/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:54.322820524 -0500\n@@ -271,14 +271,16 @@\n         // sanity checks\n         MathUtils.checkNotNull(dataPoints);\n \n-        final int size = dataPoints.size();\n+        int newCluster = -1;\n+\t\tfinal int size = dataPoints.size();\n \n         // number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -325,9 +327,6 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 274, 
          "faulty": "final int size=dataPoints.size();", 
          "type": "InsertBefore", 
          "seed": "int newCluster=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_123/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:32.645568440 -0500\n@@ -289,7 +289,8 @@\n             return clusters;\n         }\n \n-        initializeMembershipMatrix();\n+        clusters.clear();\n+\t\tinitializeMembershipMatrix();\n \n         // there is at least one point\n         final int pointDimension = points.get(0).getPoint().length;\n@@ -315,19 +316,19 @@\n      * Update the cluster centers.\n      */\n     private void updateClusterCenters() {\n-        int j = 0;\n+        updateMembershipMatrix();\n+\t\tint j = 0;\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n             int i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n-            for (final T point : points) {\n+            List<CentroidCluster<T>> best = null;\n+\t\t\tfor (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n@@ -335,7 +336,7 @@\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n             j++;\n         }\n-        clusters.clear();\n+        clusters = newClusters;\n         clusters = newClusters;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 338, 
          "faulty": "clusters.clear();", 
          "type": "Replace", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 318, 
          "faulty": "int j=0;", 
          "type": "InsertBefore", 
          "seed": "updateMembershipMatrix();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 292, 
          "faulty": "initializeMembershipMatrix();", 
          "type": "InsertBefore", 
          "seed": "clusters.clear();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 325, 
          "faulty": "for (final T point : points) {\n  final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);\n  final double[] pointArr=point.getPoint();\n  for (int idx=0; idx < arr.length; idx++) {\n    arr[idx]+=u * pointArr[idx];\n  }\n  sum+=u;\n  i++;\n}", 
          "type": "InsertBefore", 
          "seed": "List<CentroidCluster<T>> best=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_138/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:36.145623186 -0500\n@@ -315,19 +315,19 @@\n      * Update the cluster centers.\n      */\n     private void updateClusterCenters() {\n-        int j = 0;\n+        final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n+\t\tint j = 0;\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n-            final Clusterable center = cluster.getCenter();\n+            boolean emptyCluster = false;\n+\t\t\tfinal Clusterable center = cluster.getCenter();\n             int i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "points.add(point);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 321, 
          "faulty": "final Clusterable center=cluster.getCenter();", 
          "type": "InsertBefore", 
          "seed": "boolean emptyCluster=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 318, 
          "faulty": "int j=0;", 
          "type": "InsertBefore", 
          "seed": "final int max=(maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_1059/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:44:00.073524683 -0500\n@@ -273,12 +273,15 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\t// number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -324,16 +327,13 @@\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                membershipMatrix[i][j] = random.nextDouble();\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n+            final List<T> neighbors = new ArrayList<T>();\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Replace", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_1052/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:58.661504654 -0500\n@@ -273,12 +273,17 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n-\n-        // copy the input collection to an unmodifiable list with indexed access\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\tif (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n+\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -299,12 +304,13 @@\n \n         int iteration = 0;\n         final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n-        double difference = 0.0;\n+        double distSqSum = 0.0;\n+\t\tdouble difference = 0.0;\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n-            updateMembershipMatrix();\n+            saveMembershipMatrix(oldMatrix);\n+\t\t\tupdateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n \n@@ -322,18 +328,16 @@\n             int i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n-            for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n-                sum += u;\n+            membershipMatrix[i] = MathArrays.normalizeArray(\n+\t\t\t\t\tmembershipMatrix[i], 1.0);\n+\t\t\tfor (final T point : points) {\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int clusterIndex = 0;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -347,7 +351,8 @@\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n-            int newCluster = -1;\n+            double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\t\tint newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n                 final double distA = FastMath.abs(distance(point, clusters.get(j).getCenter()));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Delete", 
          "seed": "if (fuzziness <= 1.0d) {\n  throw new NumberIsTooSmallException(fuzziness,1.0,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 350, 
          "faulty": "int newCluster=-1;", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 307, 
          "faulty": "updateMembershipMatrix();", 
          "type": "InsertBefore", 
          "seed": "saveMembershipMatrix(oldMatrix);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "membershipMatrix[i][j]=1.0 / sum;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "final List<Cluster<T>> clusters=new ArrayList<Cluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 302, 
          "faulty": "double difference=0.0;", 
          "type": "InsertBefore", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 331, 
          "faulty": "sum+=u;", 
          "type": "Delete", 
          "seed": "return k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 325, 
          "faulty": "for (final T point : points) {\n  final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);\n  final double[] pointArr=point.getPoint();\n  for (int idx=0; idx < arr.length; idx++) {\n    arr[idx]+=u * pointArr[idx];\n  }\n  sum+=u;\n  i++;\n}", 
          "type": "InsertBefore", 
          "seed": "membershipMatrix[i]=MathArrays.normalizeArray(membershipMatrix[i],1.0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int clusterIndex=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 331, 
          "faulty": "sum+=u;", 
          "type": "Delete", 
          "seed": "double difference=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_1080/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:44:04.765591196 -0500\n@@ -273,21 +273,21 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\t// number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n+        int newCluster = -1;\n \n         initializeMembershipMatrix();\n \n@@ -324,16 +324,13 @@\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                membershipMatrix[i][j] = random.nextDouble();\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n+            final List<T> neighbors = new ArrayList<T>();\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -347,7 +344,8 @@\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n-            int newCluster = -1;\n+            double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\t\tint newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n                 final double distA = FastMath.abs(distance(point, clusters.get(j).getCenter()));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 350, 
          "faulty": "int newCluster=-1;", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "i++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "int newCluster=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Replace", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_709/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:25.340165172 -0500\n@@ -273,10 +273,7 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>();\n \n         // copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n@@ -293,13 +290,17 @@\n \n         // there is at least one point\n         final int pointDimension = points.get(0).getPoint().length;\n-        for (int i = 0; i < k; i++) {\n+        int j = 0;\n+\t\tfor (int i = 0; i < k; i++) {\n             clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n         }\n \n         int iteration = 0;\n         final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n-        double difference = 0.0;\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n+\t\tdouble difference = 0.0;\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n@@ -324,16 +325,12 @@\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                final List<CentroidCluster<T>> resultSet = new ArrayList<CentroidCluster<T>>();\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 296, 
          "faulty": "for (int i=0; i < k; i++) {\n  clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n}", 
          "type": "InsertBefore", 
          "seed": "int j=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 302, 
          "faulty": "double difference=0.0;", 
          "type": "InsertBefore", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "final List<CentroidCluster<T>> resultSet=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "final double[] pointArr=point.getPoint();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_78/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:22.789413686 -0500\n@@ -278,7 +278,8 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.membershipMatrix = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -325,9 +326,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n@@ -335,7 +334,7 @@\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n             j++;\n         }\n-        clusters.clear();\n+        clusters = newClusters;\n         clusters = newClusters;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 338, 
          "faulty": "clusters.clear();", 
          "type": "Replace", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.membershipMatrix=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_69/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:20.653380030 -0500\n@@ -325,15 +325,13 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                final List<Cluster<T>> clusters = new ArrayList<Cluster<T>>();\n+\t\t\t\tint nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -344,7 +342,8 @@\n      * the highest membership.\n      */\n     private void updateMembershipMatrix() {\n-        for (int i = 0; i < points.size(); i++) {\n+        List<CentroidCluster<T>> best = null;\n+\t\tfor (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n             int newCluster = -1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "InsertBefore", 
          "seed": "final List<Cluster<T>> clusters=new ArrayList<Cluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 347, 
          "faulty": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}", 
          "type": "InsertBefore", 
          "seed": "List<CentroidCluster<T>> best=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "initializeMembershipMatrix();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_976/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:38.117212503 -0500\n@@ -273,12 +273,17 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n-\n-        // copy the input collection to an unmodifiable list with indexed access\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\tclusters = new ArrayList<CentroidCluster<T>>();\n+\t\tif (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n+\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -303,7 +308,6 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -319,21 +323,18 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            clusters.clear();\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n-            newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -345,7 +346,8 @@\n      */\n     private void updateMembershipMatrix() {\n         for (int i = 0; i < points.size(); i++) {\n-            final T point = points.get(i);\n+            final List<T> neighbors = new ArrayList<T>();\n+\t\t\tfinal T point = points.get(i);\n             double maxMembership = 0.0;\n             int newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "clusters.clear();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 335, 
          "faulty": "newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));", 
          "type": "Delete", 
          "seed": "int pointIndex=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 348, 
          "faulty": "final T point=points.get(i);", 
          "type": "InsertBefore", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_241/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:10.214150671 -0500\n@@ -278,17 +278,15 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n-        membershipMatrix = new double[size][k];\n+        int clusterIndex = 0;\n+\t\tmembershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -325,15 +323,10 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 284, 
          "faulty": "membershipMatrix=new double[size][k];", 
          "type": "InsertBefore", 
          "seed": "int clusterIndex=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "this.epsilon=epsilon;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_530/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:31.047368540 -0500\n@@ -273,22 +273,19 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n+        points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n+\t\t// number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -303,8 +300,8 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n-            updateMembershipMatrix();\n+            membershipMatrix = new double[size][k];\n+\t\t\tupdateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n \n@@ -325,15 +322,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n-                sum += u;\n-                i++;\n+                membershipMatrix[i] = MathArrays.normalizeArray(\n+\t\t\t\t\t\tmembershipMatrix[i], 1.0);\n+\t\t\t\ti++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 307, 
          "faulty": "updateMembershipMatrix();", 
          "type": "InsertBefore", 
          "seed": "membershipMatrix=new double[size][k];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "InsertBefore", 
          "seed": "membershipMatrix[i]=MathArrays.normalizeArray(membershipMatrix[i],1.0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "double maxMembership=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 331, 
          "faulty": "sum+=u;", 
          "type": "Delete", 
          "seed": "this.random=random;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_535/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:32.155384951 -0500\n@@ -273,16 +273,18 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n-        final double[][] oldMatrix = new double[size][k];\n+        int minCluster = 0;\n+\t\tfinal double[][] oldMatrix = new double[size][k];\n \n         // if no points are provided, return an empty list of clusters\n         if (size == 0) {\n@@ -304,7 +306,8 @@\n         do {\n             saveMembershipMatrix(oldMatrix);\n             updateClusterCenters();\n-            updateMembershipMatrix();\n+            membershipMatrix = new double[size][k];\n+\t\t\tupdateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n \n@@ -325,15 +328,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 307, 
          "faulty": "updateMembershipMatrix();", 
          "type": "InsertBefore", 
          "seed": "membershipMatrix=new double[size][k];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 285, 
          "faulty": "final double[][] oldMatrix=new double[size][k];", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_985/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:40.277243285 -0500\n@@ -273,15 +273,19 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n-\n-        // copy the input collection to an unmodifiable list with indexed access\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\tif (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n+\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n-        membershipMatrix = new double[size][k];\n+        final List<CentroidCluster<T>> resultSet = new ArrayList<CentroidCluster<T>>();\n+\t\tmembershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n         // if no points are provided, return an empty list of clusters\n@@ -323,17 +327,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Delete", 
          "seed": "if (fuzziness <= 1.0d) {\n  throw new NumberIsTooSmallException(fuzziness,1.0,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 284, 
          "faulty": "membershipMatrix=new double[size][k];", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> resultSet=new ArrayList<CentroidCluster<T>>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_728/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:28.848216155 -0500\n@@ -273,12 +273,12 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -303,7 +303,6 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -319,21 +318,17 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            updateMembershipMatrix();\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n-                i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "this.epsilon=epsilon;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "updateMembershipMatrix();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "int j=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_142/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:36.697631810 -0500\n@@ -318,16 +318,15 @@\n         int j = 0;\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n-            final Clusterable center = cluster.getCenter();\n+            boolean emptyCluster = false;\n+\t\t\tfinal Clusterable center = cluster.getCenter();\n             int i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n@@ -335,7 +334,7 @@\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n             j++;\n         }\n-        clusters.clear();\n+        clusters = newClusters;\n         clusters = newClusters;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 338, 
          "faulty": "clusters.clear();", 
          "type": "Replace", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "points.add(point);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 321, 
          "faulty": "final Clusterable center=cluster.getCenter();", 
          "type": "InsertBefore", 
          "seed": "boolean emptyCluster=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_743/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:32.512269346 -0500\n@@ -273,12 +273,12 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -324,16 +324,12 @@\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                final List<CentroidCluster<T>> resultSet = new ArrayList<CentroidCluster<T>>();\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "final List<CentroidCluster<T>> resultSet=new ArrayList<CentroidCluster<T>>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_366/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:45.046680772 -0500\n@@ -271,7 +271,8 @@\n         // sanity checks\n         MathUtils.checkNotNull(dataPoints);\n \n-        final int size = dataPoints.size();\n+        double minDistance = Double.MAX_VALUE;\n+\t\tfinal int size = dataPoints.size();\n \n         // number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n@@ -319,21 +320,17 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            int newCluster = -1;\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n-                sum += u;\n                 i++;\n+                sum += u;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "int newCluster=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 274, 
          "faulty": "final int size=dataPoints.size();", 
          "type": "InsertBefore", 
          "seed": "double minDistance=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "double difference=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "i++;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_86/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:24.273437043 -0500\n@@ -273,11 +273,6 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n-\n         // copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n@@ -289,8 +284,6 @@\n             return clusters;\n         }\n \n-        initializeMembershipMatrix();\n-\n         // there is at least one point\n         final int pointDimension = points.get(0).getPoint().length;\n         for (int i = 0; i < k; i++) {\n@@ -325,13 +318,10 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n-                i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n+            double distSqSum = 0.0;\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n             j++;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "return points;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 292, 
          "faulty": "initializeMembershipMatrix();", 
          "type": "Delete", 
          "seed": "clusters.clear();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Replace", 
          "seed": "double distSqSum=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_879/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:17.508917999 -0500\n@@ -273,21 +273,22 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n+        if (fuzziness <= 1.0d) {\n+\t\t\tthrow new NumberIsTooSmallException(fuzziness, 1.0, false);\n+\t\t}\n \n         initializeMembershipMatrix();\n \n@@ -325,9 +326,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "if (fuzziness <= 1.0d) {\n  throw new NumberIsTooSmallException(fuzziness,1.0,false);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_606/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:04.455860481 -0500\n@@ -293,7 +293,8 @@\n \n         // there is at least one point\n         final int pointDimension = points.get(0).getPoint().length;\n-        for (int i = 0; i < k; i++) {\n+        int j = 0;\n+\t\tfor (int i = 0; i < k; i++) {\n             clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n         }\n \n@@ -325,15 +326,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n-                i++;\n+                final int pointDimension = points.get(0).getPoint().length;\n+\t\t\t\ti++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -344,7 +342,8 @@\n      * the highest membership.\n      */\n     private void updateMembershipMatrix() {\n-        for (int i = 0; i < points.size(); i++) {\n+        List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>();\n+\t\tfor (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n             int newCluster = -1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 347, 
          "faulty": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}", 
          "type": "InsertBefore", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "InsertBefore", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 296, 
          "faulty": "for (int i=0; i < k; i++) {\n  clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n}", 
          "type": "InsertBefore", 
          "seed": "int j=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_908/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:24.061011796 -0500\n@@ -273,12 +273,13 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -304,7 +305,8 @@\n         do {\n             saveMembershipMatrix(oldMatrix);\n             updateClusterCenters();\n-            updateMembershipMatrix();\n+            saveMembershipMatrix(oldMatrix);\n+\t\t\tupdateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n \n@@ -325,9 +327,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 307, 
          "faulty": "updateMembershipMatrix();", 
          "type": "InsertBefore", 
          "seed": "saveMembershipMatrix(oldMatrix);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_243/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:10.498155029 -0500\n@@ -278,7 +278,9 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -325,15 +327,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_481/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:14.847127792 -0500\n@@ -273,12 +273,12 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -325,9 +325,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_596/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:02.615833536 -0500\n@@ -273,22 +273,14 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n-\n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -320,20 +312,13 @@\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n             int i = 0;\n-            double[] arr = new double[center.getPoint().length];\n+            if (fuzziness <= 1.0d) {\n+\t\t\t\tthrow new NumberIsTooSmallException(fuzziness, 1.0, false);\n+\t\t\t}\n+\t\t\tdouble[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n-            for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n-                sum += u;\n-                i++;\n-            }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n+            int pointIndex = 0;\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -344,7 +329,8 @@\n      * the highest membership.\n      */\n     private void updateMembershipMatrix() {\n-        for (int i = 0; i < points.size(); i++) {\n+        List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>();\n+\t\tfor (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n             int newCluster = -1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 323, 
          "faulty": "double[] arr=new double[center.getPoint().length];", 
          "type": "InsertBefore", 
          "seed": "if (fuzziness <= 1.0d) {\n  throw new NumberIsTooSmallException(fuzziness,1.0,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "this.k=k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 347, 
          "faulty": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}", 
          "type": "InsertBefore", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Delete", 
          "seed": "int j=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 325, 
          "faulty": "for (final T point : points) {\n  final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);\n  final double[] pointArr=point.getPoint();\n  for (int idx=0; idx < arr.length; idx++) {\n    arr[idx]+=u * pointArr[idx];\n  }\n  sum+=u;\n  i++;\n}", 
          "type": "Replace", 
          "seed": "int pointIndex=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "int clusterIndex=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_576/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:46.867602224 -0500\n@@ -325,15 +325,11 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -344,7 +340,8 @@\n      * the highest membership.\n      */\n     private void updateMembershipMatrix() {\n-        for (int i = 0; i < points.size(); i++) {\n+        List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>();\n+\t\tfor (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n             int newCluster = -1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 347, 
          "faulty": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}", 
          "type": "InsertBefore", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_950/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:32.001125257 -0500\n@@ -273,12 +273,15 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\t// number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -323,11 +326,9 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Delete", 
          "seed": "if (fuzziness <= 1.0d) {\n  throw new NumberIsTooSmallException(fuzziness,1.0,false);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_198/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:53.337890565 -0500\n@@ -303,7 +303,10 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n+            if (size == 0) {\n+\t\t\t\treturn clusters;\n+\t\t\t}\n+\t\t\tupdateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -315,27 +318,29 @@\n      * Update the cluster centers.\n      */\n     private void updateClusterCenters() {\n-        int j = 0;\n+        final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n+\t\tint j = 0;\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n-            final Clusterable center = cluster.getCenter();\n+            boolean emptyCluster = false;\n+\t\t\tfinal Clusterable center = cluster.getCenter();\n             int i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n-                sum += u;\n+                int nextPointIndex = -1;\n+                membershipMatrix[i] = MathArrays.normalizeArray(\n+\t\t\t\t\t\tmembershipMatrix[i], 1.0);\n+\t\t\t\tsum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n             j++;\n         }\n-        clusters.clear();\n+        clusters = newClusters;\n         clusters = newClusters;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "points.add(point);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 321, 
          "faulty": "final Clusterable center=cluster.getCenter();", 
          "type": "InsertBefore", 
          "seed": "boolean emptyCluster=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 318, 
          "faulty": "int j=0;", 
          "type": "InsertBefore", 
          "seed": "final int max=(maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 338, 
          "faulty": "clusters.clear();", 
          "type": "Replace", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "InsertBefore", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 331, 
          "faulty": "sum+=u;", 
          "type": "InsertBefore", 
          "seed": "membershipMatrix[i]=MathArrays.normalizeArray(membershipMatrix[i],1.0);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_810/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:03.128711578 -0500\n@@ -273,12 +273,12 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -319,21 +319,21 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            if (fuzziness <= 1.0d) {\n+\t\t\t\tthrow new NumberIsTooSmallException(fuzziness, 1.0, false);\n+\t\t\t}\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "if (fuzziness <= 1.0d) {\n  throw new NumberIsTooSmallException(fuzziness,1.0,false);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_560/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:37.575465132 -0500\n@@ -282,9 +282,11 @@\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n-        final double[][] oldMatrix = new double[size][k];\n+        double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\tfinal double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n+        clusters.clear();\n+\t\t// if no points are provided, return an empty list of clusters\n         if (size == 0) {\n             return clusters;\n         }\n@@ -319,21 +321,18 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            double maxMembership = 0.0;\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -344,7 +343,8 @@\n      * the highest membership.\n      */\n     private void updateMembershipMatrix() {\n-        for (int i = 0; i < points.size(); i++) {\n+        List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>();\n+\t\tfor (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n             int newCluster = -1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "this.k=k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 347, 
          "faulty": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}", 
          "type": "InsertBefore", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 285, 
          "faulty": "final double[][] oldMatrix=new double[size][k];", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "InsertBefore", 
          "seed": "clusters.clear();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "double maxMembership=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_431/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:03.214953969 -0500\n@@ -282,7 +282,8 @@\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n-        final double[][] oldMatrix = new double[size][k];\n+        final List<T> neighbors = new ArrayList<T>();\n+\t\tfinal double[][] oldMatrix = new double[size][k];\n \n         // if no points are provided, return an empty list of clusters\n         if (size == 0) {\n@@ -323,11 +324,9 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 285, 
          "faulty": "final double[][] oldMatrix=new double[size][k];", 
          "type": "InsertBefore", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "if (fuzziness <= 1.0d) {\n  throw new NumberIsTooSmallException(fuzziness,1.0,false);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_711/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:25.620169243 -0500\n@@ -324,10 +324,7 @@\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                final List<CentroidCluster<T>> resultSet = new ArrayList<CentroidCluster<T>>();\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "final List<CentroidCluster<T>> resultSet=new ArrayList<CentroidCluster<T>>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_813/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:03.720720091 -0500\n@@ -273,7 +273,8 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\t// number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n@@ -323,17 +324,15 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                membershipMatrix[i][j] = random.nextDouble();\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_807/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:56.708619162 -0500\n@@ -303,7 +303,6 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -319,17 +318,16 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            updateMembershipMatrix();\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n-                sum += u;\n-                i++;\n+                boolean emptyCluster = false;\n+\t\t\t\tsum += u;\n+                double minDistance = Double.MAX_VALUE;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "this.epsilon=epsilon;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "this.epsilon=epsilon;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "updateMembershipMatrix();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "int j=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 285, 
          "faulty": "final double[][] oldMatrix=new double[size][k];", 
          "type": "Replace", 
          "seed": "final double[][] oldMatrix=new double[size][k];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Replace", 
          "seed": "double minDistance=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "InsertBefore", 
          "seed": "boolean emptyCluster=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_875/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:16.720906707 -0500\n@@ -278,7 +278,8 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -303,7 +304,6 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -325,15 +325,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "initializeMembershipMatrix();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_895/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:20.988967838 -0500\n@@ -273,12 +273,15 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n-\n-        // copy the input collection to an unmodifiable list with indexed access\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\tclusters = new ArrayList<CentroidCluster<T>>();\n+\t\tif (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n+\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -323,11 +326,9 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Delete", 
          "seed": "if (fuzziness <= 1.0d) {\n  throw new NumberIsTooSmallException(fuzziness,1.0,false);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_591/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:01.551817947 -0500\n@@ -273,14 +273,17 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n-        clusters = new ArrayList<CentroidCluster<T>>();\n+        final Cluster<T> cluster = new Cluster<T>();\n+\t\tclusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n@@ -323,17 +326,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "this.k=k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 283, 
          "faulty": "clusters=new ArrayList<CentroidCluster<T>>();", 
          "type": "InsertBefore", 
          "seed": "final Cluster<T> cluster=new Cluster<T>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_101/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:27.793492367 -0500\n@@ -273,10 +273,7 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        final Cluster<T> cluster = new Cluster<T>();\n \n         // copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n@@ -284,11 +281,6 @@\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -303,7 +295,6 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -325,9 +316,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "final Cluster<T> cluster=new Cluster<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "int j=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final Cluster<T> cluster=new Cluster<T>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_835/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:08.376787002 -0500\n@@ -325,15 +325,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_119/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:32.065559359 -0500\n@@ -273,21 +273,13 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n-\n         // copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n+        boolean emptyCluster = false;\n \n         initializeMembershipMatrix();\n \n@@ -325,9 +317,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "boolean emptyCluster=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_170/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:41.993714421 -0500\n@@ -278,7 +278,9 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -303,7 +305,10 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n+            if (size == 0) {\n+\t\t\t\treturn clusters;\n+\t\t\t}\n+\t\t\tupdateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -325,9 +330,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "InsertBefore", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_546/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:34.639421718 -0500\n@@ -273,22 +273,16 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        double sum = 0.0;\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -303,7 +297,6 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -323,17 +316,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "double sum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "final double[][] oldMatrix=new double[size][k];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_111/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:30.333532217 -0500\n@@ -284,10 +284,7 @@\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n+        boolean emptyCluster = false;\n \n         initializeMembershipMatrix();\n \n@@ -325,11 +322,8 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n-                i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "return points;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "boolean emptyCluster=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_322/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:35.294533227 -0500\n@@ -278,17 +278,14 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -323,19 +320,15 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n-        clusters.clear();\n         clusters = newClusters;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 338, 
          "faulty": "clusters.clear();", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "points=new ArrayList<T>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_942/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:30.313101154 -0500\n@@ -303,7 +303,6 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -319,21 +318,18 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            clusters.clear();\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n-            newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "clusters.clear();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 335, 
          "faulty": "newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));", 
          "type": "Delete", 
          "seed": "int pointIndex=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_63/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:19.085355298 -0500\n@@ -273,11 +273,6 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n-\n         // copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n@@ -325,11 +320,8 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n-                i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "return points;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_630/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:09.907940224 -0500\n@@ -325,17 +325,13 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n-        clusters.clear();\n         clusters = newClusters;\n     }\n \n@@ -344,7 +340,8 @@\n      * the highest membership.\n      */\n     private void updateMembershipMatrix() {\n-        for (int i = 0; i < points.size(); i++) {\n+        List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>();\n+\t\tfor (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n             int newCluster = -1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 347, 
          "faulty": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}", 
          "type": "InsertBefore", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 338, 
          "faulty": "clusters.clear();", 
          "type": "Delete", 
          "seed": "int minCluster=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_1012/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:45.741321083 -0500\n@@ -284,10 +284,7 @@\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n+        int newCluster = -1;\n \n         initializeMembershipMatrix();\n \n@@ -325,15 +322,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n+            final List<T> neighbors = new ArrayList<T>();\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -347,7 +341,8 @@\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n-            int newCluster = -1;\n+            double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\t\tint newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n                 final double distA = FastMath.abs(distance(point, clusters.get(j).getCenter()));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 350, 
          "faulty": "int newCluster=-1;", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "i++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "int newCluster=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Replace", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_897/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:21.244971502 -0500\n@@ -304,7 +304,8 @@\n         do {\n             saveMembershipMatrix(oldMatrix);\n             updateClusterCenters();\n-            updateMembershipMatrix();\n+            saveMembershipMatrix(oldMatrix);\n+\t\t\tupdateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n \n@@ -325,9 +326,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 307, 
          "faulty": "updateMembershipMatrix();", 
          "type": "InsertBefore", 
          "seed": "saveMembershipMatrix(oldMatrix);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_51/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:15.825303802 -0500\n@@ -325,9 +325,8 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                final List<Cluster<T>> clusters = new ArrayList<Cluster<T>>();\n+\t\t\t\tint nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "InsertBefore", 
          "seed": "final List<Cluster<T>> clusters=new ArrayList<Cluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_29/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:38:57.717015888 -0500\n@@ -325,9 +325,8 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                final List<Cluster<T>> clusters = new ArrayList<Cluster<T>>();\n+\t\t\t\tint nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "InsertBefore", 
          "seed": "final List<Cluster<T>> clusters=new ArrayList<Cluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_310/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:32.414489528 -0500\n@@ -278,7 +278,9 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -319,15 +321,13 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            int newCluster = -1;\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "int newCluster=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_151/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:38.485659727 -0500\n@@ -280,7 +280,10 @@\n \n         // copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n-        clusters = new ArrayList<CentroidCluster<T>>();\n+        if (size < k) {\n+\t\t\tthrow new NumberIsTooSmallException(size, k, false);\n+\t\t}\n+\t\tclusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n@@ -299,7 +302,8 @@\n \n         int iteration = 0;\n         final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n-        double difference = 0.0;\n+        points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n+\t\tdouble difference = 0.0;\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n@@ -325,9 +329,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 283, 
          "faulty": "clusters=new ArrayList<CentroidCluster<T>>();", 
          "type": "InsertBefore", 
          "seed": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 302, 
          "faulty": "double difference=0.0;", 
          "type": "InsertBefore", 
          "seed": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_1082/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:44:05.025594880 -0500\n@@ -273,7 +273,8 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\t// number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n@@ -284,10 +285,8 @@\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n+        double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\tfinal Cluster<T> cluster = new Cluster<T>();\n \n         initializeMembershipMatrix();\n \n@@ -324,16 +323,15 @@\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n-                sum += u;\n+                boolean emptyCluster = false;\n+                int index = 0;\n+                final double distA = FastMath.abs(distance(point,\n+\t\t\t\t\t\tclusters.get(j).getCenter()));\n+\t\t\t\tsum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n+            double bestVarianceSum = Double.POSITIVE_INFINITY;\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -347,7 +345,8 @@\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n-            int newCluster = -1;\n+            double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\t\tint newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n                 final double distA = FastMath.abs(distance(point, clusters.get(j).getCenter()));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 350, 
          "faulty": "int newCluster=-1;", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "i++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "int newCluster=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "final Cluster<T> cluster=new Cluster<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "boolean emptyCluster=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Replace", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 331, 
          "faulty": "sum+=u;", 
          "type": "InsertBefore", 
          "seed": "final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_262/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:15.070225106 -0500\n@@ -278,7 +278,9 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -325,15 +327,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n+            int assignedDifferently = 0;\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Replace", 
          "seed": "int assignedDifferently=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_705/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:24.828157726 -0500\n@@ -273,14 +273,16 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n-        clusters = new ArrayList<CentroidCluster<T>>();\n+        final Cluster<T> cluster = new Cluster<T>();\n+\t\tclusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n@@ -323,17 +325,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "this.k=k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 283, 
          "faulty": "clusters=new ArrayList<CentroidCluster<T>>();", 
          "type": "InsertBefore", 
          "seed": "final Cluster<T> cluster=new Cluster<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_1028/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:54.361443618 -0500\n@@ -273,21 +273,21 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\t// number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n+        double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\tfinal Cluster<T> cluster = new Cluster<T>();\n \n         initializeMembershipMatrix();\n \n@@ -315,7 +315,8 @@\n      * Update the cluster centers.\n      */\n     private void updateClusterCenters() {\n-        int j = 0;\n+        double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\tint j = 0;\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n@@ -324,10 +325,8 @@\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                boolean emptyCluster = false;\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n@@ -347,7 +346,8 @@\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n-            int newCluster = -1;\n+            double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\t\tint newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n                 final double distA = FastMath.abs(distance(point, clusters.get(j).getCenter()));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 350, 
          "faulty": "int newCluster=-1;", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "i++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "int newCluster=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "final Cluster<T> cluster=new Cluster<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "boolean emptyCluster=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 318, 
          "faulty": "int j=0;", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_703/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:24.564153887 -0500\n@@ -273,12 +273,13 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\tif (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -325,15 +326,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_695/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:22.916129911 -0500\n@@ -293,18 +293,23 @@\n \n         // there is at least one point\n         final int pointDimension = points.get(0).getPoint().length;\n-        for (int i = 0; i < k; i++) {\n+        int j = 0;\n+\t\tfor (int i = 0; i < k; i++) {\n             clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n         }\n \n         int iteration = 0;\n         final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n-        double difference = 0.0;\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n+\t\tdouble difference = 0.0;\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n             updateClusterCenters();\n-            updateMembershipMatrix();\n+            int newCluster = -1;\n+\t\t\tupdateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n \n@@ -324,10 +329,7 @@\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 296, 
          "faulty": "for (int i=0; i < k; i++) {\n  clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n}", 
          "type": "InsertBefore", 
          "seed": "int j=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 302, 
          "faulty": "double difference=0.0;", 
          "type": "InsertBefore", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Delete", 
          "seed": "boolean emptyCluster=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 307, 
          "faulty": "updateMembershipMatrix();", 
          "type": "InsertBefore", 
          "seed": "int newCluster=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_849/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:10.976824332 -0500\n@@ -273,12 +273,13 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -303,7 +304,6 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -319,20 +319,18 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            clusters.clear();\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n-            newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n             j++;\n         }\n         clusters.clear();\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "clusters.clear();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 335, 
          "faulty": "newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));", 
          "type": "Delete", 
          "seed": "int pointIndex=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_1020/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:52.981424017 -0500\n@@ -273,12 +273,14 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n-\n-        // copy the input collection to an unmodifiable list with indexed access\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\tif (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n+\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -324,18 +326,13 @@\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n-        clusters.clear();\n         clusters = newClusters;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Delete", 
          "seed": "if (fuzziness <= 1.0d) {\n  throw new NumberIsTooSmallException(fuzziness,1.0,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 338, 
          "faulty": "clusters.clear();", 
          "type": "Delete", 
          "seed": "final Map<Clusterable,PointStatus> visited=new HashMap<Clusterable,PointStatus>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_508/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:26.135295703 -0500\n@@ -278,17 +278,14 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -323,17 +320,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n-            newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n+            initializeMembershipMatrix();\n+\t\t\tnewClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "this.k=k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "InsertBefore", 
          "seed": "initializeMembershipMatrix();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_427/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:02.458942643 -0500\n@@ -271,7 +271,8 @@\n         // sanity checks\n         MathUtils.checkNotNull(dataPoints);\n \n-        final int size = dataPoints.size();\n+        double minDistance = Double.MAX_VALUE;\n+\t\tfinal int size = dataPoints.size();\n \n         // number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n@@ -284,12 +285,10 @@\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n         if (size == 0) {\n-            return clusters;\n-        }\n-\n-        initializeMembershipMatrix();\n+\t\t\treturn clusters;\n+\t\t}\n+\t\tinitializeMembershipMatrix();\n \n         // there is at least one point\n         final int pointDimension = points.get(0).getPoint().length;\n@@ -319,21 +318,17 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            int newCluster = -1;\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 sum += u;\n-                i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "int newCluster=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 274, 
          "faulty": "final int size=dataPoints.size();", 
          "type": "InsertBefore", 
          "seed": "double minDistance=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 292, 
          "faulty": "initializeMembershipMatrix();", 
          "type": "InsertBefore", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Delete", 
          "seed": "initializeMembershipMatrix();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Delete", 
          "seed": "int clusterIndex=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_582/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:53.903705727 -0500\n@@ -278,18 +278,18 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n-        final double[][] oldMatrix = new double[size][k];\n+        double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\tfinal double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n-        initializeMembershipMatrix();\n+        clusters.clear();\n+\t\tinitializeMembershipMatrix();\n \n         // there is at least one point\n         final int pointDimension = points.get(0).getPoint().length;\n@@ -319,21 +319,19 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            double maxMembership = 0.0;\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -344,7 +342,8 @@\n      * the highest membership.\n      */\n     private void updateMembershipMatrix() {\n-        for (int i = 0; i < points.size(); i++) {\n+        List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>();\n+\t\tfor (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n             int newCluster = -1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "this.k=k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 347, 
          "faulty": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}", 
          "type": "InsertBefore", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 285, 
          "faulty": "final double[][] oldMatrix=new double[size][k];", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "InsertBefore", 
          "seed": "clusters.clear();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "double maxMembership=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_267/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:16.878252773 -0500\n@@ -325,15 +325,11 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_458/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:09.207043613 -0500\n@@ -278,7 +278,10 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -304,7 +307,8 @@\n         do {\n             saveMembershipMatrix(oldMatrix);\n             updateClusterCenters();\n-            updateMembershipMatrix();\n+            membershipMatrix = new double[size][k];\n+\t\t\tupdateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n \n@@ -317,7 +321,8 @@\n     private void updateClusterCenters() {\n         int j = 0;\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n-        for (final CentroidCluster<T> cluster : clusters) {\n+        int iteration = 0;\n+\t\tfor (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n             int i = 0;\n             double[] arr = new double[center.getPoint().length];\n@@ -325,15 +330,11 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 307, 
          "faulty": "updateMembershipMatrix();", 
          "type": "InsertBefore", 
          "seed": "membershipMatrix=new double[size][k];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 320, 
          "faulty": "for (final CentroidCluster<T> cluster : clusters) {\n  final Clusterable center=cluster.getCenter();\n  int i=0;\n  double[] arr=new double[center.getPoint().length];\n  double sum=0.0;\n  for (  final T point : points) {\n    final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);\n    final double[] pointArr=point.getPoint();\n    for (int idx=0; idx < arr.length; idx++) {\n      arr[idx]+=u * pointArr[idx];\n    }\n    sum+=u;\n    i++;\n  }\n  MathArrays.scaleInPlace(1.0 / sum,arr);\n  newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n  j++;\n}", 
          "type": "InsertBefore", 
          "seed": "int iteration=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_789/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:52.960565134 -0500\n@@ -273,7 +273,8 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\t// number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n@@ -324,16 +325,13 @@\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                membershipMatrix[i][j] = random.nextDouble();\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_963/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:35.161170351 -0500\n@@ -273,12 +273,15 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n-\n-        // copy the input collection to an unmodifiable list with indexed access\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\tif (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n+\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -299,12 +302,13 @@\n \n         int iteration = 0;\n         final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n-        double difference = 0.0;\n+        double distSqSum = 0.0;\n+\t\tdouble difference = 0.0;\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n-            updateMembershipMatrix();\n+            saveMembershipMatrix(oldMatrix);\n+\t\t\tupdateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n \n@@ -325,15 +329,11 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n-                sum += u;\n+                int nextPointIndex = -1;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -347,7 +347,8 @@\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n-            int newCluster = -1;\n+            double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\t\tint newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n                 final double distA = FastMath.abs(distance(point, clusters.get(j).getCenter()));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 350, 
          "faulty": "int newCluster=-1;", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 307, 
          "faulty": "updateMembershipMatrix();", 
          "type": "InsertBefore", 
          "seed": "saveMembershipMatrix(oldMatrix);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "membershipMatrix[i][j]=1.0 / sum;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "final List<Cluster<T>> clusters=new ArrayList<Cluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 302, 
          "faulty": "double difference=0.0;", 
          "type": "InsertBefore", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 331, 
          "faulty": "sum+=u;", 
          "type": "Delete", 
          "seed": "return k;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_230/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:07.090102692 -0500\n@@ -284,11 +284,6 @@\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -297,7 +292,8 @@\n             clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n         }\n \n-        int iteration = 0;\n+        int j = 0;\n+\t\tint iteration = 0;\n         final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n         double difference = 0.0;\n \n@@ -325,15 +321,11 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 300, 
          "faulty": "int iteration=0;", 
          "type": "InsertBefore", 
          "seed": "int j=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "this.k=k;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_433/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:03.574959361 -0500\n@@ -278,17 +278,14 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -323,17 +320,13 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "this.k=k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_345/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:40.262608473 -0500\n@@ -278,7 +278,9 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -303,7 +305,6 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -317,24 +318,6 @@\n     private void updateClusterCenters() {\n         int j = 0;\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n-        for (final CentroidCluster<T> cluster : clusters) {\n-            final Clusterable center = cluster.getCenter();\n-            int i = 0;\n-            double[] arr = new double[center.getPoint().length];\n-            double sum = 0.0;\n-            for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n-                sum += u;\n-                i++;\n-            }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n-            newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n-        }\n         clusters.clear();\n         clusters = newClusters;\n     }\n@@ -346,7 +329,8 @@\n     private void updateMembershipMatrix() {\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n-            double maxMembership = 0.0;\n+            int clusterIndex = 0;\n+\t\t\tdouble maxMembership = 0.0;\n             int newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 349, 
          "faulty": "double maxMembership=0.0;", 
          "type": "InsertBefore", 
          "seed": "int clusterIndex=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "InsertBefore", 
          "seed": "initializeMembershipMatrix();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 320, 
          "faulty": "for (final CentroidCluster<T> cluster : clusters) {\n  final Clusterable center=cluster.getCenter();\n  int i=0;\n  double[] arr=new double[center.getPoint().length];\n  double sum=0.0;\n  for (  final T point : points) {\n    final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);\n    final double[] pointArr=point.getPoint();\n    for (int idx=0; idx < arr.length; idx++) {\n      arr[idx]+=u * pointArr[idx];\n    }\n    sum+=u;\n    i++;\n  }\n  MathArrays.scaleInPlace(1.0 / sum,arr);\n  newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n  j++;\n}", 
          "type": "Delete", 
          "seed": "int clusterIndex=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_623/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:08.399918182 -0500\n@@ -278,18 +278,16 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n-        final double[][] oldMatrix = new double[size][k];\n+        double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\tfinal double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n-        initializeMembershipMatrix();\n+        clusters.clear();\n+\t\tinitializeMembershipMatrix();\n \n         // there is at least one point\n         final int pointDimension = points.get(0).getPoint().length;\n@@ -319,21 +317,19 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            double maxMembership = 0.0;\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 285, 
          "faulty": "final double[][] oldMatrix=new double[size][k];", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "InsertBefore", 
          "seed": "clusters.clear();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "double maxMembership=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_639/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:11.571964533 -0500\n@@ -273,10 +273,7 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>();\n \n         // copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n@@ -298,7 +295,8 @@\n         }\n \n         int iteration = 0;\n-        final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n+        int clusterIndex = 0;\n+\t\tfinal int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n         double difference = 0.0;\n \n         do {\n@@ -325,17 +323,13 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n-        clusters.clear();\n+        final int pointDimension = points.get(0).getPoint().length;\n         clusters = newClusters;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 338, 
          "faulty": "clusters.clear();", 
          "type": "Replace", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 301, 
          "faulty": "final int max=(maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;", 
          "type": "InsertBefore", 
          "seed": "int clusterIndex=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_566/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:39.167488654 -0500\n@@ -273,12 +273,10 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>();\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -320,20 +318,20 @@\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n             int i = 0;\n-            double[] arr = new double[center.getPoint().length];\n+            if (fuzziness <= 1.0d) {\n+\t\t\t\tthrow new NumberIsTooSmallException(fuzziness, 1.0, false);\n+\t\t\t}\n+\t\t\tdouble[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 323, 
          "faulty": "double[] arr=new double[center.getPoint().length];", 
          "type": "InsertBefore", 
          "seed": "if (fuzziness <= 1.0d) {\n  throw new NumberIsTooSmallException(fuzziness,1.0,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_600/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:03.183841856 -0500\n@@ -273,12 +273,12 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -325,15 +325,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -344,7 +341,8 @@\n      * the highest membership.\n      */\n     private void updateMembershipMatrix() {\n-        for (int i = 0; i < points.size(); i++) {\n+        List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>();\n+\t\tfor (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n             int newCluster = -1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 347, 
          "faulty": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}", 
          "type": "InsertBefore", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_994/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:42.257271488 -0500\n@@ -273,21 +273,20 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\t// number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n+        final Cluster<T> cluster = new Cluster<T>();\n \n         initializeMembershipMatrix();\n \n@@ -324,10 +323,8 @@\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                membershipMatrix[i][j] = random.nextDouble();\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n@@ -347,7 +344,8 @@\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n-            int newCluster = -1;\n+            double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\t\tint newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n                 final double distA = FastMath.abs(distance(point, clusters.get(j).getCenter()));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 350, 
          "faulty": "int newCluster=-1;", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "i++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "int newCluster=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "final Cluster<T> cluster=new Cluster<T>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_418/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:00.674915901 -0500\n@@ -323,17 +323,13 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "this.k=k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_670/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:17.828055811 -0500\n@@ -293,13 +293,17 @@\n \n         // there is at least one point\n         final int pointDimension = points.get(0).getPoint().length;\n-        for (int i = 0; i < k; i++) {\n+        int j = 0;\n+\t\tfor (int i = 0; i < k; i++) {\n             clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n         }\n \n         int iteration = 0;\n         final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n-        double difference = 0.0;\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n+\t\tdouble difference = 0.0;\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n@@ -324,10 +328,9 @@\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\t\t\tfinal List<CentroidCluster<T>> resultSet = new ArrayList<CentroidCluster<T>>();\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 296, 
          "faulty": "for (int i=0; i < k; i++) {\n  clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n}", 
          "type": "InsertBefore", 
          "seed": "int j=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 302, 
          "faulty": "double difference=0.0;", 
          "type": "InsertBefore", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "final List<CentroidCluster<T>> resultSet=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_216/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:03.222043180 -0500\n@@ -278,17 +278,14 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -325,15 +322,11 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_1002/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:43.925295237 -0500\n@@ -273,21 +273,21 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\t// number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n-        membershipMatrix = new double[size][k];\n+        final List<CentroidCluster<T>> resultSet = new ArrayList<CentroidCluster<T>>();\n+\t\tmembershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n+        int newCluster = -1;\n \n         initializeMembershipMatrix();\n \n@@ -324,10 +324,8 @@\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                double maxMembership = 0.0;\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 284, 
          "faulty": "membershipMatrix=new double[size][k];", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> resultSet=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "int newCluster=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "double maxMembership=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_554/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:36.507449345 -0500\n@@ -273,22 +273,16 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        double sum = 0.0;\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -303,7 +297,6 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -323,20 +316,17 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n-        clusters = newClusters;\n+        final List<T> neighbors = new ArrayList<T>();\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "double sum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "final double[][] oldMatrix=new double[size][k];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 339, 
          "faulty": "clusters=newClusters;", 
          "type": "Replace", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "this.membershipMatrix=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_1007/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:44.821307991 -0500\n@@ -273,12 +273,16 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\tclusters = new ArrayList<CentroidCluster<T>>();\n+\t\t// number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -323,17 +327,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Delete", 
          "seed": "if (fuzziness <= 1.0d) {\n  throw new NumberIsTooSmallException(fuzziness,1.0,false);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_27/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:38:57.449011602 -0500\n@@ -282,7 +282,8 @@\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n-        final double[][] oldMatrix = new double[size][k];\n+        int clusterIndex = 0;\n+\t\tfinal double[][] oldMatrix = new double[size][k];\n \n         // if no points are provided, return an empty list of clusters\n         if (size == 0) {\n@@ -325,9 +326,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 285, 
          "faulty": "final double[][] oldMatrix=new double[size][k];", 
          "type": "InsertBefore", 
          "seed": "int clusterIndex=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_1009/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:45.077311635 -0500\n@@ -273,21 +273,21 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\t// number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n+        double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\tfinal Cluster<T> cluster = new Cluster<T>();\n \n         initializeMembershipMatrix();\n \n@@ -324,10 +324,8 @@\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                boolean emptyCluster = false;\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n@@ -347,7 +345,8 @@\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n-            int newCluster = -1;\n+            double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\t\tint newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n                 final double distA = FastMath.abs(distance(point, clusters.get(j).getCenter()));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 350, 
          "faulty": "int newCluster=-1;", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "i++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "int newCluster=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "final Cluster<T> cluster=new Cluster<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "boolean emptyCluster=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_765/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:42.492413931 -0500\n@@ -273,10 +273,10 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\tif (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n         // copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n@@ -324,16 +324,13 @@\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                membershipMatrix[i][j] = random.nextDouble();\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_1/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:38:47.712856114 -0500\n@@ -325,9 +325,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_113/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:30.685537735 -0500\n@@ -280,7 +280,10 @@\n \n         // copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n-        clusters = new ArrayList<CentroidCluster<T>>();\n+        if (size < k) {\n+\t\t\tthrow new NumberIsTooSmallException(size, k, false);\n+\t\t}\n+\t\tclusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n@@ -325,9 +328,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 283, 
          "faulty": "clusters=new ArrayList<CentroidCluster<T>>();", 
          "type": "InsertBefore", 
          "seed": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_305/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:31.462475070 -0500\n@@ -278,17 +278,14 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -323,17 +320,13 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Delete", 
          "seed": "continue;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_1055/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:59.305513790 -0500\n@@ -273,21 +273,22 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\t// number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n+        double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\tfinal Cluster<T> cluster = new Cluster<T>();\n \n         initializeMembershipMatrix();\n \n@@ -324,16 +325,13 @@\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                boolean emptyCluster = false;\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -347,7 +345,8 @@\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n-            int newCluster = -1;\n+            double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\t\tint newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n                 final double distA = FastMath.abs(distance(point, clusters.get(j).getCenter()));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 350, 
          "faulty": "int newCluster=-1;", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "i++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "int newCluster=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "final Cluster<T> cluster=new Cluster<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "boolean emptyCluster=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_584/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:54.275711192 -0500\n@@ -278,13 +278,17 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n-        final double[][] oldMatrix = new double[size][k];\n+        double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\tfinal double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n+        clusters.clear();\n+\t\t// if no points are provided, return an empty list of clusters\n         if (size == 0) {\n             return clusters;\n         }\n@@ -319,21 +323,18 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            double maxMembership = 0.0;\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -344,7 +345,8 @@\n      * the highest membership.\n      */\n     private void updateMembershipMatrix() {\n-        for (int i = 0; i < points.size(); i++) {\n+        List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>();\n+\t\tfor (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n             int newCluster = -1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "this.k=k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 347, 
          "faulty": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}", 
          "type": "InsertBefore", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 285, 
          "faulty": "final double[][] oldMatrix=new double[size][k];", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "InsertBefore", 
          "seed": "clusters.clear();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "double maxMembership=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_953/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:32.577133479 -0500\n@@ -273,12 +273,14 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -299,12 +301,13 @@\n \n         int iteration = 0;\n         final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n-        double difference = 0.0;\n+        double distSqSum = 0.0;\n+\t\tdouble difference = 0.0;\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n-            updateMembershipMatrix();\n+            saveMembershipMatrix(oldMatrix);\n+\t\t\tupdateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n \n@@ -325,15 +328,11 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n-                sum += u;\n+                int nextPointIndex = -1;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -347,7 +346,8 @@\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n-            int newCluster = -1;\n+            double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\t\tint newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n                 final double distA = FastMath.abs(distance(point, clusters.get(j).getCenter()));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 350, 
          "faulty": "int newCluster=-1;", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 307, 
          "faulty": "updateMembershipMatrix();", 
          "type": "InsertBefore", 
          "seed": "saveMembershipMatrix(oldMatrix);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "membershipMatrix[i][j]=1.0 / sum;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "final List<Cluster<T>> clusters=new ArrayList<Cluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 302, 
          "faulty": "double difference=0.0;", 
          "type": "InsertBefore", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 331, 
          "faulty": "sum+=u;", 
          "type": "Delete", 
          "seed": "return k;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_574/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:46.559597687 -0500\n@@ -273,12 +273,14 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -323,17 +325,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "this.k=k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_1033/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:55.201455546 -0500\n@@ -273,21 +273,21 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\t// number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n+        int newCluster = -1;\n \n         initializeMembershipMatrix();\n \n@@ -323,13 +323,12 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                membershipMatrix[i][j] = random.nextDouble();\n+                int nextPointIndex = -1;\n                 sum += u;\n-                i++;\n+                membershipMatrix[i][j] = 1.0 / sum;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "int newCluster=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=1.0 / sum;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_149/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:38.197655233 -0500\n@@ -315,19 +315,20 @@\n      * Update the cluster centers.\n      */\n     private void updateClusterCenters() {\n-        int j = 0;\n+        final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n+\t\tint j = 0;\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n-            final Clusterable center = cluster.getCenter();\n+            boolean emptyCluster = false;\n+\t\t\tfinal Clusterable center = cluster.getCenter();\n             int i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                membershipMatrix[i] = MathArrays.normalizeArray(\n+\t\t\t\t\t\tmembershipMatrix[i], 1.0);\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "points.add(point);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 321, 
          "faulty": "final Clusterable center=cluster.getCenter();", 
          "type": "InsertBefore", 
          "seed": "boolean emptyCluster=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 318, 
          "faulty": "int j=0;", 
          "type": "InsertBefore", 
          "seed": "final int max=(maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i]=MathArrays.normalizeArray(membershipMatrix[i],1.0);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_872/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:16.164898740 -0500\n@@ -284,10 +284,7 @@\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n+        int j = 0;\n \n         initializeMembershipMatrix();\n \n@@ -323,17 +320,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                membershipMatrix[i][j] = random.nextDouble();\n+                int nextPointIndex = -1;\n                 sum += u;\n-                i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "this.epsilon=epsilon;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "int j=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_157/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:39.357673333 -0500\n@@ -280,7 +280,10 @@\n \n         // copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n-        clusters = new ArrayList<CentroidCluster<T>>();\n+        if (size < k) {\n+\t\t\tthrow new NumberIsTooSmallException(size, k, false);\n+\t\t}\n+\t\tclusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n@@ -325,9 +328,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n@@ -335,7 +336,7 @@\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n             j++;\n         }\n-        clusters.clear();\n+        clusters = newClusters;\n         clusters = newClusters;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 338, 
          "faulty": "clusters.clear();", 
          "type": "Replace", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 283, 
          "faulty": "clusters=new ArrayList<CentroidCluster<T>>();", 
          "type": "InsertBefore", 
          "seed": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_925/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:27.281057836 -0500\n@@ -273,12 +273,18 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n-\n-        // copy the input collection to an unmodifiable list with indexed access\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\tclusters = new ArrayList<CentroidCluster<T>>();\n+\t\tclusters = new ArrayList<CentroidCluster<T>>();\n+\t\tif (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n+\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -323,17 +329,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Delete", 
          "seed": "if (fuzziness <= 1.0d) {\n  throw new NumberIsTooSmallException(fuzziness,1.0,false);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_776/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:44.928449159 -0500\n@@ -273,12 +273,12 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -303,7 +303,6 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -319,21 +318,21 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            updateMembershipMatrix();\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n-            for (final T point : points) {\n+            clusters = new ArrayList<CentroidCluster<T>>();\n+\t\t\tfor (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n                 for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+\t\t\t\t\tarr[idx] += u * pointArr[idx];\n+\t\t\t\t}\n                 sum += u;\n-                i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "this.epsilon=epsilon;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "this.epsilon=epsilon;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "updateMembershipMatrix();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "int j=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 285, 
          "faulty": "final double[][] oldMatrix=new double[size][k];", 
          "type": "Replace", 
          "seed": "final double[][] oldMatrix=new double[size][k];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 325, 
          "faulty": "for (final T point : points) {\n  final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);\n  final double[] pointArr=point.getPoint();\n  for (int idx=0; idx < arr.length; idx++) {\n    arr[idx]+=u * pointArr[idx];\n  }\n  sum+=u;\n  i++;\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_1045/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:57.569489159 -0500\n@@ -284,10 +284,7 @@\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n+        int newCluster = -1;\n \n         initializeMembershipMatrix();\n \n@@ -315,7 +312,8 @@\n      * Update the cluster centers.\n      */\n     private void updateClusterCenters() {\n-        int j = 0;\n+        int assignedDifferently = 0;\n+\t\tint j = 0;\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n@@ -325,15 +323,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n+            final List<T> neighbors = new ArrayList<T>();\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -347,7 +342,8 @@\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n-            int newCluster = -1;\n+            double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\t\tint newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n                 final double distA = FastMath.abs(distance(point, clusters.get(j).getCenter()));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 350, 
          "faulty": "int newCluster=-1;", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "i++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "int newCluster=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Replace", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 318, 
          "faulty": "int j=0;", 
          "type": "InsertBefore", 
          "seed": "int assignedDifferently=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_399/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:51.586779362 -0500\n@@ -278,7 +278,9 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -323,17 +325,13 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final Map<Clusterable,PointStatus> visited=new HashMap<Clusterable,PointStatus>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "throw new NumberIsTooSmallException(fuzziness,1.0,false);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_96/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:26.945479050 -0500\n@@ -284,11 +284,6 @@\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -325,11 +320,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n-                i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "return points;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_721/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:27.480196280 -0500\n@@ -325,9 +325,6 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_781/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:45.680460028 -0500\n@@ -273,12 +273,12 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -303,7 +303,6 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -317,24 +316,6 @@\n     private void updateClusterCenters() {\n         int j = 0;\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n-        for (final CentroidCluster<T> cluster : clusters) {\n-            final Clusterable center = cluster.getCenter();\n-            int i = 0;\n-            double[] arr = new double[center.getPoint().length];\n-            double sum = 0.0;\n-            for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n-                sum += u;\n-                i++;\n-            }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n-            newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n-        }\n         clusters.clear();\n         clusters = newClusters;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "updateMembershipMatrix();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "int j=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "Delete", 
          "seed": "final List<CentroidCluster<T>> resultSet=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 323, 
          "faulty": "double[] arr=new double[center.getPoint().length];", 
          "type": "Delete", 
          "seed": "initializeMembershipMatrix();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 320, 
          "faulty": "for (final CentroidCluster<T> cluster : clusters) {\n  final Clusterable center=cluster.getCenter();\n  int i=0;\n  double[] arr=new double[center.getPoint().length];\n  double sum=0.0;\n  for (  final T point : points) {\n    final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);\n    final double[] pointArr=point.getPoint();\n    for (int idx=0; idx < arr.length; idx++) {\n      arr[idx]+=u * pointArr[idx];\n    }\n    sum+=u;\n    i++;\n  }\n  MathArrays.scaleInPlace(1.0 / sum,arr);\n  newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n  j++;\n}", 
          "type": "Delete", 
          "seed": "j++;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_251/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:12.514185948 -0500\n@@ -278,17 +278,14 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -325,15 +322,11 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_98/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:27.213483259 -0500\n@@ -318,16 +318,15 @@\n         int j = 0;\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n-            final Clusterable center = cluster.getCenter();\n+            boolean emptyCluster = false;\n+\t\t\tfinal Clusterable center = cluster.getCenter();\n             int i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "points.add(point);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 321, 
          "faulty": "final Clusterable center=cluster.getCenter();", 
          "type": "InsertBefore", 
          "seed": "boolean emptyCluster=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_167/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:41.389705011 -0500\n@@ -278,7 +278,9 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -303,7 +305,10 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n+            if (size == 0) {\n+\t\t\t\treturn clusters;\n+\t\t\t}\n+\t\t\tupdateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -318,16 +323,14 @@\n         int j = 0;\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n-            final Clusterable center = cluster.getCenter();\n+            boolean emptyCluster = false;\n+\t\t\tfinal Clusterable center = cluster.getCenter();\n             int i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n@@ -335,7 +338,7 @@\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n             j++;\n         }\n-        clusters.clear();\n+        clusters = newClusters;\n         clusters = newClusters;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "points.add(point);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 321, 
          "faulty": "final Clusterable center=cluster.getCenter();", 
          "type": "InsertBefore", 
          "seed": "boolean emptyCluster=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 338, 
          "faulty": "clusters.clear();", 
          "type": "Replace", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Delete", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "InsertBefore", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_893/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:20.584962054 -0500\n@@ -278,7 +278,8 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -325,9 +326,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n@@ -347,7 +346,8 @@\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n-            int newCluster = -1;\n+            double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\t\tint newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n                 final double distA = FastMath.abs(distance(point, clusters.get(j).getCenter()));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 350, 
          "faulty": "int newCluster=-1;", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "i++;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_325/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:35.838541475 -0500\n@@ -278,17 +278,13 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        int nextPointIndex = -1;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -323,17 +319,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "int nextPointIndex=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_693/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:22.560124731 -0500\n@@ -273,14 +273,16 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n-        clusters = new ArrayList<CentroidCluster<T>>();\n+        final Cluster<T> cluster = new Cluster<T>();\n+\t\tthis.clusters = null;\n+\t\tclusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n@@ -291,7 +293,8 @@\n \n         initializeMembershipMatrix();\n \n-        // there is at least one point\n+        final List<T> neighbors = new ArrayList<T>();\n+\t\t// there is at least one point\n         final int pointDimension = points.get(0).getPoint().length;\n         for (int i = 0; i < k; i++) {\n             clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n@@ -323,17 +326,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -345,7 +345,8 @@\n      */\n     private void updateMembershipMatrix() {\n         for (int i = 0; i < points.size(); i++) {\n-            final T point = points.get(i);\n+            double distSqSum = 0.0;\n+\t\t\tfinal T point = points.get(i);\n             double maxMembership = 0.0;\n             int newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "this.k=k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 283, 
          "faulty": "clusters=new ArrayList<CentroidCluster<T>>();", 
          "type": "InsertBefore", 
          "seed": "final Cluster<T> cluster=new Cluster<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 283, 
          "faulty": "clusters=new ArrayList<CentroidCluster<T>>();", 
          "type": "InsertBefore", 
          "seed": "this.clusters=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 295, 
          "faulty": "final int pointDimension=points.get(0).getPoint().length;", 
          "type": "InsertBefore", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 348, 
          "faulty": "final T point=points.get(i);", 
          "type": "InsertBefore", 
          "seed": "double distSqSum=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_633/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:10.431947881 -0500\n@@ -273,22 +273,18 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -325,15 +321,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_939/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:29.561090413 -0500\n@@ -273,7 +273,8 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\t// number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n@@ -323,11 +324,9 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Delete", 
          "seed": "if (fuzziness <= 1.0d) {\n  throw new NumberIsTooSmallException(fuzziness,1.0,false);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_859/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:13.644862609 -0500\n@@ -325,15 +325,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_791/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:53.240569172 -0500\n@@ -273,12 +273,12 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -325,9 +325,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                final List<CentroidCluster<T>> resultSet = new ArrayList<CentroidCluster<T>>();\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "final List<CentroidCluster<T>> resultSet=new ArrayList<CentroidCluster<T>>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_833/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:08.068782580 -0500\n@@ -273,12 +273,14 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -303,7 +305,6 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -319,15 +320,14 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            clusters.clear();\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "clusters.clear();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_844/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:09.932809345 -0500\n@@ -273,12 +273,14 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\t// number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -323,17 +325,15 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                membershipMatrix[i][j] = random.nextDouble();\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_548/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:34.947426275 -0500\n@@ -282,9 +282,11 @@\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n-        final double[][] oldMatrix = new double[size][k];\n+        double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\tfinal double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n+        clusters.clear();\n+\t\t// if no points are provided, return an empty list of clusters\n         if (size == 0) {\n             return clusters;\n         }\n@@ -323,17 +325,13 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -344,7 +342,8 @@\n      * the highest membership.\n      */\n     private void updateMembershipMatrix() {\n-        for (int i = 0; i < points.size(); i++) {\n+        List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>();\n+\t\tfor (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n             int newCluster = -1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "this.k=k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 347, 
          "faulty": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}", 
          "type": "InsertBefore", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 285, 
          "faulty": "final double[][] oldMatrix=new double[size][k];", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "InsertBefore", 
          "seed": "clusters.clear();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_372/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:45.822692485 -0500\n@@ -325,15 +325,13 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                List<CentroidCluster<T>> best = null;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n-            newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n             j++;\n+\t\t\tnewClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "double difference=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 335, 
          "faulty": "newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));", 
          "type": "InsertBefore", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "List<CentroidCluster<T>> best=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_913/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:25.137027185 -0500\n@@ -273,12 +273,12 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -289,8 +289,6 @@\n             return clusters;\n         }\n \n-        initializeMembershipMatrix();\n-\n         // there is at least one point\n         final int pointDimension = points.get(0).getPoint().length;\n         for (int i = 0; i < k; i++) {\n@@ -303,7 +301,6 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -319,21 +316,18 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            clusters.clear();\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n-            newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "clusters.clear();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 335, 
          "faulty": "newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));", 
          "type": "Delete", 
          "seed": "int pointIndex=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 292, 
          "faulty": "initializeMembershipMatrix();", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_155/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:39.097669278 -0500\n@@ -289,7 +289,8 @@\n             return clusters;\n         }\n \n-        initializeMembershipMatrix();\n+        clusters.clear();\n+\t\tinitializeMembershipMatrix();\n \n         // there is at least one point\n         final int pointDimension = points.get(0).getPoint().length;\n@@ -315,19 +316,19 @@\n      * Update the cluster centers.\n      */\n     private void updateClusterCenters() {\n-        int j = 0;\n+        updateMembershipMatrix();\n+\t\tint j = 0;\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n             int i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n-            for (final T point : points) {\n+            List<CentroidCluster<T>> best = null;\n+\t\t\tfor (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 318, 
          "faulty": "int j=0;", 
          "type": "InsertBefore", 
          "seed": "updateMembershipMatrix();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 292, 
          "faulty": "initializeMembershipMatrix();", 
          "type": "InsertBefore", 
          "seed": "clusters.clear();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 325, 
          "faulty": "for (final T point : points) {\n  final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);\n  final double[] pointArr=point.getPoint();\n  for (int idx=0; idx < arr.length; idx++) {\n    arr[idx]+=u * pointArr[idx];\n  }\n  sum+=u;\n  i++;\n}", 
          "type": "InsertBefore", 
          "seed": "List<CentroidCluster<T>> best=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_611/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:06.235886532 -0500\n@@ -273,14 +273,14 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n         // copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n-        clusters = new ArrayList<CentroidCluster<T>>();\n+        final Cluster<T> cluster = new Cluster<T>();\n+\t\tclusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n@@ -325,15 +325,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -344,7 +341,8 @@\n      * the highest membership.\n      */\n     private void updateMembershipMatrix() {\n-        for (int i = 0; i < points.size(); i++) {\n+        List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>();\n+\t\tfor (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n             int newCluster = -1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 347, 
          "faulty": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}", 
          "type": "InsertBefore", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 283, 
          "faulty": "clusters=new ArrayList<CentroidCluster<T>>();", 
          "type": "InsertBefore", 
          "seed": "final Cluster<T> cluster=new Cluster<T>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_784/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:46.312469162 -0500\n@@ -299,7 +299,8 @@\n \n         int iteration = 0;\n         final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n-        double difference = 0.0;\n+        final Cluster<T> cluster = new Cluster<T>();\n+\t\tdouble difference = 0.0;\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n@@ -324,16 +325,12 @@\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                final List<CentroidCluster<T>> resultSet = new ArrayList<CentroidCluster<T>>();\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "final List<CentroidCluster<T>> resultSet=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 302, 
          "faulty": "double difference=0.0;", 
          "type": "InsertBefore", 
          "seed": "final Cluster<T> cluster=new Cluster<T>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_140/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:36.409627311 -0500\n@@ -278,7 +278,10 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\tint nextPointIndex = -1;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -324,10 +327,7 @@\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n@@ -335,7 +335,7 @@\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n             j++;\n         }\n-        clusters.clear();\n+        clusters = newClusters;\n         clusters = newClusters;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 338, 
          "faulty": "clusters.clear();", 
          "type": "Replace", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Delete", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "int nextPointIndex=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_312/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:32.886496694 -0500\n@@ -271,14 +271,16 @@\n         // sanity checks\n         MathUtils.checkNotNull(dataPoints);\n \n-        final int size = dataPoints.size();\n+        double minDistance = Double.MAX_VALUE;\n+\t\tfinal int size = dataPoints.size();\n \n         // number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        int pointIndex = 0;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -319,17 +321,14 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            int newCluster = -1;\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n-                i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "int newCluster=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 274, 
          "faulty": "final int size=dataPoints.size();", 
          "type": "InsertBefore", 
          "seed": "double minDistance=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "int pointIndex=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_678/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:19.200075804 -0500\n@@ -273,14 +273,14 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n         // copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n-        clusters = new ArrayList<CentroidCluster<T>>();\n+        final Cluster<T> cluster = new Cluster<T>();\n+\t\tclusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n@@ -325,17 +325,15 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n-                sum += u;\n+                int nextPointIndex = -1;\n+                int pointIndex = 0;\n+\t\t\t\tsum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n-        clusters.clear();\n+        final int pointDimension = points.get(0).getPoint().length;\n         clusters = newClusters;\n     }\n \n@@ -344,7 +342,8 @@\n      * the highest membership.\n      */\n     private void updateMembershipMatrix() {\n-        for (int i = 0; i < points.size(); i++) {\n+        List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>();\n+\t\tfor (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n             int newCluster = -1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 338, 
          "faulty": "clusters.clear();", 
          "type": "Replace", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 347, 
          "faulty": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}", 
          "type": "InsertBefore", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 283, 
          "faulty": "clusters=new ArrayList<CentroidCluster<T>>();", 
          "type": "InsertBefore", 
          "seed": "final Cluster<T> cluster=new Cluster<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 331, 
          "faulty": "sum+=u;", 
          "type": "InsertBefore", 
          "seed": "int pointIndex=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_842/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:09.612804751 -0500\n@@ -273,12 +273,13 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -304,7 +305,8 @@\n         do {\n             saveMembershipMatrix(oldMatrix);\n             updateClusterCenters();\n-            updateMembershipMatrix();\n+            saveMembershipMatrix(oldMatrix);\n+\t\t\tupdateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n \n@@ -325,15 +327,11 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n-                i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "this.epsilon=epsilon;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 307, 
          "faulty": "updateMembershipMatrix();", 
          "type": "InsertBefore", 
          "seed": "saveMembershipMatrix(oldMatrix);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_391/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:50.038756053 -0500\n@@ -271,24 +271,24 @@\n         // sanity checks\n         MathUtils.checkNotNull(dataPoints);\n \n-        final int size = dataPoints.size();\n+        int newCluster = -1;\n+\t\tfinal int size = dataPoints.size();\n \n         // number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\tfinal Cluster<T> cluster = new Cluster<T>();\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -323,17 +323,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final Cluster<T> cluster=new Cluster<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 274, 
          "faulty": "final int size=dataPoints.size();", 
          "type": "InsertBefore", 
          "seed": "int newCluster=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_840/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:09.352801018 -0500\n@@ -273,7 +273,8 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\t// number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n@@ -284,10 +285,7 @@\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n+        int j = 0;\n \n         initializeMembershipMatrix();\n \n@@ -323,11 +321,10 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                membershipMatrix[i][j] = random.nextDouble();\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "int j=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_259/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:14.378214508 -0500\n@@ -284,11 +284,6 @@\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -325,15 +320,11 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_795/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:53.988579959 -0500\n@@ -273,12 +273,12 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -293,7 +293,10 @@\n \n         // there is at least one point\n         final int pointDimension = points.get(0).getPoint().length;\n-        for (int i = 0; i < k; i++) {\n+        if (fuzziness <= 1.0d) {\n+\t\t\tthrow new NumberIsTooSmallException(fuzziness, 1.0, false);\n+\t\t}\n+\t\tfor (int i = 0; i < k; i++) {\n             clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n         }\n \n@@ -303,7 +306,6 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -319,21 +321,22 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            updateMembershipMatrix();\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n-            for (final T point : points) {\n+            clusters = new ArrayList<CentroidCluster<T>>();\n+\t\t\tfor (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n                 for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+\t\t\t\t\tarr[idx] += u * pointArr[idx];\n+\t\t\t\t}\n                 sum += u;\n-                i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n+            membershipMatrix[i][j] = 1.0 / sum;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "this.epsilon=epsilon;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "this.epsilon=epsilon;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "updateMembershipMatrix();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "int j=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 285, 
          "faulty": "final double[][] oldMatrix=new double[size][k];", 
          "type": "Replace", 
          "seed": "final double[][] oldMatrix=new double[size][k];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 325, 
          "faulty": "for (final T point : points) {\n  final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);\n  final double[] pointArr=point.getPoint();\n  for (int idx=0; idx < arr.length; idx++) {\n    arr[idx]+=u * pointArr[idx];\n  }\n  sum+=u;\n  i++;\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=1.0 / sum;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 296, 
          "faulty": "for (int i=0; i < k; i++) {\n  clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n}", 
          "type": "InsertBefore", 
          "seed": "if (fuzziness <= 1.0d) {\n  throw new NumberIsTooSmallException(fuzziness,1.0,false);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_506/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:25.851291487 -0500\n@@ -273,22 +273,17 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        double sum = 0.0;\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -323,17 +318,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "double sum=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_314/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:33.342503615 -0500\n@@ -278,7 +278,9 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -303,7 +305,6 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -325,15 +326,13 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                initializeMembershipMatrix();\n+\t\t\t\tint nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -346,7 +345,8 @@\n     private void updateMembershipMatrix() {\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n-            double maxMembership = 0.0;\n+            int clusterIndex = 0;\n+\t\t\tdouble maxMembership = 0.0;\n             int newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 349, 
          "faulty": "double maxMembership=0.0;", 
          "type": "InsertBefore", 
          "seed": "int clusterIndex=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "InsertBefore", 
          "seed": "initializeMembershipMatrix();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_919/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:26.229042798 -0500\n@@ -304,7 +304,8 @@\n         do {\n             saveMembershipMatrix(oldMatrix);\n             updateClusterCenters();\n-            updateMembershipMatrix();\n+            saveMembershipMatrix(oldMatrix);\n+\t\t\tupdateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n \n@@ -325,15 +326,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 307, 
          "faulty": "updateMembershipMatrix();", 
          "type": "InsertBefore", 
          "seed": "saveMembershipMatrix(oldMatrix);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "membershipMatrix[i][j]=1.0 / sum;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_957/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:34.005153858 -0500\n@@ -273,12 +273,17 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n-\n-        // copy the input collection to an unmodifiable list with indexed access\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\tclusters = new ArrayList<CentroidCluster<T>>();\n+\t\tif (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n+\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -303,7 +308,6 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -319,21 +323,18 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            clusters.clear();\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n-            newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "clusters.clear();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 335, 
          "faulty": "newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));", 
          "type": "Delete", 
          "seed": "int pointIndex=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_421/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:01.286925077 -0500\n@@ -271,14 +271,16 @@\n         // sanity checks\n         MathUtils.checkNotNull(dataPoints);\n \n-        final int size = dataPoints.size();\n+        int newCluster = -1;\n+\t\tfinal int size = dataPoints.size();\n \n         // number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -325,9 +327,6 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n@@ -335,7 +334,8 @@\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n             j++;\n         }\n-        clusters.clear();\n+        int minCluster = 0;\n+\t\tclusters.clear();\n         clusters = newClusters;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 274, 
          "faulty": "final int size=dataPoints.size();", 
          "type": "InsertBefore", 
          "seed": "int newCluster=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 338, 
          "faulty": "clusters.clear();", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_659/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:15.540022449 -0500\n@@ -273,22 +273,20 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n-        clusters = new ArrayList<CentroidCluster<T>>();\n+        final Cluster<T> cluster = new Cluster<T>();\n+\t\tclusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -323,17 +321,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "this.k=k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 283, 
          "faulty": "clusters=new ArrayList<CentroidCluster<T>>();", 
          "type": "InsertBefore", 
          "seed": "final Cluster<T> cluster=new Cluster<T>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_801/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:55.280598584 -0500\n@@ -273,12 +273,14 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -325,11 +327,8 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n-                i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "this.epsilon=epsilon;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_484/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:15.407136138 -0500\n@@ -278,13 +278,17 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n+        double distSqSum = 0.0;\n+\t\t// if no points are provided, return an empty list of clusters\n         if (size == 0) {\n             return clusters;\n         }\n@@ -304,7 +308,8 @@\n         do {\n             saveMembershipMatrix(oldMatrix);\n             updateClusterCenters();\n-            updateMembershipMatrix();\n+            membershipMatrix = new double[size][k];\n+\t\t\tupdateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n \n@@ -317,7 +322,8 @@\n     private void updateClusterCenters() {\n         int j = 0;\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n-        for (final CentroidCluster<T> cluster : clusters) {\n+        int iteration = 0;\n+\t\tfor (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n             int i = 0;\n             double[] arr = new double[center.getPoint().length];\n@@ -325,15 +331,11 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 307, 
          "faulty": "updateMembershipMatrix();", 
          "type": "InsertBefore", 
          "seed": "membershipMatrix=new double[size][k];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 320, 
          "faulty": "for (final CentroidCluster<T> cluster : clusters) {\n  final Clusterable center=cluster.getCenter();\n  int i=0;\n  double[] arr=new double[center.getPoint().length];\n  double sum=0.0;\n  for (  final T point : points) {\n    final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);\n    final double[] pointArr=point.getPoint();\n    for (int idx=0; idx < arr.length; idx++) {\n      arr[idx]+=u * pointArr[idx];\n    }\n    sum+=u;\n    i++;\n  }\n  MathArrays.scaleInPlace(1.0 / sum,arr);\n  newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n  j++;\n}", 
          "type": "InsertBefore", 
          "seed": "int iteration=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "InsertBefore", 
          "seed": "double distSqSum=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_388/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:49.470747494 -0500\n@@ -278,7 +278,9 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -323,17 +325,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_71/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:20.957384823 -0500\n@@ -325,9 +325,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n@@ -335,7 +333,7 @@\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n             j++;\n         }\n-        clusters.clear();\n+        clusters = newClusters;\n         clusters = newClusters;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 338, 
          "faulty": "clusters.clear();", 
          "type": "Replace", 
          "seed": "clusters=newClusters;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_830/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:07.508774535 -0500\n@@ -273,12 +273,13 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -325,15 +326,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_115/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:31.121544569 -0500\n@@ -303,7 +303,10 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n+            if (size == 0) {\n+\t\t\t\treturn clusters;\n+\t\t\t}\n+\t\t\tupdateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -325,9 +328,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n@@ -335,7 +336,7 @@\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n             j++;\n         }\n-        clusters.clear();\n+        clusters = newClusters;\n         clusters = newClusters;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 338, 
          "faulty": "clusters.clear();", 
          "type": "Replace", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "InsertBefore", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_401/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:51.846783276 -0500\n@@ -323,17 +323,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n+            double bestVarianceSum = Double.POSITIVE_INFINITY;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final Map<Clusterable,PointStatus> visited=new HashMap<Clusterable,PointStatus>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Replace", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_663/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:16.136031142 -0500\n@@ -293,13 +293,17 @@\n \n         // there is at least one point\n         final int pointDimension = points.get(0).getPoint().length;\n-        for (int i = 0; i < k; i++) {\n+        int j = 0;\n+\t\tfor (int i = 0; i < k; i++) {\n             clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n         }\n \n         int iteration = 0;\n         final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n-        double difference = 0.0;\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n+\t\tdouble difference = 0.0;\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n@@ -324,10 +328,8 @@\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                final List<CentroidCluster<T>> resultSet = new ArrayList<CentroidCluster<T>>();\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 296, 
          "faulty": "for (int i=0; i < k; i++) {\n  clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n}", 
          "type": "InsertBefore", 
          "seed": "int j=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 302, 
          "faulty": "double difference=0.0;", 
          "type": "InsertBefore", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "final List<CentroidCluster<T>> resultSet=new ArrayList<CentroidCluster<T>>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_355/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:42.422641135 -0500\n@@ -278,17 +278,13 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final Cluster<T> cluster = new Cluster<T>();\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -323,17 +319,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final Cluster<T> cluster=new Cluster<T>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_930/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:28.125069897 -0500\n@@ -273,12 +273,15 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\t// number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -323,20 +326,19 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n+            int index = 0;\n         }\n         clusters.clear();\n-        clusters = newClusters;\n+        final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n+\t\tclusters = newClusters;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Delete", 
          "seed": "if (fuzziness <= 1.0d) {\n  throw new NumberIsTooSmallException(fuzziness,1.0,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 339, 
          "faulty": "clusters=newClusters;", 
          "type": "InsertBefore", 
          "seed": "final int max=(maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_1000/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:43.665291536 -0500\n@@ -273,12 +273,17 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n-\n-        // copy the input collection to an unmodifiable list with indexed access\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\tif (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n+\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -299,12 +304,13 @@\n \n         int iteration = 0;\n         final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n-        double difference = 0.0;\n+        double distSqSum = 0.0;\n+\t\tdouble difference = 0.0;\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n-            updateMembershipMatrix();\n+            saveMembershipMatrix(oldMatrix);\n+\t\t\tupdateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n \n@@ -323,17 +329,13 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n-                sum += u;\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int nextPointIndex = -1;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -347,7 +349,8 @@\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n-            int newCluster = -1;\n+            double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\t\tint newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n                 final double distA = FastMath.abs(distance(point, clusters.get(j).getCenter()));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Delete", 
          "seed": "if (fuzziness <= 1.0d) {\n  throw new NumberIsTooSmallException(fuzziness,1.0,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 350, 
          "faulty": "int newCluster=-1;", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 307, 
          "faulty": "updateMembershipMatrix();", 
          "type": "InsertBefore", 
          "seed": "saveMembershipMatrix(oldMatrix);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "membershipMatrix[i][j]=1.0 / sum;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "final List<Cluster<T>> clusters=new ArrayList<Cluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 302, 
          "faulty": "double difference=0.0;", 
          "type": "InsertBefore", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 331, 
          "faulty": "sum+=u;", 
          "type": "Delete", 
          "seed": "return k;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_159/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:39.813680445 -0500\n@@ -297,7 +297,10 @@\n             clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n         }\n \n-        int iteration = 0;\n+        if (size < k) {\n+\t\t\tthrow new NumberIsTooSmallException(size, k, false);\n+\t\t}\n+\t\tint iteration = 0;\n         final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n         double difference = 0.0;\n \n@@ -318,16 +321,15 @@\n         int j = 0;\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n-            final Clusterable center = cluster.getCenter();\n+            boolean emptyCluster = false;\n+\t\t\tfinal Clusterable center = cluster.getCenter();\n             int i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "points.add(point);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 321, 
          "faulty": "final Clusterable center=cluster.getCenter();", 
          "type": "InsertBefore", 
          "seed": "boolean emptyCluster=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 300, 
          "faulty": "int iteration=0;", 
          "type": "InsertBefore", 
          "seed": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_685/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:20.504094798 -0500\n@@ -293,13 +293,17 @@\n \n         // there is at least one point\n         final int pointDimension = points.get(0).getPoint().length;\n-        for (int i = 0; i < k; i++) {\n+        int j = 0;\n+\t\tfor (int i = 0; i < k; i++) {\n             clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n         }\n \n         int iteration = 0;\n         final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n-        double difference = 0.0;\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n+\t\tdouble difference = 0.0;\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n@@ -324,10 +328,8 @@\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\t\t\tint nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 296, 
          "faulty": "for (int i=0; i < k; i++) {\n  clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n}", 
          "type": "InsertBefore", 
          "seed": "int j=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 302, 
          "faulty": "double difference=0.0;", 
          "type": "InsertBefore", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "final List<CentroidCluster<T>> resultSet=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Delete", 
          "seed": "boolean emptyCluster=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_983/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:39.965238840 -0500\n@@ -273,12 +273,16 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n-\n-        // copy the input collection to an unmodifiable list with indexed access\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\tif (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n+\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -323,17 +327,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Delete", 
          "seed": "if (fuzziness <= 1.0d) {\n  throw new NumberIsTooSmallException(fuzziness,1.0,false);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_579/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:47.435610589 -0500\n@@ -273,22 +273,19 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -320,20 +317,20 @@\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n             int i = 0;\n-            double[] arr = new double[center.getPoint().length];\n+            if (fuzziness <= 1.0d) {\n+\t\t\t\tthrow new NumberIsTooSmallException(fuzziness, 1.0, false);\n+\t\t\t}\n+\t\t\tdouble[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 323, 
          "faulty": "double[] arr=new double[center.getPoint().length];", 
          "type": "InsertBefore", 
          "seed": "if (fuzziness <= 1.0d) {\n  throw new NumberIsTooSmallException(fuzziness,1.0,false);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_510/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:26.419299917 -0500\n@@ -273,22 +273,16 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        double sum = 0.0;\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -323,17 +317,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "double sum=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_556/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:36.823454018 -0500\n@@ -273,12 +273,15 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -320,20 +323,20 @@\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n             int i = 0;\n-            double[] arr = new double[center.getPoint().length];\n+            if (fuzziness <= 1.0d) {\n+\t\t\t\tthrow new NumberIsTooSmallException(fuzziness, 1.0, false);\n+\t\t\t}\n+\t\t\tdouble[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 323, 
          "faulty": "double[] arr=new double[center.getPoint().length];", 
          "type": "InsertBefore", 
          "seed": "if (fuzziness <= 1.0d) {\n  throw new NumberIsTooSmallException(fuzziness,1.0,false);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_411/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:53.362806087 -0500\n@@ -278,18 +278,18 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n         if (size == 0) {\n-            return clusters;\n-        }\n-\n-        initializeMembershipMatrix();\n+\t\t\treturn clusters;\n+\t\t}\n+\t\tinitializeMembershipMatrix();\n \n         // there is at least one point\n         final int pointDimension = points.get(0).getPoint().length;\n@@ -323,17 +323,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 292, 
          "faulty": "initializeMembershipMatrix();", 
          "type": "InsertBefore", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_1005/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:44.561304290 -0500\n@@ -273,21 +273,18 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n+        int newCluster = -1;\n \n         initializeMembershipMatrix();\n \n@@ -325,9 +322,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n@@ -347,7 +342,8 @@\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n-            int newCluster = -1;\n+            double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\t\tint newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n                 final double distA = FastMath.abs(distance(point, clusters.get(j).getCenter()));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 350, 
          "faulty": "int newCluster=-1;", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "i++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "int newCluster=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_489/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:16.187147763 -0500\n@@ -278,17 +278,14 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -299,7 +296,8 @@\n \n         int iteration = 0;\n         final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n-        double difference = 0.0;\n+        int index = 0;\n+\t\tdouble difference = 0.0;\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n@@ -323,17 +321,13 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "this.k=k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 302, 
          "faulty": "double difference=0.0;", 
          "type": "InsertBefore", 
          "seed": "int index=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_603/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:03.915852576 -0500\n@@ -325,17 +325,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n-        clusters.clear();\n         clusters = newClusters;\n     }\n \n@@ -344,7 +339,8 @@\n      * the highest membership.\n      */\n     private void updateMembershipMatrix() {\n-        for (int i = 0; i < points.size(); i++) {\n+        List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>();\n+\t\tfor (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n             int newCluster = -1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 347, 
          "faulty": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}", 
          "type": "InsertBefore", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 338, 
          "faulty": "clusters.clear();", 
          "type": "Delete", 
          "seed": "int minCluster=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_307/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:31.770479748 -0500\n@@ -323,17 +323,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_927/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:27.537061494 -0500\n@@ -325,9 +325,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_915/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:25.397030903 -0500\n@@ -273,12 +273,14 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n-\n-        // copy the input collection to an unmodifiable list with indexed access\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\tif (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n+\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -303,7 +305,6 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -319,21 +320,18 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            clusters.clear();\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n-            newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "clusters.clear();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 335, 
          "faulty": "newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));", 
          "type": "Delete", 
          "seed": "int pointIndex=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_959/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:34.313158253 -0500\n@@ -273,12 +273,15 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\t// number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -289,7 +292,8 @@\n             return clusters;\n         }\n \n-        initializeMembershipMatrix();\n+        final List<CentroidCluster<T>> resultSet = new ArrayList<CentroidCluster<T>>();\n+\t\tinitializeMembershipMatrix();\n \n         // there is at least one point\n         final int pointDimension = points.get(0).getPoint().length;\n@@ -323,20 +327,16 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n-                sum += u;\n-                i++;\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int nextPointIndex = -1;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n+            int index = 0;\n         }\n         clusters.clear();\n-        clusters = newClusters;\n+        final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n+\t\tclusters = newClusters;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Delete", 
          "seed": "if (fuzziness <= 1.0d) {\n  throw new NumberIsTooSmallException(fuzziness,1.0,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 339, 
          "faulty": "clusters=newClusters;", 
          "type": "InsertBefore", 
          "seed": "final int max=(maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "final T point=points.get(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "this.k=k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 331, 
          "faulty": "sum+=u;", 
          "type": "Delete", 
          "seed": "newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 292, 
          "faulty": "initializeMembershipMatrix();", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> resultSet=new ArrayList<CentroidCluster<T>>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_864/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:14.768878727 -0500\n@@ -325,15 +325,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "updateMembershipMatrix();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_817/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:04.572732341 -0500\n@@ -273,7 +273,8 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\t// number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n@@ -323,11 +324,10 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                membershipMatrix[i][j] = random.nextDouble();\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_947/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:31.429117091 -0500\n@@ -273,21 +273,23 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n-\n-        // copy the input collection to an unmodifiable list with indexed access\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\tclusters = new ArrayList<CentroidCluster<T>>();\n+\t\tif (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n+\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n+        int newCluster = -1;\n \n         initializeMembershipMatrix();\n \n@@ -325,15 +327,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -347,7 +346,8 @@\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n-            int newCluster = -1;\n+            double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\t\tint newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n                 final double distA = FastMath.abs(distance(point, clusters.get(j).getCenter()));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 350, 
          "faulty": "int newCluster=-1;", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "i++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "int newCluster=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_750/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:33.712286754 -0500\n@@ -273,12 +273,13 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -289,8 +290,6 @@\n             return clusters;\n         }\n \n-        initializeMembershipMatrix();\n-\n         // there is at least one point\n         final int pointDimension = points.get(0).getPoint().length;\n         for (int i = 0; i < k; i++) {\n@@ -303,7 +302,6 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -319,21 +317,17 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            updateMembershipMatrix();\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n-                i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "this.epsilon=epsilon;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "updateMembershipMatrix();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "int j=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 292, 
          "faulty": "initializeMembershipMatrix();", 
          "type": "Delete", 
          "seed": "int iteration=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_153/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:38.773664222 -0500\n@@ -315,19 +315,19 @@\n      * Update the cluster centers.\n      */\n     private void updateClusterCenters() {\n-        int j = 0;\n+        final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n+\t\tint j = 0;\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n-            final Clusterable center = cluster.getCenter();\n+            boolean emptyCluster = false;\n+\t\t\tfinal Clusterable center = cluster.getCenter();\n             int i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n@@ -346,7 +346,8 @@\n     private void updateMembershipMatrix() {\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n-            double maxMembership = 0.0;\n+            int clusterIndex = 0;\n+\t\t\tdouble maxMembership = 0.0;\n             int newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "points.add(point);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 321, 
          "faulty": "final Clusterable center=cluster.getCenter();", 
          "type": "InsertBefore", 
          "seed": "boolean emptyCluster=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 318, 
          "faulty": "int j=0;", 
          "type": "InsertBefore", 
          "seed": "final int max=(maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 349, 
          "faulty": "double maxMembership=0.0;", 
          "type": "InsertBefore", 
          "seed": "int clusterIndex=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_955/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:32.965139017 -0500\n@@ -273,12 +273,15 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\t// number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -323,20 +326,16 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n-                sum += u;\n-                i++;\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int nextPointIndex = -1;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n+            int index = 0;\n         }\n         clusters.clear();\n-        clusters = newClusters;\n+        final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n+\t\tclusters = newClusters;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Delete", 
          "seed": "if (fuzziness <= 1.0d) {\n  throw new NumberIsTooSmallException(fuzziness,1.0,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 339, 
          "faulty": "clusters=newClusters;", 
          "type": "InsertBefore", 
          "seed": "final int max=(maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "final T point=points.get(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "this.k=k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 331, 
          "faulty": "sum+=u;", 
          "type": "Delete", 
          "seed": "newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_540/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:33.095398869 -0500\n@@ -273,22 +273,19 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -304,7 +301,8 @@\n         do {\n             saveMembershipMatrix(oldMatrix);\n             updateClusterCenters();\n-            updateMembershipMatrix();\n+            membershipMatrix = new double[size][k];\n+\t\t\tupdateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n \n@@ -325,15 +323,11 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 307, 
          "faulty": "updateMembershipMatrix();", 
          "type": "InsertBefore", 
          "seed": "membershipMatrix=new double[size][k];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "points.add(point);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_971/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:37.181199159 -0500\n@@ -273,12 +273,14 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\t// number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -299,11 +301,11 @@\n \n         int iteration = 0;\n         final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n-        double difference = 0.0;\n+        double distSqSum = 0.0;\n+\t\tdouble difference = 0.0;\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -315,25 +317,19 @@\n      * Update the cluster centers.\n      */\n     private void updateClusterCenters() {\n-        int j = 0;\n+        if (fuzziness <= 1.0d) {\n+\t\t\tthrow new NumberIsTooSmallException(fuzziness, 1.0, false);\n+\t\t}\n+\t\tint j = 0;\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n             int i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n-            for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n-                sum += u;\n-                i++;\n-            }\n+            MathArrays.scaleInPlace(1.0 / sum, arr);\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "final List<Cluster<T>> clusters=new ArrayList<Cluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 302, 
          "faulty": "double difference=0.0;", 
          "type": "InsertBefore", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 331, 
          "faulty": "sum+=u;", 
          "type": "Delete", 
          "seed": "return k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 318, 
          "faulty": "int j=0;", 
          "type": "InsertBefore", 
          "seed": "if (fuzziness <= 1.0d) {\n  throw new NumberIsTooSmallException(fuzziness,1.0,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 325, 
          "faulty": "for (final T point : points) {\n  final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);\n  final double[] pointArr=point.getPoint();\n  for (int idx=0; idx < arr.length; idx++) {\n    arr[idx]+=u * pointArr[idx];\n  }\n  sum+=u;\n  i++;\n}", 
          "type": "Replace", 
          "seed": "MathArrays.scaleInPlace(1.0 / sum,arr);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_899/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:21.572976197 -0500\n@@ -273,12 +273,14 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -325,15 +327,11 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n-                i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -347,7 +345,8 @@\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n-            int newCluster = -1;\n+            double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\t\tint newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n                 final double distA = FastMath.abs(distance(point, clusters.get(j).getCenter()));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 350, 
          "faulty": "int newCluster=-1;", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "i++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "double sum=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_248/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:11.918176811 -0500\n@@ -325,15 +325,11 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_359/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:43.418656186 -0500\n@@ -271,7 +271,8 @@\n         // sanity checks\n         MathUtils.checkNotNull(dataPoints);\n \n-        final int size = dataPoints.size();\n+        double minDistance = Double.MAX_VALUE;\n+\t\tfinal int size = dataPoints.size();\n \n         // number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n@@ -319,21 +320,17 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            int newCluster = -1;\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n-                i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "int newCluster=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 274, 
          "faulty": "final int size=dataPoints.size();", 
          "type": "InsertBefore", 
          "seed": "double minDistance=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "double difference=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_725/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:28.244207380 -0500\n@@ -273,12 +273,13 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\tif (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -324,16 +325,13 @@\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                membershipMatrix[i][j] = random.nextDouble();\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_221/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:04.338060362 -0500\n@@ -278,17 +278,14 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -303,7 +300,10 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n+            if (size == 0) {\n+\t\t\t\treturn clusters;\n+\t\t\t}\n+\t\t\tupdateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -325,15 +325,11 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n+            initializeMembershipMatrix();\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "InsertBefore", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Replace", 
          "seed": "initializeMembershipMatrix();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "for (final CentroidCluster<T> cluster : clusters) {\n  final Clusterable center=cluster.getCenter();\n  int i=0;\n  double[] arr=new double[center.getPoint().length];\n  double sum=0.0;\n  for (  final T point : points) {\n    final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);\n    final double[] pointArr=point.getPoint();\n    for (int idx=0; idx < arr.length; idx++) {\n      arr[idx]+=u * pointArr[idx];\n    }\n    sum+=u;\n    i++;\n  }\n  MathArrays.scaleInPlace(1.0 / sum,arr);\n  newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n  j++;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_382/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:48.282729590 -0500\n@@ -278,7 +278,9 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -323,17 +325,13 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final Map<Clusterable,PointStatus> visited=new HashMap<Clusterable,PointStatus>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_179/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:43.981745369 -0500\n@@ -303,7 +303,10 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n+            if (size == 0) {\n+\t\t\t\treturn clusters;\n+\t\t\t}\n+\t\t\tupdateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -325,9 +328,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "InsertBefore", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "initializeMembershipMatrix();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_336/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:38.338579352 -0500\n@@ -325,15 +325,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "double difference=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_368/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:45.302684636 -0500\n@@ -323,19 +323,15 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n-        clusters.clear();\n         clusters = newClusters;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 338, 
          "faulty": "clusters.clear();", 
          "type": "Delete", 
          "seed": "initializeMembershipMatrix();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_370/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:45.562688561 -0500\n@@ -271,7 +271,8 @@\n         // sanity checks\n         MathUtils.checkNotNull(dataPoints);\n \n-        final int size = dataPoints.size();\n+        double minDistance = Double.MAX_VALUE;\n+\t\tfinal int size = dataPoints.size();\n \n         // number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n@@ -289,7 +290,10 @@\n             return clusters;\n         }\n \n-        initializeMembershipMatrix();\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n+\t\tinitializeMembershipMatrix();\n \n         // there is at least one point\n         final int pointDimension = points.get(0).getPoint().length;\n@@ -319,21 +323,18 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            int newCluster = -1;\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n-                i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "int newCluster=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 274, 
          "faulty": "final int size=dataPoints.size();", 
          "type": "InsertBefore", 
          "seed": "double minDistance=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 292, 
          "faulty": "initializeMembershipMatrix();", 
          "type": "InsertBefore", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_264/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:15.478231351 -0500\n@@ -278,7 +278,9 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -316,7 +318,8 @@\n      */\n     private void updateClusterCenters() {\n         int j = 0;\n-        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n+        int minCluster = 0;\n+\t\tfinal List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n             int i = 0;\n@@ -325,15 +328,11 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 319, 
          "faulty": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_823/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:05.904751488 -0500\n@@ -273,12 +273,14 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -325,15 +327,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -344,7 +343,8 @@\n      * the highest membership.\n      */\n     private void updateMembershipMatrix() {\n-        for (int i = 0; i < points.size(); i++) {\n+        double minDistance = Double.MAX_VALUE;\n+\t\tfor (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n             int newCluster = -1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 347, 
          "faulty": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}", 
          "type": "InsertBefore", 
          "seed": "double minDistance=Double.MAX_VALUE;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_330/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:36.862556995 -0500\n@@ -278,7 +278,9 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -319,19 +321,16 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            int newCluster = -1;\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n             j++;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "int newCluster=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final T point=points.get(i);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_105/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:28.741507247 -0500\n@@ -297,7 +297,10 @@\n             clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n         }\n \n-        int iteration = 0;\n+        if (size < k) {\n+\t\t\tthrow new NumberIsTooSmallException(size, k, false);\n+\t\t}\n+\t\tint iteration = 0;\n         final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n         double difference = 0.0;\n \n@@ -325,9 +328,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n@@ -335,7 +336,7 @@\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n             j++;\n         }\n-        clusters.clear();\n+        clusters = newClusters;\n         clusters = newClusters;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 338, 
          "faulty": "clusters.clear();", 
          "type": "Replace", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 300, 
          "faulty": "int iteration=0;", 
          "type": "InsertBefore", 
          "seed": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_652/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:13.895998463 -0500\n@@ -273,14 +273,14 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n         // copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n-        clusters = new ArrayList<CentroidCluster<T>>();\n+        final Cluster<T> cluster = new Cluster<T>();\n+\t\tclusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n@@ -325,17 +325,14 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n-        clusters.clear();\n+        final int pointDimension = points.get(0).getPoint().length;\n         clusters = newClusters;\n     }\n \n@@ -344,7 +341,8 @@\n      * the highest membership.\n      */\n     private void updateMembershipMatrix() {\n-        for (int i = 0; i < points.size(); i++) {\n+        List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>();\n+\t\tfor (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n             int newCluster = -1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 338, 
          "faulty": "clusters.clear();", 
          "type": "Replace", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 347, 
          "faulty": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}", 
          "type": "InsertBefore", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 283, 
          "faulty": "clusters=new ArrayList<CentroidCluster<T>>();", 
          "type": "InsertBefore", 
          "seed": "final Cluster<T> cluster=new Cluster<T>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_646/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:12.811982640 -0500\n@@ -273,14 +273,18 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n-        clusters = new ArrayList<CentroidCluster<T>>();\n+        final Cluster<T> cluster = new Cluster<T>();\n+\t\tthis.clusters = null;\n+\t\tclusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n@@ -291,7 +295,8 @@\n \n         initializeMembershipMatrix();\n \n-        // there is at least one point\n+        final List<T> neighbors = new ArrayList<T>();\n+\t\t// there is at least one point\n         final int pointDimension = points.get(0).getPoint().length;\n         for (int i = 0; i < k; i++) {\n             clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n@@ -323,17 +328,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "this.k=k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 283, 
          "faulty": "clusters=new ArrayList<CentroidCluster<T>>();", 
          "type": "InsertBefore", 
          "seed": "final Cluster<T> cluster=new Cluster<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 283, 
          "faulty": "clusters=new ArrayList<CentroidCluster<T>>();", 
          "type": "InsertBefore", 
          "seed": "this.clusters=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 295, 
          "faulty": "final int pointDimension=points.get(0).getPoint().length;", 
          "type": "InsertBefore", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_1066/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:44:01.385543289 -0500\n@@ -325,11 +325,9 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                double distSqSum = 0.0;\n                 sum += u;\n-                i++;\n+                break;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "double distSqSum=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_570/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:45.955588789 -0500\n@@ -278,18 +278,18 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n-        final double[][] oldMatrix = new double[size][k];\n+        double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\tfinal double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n-        initializeMembershipMatrix();\n+        clusters.clear();\n+\t\tinitializeMembershipMatrix();\n \n         // there is at least one point\n         final int pointDimension = points.get(0).getPoint().length;\n@@ -319,21 +319,19 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            double maxMembership = 0.0;\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 285, 
          "faulty": "final double[][] oldMatrix=new double[size][k];", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "InsertBefore", 
          "seed": "clusters.clear();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "double maxMembership=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_921/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:26.509046801 -0500\n@@ -325,9 +325,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n@@ -347,7 +345,8 @@\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n-            int newCluster = -1;\n+            double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\t\tint newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n                 final double distA = FastMath.abs(distance(point, clusters.get(j).getCenter()));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 350, 
          "faulty": "int newCluster=-1;", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "i++;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_437/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:04.474972837 -0500\n@@ -278,7 +278,8 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -304,7 +305,8 @@\n         do {\n             saveMembershipMatrix(oldMatrix);\n             updateClusterCenters();\n-            updateMembershipMatrix();\n+            membershipMatrix = new double[size][k];\n+\t\t\tupdateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n \n@@ -325,15 +327,11 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 307, 
          "faulty": "updateMembershipMatrix();", 
          "type": "InsertBefore", 
          "seed": "membershipMatrix=new double[size][k];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_45/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:14.381280959 -0500\n@@ -325,9 +325,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_991/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:41.677263228 -0500\n@@ -273,21 +273,19 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n+        int newCluster = -1;\n \n         initializeMembershipMatrix();\n \n@@ -325,15 +323,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -347,7 +342,8 @@\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n-            int newCluster = -1;\n+            double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\t\tint newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n                 final double distA = FastMath.abs(distance(point, clusters.get(j).getCenter()));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 350, 
          "faulty": "int newCluster=-1;", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "i++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Replace", 
          "seed": "int newCluster=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_650/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:13.611994318 -0500\n@@ -273,10 +273,7 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>();\n \n         // copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n@@ -298,7 +295,8 @@\n         }\n \n         int iteration = 0;\n-        final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n+        int clusterIndex = 0;\n+\t\tfinal int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n         double difference = 0.0;\n \n         do {\n@@ -325,17 +323,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n-                i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n-        clusters.clear();\n+        final int pointDimension = points.get(0).getPoint().length;\n         clusters = newClusters;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 338, 
          "faulty": "clusters.clear();", 
          "type": "Replace", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 301, 
          "faulty": "final int max=(maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;", 
          "type": "InsertBefore", 
          "seed": "int clusterIndex=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "int nextPointIndex=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_825/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:06.260756604 -0500\n@@ -273,12 +273,13 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -325,15 +326,11 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n-                i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "this.epsilon=epsilon;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_644/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:12.523978435 -0500\n@@ -273,12 +273,12 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -325,15 +325,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_473/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:12.927099156 -0500\n@@ -278,7 +278,10 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -325,9 +328,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "return maxIterations;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_465/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:11.203073426 -0500\n@@ -303,8 +303,31 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n-            updateMembershipMatrix();\n+            for (int i = 0; i < points.size(); i++) {\n+\t\t\t\tfinal T point = points.get(i);\n+\t\t\t\tdouble maxMembership = 0.0;\n+\t\t\t\tint newCluster = -1;\n+\t\t\t\tfor (int j = 0; j < clusters.size(); j++) {\n+\t\t\t\t\tdouble sum = 0.0;\n+\t\t\t\t\tfinal double distA = FastMath.abs(distance(point, clusters\n+\t\t\t\t\t\t\t.get(j).getCenter()));\n+\t\t\t\t\tfor (final CentroidCluster<T> c : clusters) {\n+\t\t\t\t\t\tfinal double distB = FastMath.abs(distance(point,\n+\t\t\t\t\t\t\t\tc.getCenter()));\n+\t\t\t\t\t\tsum += FastMath.pow(distA / distB,\n+\t\t\t\t\t\t\t\t2.0 / (fuzziness - 1.0));\n+\t\t\t\t\t}\n+\t\t\t\t\tmembershipMatrix[i][j] = 1.0 / sum;\n+\t\t\t\t\tif (membershipMatrix[i][j] > maxMembership) {\n+\t\t\t\t\t\tmaxMembership = membershipMatrix[i][j];\n+\t\t\t\t\t\tnewCluster = j;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tclusters.get(newCluster).addPoint(point);\n+\t\t\t}\n+\t\t\tupdateClusterCenters();\n+            membershipMatrix = new double[size][k];\n+\t\t\tupdateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n \n@@ -323,17 +346,16 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n-                sum += u;\n+                membershipMatrix[i] = MathArrays.normalizeArray(\n+\t\t\t\t\t\tmembershipMatrix[i], 1.0);\n+\t\t\t\tsum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "this.k=k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 307, 
          "faulty": "updateMembershipMatrix();", 
          "type": "InsertBefore", 
          "seed": "membershipMatrix=new double[size][k];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "InsertBefore", 
          "seed": "membershipMatrix[i]=MathArrays.normalizeArray(membershipMatrix[i],1.0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_518/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:28.211326503 -0500\n@@ -273,10 +273,7 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        double sum = 0.0;\n \n         // copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n@@ -323,17 +320,15 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "double sum=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_209/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:02.014024570 -0500\n@@ -278,7 +278,9 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -303,7 +305,10 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n+            if (size == 0) {\n+\t\t\t\treturn clusters;\n+\t\t\t}\n+\t\t\tupdateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -325,9 +330,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "InsertBefore", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "initializeMembershipMatrix();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_84/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:23.977432387 -0500\n@@ -278,7 +278,9 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -324,10 +326,7 @@\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n@@ -335,7 +334,7 @@\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n             j++;\n         }\n-        clusters.clear();\n+        clusters = newClusters;\n         clusters = newClusters;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 338, 
          "faulty": "clusters.clear();", 
          "type": "Replace", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Delete", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_407/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:52.678795796 -0500\n@@ -271,7 +271,8 @@\n         // sanity checks\n         MathUtils.checkNotNull(dataPoints);\n \n-        final int size = dataPoints.size();\n+        double minDistance = Double.MAX_VALUE;\n+\t\tfinal int size = dataPoints.size();\n \n         // number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n@@ -284,11 +285,6 @@\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -319,21 +315,18 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            int newCluster = -1;\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n-                i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "int newCluster=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 274, 
          "faulty": "final int size=dataPoints.size();", 
          "type": "InsertBefore", 
          "seed": "double minDistance=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_295/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:29.054438472 -0500\n@@ -297,7 +297,28 @@\n             clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n         }\n \n-        int iteration = 0;\n+        for (int i = 0; i < points.size(); i++) {\n+\t\t\tfinal T point = points.get(i);\n+\t\t\tdouble maxMembership = 0.0;\n+\t\t\tint newCluster = -1;\n+\t\t\tfor (int j = 0; j < clusters.size(); j++) {\n+\t\t\t\tdouble sum = 0.0;\n+\t\t\t\tfinal double distA = FastMath.abs(distance(point,\n+\t\t\t\t\t\tclusters.get(j).getCenter()));\n+\t\t\t\tfor (final CentroidCluster<T> c : clusters) {\n+\t\t\t\t\tfinal double distB = FastMath.abs(distance(point,\n+\t\t\t\t\t\t\tc.getCenter()));\n+\t\t\t\t\tsum += FastMath.pow(distA / distB, 2.0 / (fuzziness - 1.0));\n+\t\t\t\t}\n+\t\t\t\tmembershipMatrix[i][j] = 1.0 / sum;\n+\t\t\t\tif (membershipMatrix[i][j] > maxMembership) {\n+\t\t\t\t\tmaxMembership = membershipMatrix[i][j];\n+\t\t\t\t\tnewCluster = j;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tclusters.get(newCluster).addPoint(point);\n+\t\t}\n+\t\tint iteration = 0;\n         final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n         double difference = 0.0;\n \n@@ -325,15 +346,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -347,7 +365,9 @@\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n-            int newCluster = -1;\n+            membershipMatrix[i] = MathArrays.normalizeArray(\n+\t\t\t\t\tmembershipMatrix[i], 1.0);\n+\t\t\tint newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n                 final double distA = FastMath.abs(distance(point, clusters.get(j).getCenter()));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 300, 
          "faulty": "int iteration=0;", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 350, 
          "faulty": "int newCluster=-1;", 
          "type": "InsertBefore", 
          "seed": "membershipMatrix[i]=MathArrays.normalizeArray(membershipMatrix[i],1.0);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_745/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:32.768273061 -0500\n@@ -273,7 +273,8 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\t// number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n@@ -324,10 +325,8 @@\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                membershipMatrix[i][j] = random.nextDouble();\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n@@ -335,7 +334,6 @@\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n             j++;\n         }\n-        clusters.clear();\n         clusters = newClusters;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 338, 
          "faulty": "clusters.clear();", 
          "type": "Delete", 
          "seed": "if (fuzziness <= 1.0d) {\n  throw new NumberIsTooSmallException(fuzziness,1.0,false);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_188/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:45.745772800 -0500\n@@ -297,7 +297,10 @@\n             clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n         }\n \n-        int iteration = 0;\n+        if (size < k) {\n+\t\t\tthrow new NumberIsTooSmallException(size, k, false);\n+\t\t}\n+\t\tint iteration = 0;\n         final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n         double difference = 0.0;\n \n@@ -318,16 +321,15 @@\n         int j = 0;\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n-            final Clusterable center = cluster.getCenter();\n+            boolean emptyCluster = false;\n+\t\t\tfinal Clusterable center = cluster.getCenter();\n             int i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "points.add(point);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 321, 
          "faulty": "final Clusterable center=cluster.getCenter();", 
          "type": "InsertBefore", 
          "seed": "boolean emptyCluster=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 300, 
          "faulty": "int iteration=0;", 
          "type": "InsertBefore", 
          "seed": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_707/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:25.084161450 -0500\n@@ -280,7 +280,8 @@\n \n         // copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n-        clusters = new ArrayList<CentroidCluster<T>>();\n+        this.clusters = null;\n+\t\tclusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n@@ -291,7 +292,8 @@\n \n         initializeMembershipMatrix();\n \n-        // there is at least one point\n+        final List<T> neighbors = new ArrayList<T>();\n+\t\t// there is at least one point\n         final int pointDimension = points.get(0).getPoint().length;\n         for (int i = 0; i < k; i++) {\n             clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n@@ -325,15 +327,11 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 283, 
          "faulty": "clusters=new ArrayList<CentroidCluster<T>>();", 
          "type": "InsertBefore", 
          "seed": "this.clusters=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 295, 
          "faulty": "final int pointDimension=points.get(0).getPoint().length;", 
          "type": "InsertBefore", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_732/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:29.620227367 -0500\n@@ -273,12 +273,12 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -325,15 +325,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -344,7 +341,8 @@\n      * the highest membership.\n      */\n     private void updateMembershipMatrix() {\n-        for (int i = 0; i < points.size(); i++) {\n+        int iteration = 0;\n+\t\tfor (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n             int newCluster = -1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 347, 
          "faulty": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}", 
          "type": "InsertBefore", 
          "seed": "int iteration=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_175/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:43.145732358 -0500\n@@ -284,11 +284,6 @@\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -315,25 +310,23 @@\n      * Update the cluster centers.\n      */\n     private void updateClusterCenters() {\n-        int j = 0;\n+        final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n+\t\tint j = 0;\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n-            final Clusterable center = cluster.getCenter();\n+            boolean emptyCluster = false;\n+\t\t\tfinal Clusterable center = cluster.getCenter();\n             int i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "points.add(point);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 321, 
          "faulty": "final Clusterable center=cluster.getCenter();", 
          "type": "InsertBefore", 
          "seed": "boolean emptyCluster=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 318, 
          "faulty": "int j=0;", 
          "type": "InsertBefore", 
          "seed": "final int max=(maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_361/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:43.758661322 -0500\n@@ -278,7 +278,9 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -323,17 +325,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "this.k=k;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_598/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:02.875837344 -0500\n@@ -273,10 +273,7 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>();\n \n         // copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n@@ -325,15 +322,11 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "j++;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_277/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:18.698280599 -0500\n@@ -297,7 +297,8 @@\n             clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n         }\n \n-        int iteration = 0;\n+        final List<CentroidCluster<T>> resultSet = new ArrayList<CentroidCluster<T>>();\n+\t\tint iteration = 0;\n         final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n         double difference = 0.0;\n \n@@ -325,15 +326,11 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 300, 
          "faulty": "int iteration=0;", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> resultSet=new ArrayList<CentroidCluster<T>>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_468/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:11.767081846 -0500\n@@ -278,17 +278,15 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -304,7 +302,8 @@\n         do {\n             saveMembershipMatrix(oldMatrix);\n             updateClusterCenters();\n-            updateMembershipMatrix();\n+            membershipMatrix = new double[size][k];\n+\t\t\tupdateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n \n@@ -325,15 +324,13 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n-                sum += u;\n+                membershipMatrix[i] = MathArrays.normalizeArray(\n+\t\t\t\t\t\tmembershipMatrix[i], 1.0);\n+\t\t\t\tsum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 307, 
          "faulty": "updateMembershipMatrix();", 
          "type": "InsertBefore", 
          "seed": "membershipMatrix=new double[size][k];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "InsertBefore", 
          "seed": "membershipMatrix[i]=MathArrays.normalizeArray(membershipMatrix[i],1.0);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "double maxMembership=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_886/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:19.236942752 -0500\n@@ -303,7 +303,6 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -319,21 +318,17 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            clusters.clear();\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n-            newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "clusters.clear();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 335, 
          "faulty": "newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));", 
          "type": "Delete", 
          "seed": "int pointIndex=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "for (int j=0; j < k; j++) {\n  membershipMatrix[i][j]=random.nextDouble();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_672/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:18.112059950 -0500\n@@ -273,14 +273,16 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n-        clusters = new ArrayList<CentroidCluster<T>>();\n+        final Cluster<T> cluster = new Cluster<T>();\n+\t\tthis.clusters = null;\n+\t\tclusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n@@ -291,7 +293,8 @@\n \n         initializeMembershipMatrix();\n \n-        // there is at least one point\n+        final List<T> neighbors = new ArrayList<T>();\n+\t\t// there is at least one point\n         final int pointDimension = points.get(0).getPoint().length;\n         for (int i = 0; i < k; i++) {\n             clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n@@ -323,17 +326,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "this.k=k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 283, 
          "faulty": "clusters=new ArrayList<CentroidCluster<T>>();", 
          "type": "InsertBefore", 
          "seed": "final Cluster<T> cluster=new Cluster<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 283, 
          "faulty": "clusters=new ArrayList<CentroidCluster<T>>();", 
          "type": "InsertBefore", 
          "seed": "this.clusters=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 295, 
          "faulty": "final int pointDimension=points.get(0).getPoint().length;", 
          "type": "InsertBefore", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_973/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:37.545204349 -0500\n@@ -273,12 +273,14 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n-\n-        // copy the input collection to an unmodifiable list with indexed access\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\tif (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n+\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -323,17 +325,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Delete", 
          "seed": "if (fuzziness <= 1.0d) {\n  throw new NumberIsTooSmallException(fuzziness,1.0,false);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_868/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:15.544889852 -0500\n@@ -273,12 +273,13 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -303,7 +304,6 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -319,20 +319,17 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            clusters.clear();\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n-                i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n-            newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n             j++;\n         }\n         clusters.clear();\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "clusters.clear();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 335, 
          "faulty": "newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));", 
          "type": "Delete", 
          "seed": "int pointIndex=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "List<CentroidCluster<T>> best=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_487/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:15.903143532 -0500\n@@ -278,7 +278,10 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -304,7 +307,8 @@\n         do {\n             saveMembershipMatrix(oldMatrix);\n             updateClusterCenters();\n-            updateMembershipMatrix();\n+            membershipMatrix = new double[size][k];\n+\t\t\tupdateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n \n@@ -323,17 +327,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 307, 
          "faulty": "updateMembershipMatrix();", 
          "type": "InsertBefore", 
          "seed": "membershipMatrix=new double[size][k];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_619/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:07.575906133 -0500\n@@ -293,7 +293,8 @@\n \n         // there is at least one point\n         final int pointDimension = points.get(0).getPoint().length;\n-        for (int i = 0; i < k; i++) {\n+        int j = 0;\n+\t\tfor (int i = 0; i < k; i++) {\n             clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n         }\n \n@@ -325,11 +326,9 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n-                i++;\n+                final int pointDimension = points.get(0).getPoint().length;\n+\t\t\t\ti++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "InsertBefore", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 296, 
          "faulty": "for (int i=0; i < k; i++) {\n  clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n}", 
          "type": "InsertBefore", 
          "seed": "int j=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_683/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:20.244091011 -0500\n@@ -273,22 +273,20 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n-        clusters = new ArrayList<CentroidCluster<T>>();\n+        final Cluster<T> cluster = new Cluster<T>();\n+\t\tclusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -297,7 +295,8 @@\n             clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n         }\n \n-        int iteration = 0;\n+        int i = 0;\n+\t\tint iteration = 0;\n         final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n         double difference = 0.0;\n \n@@ -323,17 +322,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "this.k=k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 283, 
          "faulty": "clusters=new ArrayList<CentroidCluster<T>>();", 
          "type": "InsertBefore", 
          "seed": "final Cluster<T> cluster=new Cluster<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 300, 
          "faulty": "int iteration=0;", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_498/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:24.079265175 -0500\n@@ -273,10 +273,7 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        double sum = 0.0;\n \n         // copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n@@ -323,17 +320,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "double sum=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_615/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:07.035898235 -0500\n@@ -273,22 +273,18 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n-        clusters = new ArrayList<CentroidCluster<T>>();\n+        final Cluster<T> cluster = new Cluster<T>();\n+\t\tclusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -325,15 +321,11 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 283, 
          "faulty": "clusters=new ArrayList<CentroidCluster<T>>();", 
          "type": "InsertBefore", 
          "seed": "final Cluster<T> cluster=new Cluster<T>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_945/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:31.169113378 -0500\n@@ -325,9 +325,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n@@ -347,7 +345,8 @@\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n-            int newCluster = -1;\n+            double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\t\tint newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n                 final double distA = FastMath.abs(distance(point, clusters.get(j).getCenter()));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 350, 
          "faulty": "int newCluster=-1;", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "i++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 323, 
          "faulty": "double[] arr=new double[center.getPoint().length];", 
          "type": "Replace", 
          "seed": "double[] arr=new double[center.getPoint().length];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_870/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:15.904895013 -0500\n@@ -273,12 +273,14 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n-\n-        // copy the input collection to an unmodifiable list with indexed access\n+        clusters = new ArrayList<CentroidCluster<T>>();\n+\t\tif (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n+\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -304,7 +306,8 @@\n         do {\n             saveMembershipMatrix(oldMatrix);\n             updateClusterCenters();\n-            updateMembershipMatrix();\n+            saveMembershipMatrix(oldMatrix);\n+\t\t\tupdateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n \n@@ -325,9 +328,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "InsertBefore", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 307, 
          "faulty": "updateMembershipMatrix();", 
          "type": "InsertBefore", 
          "seed": "saveMembershipMatrix(oldMatrix);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_211/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:02.386030301 -0500\n@@ -284,11 +284,6 @@\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -324,16 +319,13 @@\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                final double distA = FastMath.abs(distance(point,\n+\t\t\t\t\t\tclusters.get(j).getCenter()));\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Replace", 
          "seed": "final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_680/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:19.748083787 -0500\n@@ -273,10 +273,7 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>();\n \n         // copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n@@ -298,7 +295,8 @@\n         }\n \n         int iteration = 0;\n-        final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n+        int clusterIndex = 0;\n+\t\tfinal int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n         double difference = 0.0;\n \n         do {\n@@ -325,17 +323,13 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n-        clusters.clear();\n+        final int pointDimension = points.get(0).getPoint().length;\n         clusters = newClusters;\n     }\n \n@@ -346,7 +340,8 @@\n     private void updateMembershipMatrix() {\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n-            double maxMembership = 0.0;\n+            int index = 0;\n+\t\t\tdouble maxMembership = 0.0;\n             int newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 338, 
          "faulty": "clusters.clear();", 
          "type": "Replace", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 301, 
          "faulty": "final int max=(maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;", 
          "type": "InsertBefore", 
          "seed": "int clusterIndex=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 349, 
          "faulty": "double maxMembership=0.0;", 
          "type": "InsertBefore", 
          "seed": "int index=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_348/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:40.778616279 -0500\n@@ -271,7 +271,8 @@\n         // sanity checks\n         MathUtils.checkNotNull(dataPoints);\n \n-        final int size = dataPoints.size();\n+        double minDistance = Double.MAX_VALUE;\n+\t\tfinal int size = dataPoints.size();\n \n         // number of clusters has to be smaller or equal the number of data points\n         if (size < k) {\n@@ -303,7 +304,6 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -319,21 +319,19 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            int newCluster = -1;\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                initializeMembershipMatrix();\n+\t\t\t\tint nextPointIndex = -1;\n                 sum += u;\n-                i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -346,7 +344,8 @@\n     private void updateMembershipMatrix() {\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n-            double maxMembership = 0.0;\n+            int clusterIndex = 0;\n+\t\t\tdouble maxMembership = 0.0;\n             int newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "int newCluster=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 274, 
          "faulty": "final int size=dataPoints.size();", 
          "type": "InsertBefore", 
          "seed": "double minDistance=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 349, 
          "faulty": "double maxMembership=0.0;", 
          "type": "InsertBefore", 
          "seed": "int clusterIndex=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "InsertBefore", 
          "seed": "initializeMembershipMatrix();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_233/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:07.810113756 -0500\n@@ -325,15 +325,11 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_572/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:46.219592679 -0500\n@@ -273,12 +273,12 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -323,17 +323,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -344,7 +341,8 @@\n      * the highest membership.\n      */\n     private void updateMembershipMatrix() {\n-        for (int i = 0; i < points.size(); i++) {\n+        List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>();\n+\t\tfor (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n             int newCluster = -1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "this.k=k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 347, 
          "faulty": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}", 
          "type": "InsertBefore", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_755/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:34.484297950 -0500\n@@ -273,12 +273,12 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -303,7 +303,6 @@\n \n         do {\n             saveMembershipMatrix(oldMatrix);\n-            updateClusterCenters();\n             updateMembershipMatrix();\n             difference = calculateMaxMembershipChange(oldMatrix);\n         } while (difference > epsilon && ++iteration < max);\n@@ -319,21 +318,18 @@\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n             final Clusterable center = cluster.getCenter();\n-            int i = 0;\n+            updateMembershipMatrix();\n+\t\t\tint i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 322, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "updateMembershipMatrix();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Delete", 
          "seed": "int j=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_762/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:41.908405483 -0500\n@@ -273,12 +273,12 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -325,9 +325,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_281/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:25.358382217 -0500\n@@ -278,17 +278,14 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -323,17 +320,14 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_58/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:17.881336291 -0500\n@@ -273,11 +273,6 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n-\n         // copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n@@ -323,11 +318,10 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                final double u = FastMath\n+\t\t\t\t\t\t.pow(membershipMatrix[i][j], fuzziness);\n+\t\t\t\tfinal double[] pointArr = point.getPoint();\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "Delete", 
          "seed": "membershipMatrix[i][j]=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Delete", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "InsertBefore", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_1035/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:55.453459123 -0500\n@@ -324,12 +324,9 @@\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n-                i++;\n+                break;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Delete", 
          "seed": "if (fuzziness <= 1.0d) {\n  throw new NumberIsTooSmallException(fuzziness,1.0,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 332, 
          "faulty": "i++;", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_537/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:41:32.411388741 -0500\n@@ -278,7 +278,9 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -323,17 +325,13 @@\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n+                int minCluster = 0;\n+\t\t\t\tfinal double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n-            MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -344,7 +342,8 @@\n      * the highest membership.\n      */\n     private void updateMembershipMatrix() {\n-        for (int i = 0; i < points.size(); i++) {\n+        List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>();\n+\t\tfor (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n             int newCluster = -1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 326, 
          "faulty": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);", 
          "type": "InsertBefore", 
          "seed": "int minCluster=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "InsertBefore", 
          "seed": "this.k=k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 334, 
          "faulty": "MathArrays.scaleInPlace(1.0 / sum,arr);", 
          "type": "Delete", 
          "seed": "final List<T> neighbors=new ArrayList<T>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 347, 
          "faulty": "for (int i=0; i < points.size(); i++) {\n  final T point=points.get(i);\n  double maxMembership=0.0;\n  int newCluster=-1;\n  for (int j=0; j < clusters.size(); j++) {\n    double sum=0.0;\n    final double distA=FastMath.abs(distance(point,clusters.get(j).getCenter()));\n    for (    final CentroidCluster<T> c : clusters) {\n      final double distB=FastMath.abs(distance(point,c.getCenter()));\n      sum+=FastMath.pow(distA / distB,2.0 / (fuzziness - 1.0));\n    }\n    membershipMatrix[i][j]=1.0 / sum;\n    if (membershipMatrix[i][j] > maxMembership) {\n      maxMembership=membershipMatrix[i][j];\n      newCluster=j;\n    }\n  }\n  clusters.get(newCluster).addPoint(point);\n}", 
          "type": "InsertBefore", 
          "seed": "List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_196/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:52.989885178 -0500\n@@ -278,7 +278,9 @@\n             throw new NumberIsTooSmallException(size, k, false);\n         }\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(\n+\t\t\t\tk);\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -289,7 +291,8 @@\n             return clusters;\n         }\n \n-        initializeMembershipMatrix();\n+        clusters.clear();\n+\t\tinitializeMembershipMatrix();\n \n         // there is at least one point\n         final int pointDimension = points.get(0).getPoint().length;\n@@ -315,19 +318,19 @@\n      * Update the cluster centers.\n      */\n     private void updateClusterCenters() {\n-        int j = 0;\n+        updateMembershipMatrix();\n+\t\tint j = 0;\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n-            final Clusterable center = cluster.getCenter();\n+            boolean emptyCluster = false;\n+\t\t\tfinal Clusterable center = cluster.getCenter();\n             int i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n-            for (final T point : points) {\n+            List<CentroidCluster<T>> best = null;\n+\t\t\tfor (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n-                final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n@@ -335,7 +338,7 @@\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n             j++;\n         }\n-        clusters.clear();\n+        clusters = newClusters;\n         clusters = newClusters;\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "points.add(point);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 321, 
          "faulty": "final Clusterable center=cluster.getCenter();", 
          "type": "InsertBefore", 
          "seed": "boolean emptyCluster=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 338, 
          "faulty": "clusters.clear();", 
          "type": "Replace", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 327, 
          "faulty": "final double[] pointArr=point.getPoint();", 
          "type": "Delete", 
          "seed": "clusters=new ArrayList<CentroidCluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 318, 
          "faulty": "int j=0;", 
          "type": "InsertBefore", 
          "seed": "updateMembershipMatrix();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 292, 
          "faulty": "initializeMembershipMatrix();", 
          "type": "InsertBefore", 
          "seed": "clusters.clear();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 325, 
          "faulty": "for (final T point : points) {\n  final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);\n  final double[] pointArr=point.getPoint();\n  for (int idx=0; idx < arr.length; idx++) {\n    arr[idx]+=u * pointArr[idx];\n  }\n  sum+=u;\n  i++;\n}", 
          "type": "InsertBefore", 
          "seed": "List<CentroidCluster<T>> best=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_41/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:13.361264812 -0500\n@@ -284,7 +284,8 @@\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n+        saveMembershipMatrix(oldMatrix);\n+\t\t// if no points are provided, return an empty list of clusters\n         if (size == 0) {\n             return clusters;\n         }\n@@ -325,9 +326,8 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                final List<Cluster<T>> clusters = new ArrayList<Cluster<T>>();\n+\t\t\t\tint nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "InsertBefore", 
          "seed": "final List<Cluster<T>> clusters=new ArrayList<Cluster<T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "InsertBefore", 
          "seed": "saveMembershipMatrix(oldMatrix);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_932/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:43:28.433074298 -0500\n@@ -273,12 +273,14 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -325,15 +327,12 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n@@ -347,7 +346,8 @@\n         for (int i = 0; i < points.size(); i++) {\n             final T point = points.get(i);\n             double maxMembership = 0.0;\n-            int newCluster = -1;\n+            double bestVarianceSum = Double.POSITIVE_INFINITY;\n+\t\t\tint newCluster = -1;\n             for (int j = 0; j < clusters.size(); j++) {\n                 double sum = 0.0;\n                 final double distA = FastMath.abs(distance(point, clusters.get(j).getCenter()));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 350, 
          "faulty": "int newCluster=-1;", 
          "type": "InsertBefore", 
          "seed": "double bestVarianceSum=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "i++;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_213/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:40:02.674034738 -0500\n@@ -284,11 +284,6 @@\n         membershipMatrix = new double[size][k];\n         final double[][] oldMatrix = new double[size][k];\n \n-        // if no points are provided, return an empty list of clusters\n-        if (size == 0) {\n-            return clusters;\n-        }\n-\n         initializeMembershipMatrix();\n \n         // there is at least one point\n@@ -297,7 +292,8 @@\n             clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n         }\n \n-        int iteration = 0;\n+        int j = 0;\n+\t\tint iteration = 0;\n         final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n         double difference = 0.0;\n \n@@ -325,15 +321,11 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n                 sum += u;\n                 i++;\n             }\n             MathArrays.scaleInPlace(1.0 / sum, arr);\n             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));\n-            j++;\n         }\n         clusters.clear();\n         clusters = newClusters;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Replace", 
          "seed": "j++;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 288, 
          "faulty": "if (size == 0) {\n  return clusters;\n}", 
          "type": "Delete", 
          "seed": "final int pointDimension=points.get(0).getPoint().length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Delete", 
          "seed": "final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 336, 
          "faulty": "j++;", 
          "type": "Delete", 
          "seed": "double distSqSum=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 300, 
          "faulty": "int iteration=0;", 
          "type": "InsertBefore", 
          "seed": "int j=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_190/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:39:46.097778271 -0500\n@@ -297,7 +297,10 @@\n             clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));\n         }\n \n-        int iteration = 0;\n+        if (size < k) {\n+\t\t\tthrow new NumberIsTooSmallException(size, k, false);\n+\t\t}\n+\t\tint iteration = 0;\n         final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n         double difference = 0.0;\n \n@@ -318,16 +321,15 @@\n         int j = 0;\n         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);\n         for (final CentroidCluster<T> cluster : clusters) {\n-            final Clusterable center = cluster.getCenter();\n+            boolean emptyCluster = false;\n+\t\t\tfinal Clusterable center = cluster.getCenter();\n             int i = 0;\n             double[] arr = new double[center.getPoint().length];\n             double sum = 0.0;\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int nextPointIndex = -1;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "points.add(point);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 321, 
          "faulty": "final Clusterable center=cluster.getCenter();", 
          "type": "InsertBefore", 
          "seed": "boolean emptyCluster=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 300, 
          "faulty": "int iteration=0;", 
          "type": "InsertBefore", 
          "seed": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 306, 
          "faulty": "updateClusterCenters();", 
          "type": "Replace", 
          "seed": "updateClusterCenters();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:12:38.935356000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_805/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java\t2018-12-30 12:42:56.188611670 -0500\n@@ -273,12 +273,13 @@\n \n         final int size = dataPoints.size();\n \n-        // number of clusters has to be smaller or equal the number of data points\n-        if (size < k) {\n-            throw new NumberIsTooSmallException(size, k, false);\n-        }\n+        if (size == 0) {\n+\t\t\treturn clusters;\n+\t\t}\n \n-        // copy the input collection to an unmodifiable list with indexed access\n+        this.points = null;\n+\t\tthis.points = null;\n+\t\t// copy the input collection to an unmodifiable list with indexed access\n         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));\n         clusters = new ArrayList<CentroidCluster<T>>();\n         membershipMatrix = new double[size][k];\n@@ -325,9 +326,7 @@\n             for (final T point : points) {\n                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);\n                 final double[] pointArr = point.getPoint();\n-                for (int idx = 0; idx < arr.length; idx++) {\n-                    arr[idx] += u * pointArr[idx];\n-                }\n+                int index = 0;\n                 sum += u;\n                 i++;\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 329, 
          "faulty": "arr[idx]+=u * pointArr[idx];", 
          "type": "Delete", 
          "seed": "clusters=newClusters;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int nextPointIndex=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 282, 
          "faulty": "points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));", 
          "type": "InsertBefore", 
          "seed": "this.points=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 277, 
          "faulty": "if (size < k) {\n  throw new NumberIsTooSmallException(size,k,false);\n}", 
          "type": "Replace", 
          "seed": "if (size == 0) {\n  return clusters;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java", 
          "line": 328, 
          "faulty": "for (int idx=0; idx < arr.length; idx++) {\n  arr[idx]+=u * pointArr[idx];\n}", 
          "type": "Replace", 
          "seed": "int index=0;"
        }
      ]
    }
  ]
}