cd /tmp/Nopol_Bug_dot_jar_Commons-Math_5fe9b36c;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -Xmx4g -Xms1g -cp /home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin//../lib/tools.jar fr.inria.lille.repair.Main \
	--mode repair \
	--type pre_then_cond \
	--oracle angelic \
	--synthesis smt \
	--flocal gzoltar \
	--json \
	--solver z3 \
	--solver-path /home/tdurieux/defects4j4repair/script/../libs/z3/build/z3 \
	--complianceLevel 7 \
	--source src/main/java \
	--classpath "target/classes:target/test-classes:/home/tdurieux/.m2/repository/junit/junit/4.4/junit-4.4.jar:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar";
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
08:42:50.923 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Source files: [src/main/java]
08:42:50.937 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Classpath: [file:/tmp/Nopol_Bug_dot_jar_Commons-Math_5fe9b36c/target/classes/, file:/tmp/Nopol_Bug_dot_jar_Commons-Math_5fe9b36c/target/test-classes/, file:/home/tdurieux/.m2/repository/junit/junit/4.4/junit-4.4.jar, file:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar]
08:42:50.937 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Statement type: PRE_THEN_COND
08:42:50.938 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Args: [org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.analysis.FunctionUtilsTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.MullerSolver2Test, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.SecantSolverTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.dfp.DfpDecTest, org.apache.commons.math.dfp.DfpMathTest, org.apache.commons.math.dfp.DfpTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.exception.DimensionMismatchExceptionTest, org.apache.commons.math.exception.MatrixDimensionMismatchExceptionTest, org.apache.commons.math.exception.NonMonotonousSequenceExceptionTest, org.apache.commons.math.exception.NotPositiveExceptionTest, org.apache.commons.math.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math.exception.OutOfRangeExceptionTest, org.apache.commons.math.exception.util.ArgUtilsTest, org.apache.commons.math.exception.util.MessageFactoryTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.geometry.FrenchVector3DFormatTest, org.apache.commons.math.geometry.RotationOrderTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.Vector3DFormatTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.linear.AbstractRealVectorTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.events.EventStateTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.direct.PowellOptimizerTest, org.apache.commons.math.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math.optimization.fitting.CurveFitterTest, org.apache.commons.math.optimization.fitting.GaussianFitterTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.ParametricGaussianFunctionTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.univariate.BracketFinderTest, org.apache.commons.math.optimization.univariate.BrentOptimizerTest, org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.random.Well1024aTest, org.apache.commons.math.random.Well19937aTest, org.apache.commons.math.random.Well19937cTest, org.apache.commons.math.random.Well44497aTest, org.apache.commons.math.random.Well44497bTest, org.apache.commons.math.random.Well512aTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.FastMathTest, org.apache.commons.math.util.IncrementorTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.MultidimensionalCounterTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.PairTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.TransformerMapTest]
08:42:50.940 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/home/tdurieux/defects4j4repair/script/../libs/z3/build/z3', projectSources=[src/main/java], projectClasspath='[Ljava.net.URL;@66d33a', projectTests=[org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.analysis.FunctionUtilsTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.MullerSolver2Test, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.SecantSolverTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.dfp.DfpDecTest, org.apache.commons.math.dfp.DfpMathTest, org.apache.commons.math.dfp.DfpTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.exception.DimensionMismatchExceptionTest, org.apache.commons.math.exception.MatrixDimensionMismatchExceptionTest, org.apache.commons.math.exception.NonMonotonousSequenceExceptionTest, org.apache.commons.math.exception.NotPositiveExceptionTest, org.apache.commons.math.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math.exception.OutOfRangeExceptionTest, org.apache.commons.math.exception.util.ArgUtilsTest, org.apache.commons.math.exception.util.MessageFactoryTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.geometry.FrenchVector3DFormatTest, org.apache.commons.math.geometry.RotationOrderTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.Vector3DFormatTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.linear.AbstractRealVectorTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.events.EventStateTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.direct.PowellOptimizerTest, org.apache.commons.math.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math.optimization.fitting.CurveFitterTest, org.apache.commons.math.optimization.fitting.GaussianFitterTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.ParametricGaussianFunctionTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.univariate.BracketFinderTest, org.apache.commons.math.optimization.univariate.BrentOptimizerTest, org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.random.Well1024aTest, org.apache.commons.math.random.Well19937aTest, org.apache.commons.math.random.Well19937cTest, org.apache.commons.math.random.Well44497aTest, org.apache.commons.math.random.Well44497bTest, org.apache.commons.math.random.Well512aTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.FastMathTest, org.apache.commons.math.util.IncrementorTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.MultidimensionalCounterTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.PairTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.TransformerMapTest], complianceLevel=7, outputFolder=., json=true}
08:42:50.941 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Available processors (cores): 4
08:42:50.947 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Free memory: 925 MB
08:42:50.947 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Maximum memory: 3 GB
08:42:50.947 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Total memory available to JVM: 981 MB
08:42:50.947 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Java version: 1.8.0_181
08:42:50.948 [main] INFO  fr.inria.lille.repair.nopol.NoPol - JAVA_HOME: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/
08:42:50.948 [main] INFO  fr.inria.lille.repair.nopol.NoPol - PATH: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:/usr/lib/oar/oardodo:/usr/lib/oar/oardodo:/usr/local/bin:/usr/bin:/bin:/usr/games
08:43:29.925 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #1
08:43:29.925 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:188 which is executed by 1 tests
-82779744
08:43:30.214 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #2
08:43:30.214 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:186 which is executed by 1 tests
-82779744
08:43:30.317 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:30.410 [pool-4-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (63 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

junit.framework.AssertionFailedError: expected:<NaN> but was:<1.0>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:120)
    at junit.framework.Assert.assertEquals(Assert.java:129)
    at junit.framework.TestCase.assertEquals(TestCase.java:288)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:31.629 [pool-5-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (33 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[expected:<NaN> but was:<1.0>]
junit.framework.AssertionFailedError: expected:<NaN> but was:<1.0>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:120)
    at junit.framework.Assert.assertEquals(Assert.java:129)
    at junit.framework.TestCase.assertEquals(TestCase.java:288)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:101)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:31.642 [pool-6-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (10 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:101)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:31.643 [pool-3-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): expected:<NaN> but was:<1.0>]
08:43:31.643 [pool-3-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:31.644 [pool-3-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:186.
08:43:31.644 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #3
08:43:31.644 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:164 which is executed by 1 tests
-82779744
08:43:31.748 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:31.847 [pool-8-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (93 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:101)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:32.069 [pool-9-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (39 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction convergents diverged to +/- infinity for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:101)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:32.081 [pool-10-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:32.085 [pool-7-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction convergents diverged to +/- infinity for value ∞]
08:43:32.086 [pool-7-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:32.086 [pool-7-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:164.
08:43:32.086 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #4
08:43:32.086 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:163 which is executed by 1 tests
-82779744
08:43:32.174 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:32.234 [pool-12-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (55 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:101)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:32.434 [pool-13-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (39 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction convergents diverged to +/- infinity for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:101)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:32.438 [pool-14-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:32.439 [pool-11-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction convergents diverged to +/- infinity for value ∞]
08:43:32.439 [pool-11-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:32.439 [pool-11-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:163.
08:43:32.439 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #5
08:43:32.439 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:171 which is executed by 3 tests
-82779744
08:43:32.525 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:32.583 [pool-16-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (54 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:32.782 [pool-17-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (38 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:32.785 [pool-18-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:32.786 [pool-15-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:32.786 [pool-15-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:32.786 [pool-15-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:171.
08:43:32.787 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #6
08:43:32.787 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:170 which is executed by 3 tests
-82779744
08:43:32.886 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:32.946 [pool-20-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (55 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:104)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:33.137 [pool-21-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (39 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:104)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:104)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:33.142 [pool-22-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:104)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:33.145 [pool-19-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:33.146 [pool-19-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:33.146 [pool-19-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:170.
08:43:33.146 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:33.220 [pool-24-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (70 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:104)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:33.403 [pool-25-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (38 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:104)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:100)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:33.408 [pool-26-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction convergents diverged to +/- infinity for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:100)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:33.408 [pool-23-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:33.408 [pool-23-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction convergents diverged to +/- infinity for value ∞]
08:43:33.409 [pool-23-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:170.
08:43:33.409 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #7
08:43:33.409 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:169 which is executed by 3 tests
-82779744
08:43:33.512 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:33.574 [pool-28-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (56 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:101)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:33.805 [pool-29-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (37 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction convergents diverged to +/- infinity for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:101)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:33.808 [pool-30-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:33.809 [pool-27-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction convergents diverged to +/- infinity for value ∞]
08:43:33.809 [pool-27-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:33.809 [pool-27-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:169.
08:43:33.809 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #8
08:43:33.809 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:162 which is executed by 3 tests
-82779744
08:43:33.897 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:33.963 [pool-32-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (53 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:103)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:34.143 [pool-33-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (38 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction convergents diverged to +/- infinity for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:103)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:107)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:34.146 [pool-34-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:107)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:34.148 [pool-31-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction convergents diverged to +/- infinity for value ∞]
08:43:34.148 [pool-31-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:34.148 [pool-31-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:162.
08:43:34.148 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:34.208 [pool-36-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (54 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:107)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:34.384 [pool-37-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (38 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:107)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:107)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:34.388 [pool-38-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:107)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:34.389 [pool-35-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:34.389 [pool-35-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:34.389 [pool-35-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:162.
08:43:34.389 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #9
08:43:34.389 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:161 which is executed by 3 tests
-82779744
08:43:34.473 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:34.533 [pool-40-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (55 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:101)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:34.702 [pool-41-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (37 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction convergents diverged to +/- infinity for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:101)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:34.706 [pool-42-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:34.715 [pool-39-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction convergents diverged to +/- infinity for value ∞]
08:43:34.716 [pool-39-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:34.716 [pool-39-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:161.
08:43:34.716 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #10
08:43:34.716 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:160 which is executed by 3 tests
-82779744
08:43:34.801 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:34.859 [pool-44-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (54 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:101)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:35.036 [pool-45-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (37 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction convergents diverged to +/- infinity for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:101)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:35.039 [pool-46-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:35.041 [pool-43-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction convergents diverged to +/- infinity for value ∞]
08:43:35.041 [pool-43-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:35.041 [pool-43-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:160.
08:43:35.041 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #11
08:43:35.041 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:159 which is executed by 3 tests
-82779744
08:43:35.125 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:35.182 [pool-48-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:101)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:35.352 [pool-49-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (39 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction convergents diverged to +/- infinity for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:101)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:35.355 [pool-50-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:35.355 [pool-47-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction convergents diverged to +/- infinity for value ∞]
08:43:35.355 [pool-47-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:35.356 [pool-47-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:159.
08:43:35.356 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #12
08:43:35.356 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:158 which is executed by 3 tests
-82779744
08:43:35.445 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:35.509 [pool-52-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (55 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:35.681 [pool-53-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (42 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:35.684 [pool-54-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:35.684 [pool-51-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:35.685 [pool-51-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:35.685 [pool-51-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:158.
08:43:35.685 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #13
08:43:35.685 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:153 which is executed by 3 tests
-82779744
08:43:35.781 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:35.839 [pool-56-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (53 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:36.005 [pool-57-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (39 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:36.008 [pool-58-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:36.019 [pool-55-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:36.020 [pool-55-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:36.020 [pool-55-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:153.
08:43:36.020 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:36.082 [pool-60-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (57 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:36.269 [pool-61-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (39 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:79)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:36.272 [pool-62-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction convergents diverged to +/- infinity for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:79)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:36.272 [pool-59-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:36.273 [pool-59-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction convergents diverged to +/- infinity for value ∞]
08:43:36.273 [pool-59-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:153.
08:43:36.273 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #14
08:43:36.273 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:152 which is executed by 3 tests
-82779744
08:43:36.371 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #15
08:43:36.371 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:151 which is executed by 3 tests
-82779744
08:43:36.472 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #16
08:43:36.472 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:150 which is executed by 3 tests
-82779744
08:43:36.573 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #17
08:43:36.573 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:149 which is executed by 3 tests
-82779744
08:43:36.674 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #18
08:43:36.674 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.MathException:183 which is executed by 6 tests
754024968
08:43:36.785 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #19
08:43:36.786 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:658 which is executed by 6 tests
1033054629
08:43:36.973 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:37.033 [pool-64-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (54 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:169)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
08:43:37.602 [pool-65-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:169)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:37.614 [pool-66-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (10 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:37.615 [pool-63-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): null]
08:43:37.615 [pool-63-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:37.615 [pool-63-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:658.
08:43:37.615 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #20
08:43:37.616 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:654 which is executed by 6 tests
1033054629
08:43:37.753 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:37.809 [pool-68-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:38.236 [pool-69-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (37 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:38.244 [pool-70-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:38.245 [pool-67-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:38.245 [pool-67-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:38.245 [pool-67-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:654.
08:43:38.245 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:38.304 [pool-72-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (53 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:38.716 [pool-73-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (37 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

java.lang.NullPointerException
    at org.apache.commons.math.util.FastMath.exp(FastMath.java:406)
    at org.apache.commons.math.util.FastMath.exp(FastMath.java:347)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:267)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
08:43:38.720 [pool-74-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[null]
java.lang.NullPointerException    at org.apache.commons.math.util.FastMath.exp(FastMath.java:406)
    at org.apache.commons.math.util.FastMath.exp(FastMath.java:347)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:267)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)

08:43:38.721 [pool-71-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:38.721 [pool-71-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): null]
08:43:38.721 [pool-71-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:654.
08:43:38.721 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #21
08:43:38.721 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:653 which is executed by 6 tests
1033054629
08:43:38.855 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #22
08:43:38.855 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.NormalDistributionImpl:127 which is executed by 8 tests
1270563308
08:43:38.943 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #23
08:43:38.943 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.NormalDistributionImpl:126 which is executed by 8 tests
1270563308
08:43:39.033 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #24
08:43:39.034 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Erf:53 which is executed by 11 tests
69946
08:43:39.112 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:39.176 [pool-76-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (56 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:169)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
08:43:39.303 [pool-77-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (29 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:169)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:8)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:39.316 [pool-78-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (10 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:8)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:39.316 [pool-75-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): null]
08:43:39.316 [pool-75-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:39.316 [pool-75-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Erf:53.
08:43:39.316 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #25
08:43:39.316 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.MathException:177 which is executed by 13 tests
754024968
08:43:39.413 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #26
08:43:39.413 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:169 which is executed by 13 tests
68567944
08:43:39.499 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:39.558 [pool-80-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (54 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:39.693 [pool-79-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Gamma.java:94: error: variable ret might not have been initialized
        return ret;
               ^
Note: Gamma.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
08:43:39.696 [pool-79-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Gamma {
    public static final double GAMMA = 0.5772156649015329;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static final double[] LANCZOS = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * (org.apache.commons.math.util.FastMath.log((2.0 * (org.apache.commons.math.util.FastMath.PI))));

    private static final double C_LIMIT = 49;

    private static final double S_LIMIT = 1.0E-5;

    private Gamma() {
        super();
    }

    public static double logGamma(double x) {
        double ret;
        if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            double g = 607.0 / 128.0;
            double sum = 0.0;
            for (int i = (org.apache.commons.math.special.Gamma.LANCZOS.length) - 1; i > 0; --i) {
                sum = sum + ((org.apache.commons.math.special.Gamma.LANCZOS[i]) / (x + i));
            }
            sum = sum + (org.apache.commons.math.special.Gamma.LANCZOS[0]);
            double tmp = (x + g) + 0.5;
            ret = ((((x + 0.5) * (org.apache.commons.math.util.FastMath.log(tmp))) - tmp) + (org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)) + (org.apache.commons.math.util.FastMath.log((sum / x)));
        }
        return ret;
    }

    public static double regularizedGammaP(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(19).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("org.apache.commons.math.special.Gamma.GAMMA",org.apache.commons.math.special.Gamma.GAMMA);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("org.apache.commons.math.special.Gamma.C_LIMIT",org.apache.commons.math.special.Gamma.C_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("org.apache.commons.math.special.Gamma.S_LIMIT",org.apache.commons.math.special.Gamma.S_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("org.apache.commons.math.special.Gamma.LANCZOS",org.apache.commons.math.special.Gamma.LANCZOS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("org.apache.commons.math.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("org.apache.commons.math.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectionEnds();
                }
                if (runtimeAngelicValue)
                    ret = 0.0;

            }else
                if (x >= (a + 1)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
                }else {
                    double n = 0.0;
                    double an = 1.0 / a;
                    double sum = an;
                    while ((((org.apache.commons.math.util.FastMath.abs((an / sum))) > epsilon) && (n < maxIterations)) && (sum < (java.lang.Double.POSITIVE_INFINITY))) {
                        n = n + 1.0;
                        an = an * (x / (a + n));
                        sum = sum + an;
                    } 
                    if (n >= maxIterations) {
                        throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations);
                    }else
                        if (java.lang.Double.isInfinite(sum)) {
                            ret = 1.0;
                        }else {
                            ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * sum;
                        }

                }


        return ret;
    }

    public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 1.0;
            }else
                if (x < (a + 1.0)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
                }else {
                    org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() {
                        @java.lang.Override
                        protected double getA(int n, double x) {
                            return (((2.0 * n) + 1.0) - a) + x;
                        }

                        @java.lang.Override
                        protected double getB(int n, double x) {
                            return n * (a - n);
                        }
                    };
                    ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
                    ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * ret;
                }


        return ret;
    }

    public static double digamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return (-(org.apache.commons.math.special.Gamma.GAMMA)) - (1 / x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((org.apache.commons.math.util.FastMath.log(x)) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
        }
        return (org.apache.commons.math.special.Gamma.digamma((x + 1))) - (1 / x);
    }

    public static double trigamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return 1 / (x * x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
        }
        return (org.apache.commons.math.special.Gamma.trigamma((x + 1))) + (1 / (x * x));
    }
}
08:43:39.696 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
08:43:39.696 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #27
08:43:39.696 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Erf:55 which is executed by 14 tests
69946
08:43:39.776 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #28
08:43:39.776 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Erf:52 which is executed by 14 tests
69946
08:43:39.862 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:39.920 [pool-82-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (53 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:169)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
08:43:40.056 [pool-83-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (28 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:169)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:8)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:40.070 [pool-84-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (11 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:8)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:40.070 [pool-81-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): null]
08:43:40.070 [pool-81-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:40.070 [pool-81-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Erf:52.
08:43:40.070 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:40.126 [pool-86-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:169)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
08:43:40.259 [pool-87-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (28 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:169)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:170)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
08:43:40.261 [pool-88-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:170)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

08:43:40.261 [pool-85-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): null]
08:43:40.261 [pool-85-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): null]
08:43:40.261 [pool-85-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Erf:52.
08:43:40.261 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #29
08:43:40.261 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Erf:51 which is executed by 14 tests
69946
08:43:40.338 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #30
08:43:40.338 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.exception.util.LocalizedFormats:360 which is executed by 17 tests
-1352183934
08:43:40.479 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #31
08:43:40.479 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.exception.util.LocalizedFormats:348 which is executed by 17 tests
-1352183934
08:43:40.624 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #32
08:43:40.624 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.exception.util.LocalizedFormats:347 which is executed by 17 tests
-1352183934
08:43:40.764 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #33
08:43:40.764 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.MathException:169 which is executed by 17 tests
754024968
08:43:40.881 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:40.939 [pool-90-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: 
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:41.151 [pool-91-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (40 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[]
org.apache.commons.math.ConvergenceException:     at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:41.155 [pool-92-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:41.155 [pool-89-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:41.155 [pool-89-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:41.155 [pool-89-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.MathException:169.
08:43:41.155 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #34
08:43:41.155 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.MathException:168 which is executed by 17 tests
754024968
08:43:41.246 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:41.305 [pool-94-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (54 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: 
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:41.483 [pool-95-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (36 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[]
org.apache.commons.math.ConvergenceException:     at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:41.487 [pool-96-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:41.487 [pool-93-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:41.487 [pool-93-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:41.487 [pool-93-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.MathException:168.
08:43:41.487 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:41.545 [pool-98-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (54 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: 
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:41.712 [pool-99-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (37 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[]
org.apache.commons.math.ConvergenceException:     at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:41.715 [pool-100-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:41.716 [pool-97-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:41.716 [pool-97-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:41.716 [pool-97-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.MathException:168.
08:43:41.716 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #35
08:43:41.716 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:648 which is executed by 41 tests
1033054629
08:43:41.852 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:41.916 [pool-102-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:42.472 [pool-103-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (205 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:42.478 [pool-104-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (5 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:42.478 [pool-101-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:42.478 [pool-101-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:42.478 [pool-101-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:648.
08:43:42.478 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #36
08:43:42.478 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:644 which is executed by 41 tests
1033054629
08:43:42.609 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:42.666 [pool-106-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:42.991 [pool-107-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (39 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:42.997 [pool-108-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (5 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:42.997 [pool-105-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:42.997 [pool-105-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:42.997 [pool-105-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:644.
08:43:42.997 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:43.056 [pool-110-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (54 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:43.386 [pool-111-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (38 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

java.lang.NullPointerException
    at org.apache.commons.math.util.FastMath.exp(FastMath.java:397)
    at org.apache.commons.math.util.FastMath.exp(FastMath.java:347)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:267)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
08:43:43.388 [pool-112-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[null]
java.lang.NullPointerException    at org.apache.commons.math.util.FastMath.exp(FastMath.java:397)
    at org.apache.commons.math.util.FastMath.exp(FastMath.java:347)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:267)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)

08:43:43.388 [pool-109-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:43.388 [pool-109-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): null]
08:43:43.388 [pool-109-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:644.
08:43:43.389 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #37
08:43:43.389 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:173 which is executed by 46 tests
68567944
08:43:43.472 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:43.528 [pool-114-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:43.637 [pool-113-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Gamma.java:94: error: variable ret might not have been initialized
        return ret;
               ^
Note: Gamma.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
08:43:43.639 [pool-113-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Gamma {
    public static final double GAMMA = 0.5772156649015329;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static final double[] LANCZOS = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * (org.apache.commons.math.util.FastMath.log((2.0 * (org.apache.commons.math.util.FastMath.PI))));

    private static final double C_LIMIT = 49;

    private static final double S_LIMIT = 1.0E-5;

    private Gamma() {
        super();
    }

    public static double logGamma(double x) {
        double ret;
        if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            double g = 607.0 / 128.0;
            double sum = 0.0;
            for (int i = (org.apache.commons.math.special.Gamma.LANCZOS.length) - 1; i > 0; --i) {
                sum = sum + ((org.apache.commons.math.special.Gamma.LANCZOS[i]) / (x + i));
            }
            sum = sum + (org.apache.commons.math.special.Gamma.LANCZOS[0]);
            double tmp = (x + g) + 0.5;
            ret = ((((x + 0.5) * (org.apache.commons.math.util.FastMath.log(tmp))) - tmp) + (org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)) + (org.apache.commons.math.util.FastMath.log((sum / x)));
        }
        return ret;
    }

    public static double regularizedGammaP(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 0.0;
            }else
                if (x >= (a + 1)) {
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(28).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("org.apache.commons.math.special.Gamma.GAMMA",org.apache.commons.math.special.Gamma.GAMMA);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("org.apache.commons.math.special.Gamma.C_LIMIT",org.apache.commons.math.special.Gamma.C_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("org.apache.commons.math.special.Gamma.S_LIMIT",org.apache.commons.math.special.Gamma.S_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("org.apache.commons.math.special.Gamma.LANCZOS",org.apache.commons.math.special.Gamma.LANCZOS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("org.apache.commons.math.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("org.apache.commons.math.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));

                }else {
                    double n = 0.0;
                    double an = 1.0 / a;
                    double sum = an;
                    while ((((org.apache.commons.math.util.FastMath.abs((an / sum))) > epsilon) && (n < maxIterations)) && (sum < (java.lang.Double.POSITIVE_INFINITY))) {
                        n = n + 1.0;
                        an = an * (x / (a + n));
                        sum = sum + an;
                    } 
                    if (n >= maxIterations) {
                        throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations);
                    }else
                        if (java.lang.Double.isInfinite(sum)) {
                            ret = 1.0;
                        }else {
                            ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * sum;
                        }

                }


        return ret;
    }

    public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 1.0;
            }else
                if (x < (a + 1.0)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
                }else {
                    org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() {
                        @java.lang.Override
                        protected double getA(int n, double x) {
                            return (((2.0 * n) + 1.0) - a) + x;
                        }

                        @java.lang.Override
                        protected double getB(int n, double x) {
                            return n * (a - n);
                        }
                    };
                    ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
                    ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * ret;
                }


        return ret;
    }

    public static double digamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return (-(org.apache.commons.math.special.Gamma.GAMMA)) - (1 / x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((org.apache.commons.math.util.FastMath.log(x)) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
        }
        return (org.apache.commons.math.special.Gamma.digamma((x + 1))) - (1 / x);
    }

    public static double trigamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return 1 / (x * x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
        }
        return (org.apache.commons.math.special.Gamma.trigamma((x + 1))) + (1 / (x * x));
    }
}
08:43:43.640 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
08:43:43.640 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #38
08:43:43.640 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma$1:262 which is executed by 53 tests
68567944
08:43:43.727 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #39
08:43:43.727 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma$1:257 which is executed by 53 tests
68567944
08:43:43.830 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #40
08:43:43.831 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:267 which is executed by 53 tests
68567944
08:43:43.936 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:43.996 [pool-116-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (54 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:169)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
08:43:44.161 [pool-117-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (28 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:169)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:100)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:44.177 [pool-118-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:100)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:44.177 [pool-115-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): null]
08:43:44.178 [pool-115-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:44.178 [pool-115-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Gamma:267.
08:43:44.178 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #41
08:43:44.178 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:266 which is executed by 53 tests
68567944
08:43:44.281 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:44.349 [pool-120-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (53 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:44.481 [pool-119-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Gamma.java:125: error: variable ret might not have been initialized
                    ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * ret;
                                                                                                                                                                                               ^
Note: Gamma.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
08:43:44.485 [pool-119-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Gamma {
    public static final double GAMMA = 0.5772156649015329;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static final double[] LANCZOS = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * (org.apache.commons.math.util.FastMath.log((2.0 * (org.apache.commons.math.util.FastMath.PI))));

    private static final double C_LIMIT = 49;

    private static final double S_LIMIT = 1.0E-5;

    private Gamma() {
        super();
    }

    public static double logGamma(double x) {
        double ret;
        if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            double g = 607.0 / 128.0;
            double sum = 0.0;
            for (int i = (org.apache.commons.math.special.Gamma.LANCZOS.length) - 1; i > 0; --i) {
                sum = sum + ((org.apache.commons.math.special.Gamma.LANCZOS[i]) / (x + i));
            }
            sum = sum + (org.apache.commons.math.special.Gamma.LANCZOS[0]);
            double tmp = (x + g) + 0.5;
            ret = ((((x + 0.5) * (org.apache.commons.math.util.FastMath.log(tmp))) - tmp) + (org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)) + (org.apache.commons.math.util.FastMath.log((sum / x)));
        }
        return ret;
    }

    public static double regularizedGammaP(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 0.0;
            }else
                if (x >= (a + 1)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
                }else {
                    double n = 0.0;
                    double an = 1.0 / a;
                    double sum = an;
                    while ((((org.apache.commons.math.util.FastMath.abs((an / sum))) > epsilon) && (n < maxIterations)) && (sum < (java.lang.Double.POSITIVE_INFINITY))) {
                        n = n + 1.0;
                        an = an * (x / (a + n));
                        sum = sum + an;
                    } 
                    if (n >= maxIterations) {
                        throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations);
                    }else
                        if (java.lang.Double.isInfinite(sum)) {
                            ret = 1.0;
                        }else {
                            ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * sum;
                        }

                }


        return ret;
    }

    public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 1.0;
            }else
                if (x < (a + 1.0)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
                }else {
                    org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() {
                        @java.lang.Override
                        protected double getA(int n, double x) {
                            return (((2.0 * n) + 1.0) - a) + x;
                        }

                        @java.lang.Override
                        protected double getB(int n, double x) {
                            return n * (a - n);
                        }
                    };
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(30).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("org.apache.commons.math.special.Gamma.GAMMA",org.apache.commons.math.special.Gamma.GAMMA);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("cf",cf);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("org.apache.commons.math.special.Gamma.C_LIMIT",org.apache.commons.math.special.Gamma.C_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("org.apache.commons.math.special.Gamma.S_LIMIT",org.apache.commons.math.special.Gamma.S_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("org.apache.commons.math.special.Gamma.LANCZOS",org.apache.commons.math.special.Gamma.LANCZOS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("org.apache.commons.math.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("org.apache.commons.math.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));

                    ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * ret;
                }


        return ret;
    }

    public static double digamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return (-(org.apache.commons.math.special.Gamma.GAMMA)) - (1 / x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((org.apache.commons.math.util.FastMath.log(x)) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
        }
        return (org.apache.commons.math.special.Gamma.digamma((x + 1))) - (1 / x);
    }

    public static double trigamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return 1 / (x * x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
        }
        return (org.apache.commons.math.special.Gamma.trigamma((x + 1))) + (1 / (x * x));
    }
}
08:43:44.485 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
08:43:44.485 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #42
08:43:44.485 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:253 which is executed by 53 tests
68567944
08:43:44.609 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #43
08:43:44.609 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:247 which is executed by 54 tests
68567944
08:43:44.712 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:44.777 [pool-122-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:44.910 [pool-121-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Gamma.java:129: error: variable ret might not have been initialized
        return ret;
               ^
Note: Gamma.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
08:43:44.913 [pool-121-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Gamma {
    public static final double GAMMA = 0.5772156649015329;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static final double[] LANCZOS = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * (org.apache.commons.math.util.FastMath.log((2.0 * (org.apache.commons.math.util.FastMath.PI))));

    private static final double C_LIMIT = 49;

    private static final double S_LIMIT = 1.0E-5;

    private Gamma() {
        super();
    }

    public static double logGamma(double x) {
        double ret;
        if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            double g = 607.0 / 128.0;
            double sum = 0.0;
            for (int i = (org.apache.commons.math.special.Gamma.LANCZOS.length) - 1; i > 0; --i) {
                sum = sum + ((org.apache.commons.math.special.Gamma.LANCZOS[i]) / (x + i));
            }
            sum = sum + (org.apache.commons.math.special.Gamma.LANCZOS[0]);
            double tmp = (x + g) + 0.5;
            ret = ((((x + 0.5) * (org.apache.commons.math.util.FastMath.log(tmp))) - tmp) + (org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)) + (org.apache.commons.math.util.FastMath.log((sum / x)));
        }
        return ret;
    }

    public static double regularizedGammaP(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 0.0;
            }else
                if (x >= (a + 1)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
                }else {
                    double n = 0.0;
                    double an = 1.0 / a;
                    double sum = an;
                    while ((((org.apache.commons.math.util.FastMath.abs((an / sum))) > epsilon) && (n < maxIterations)) && (sum < (java.lang.Double.POSITIVE_INFINITY))) {
                        n = n + 1.0;
                        an = an * (x / (a + n));
                        sum = sum + an;
                    } 
                    if (n >= maxIterations) {
                        throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations);
                    }else
                        if (java.lang.Double.isInfinite(sum)) {
                            ret = 1.0;
                        }else {
                            ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * sum;
                        }

                }


        return ret;
    }

    public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 1.0;
            }else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(31).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("org.apache.commons.math.special.Gamma.GAMMA",org.apache.commons.math.special.Gamma.GAMMA);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("org.apache.commons.math.special.Gamma.S_LIMIT",org.apache.commons.math.special.Gamma.S_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("org.apache.commons.math.special.Gamma.LANCZOS",org.apache.commons.math.special.Gamma.LANCZOS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("org.apache.commons.math.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("x < (a + 1.0)",x < (a + 1.0));} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("org.apache.commons.math.special.Gamma.C_LIMIT",org.apache.commons.math.special.Gamma.C_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("1.0",1.0);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("(a + 1.0)",(a + 1.0));} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("org.apache.commons.math.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectionEnds();
                }
                if (runtimeAngelicValue) if (x < (a + 1.0)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
                }else {
                    org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() {
                        @java.lang.Override
                        protected double getA(int n, double x) {
                            return (((2.0 * n) + 1.0) - a) + x;
                        }

                        @java.lang.Override
                        protected double getB(int n, double x) {
                            return n * (a - n);
                        }
                    };
                    ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
                    ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * ret;
                }
            }

        return ret;
    }

    public static double digamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return (-(org.apache.commons.math.special.Gamma.GAMMA)) - (1 / x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((org.apache.commons.math.util.FastMath.log(x)) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
        }
        return (org.apache.commons.math.special.Gamma.digamma((x + 1))) - (1 / x);
    }

    public static double trigamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return 1 / (x * x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
        }
        return (org.apache.commons.math.special.Gamma.trigamma((x + 1))) + (1 / (x * x));
    }
}
08:43:44.913 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
08:43:44.913 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:44.975 [pool-124-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (57 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:124)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:45.168 [pool-125-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (40 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:124)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

java.lang.StackOverflowError
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:91)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:111)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:111)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
08:43:45.189 [pool-126-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[null]
java.lang.StackOverflowError    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:91)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:111)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:111)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)

08:43:45.189 [pool-123-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:45.189 [pool-123-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): null]
08:43:45.190 [pool-123-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Gamma:247.
08:43:45.190 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #44
08:43:45.190 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:245 which is executed by 55 tests
68567944
08:43:45.292 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:45.350 [pool-128-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (53 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:45.481 [pool-127-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Gamma.java:128: error: variable ret might not have been initialized
        return ret;
               ^
Note: Gamma.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
08:43:45.484 [pool-127-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Gamma {
    public static final double GAMMA = 0.5772156649015329;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static final double[] LANCZOS = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * (org.apache.commons.math.util.FastMath.log((2.0 * (org.apache.commons.math.util.FastMath.PI))));

    private static final double C_LIMIT = 49;

    private static final double S_LIMIT = 1.0E-5;

    private Gamma() {
        super();
    }

    public static double logGamma(double x) {
        double ret;
        if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            double g = 607.0 / 128.0;
            double sum = 0.0;
            for (int i = (org.apache.commons.math.special.Gamma.LANCZOS.length) - 1; i > 0; --i) {
                sum = sum + ((org.apache.commons.math.special.Gamma.LANCZOS[i]) / (x + i));
            }
            sum = sum + (org.apache.commons.math.special.Gamma.LANCZOS[0]);
            double tmp = (x + g) + 0.5;
            ret = ((((x + 0.5) * (org.apache.commons.math.util.FastMath.log(tmp))) - tmp) + (org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)) + (org.apache.commons.math.util.FastMath.log((sum / x)));
        }
        return ret;
    }

    public static double regularizedGammaP(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 0.0;
            }else
                if (x >= (a + 1)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
                }else {
                    double n = 0.0;
                    double an = 1.0 / a;
                    double sum = an;
                    while ((((org.apache.commons.math.util.FastMath.abs((an / sum))) > epsilon) && (n < maxIterations)) && (sum < (java.lang.Double.POSITIVE_INFINITY))) {
                        n = n + 1.0;
                        an = an * (x / (a + n));
                        sum = sum + an;
                    } 
                    if (n >= maxIterations) {
                        throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations);
                    }else
                        if (java.lang.Double.isInfinite(sum)) {
                            ret = 1.0;
                        }else {
                            ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * sum;
                        }

                }


        return ret;
    }

    public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(33).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("org.apache.commons.math.special.Gamma.GAMMA",org.apache.commons.math.special.Gamma.GAMMA);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("0.0",0.0);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("org.apache.commons.math.special.Gamma.C_LIMIT",org.apache.commons.math.special.Gamma.C_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("org.apache.commons.math.special.Gamma.S_LIMIT",org.apache.commons.math.special.Gamma.S_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("org.apache.commons.math.special.Gamma.LANCZOS",org.apache.commons.math.special.Gamma.LANCZOS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("org.apache.commons.math.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("x == 0.0",x == 0.0);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("org.apache.commons.math.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectionEnds();
            }
            if (runtimeAngelicValue) if (x == 0.0) {
                ret = 1.0;
            }else
                if (x < (a + 1.0)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
                }else {
                    org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() {
                        @java.lang.Override
                        protected double getA(int n, double x) {
                            return (((2.0 * n) + 1.0) - a) + x;
                        }

                        @java.lang.Override
                        protected double getB(int n, double x) {
                            return n * (a - n);
                        }
                    };
                    ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
                    ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * ret;
                }

        }
        return ret;
    }

    public static double digamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return (-(org.apache.commons.math.special.Gamma.GAMMA)) - (1 / x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((org.apache.commons.math.util.FastMath.log(x)) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
        }
        return (org.apache.commons.math.special.Gamma.digamma((x + 1))) - (1 / x);
    }

    public static double trigamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return 1 / (x * x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
        }
        return (org.apache.commons.math.special.Gamma.trigamma((x + 1))) + (1 / (x * x));
    }
}
08:43:45.485 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
08:43:45.485 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:45.570 [pool-130-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:123)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:45.723 [pool-131-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (39 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:123)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:169)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
08:43:45.725 [pool-132-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:169)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

08:43:45.725 [pool-129-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:45.725 [pool-129-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): null]
08:43:45.725 [pool-129-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Gamma:245.
08:43:45.725 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #45
08:43:45.725 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:270 which is executed by 60 tests
68567944
08:43:45.808 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #46
08:43:45.808 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:243 which is executed by 60 tests
68567944
08:43:45.892 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:45.946 [pool-134-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:46.053 [pool-133-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Gamma.java:129: error: variable ret might not have been initialized
        return ret;
               ^
Note: Gamma.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
08:43:46.056 [pool-133-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Gamma {
    public static final double GAMMA = 0.5772156649015329;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static final double[] LANCZOS = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * (org.apache.commons.math.util.FastMath.log((2.0 * (org.apache.commons.math.util.FastMath.PI))));

    private static final double C_LIMIT = 49;

    private static final double S_LIMIT = 1.0E-5;

    private Gamma() {
        super();
    }

    public static double logGamma(double x) {
        double ret;
        if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            double g = 607.0 / 128.0;
            double sum = 0.0;
            for (int i = (org.apache.commons.math.special.Gamma.LANCZOS.length) - 1; i > 0; --i) {
                sum = sum + ((org.apache.commons.math.special.Gamma.LANCZOS[i]) / (x + i));
            }
            sum = sum + (org.apache.commons.math.special.Gamma.LANCZOS[0]);
            double tmp = (x + g) + 0.5;
            ret = ((((x + 0.5) * (org.apache.commons.math.util.FastMath.log(tmp))) - tmp) + (org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)) + (org.apache.commons.math.util.FastMath.log((sum / x)));
        }
        return ret;
    }

    public static double regularizedGammaP(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 0.0;
            }else
                if (x >= (a + 1)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
                }else {
                    double n = 0.0;
                    double an = 1.0 / a;
                    double sum = an;
                    while ((((org.apache.commons.math.util.FastMath.abs((an / sum))) > epsilon) && (n < maxIterations)) && (sum < (java.lang.Double.POSITIVE_INFINITY))) {
                        n = n + 1.0;
                        an = an * (x / (a + n));
                        sum = sum + an;
                    } 
                    if (n >= maxIterations) {
                        throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations);
                    }else
                        if (java.lang.Double.isInfinite(sum)) {
                            ret = 1.0;
                        }else {
                            ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * sum;
                        }

                }


        return ret;
    }

    public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(35).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("org.apache.commons.math.special.Gamma.GAMMA",org.apache.commons.math.special.Gamma.GAMMA);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("org.apache.commons.math.special.Gamma.S_LIMIT",org.apache.commons.math.special.Gamma.S_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("org.apache.commons.math.special.Gamma.LANCZOS",org.apache.commons.math.special.Gamma.LANCZOS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("org.apache.commons.math.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("(x < 0.0)",(x < 0.0));} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("0.0",0.0);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("org.apache.commons.math.special.Gamma.C_LIMIT",org.apache.commons.math.special.Gamma.C_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("(a <= 0.0)",(a <= 0.0));} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("org.apache.commons.math.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectionEnds();
        }
        if (runtimeAngelicValue) if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 1.0;
            }else
                if (x < (a + 1.0)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
                }else {
                    org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() {
                        @java.lang.Override
                        protected double getA(int n, double x) {
                            return (((2.0 * n) + 1.0) - a) + x;
                        }

                        @java.lang.Override
                        protected double getB(int n, double x) {
                            return n * (a - n);
                        }
                    };
                    ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
                    ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * ret;
                }


        return ret;
    }

    public static double digamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return (-(org.apache.commons.math.special.Gamma.GAMMA)) - (1 / x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((org.apache.commons.math.util.FastMath.log(x)) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
        }
        return (org.apache.commons.math.special.Gamma.digamma((x + 1))) - (1 / x);
    }

    public static double trigamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return 1 / (x * x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
        }
        return (org.apache.commons.math.special.Gamma.trigamma((x + 1))) + (1 / (x * x));
    }
}
08:43:46.056 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
08:43:46.056 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:46.112 [pool-136-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:124)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:46.267 [pool-137-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (37 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:124)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:165)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
08:43:46.269 [pool-138-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:165)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

08:43:46.269 [pool-135-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:46.269 [pool-135-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): null]
08:43:46.269 [pool-135-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Gamma:243.
08:43:46.269 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #47
08:43:46.269 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:369 which is executed by 80 tests
08:43:46.269 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:369
08:43:46.270 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #48
08:43:46.270 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:368 which is executed by 80 tests
08:43:46.270 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:368
08:43:46.270 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #49
08:43:46.270 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:115 which is executed by 80 tests
08:43:46.270 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:115
08:43:46.270 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #50
08:43:46.270 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:110 which is executed by 80 tests
08:43:46.270 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:110
08:43:46.270 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #51
08:43:46.270 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:192 which is executed by 81 tests
68567944
08:43:46.352 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:46.407 [pool-140-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:46.512 [pool-139-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Gamma.java:97: error: variable ret might not have been initialized
        return ret;
               ^
Note: Gamma.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
08:43:46.514 [pool-139-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Gamma {
    public static final double GAMMA = 0.5772156649015329;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static final double[] LANCZOS = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * (org.apache.commons.math.util.FastMath.log((2.0 * (org.apache.commons.math.util.FastMath.PI))));

    private static final double C_LIMIT = 49;

    private static final double S_LIMIT = 1.0E-5;

    private Gamma() {
        super();
    }

    public static double logGamma(double x) {
        double ret;
        if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            double g = 607.0 / 128.0;
            double sum = 0.0;
            for (int i = (org.apache.commons.math.special.Gamma.LANCZOS.length) - 1; i > 0; --i) {
                sum = sum + ((org.apache.commons.math.special.Gamma.LANCZOS[i]) / (x + i));
            }
            sum = sum + (org.apache.commons.math.special.Gamma.LANCZOS[0]);
            double tmp = (x + g) + 0.5;
            ret = ((((x + 0.5) * (org.apache.commons.math.util.FastMath.log(tmp))) - tmp) + (org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)) + (org.apache.commons.math.util.FastMath.log((sum / x)));
        }
        return ret;
    }

    public static double regularizedGammaP(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 0.0;
            }else
                if (x >= (a + 1)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
                }else {
                    double n = 0.0;
                    double an = 1.0 / a;
                    double sum = an;
                    while ((((org.apache.commons.math.util.FastMath.abs((an / sum))) > epsilon) && (n < maxIterations)) && (sum < (java.lang.Double.POSITIVE_INFINITY))) {
                        n = n + 1.0;
                        an = an * (x / (a + n));
                        sum = sum + an;
                    } 
                    if (n >= maxIterations) {
                        throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations);
                    }else
                        if (java.lang.Double.isInfinite(sum)) {
                            ret = 1.0;
                        }else {
                            boolean spoonDefaultValue = false;
                            try {
                                spoonDefaultValue = true;
                            } catch (java.lang.Exception __NopolProcessorException) {
                            }
                            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                            if (fr.inria.lille.commons.trace.RuntimeValues.instance(37).isEnabled()) {
                                fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectionStarts();
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.math.special.Gamma.GAMMA",org.apache.commons.math.special.Gamma.GAMMA);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.math.special.Gamma.S_LIMIT",org.apache.commons.math.special.Gamma.S_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.math.special.Gamma.LANCZOS",org.apache.commons.math.special.Gamma.LANCZOS);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.math.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("sum",sum);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("an",an);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.math.special.Gamma.C_LIMIT",org.apache.commons.math.special.Gamma.C_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.math.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                                fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectOutput(runtimeAngelicValue);
                                fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectionEnds();
                            }
                            if (runtimeAngelicValue)
                                ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * sum;

                        }

                }


        return ret;
    }

    public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 1.0;
            }else
                if (x < (a + 1.0)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
                }else {
                    org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() {
                        @java.lang.Override
                        protected double getA(int n, double x) {
                            return (((2.0 * n) + 1.0) - a) + x;
                        }

                        @java.lang.Override
                        protected double getB(int n, double x) {
                            return n * (a - n);
                        }
                    };
                    ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
                    ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * ret;
                }


        return ret;
    }

    public static double digamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return (-(org.apache.commons.math.special.Gamma.GAMMA)) - (1 / x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((org.apache.commons.math.util.FastMath.log(x)) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
        }
        return (org.apache.commons.math.special.Gamma.digamma((x + 1))) - (1 / x);
    }

    public static double trigamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return 1 / (x * x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
        }
        return (org.apache.commons.math.special.Gamma.trigamma((x + 1))) + (1 / (x * x));
    }
}
08:43:46.515 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
08:43:46.515 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #52
08:43:46.515 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:189 which is executed by 81 tests
68567944
08:43:46.598 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:46.654 [pool-142-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:46.760 [pool-141-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Gamma.java:95: error: variable ret might not have been initialized
        return ret;
               ^
Note: Gamma.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
08:43:46.762 [pool-141-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Gamma {
    public static final double GAMMA = 0.5772156649015329;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static final double[] LANCZOS = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * (org.apache.commons.math.util.FastMath.log((2.0 * (org.apache.commons.math.util.FastMath.PI))));

    private static final double C_LIMIT = 49;

    private static final double S_LIMIT = 1.0E-5;

    private Gamma() {
        super();
    }

    public static double logGamma(double x) {
        double ret;
        if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            double g = 607.0 / 128.0;
            double sum = 0.0;
            for (int i = (org.apache.commons.math.special.Gamma.LANCZOS.length) - 1; i > 0; --i) {
                sum = sum + ((org.apache.commons.math.special.Gamma.LANCZOS[i]) / (x + i));
            }
            sum = sum + (org.apache.commons.math.special.Gamma.LANCZOS[0]);
            double tmp = (x + g) + 0.5;
            ret = ((((x + 0.5) * (org.apache.commons.math.util.FastMath.log(tmp))) - tmp) + (org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)) + (org.apache.commons.math.util.FastMath.log((sum / x)));
        }
        return ret;
    }

    public static double regularizedGammaP(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 0.0;
            }else
                if (x >= (a + 1)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
                }else {
                    double n = 0.0;
                    double an = 1.0 / a;
                    double sum = an;
                    while ((((org.apache.commons.math.util.FastMath.abs((an / sum))) > epsilon) && (n < maxIterations)) && (sum < (java.lang.Double.POSITIVE_INFINITY))) {
                        n = n + 1.0;
                        an = an * (x / (a + n));
                        sum = sum + an;
                    } 
                    if (n >= maxIterations) {
                        throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations);
                    }else {
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(38).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(38).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(38).collectInput("org.apache.commons.math.special.Gamma.GAMMA",org.apache.commons.math.special.Gamma.GAMMA);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(38).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(38).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(38).collectInput("org.apache.commons.math.special.Gamma.S_LIMIT",org.apache.commons.math.special.Gamma.S_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(38).collectInput("org.apache.commons.math.special.Gamma.LANCZOS",org.apache.commons.math.special.Gamma.LANCZOS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(38).collectInput("org.apache.commons.math.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(38).collectInput("sum",sum);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(38).collectInput("an",an);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(38).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(38).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(38).collectInput("org.apache.commons.math.special.Gamma.C_LIMIT",org.apache.commons.math.special.Gamma.C_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(38).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(38).collectInput("org.apache.commons.math.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                            fr.inria.lille.commons.trace.RuntimeValues.instance(38).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(38).collectionEnds();
                        }
                        if (runtimeAngelicValue) if (java.lang.Double.isInfinite(sum)) {
                            ret = 1.0;
                        }else {
                            ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * sum;
                        }
                    }
                }


        return ret;
    }

    public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 1.0;
            }else
                if (x < (a + 1.0)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
                }else {
                    org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() {
                        @java.lang.Override
                        protected double getA(int n, double x) {
                            return (((2.0 * n) + 1.0) - a) + x;
                        }

                        @java.lang.Override
                        protected double getB(int n, double x) {
                            return n * (a - n);
                        }
                    };
                    ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
                    ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * ret;
                }


        return ret;
    }

    public static double digamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return (-(org.apache.commons.math.special.Gamma.GAMMA)) - (1 / x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((org.apache.commons.math.util.FastMath.log(x)) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
        }
        return (org.apache.commons.math.special.Gamma.digamma((x + 1))) - (1 / x);
    }

    public static double trigamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return 1 / (x * x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
        }
        return (org.apache.commons.math.special.Gamma.trigamma((x + 1))) + (1 / (x * x));
    }
}
08:43:46.763 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
08:43:46.763 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:47.394 [pool-144-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (626 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:124)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:47.568 [pool-145-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (39 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:124)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:165)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
08:43:47.570 [pool-146-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:165)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

08:43:47.570 [pool-143-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:47.570 [pool-143-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): null]
08:43:47.570 [pool-143-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Gamma:189.
08:43:47.570 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #53
08:43:47.570 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:187 which is executed by 81 tests
68567944
08:43:47.653 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:47.706 [pool-148-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:47.811 [pool-147-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Gamma.java:96: error: variable ret might not have been initialized
        return ret;
               ^
Note: Gamma.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
08:43:47.813 [pool-147-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Gamma {
    public static final double GAMMA = 0.5772156649015329;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static final double[] LANCZOS = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * (org.apache.commons.math.util.FastMath.log((2.0 * (org.apache.commons.math.util.FastMath.PI))));

    private static final double C_LIMIT = 49;

    private static final double S_LIMIT = 1.0E-5;

    private Gamma() {
        super();
    }

    public static double logGamma(double x) {
        double ret;
        if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            double g = 607.0 / 128.0;
            double sum = 0.0;
            for (int i = (org.apache.commons.math.special.Gamma.LANCZOS.length) - 1; i > 0; --i) {
                sum = sum + ((org.apache.commons.math.special.Gamma.LANCZOS[i]) / (x + i));
            }
            sum = sum + (org.apache.commons.math.special.Gamma.LANCZOS[0]);
            double tmp = (x + g) + 0.5;
            ret = ((((x + 0.5) * (org.apache.commons.math.util.FastMath.log(tmp))) - tmp) + (org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)) + (org.apache.commons.math.util.FastMath.log((sum / x)));
        }
        return ret;
    }

    public static double regularizedGammaP(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 0.0;
            }else
                if (x >= (a + 1)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
                }else {
                    double n = 0.0;
                    double an = 1.0 / a;
                    double sum = an;
                    while ((((org.apache.commons.math.util.FastMath.abs((an / sum))) > epsilon) && (n < maxIterations)) && (sum < (java.lang.Double.POSITIVE_INFINITY))) {
                        n = n + 1.0;
                        an = an * (x / (a + n));
                        sum = sum + an;
                    } 
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(40).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("org.apache.commons.math.special.Gamma.GAMMA",org.apache.commons.math.special.Gamma.GAMMA);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("org.apache.commons.math.special.Gamma.S_LIMIT",org.apache.commons.math.special.Gamma.S_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("org.apache.commons.math.special.Gamma.LANCZOS",org.apache.commons.math.special.Gamma.LANCZOS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("org.apache.commons.math.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("sum",sum);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("an",an);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("org.apache.commons.math.special.Gamma.C_LIMIT",org.apache.commons.math.special.Gamma.C_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("n >= maxIterations",n >= maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("org.apache.commons.math.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectionEnds();
                    }
                    if (runtimeAngelicValue) if (n >= maxIterations) {
                        throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations);
                    }else
                        if (java.lang.Double.isInfinite(sum)) {
                            ret = 1.0;
                        }else {
                            ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * sum;
                        }

                }


        return ret;
    }

    public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 1.0;
            }else
                if (x < (a + 1.0)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
                }else {
                    org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() {
                        @java.lang.Override
                        protected double getA(int n, double x) {
                            return (((2.0 * n) + 1.0) - a) + x;
                        }

                        @java.lang.Override
                        protected double getB(int n, double x) {
                            return n * (a - n);
                        }
                    };
                    ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
                    ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * ret;
                }


        return ret;
    }

    public static double digamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return (-(org.apache.commons.math.special.Gamma.GAMMA)) - (1 / x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((org.apache.commons.math.util.FastMath.log(x)) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
        }
        return (org.apache.commons.math.special.Gamma.digamma((x + 1))) - (1 / x);
    }

    public static double trigamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return 1 / (x * x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
        }
        return (org.apache.commons.math.special.Gamma.trigamma((x + 1))) + (1 / (x * x));
    }
}
08:43:47.813 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
08:43:47.814 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:47.870 [pool-150-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:125)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:48.024 [pool-151-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (42 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:125)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.MaxIterationsExceededException: maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:85)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:160)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
08:43:48.026 [pool-152-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:85)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:160)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

08:43:48.026 [pool-149-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:48.026 [pool-149-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): maximal number of iterations (10,000) exceeded]
08:43:48.026 [pool-149-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Gamma:187.
08:43:48.026 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #54
08:43:48.026 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:185 which is executed by 81 tests
68567944
08:43:48.108 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:48.164 [pool-154-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:126)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:48.323 [pool-155-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (36 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:126)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:126)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:48.326 [pool-156-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:126)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:48.326 [pool-153-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:48.326 [pool-153-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:48.326 [pool-153-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Gamma:185.
08:43:48.326 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #55
08:43:48.326 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:182 which is executed by 81 tests
68567944
08:43:48.408 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:48.461 [pool-158-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.MaxIterationsExceededException: maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:86)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:160)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
08:43:48.673 [pool-159-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (98 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:86)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:160)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:126)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:48.677 [pool-160-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:126)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:43:48.678 [pool-157-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): maximal number of iterations (10,000) exceeded]
08:43:48.678 [pool-157-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
08:43:48.678 [pool-157-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Gamma:182.
08:43:48.678 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #56
08:43:48.678 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:181 which is executed by 81 tests
68567944
08:43:48.760 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
08:43:48.814 [pool-162-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:188)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:126)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

08:47:55.015 [pool-161-thread-1] DEBUG xxl.java.junit.TestSuiteExecution - Timeout after 200 seconds. Infinite loop?
08:49:37.280 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
08:50:05.809 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #57
08:50:37.295 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:179 which is executed by 81 tests
java.lang.OutOfMemoryError: Java heap space
    at fr.inria.lille.commons.trace.collector.ArrayCollector.collectedValues(ArrayCollector.java:24)
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectWith(ValueCollector.java:29)
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectFrom(ValueCollector.java:21)
    at fr.inria.lille.commons.trace.RuntimeValues.collectInput(RuntimeValues.java:89)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:67)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: Java heap space

	at java.util.concurrent.FutureTask.report(FutureTask.java:122)
	at java.util.concurrent.FutureTask.get(FutureTask.java:206)
	at fr.inria.lille.repair.Main.main(Main.java:106)
Caused by: java.lang.OutOfMemoryError: Java heap space
	at java.util.Arrays.copyOfRange(Arrays.java:3664)
	at java.lang.String.<init>(String.java:207)
	at java.util.zip.ZipCoder.toString(ZipCoder.java:59)
	at java.util.zip.ZipFile.getZipEntry(ZipFile.java:583)
	at java.util.zip.ZipFile.access$900(ZipFile.java:60)
	at java.util.zip.ZipFile$ZipEntryIterator.next(ZipFile.java:539)
	at java.util.zip.ZipFile$ZipEntryIterator.nextElement(ZipFile.java:514)
	at java.util.zip.ZipFile$ZipEntryIterator.nextElement(ZipFile.java:495)
	at org.eclipse.jdt.internal.compiler.batch.ClasspathJar.getModulesDeclaringPackage(ClasspathJar.java:234)
	at org.eclipse.jdt.internal.compiler.batch.ClasspathLocation.isPackage(ClasspathLocation.java:177)
	at org.eclipse.jdt.internal.compiler.batch.ClasspathJar.findClass(ClasspathJar.java:111)
09:09:10.120 [pool-163-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1521194 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Java heap space]
java.lang.OutOfMemoryError: Java heap space    at fr.inria.lille.commons.trace.collector.ArrayCollector.collectedValues(ArrayCollector.java:24)
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectWith(ValueCollector.java:29)
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectFrom(ValueCollector.java:21)
    at fr.inria.lille.commons.trace.RuntimeValues.collectInput(RuntimeValues.java:89)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:67)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)

	at org.eclipse.jdt.internal.compiler.batch.FileSystem.internalFindClass(FileSystem.java:443)
	at org.eclipse.jdt.internal.compiler.batch.FileSystem.findClass(FileSystem.java:385)
	at org.eclipse.jdt.internal.compiler.batch.FileSystem.findType(FileSystem.java:529)
	at org.eclipse.jdt.internal.compiler.env.IModuleAwareNameEnvironment.findType(IModuleAwareNameEnvironment.java:94)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createPackage(LookupEnvironment.java:1094)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.buildTypeBindings(CompilationUnitScope.java:129)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.buildTypeBindings(LookupEnvironment.java:457)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:838)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:387)
	at spoon.support.compiler.jdt.TreeBuilderCompiler.buildUnits(TreeBuilderCompiler.java:73)
	at spoon.support.compiler.jdt.JDTBatchCompiler.getUnits(JDTBatchCompiler.java:266)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnits(JDTBasedSpoonCompiler.java:444)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:388)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at fr.inria.lille.commons.spoon.util.SpoonModelLibrary.modelFor(SpoonModelLibrary.java:53)
	at fr.inria.lille.commons.spoon.SpoonedFile.<init>(SpoonedFile.java:61)
	at fr.inria.lille.commons.spoon.SpoonedClass.<init>(SpoonedClass.java:14)
	at fr.inria.lille.commons.spoon.SpoonedProject.forked(SpoonedProject.java:47)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:222)

Usage: java -jar nopol.jar
                          [(-m|--mode) <repair|ranking>] (-e|--type) <condition|precondition|pre_then_cond|loop|arithmetic> [(-o|--oracle) <angelic|symbolic>] [(-y|--synthesis) <smt|dynamoth>] [(-l|--solver) <z3|cvc4>] [(-p|--solver-path) <solverPath>] (-s|--source) source1:source2:...:sourceN  (-c|--classpath) <classpath> [(-t|--test) test1:test2:...:testN ] [--complianceLevel <complianceLevel>] [--maxTime <maxTime>] [--maxTimeType <maxTimeType>] [(-z|--flocal) < cocospoon|dumb|gzoltar>] [--output <outputFolder>] [--json[:<outputJson>]]

  [(-m|--mode) <repair|ranking>]
        Define the mode of execution. (default: repair)

  (-e|--type) <condition|precondition|pre_then_cond|loop|arithmetic>
        The repair type (example fixing only conditions, or adding
        precondition). REQUIRED OPTION (default: condition)

  [(-o|--oracle) <angelic|symbolic>]
        Define the oracle (only used with repair mode). (default: angelic)

  [(-y|--synthesis) <smt|dynamoth>]
        Define the patch synthesis. (default: smt)

  [(-l|--solver) <z3|cvc4>]
        Define the solver (only used with smt synthesis). (default: z3)

  [(-p|--solver-path) <solverPath>]
        Define the solver binary path (only used with smt synthesis).

  (-s|--source) source1:source2:...:sourceN 
        Define the path to the source code of the project.

  (-c|--classpath) <classpath>
        Define the classpath of the project.

  [(-t|--test) test1:test2:...:testN ]
        Define the tests of the project (both failing and passing),
        fully-qualified, separated with ':' (even if the classpath contains
        other tests, only those are considered.

  [--complianceLevel <complianceLevel>]
        The compliance level of the project. (default: 7)

  [--maxTime <maxTime>]
        The maximum time execution in minute for the whole execution of
        Nopol.(default: 10)

  [--maxTimeType <maxTimeType>]
        The maximum time execution in minute for one type of patch. (default: 5)

  [(-z|--flocal) < cocospoon|dumb|gzoltar>]
        Define the fault localizer to be used. (default: gzoltar)

  [--output <outputFolder>]
        Define the location where the patches will be saved. (default: .)

  [--json[:<outputJson>]]
        Output a json file in the current working directory.

Command exited with non-zero status 255
6062.22user 9.98system 26:21.01elapsed 384%CPU (0avgtext+0avgdata 4566304maxresident)k
44664inputs+8072outputs (3major+1302524minor)pagefaults 0swaps


Node: graphene-106.nancy.grid5000.fr



Date: Sat Dec 29 09:09:10 EST 2018

