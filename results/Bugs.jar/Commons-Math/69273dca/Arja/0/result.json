{
  "repair_end": "2018-12-29 13:41:13.132950", 
  "repair_begin": "2018-12-29 12:16:04.756458", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 111, 
          "faulty": "final double[] yTmp=y0.clone();", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < stages; ++i) {\n  yDotK[i]=new double[y0.length];\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 115, 
          "faulty": "final RungeKuttaStepInterpolator interpolator=(RungeKuttaStepInterpolator)prototype.copy();", 
          "type": "InsertBefore", 
          "seed": "stepStart=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1554/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:33:52.902950574 -0500\n@@ -108,10 +108,14 @@\n     for (int i = 0; i < stages; ++i) {\n       yDotK [i] = new double[y0.length];\n     }\n-    final double[] yTmp    = y0.clone();\n+    for (int i = 0; i < stages; ++i) {\n+\t\tyDotK[i] = new double[y0.length];\n+\t}\n+\tfinal double[] yTmp    = y0.clone();\n     final double[] yDotTmp = new double[y0.length];\n \n-    // set up an interpolator sharing the integrator arrays\n+    stepStart = Double.NaN;\n+\t// set up an interpolator sharing the integrator arrays\n     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n     interpolator.reinitialize(this, yTmp, yDotK, forward,\n                               equations.getPrimaryMapper(), equations.getSecondaryMappers());\n@@ -122,7 +126,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (forward) {\n  if (stepStart + stepSize >= t) {\n    stepSize=t - stepStart;\n  }\n}\n else {\n  if (stepStart + stepSize <= t) {\n    stepSize=t - stepStart;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 135, 
          "faulty": "for (int k=1; k < stages; ++k) {\n  for (int j=0; j < y0.length; ++j) {\n    double sum=a[k - 1][0] * yDotK[0][j];\n    for (int l=1; l < k; ++l) {\n      sum+=a[k - 1][l] * yDotK[l][j];\n    }\n    yTmp[j]=y[j] + stepSize * sum;\n  }\n  computeDerivatives(stepStart + c[k - 1] * stepSize,yTmp,yDotK[k]);\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 107, 
          "faulty": "final double[][] yDotK=new double[stages][];", 
          "type": "Replace", 
          "seed": "final double[][] yDotK=new double[stages][y.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1722/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:40:00.500491688 -0500\n@@ -104,7 +104,7 @@\n     final double[] y0      = equations.getCompleteState();\n     final double[] y       = y0.clone();\n     final int stages       = c.length + 1;\n-    final double[][] yDotK = new double[stages][];\n+    final double[][] yDotK = new double[stages][y.length];\n     for (int i = 0; i < stages; ++i) {\n       yDotK [i] = new double[y0.length];\n     }\n@@ -122,7 +122,16 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (forward) {\n+\t\tif (stepStart + stepSize >= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t} else {\n+\t\tif (stepStart + stepSize <= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n@@ -131,7 +140,11 @@\n       // first stage\n       computeDerivatives(stepStart, y, yDotK[0]);\n \n-      // next stages\n+      if ((forward && (stepStart + stepSize > t))\n+\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\t// next stages\n       for (int k = 1; k < stages; ++k) {\n \n           for (int j = 0; j < y0.length; ++j) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 112, 
          "faulty": "final double[] yDotTmp=new double[y0.length];", 
          "type": "Replace", 
          "seed": "final double[] yDotTmp=new double[y.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 111, 
          "faulty": "final double[] yTmp=y0.clone();", 
          "type": "InsertBefore", 
          "seed": "if (stepStart + stepSize >= t) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_608/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:00:19.010242436 -0500\n@@ -108,8 +108,11 @@\n     for (int i = 0; i < stages; ++i) {\n       yDotK [i] = new double[y0.length];\n     }\n-    final double[] yTmp    = y0.clone();\n-    final double[] yDotTmp = new double[y0.length];\n+    if (stepStart + stepSize >= t) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\tfinal double[] yTmp    = y0.clone();\n+    final double[] yDotTmp = new double[y.length];\n \n     // set up an interpolator sharing the integrator arrays\n     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n@@ -122,7 +125,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 105, 
          "faulty": "final double[] y=y0.clone();", 
          "type": "InsertBefore", 
          "seed": "super.sanityChecks(equations,t);"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1049/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:15:24.090219716 -0500\n@@ -102,7 +102,8 @@\n \n     // create some internal working arrays\n     final double[] y0      = equations.getCompleteState();\n-    final double[] y       = y0.clone();\n+    super.sanityChecks(equations, t);\n+\tfinal double[] y       = y0.clone();\n     final int stages       = c.length + 1;\n     final double[][] yDotK = new double[stages][];\n     for (int i = 0; i < stages; ++i) {\n@@ -122,7 +123,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 99, 
          "faulty": "sanityChecks(equations,t);", 
          "type": "Delete", 
          "seed": "this.step=FastMath.abs(step);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 105, 
          "faulty": "final double[] y=y0.clone();", 
          "type": "InsertBefore", 
          "seed": "super.sanityChecks(equations,t);"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_931/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:11:26.217170612 -0500\n@@ -96,13 +96,13 @@\n       throws NumberIsTooSmallException, DimensionMismatchException,\n              MaxCountExceededException, NoBracketingException {\n \n-    sanityChecks(equations, t);\n     setEquations(equations);\n     final boolean forward = t > equations.getTime();\n \n     // create some internal working arrays\n     final double[] y0      = equations.getCompleteState();\n-    final double[] y       = y0.clone();\n+    super.sanityChecks(equations, t);\n+\tfinal double[] y       = y0.clone();\n     final int stages       = c.length + 1;\n     final double[][] yDotK = new double[stages][];\n     for (int i = 0; i < stages; ++i) {\n@@ -122,7 +122,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (forward) {\n  if (stepStart + stepSize >= t) {\n    stepSize=t - stepStart;\n  }\n}\n else {\n  if (stepStart + stepSize <= t) {\n    stepSize=t - stepStart;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 107, 
          "faulty": "final double[][] yDotK=new double[stages][];", 
          "type": "Replace", 
          "seed": "final double[][] yDotK=new double[stages][y.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_793/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:06:36.527825311 -0500\n@@ -104,7 +104,7 @@\n     final double[] y0      = equations.getCompleteState();\n     final double[] y       = y0.clone();\n     final int stages       = c.length + 1;\n-    final double[][] yDotK = new double[stages][];\n+    final double[][] yDotK = new double[stages][y.length];\n     for (int i = 0; i < stages; ++i) {\n       yDotK [i] = new double[y0.length];\n     }\n@@ -122,7 +122,16 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (forward) {\n+\t\tif (stepStart + stepSize >= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t} else {\n+\t\tif (stepStart + stepSize <= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/FastMath.java", 
          "line": 3292, 
          "faulty": "final long bits=Double.doubleToRawLongBits(d);", 
          "type": "InsertBefore", 
          "seed": "if (d == direction) {\n  return direction;\n}\n else if (Double.isInfinite(d)) {\n  return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;\n}\n else if (d == 0) {\n  return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 118, 
          "faulty": "interpolator.storeTime(equations.getTime());", 
          "type": "InsertBefore", 
          "seed": "if (forward) {\n  if (stepStart + stepSize >= t) {\n    stepSize=t - stepStart;\n  }\n}\n else {\n  if (stepStart + stepSize <= t) {\n    stepSize=t - stepStart;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-29 06:15:23.019936000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_963/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-29 07:12:38.181495544 -0500\n@@ -3286,7 +3286,14 @@\n         } else if (d == 0) {\n             return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;\n         }\n-        // special cases MAX_VALUE to infinity and  MIN_VALUE to 0\n+        if (d == direction) {\n+\t\t\treturn direction;\n+\t\t} else if (Double.isInfinite(d)) {\n+\t\t\treturn (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;\n+\t\t} else if (d == 0) {\n+\t\t\treturn (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;\n+\t\t}\n+\t\t// special cases MAX_VALUE to infinity and  MIN_VALUE to 0\n         // are handled just as normal numbers\n         // can use raw bits since already dealt with infinity and NaN\n         final long bits = Double.doubleToRawLongBits(d);\n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_963/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:12:38.181495544 -0500\n@@ -115,14 +115,31 @@\n     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n     interpolator.reinitialize(this, yTmp, yDotK, forward,\n                               equations.getPrimaryMapper(), equations.getSecondaryMappers());\n-    interpolator.storeTime(equations.getTime());\n+    if (forward) {\n+\t\tif (stepStart + stepSize >= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t} else {\n+\t\tif (stepStart + stepSize <= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\tinterpolator.storeTime(equations.getTime());\n \n     // set up integration control objects\n     stepStart = equations.getTime();\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 118, 
          "faulty": "interpolator.storeTime(equations.getTime());", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (forward) {\n  if (stepStart + stepSize >= t) {\n    stepSize=t - stepStart;\n  }\n}\n else {\n  if (stepStart + stepSize <= t) {\n    stepSize=t - stepStart;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 135, 
          "faulty": "for (int k=1; k < stages; ++k) {\n  for (int j=0; j < y0.length; ++j) {\n    double sum=a[k - 1][0] * yDotK[0][j];\n    for (int l=1; l < k; ++l) {\n      sum+=a[k - 1][l] * yDotK[l][j];\n    }\n    yTmp[j]=y[j] + stepSize * sum;\n  }\n  computeDerivatives(stepStart + c[k - 1] * stepSize,yTmp,yDotK[k]);\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1702/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:39:15.996308774 -0500\n@@ -115,14 +115,27 @@\n     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n     interpolator.reinitialize(this, yTmp, yDotK, forward,\n                               equations.getPrimaryMapper(), equations.getSecondaryMappers());\n-    interpolator.storeTime(equations.getTime());\n+    if ((forward && (stepStart + stepSize > t))\n+\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\tinterpolator.storeTime(equations.getTime());\n \n     // set up integration control objects\n     stepStart = equations.getTime();\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (forward) {\n+\t\tif (stepStart + stepSize >= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t} else {\n+\t\tif (stepStart + stepSize <= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n@@ -131,7 +144,11 @@\n       // first stage\n       computeDerivatives(stepStart, y, yDotK[0]);\n \n-      // next stages\n+      if ((forward && (stepStart + stepSize > t))\n+\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\t// next stages\n       for (int k = 1; k < stages; ++k) {\n \n           for (int j = 0; j < y0.length; ++j) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 109, 
          "faulty": "yDotK[i]=new double[y0.length];", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 108, 
          "faulty": "for (int i=0; i < stages; ++i) {\n  yDotK[i]=new double[y0.length];\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < stages; ++i) {\n  yDotK[i]=new double[y0.length];\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 99, 
          "faulty": "sanityChecks(equations,t);", 
          "type": "Delete", 
          "seed": "equations.setTime(stepStart);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1231/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:22:06.275878013 -0500\n@@ -96,7 +96,6 @@\n       throws NumberIsTooSmallException, DimensionMismatchException,\n              MaxCountExceededException, NoBracketingException {\n \n-    sanityChecks(equations, t);\n     setEquations(equations);\n     final boolean forward = t > equations.getTime();\n \n@@ -106,7 +105,9 @@\n     final int stages       = c.length + 1;\n     final double[][] yDotK = new double[stages][];\n     for (int i = 0; i < stages; ++i) {\n-      yDotK [i] = new double[y0.length];\n+\t\tyDotK[i] = new double[y0.length];\n+\t}\n+\tfor (int i = 0; i < stages; ++i) {\n     }\n     final double[] yTmp    = y0.clone();\n     final double[] yDotTmp = new double[y0.length];\n@@ -122,7 +123,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 111, 
          "faulty": "final double[] yTmp=y0.clone();", 
          "type": "InsertBefore", 
          "seed": "stepSize=forward ? step : -step;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/FastMath.java", 
          "line": 3293, 
          "faulty": "final long sign=bits & 0x8000000000000000L;", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(d) || Double.isNaN(direction)) {\n  return Double.NaN;\n}\n else if (d == direction) {\n  return direction;\n}\n else if (Double.isInfinite(d)) {\n  return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;\n}\n else if (d == 0) {\n  return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-29 06:15:23.019936000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1539/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-29 07:33:12.798777148 -0500\n@@ -3290,7 +3290,16 @@\n         // are handled just as normal numbers\n         // can use raw bits since already dealt with infinity and NaN\n         final long bits = Double.doubleToRawLongBits(d);\n-        final long sign = bits & 0x8000000000000000L;\n+        if (Double.isNaN(d) || Double.isNaN(direction)) {\n+\t\t\treturn Double.NaN;\n+\t\t} else if (d == direction) {\n+\t\t\treturn direction;\n+\t\t} else if (Double.isInfinite(d)) {\n+\t\t\treturn (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;\n+\t\t} else if (d == 0) {\n+\t\t\treturn (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;\n+\t\t}\n+\t\tfinal long sign = bits & 0x8000000000000000L;\n         if ((direction < d) ^ (sign == 0L)) {\n             return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));\n         } else {\n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1539/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:33:12.802777165 -0500\n@@ -108,7 +108,8 @@\n     for (int i = 0; i < stages; ++i) {\n       yDotK [i] = new double[y0.length];\n     }\n-    final double[] yTmp    = y0.clone();\n+    stepSize = forward ? step : -step;\n+\tfinal double[] yTmp    = y0.clone();\n     final double[] yDotTmp = new double[y0.length];\n \n     // set up an interpolator sharing the integrator arrays\n@@ -122,7 +123,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 101, 
          "faulty": "final boolean forward=t > equations.getTime();", 
          "type": "InsertBefore", 
          "seed": "stepStart=equations.getTime();"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_806/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:06:59.275931335 -0500\n@@ -98,7 +98,8 @@\n \n     sanityChecks(equations, t);\n     setEquations(equations);\n-    final boolean forward = t > equations.getTime();\n+    stepStart = equations.getTime();\n+\tfinal boolean forward = t > equations.getTime();\n \n     // create some internal working arrays\n     final double[] y0      = equations.getCompleteState();\n@@ -122,7 +123,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 129, 
          "faulty": "interpolator.shift();", 
          "type": "InsertBefore", 
          "seed": "interpolator.shift();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (forward) {\n  if (stepStart + stepSize >= t) {\n    stepSize=t - stepStart;\n  }\n}\n else {\n  if (stepStart + stepSize <= t) {\n    stepSize=t - stepStart;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 138, 
          "faulty": "double sum=a[k - 1][0] * yDotK[0][j];", 
          "type": "InsertBefore", 
          "seed": "interpolator.storeTime(stepStart + stepSize);"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1043/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:15:13.674175131 -0500\n@@ -122,11 +122,21 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (forward) {\n+\t\tif (stepStart + stepSize >= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t} else {\n+\t\tif (stepStart + stepSize <= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n       interpolator.shift();\n+\tinterpolator.shift();\n \n       // first stage\n       computeDerivatives(stepStart, y, yDotK[0]);\n@@ -135,7 +145,8 @@\n       for (int k = 1; k < stages; ++k) {\n \n           for (int j = 0; j < y0.length; ++j) {\n-              double sum = a[k-1][0] * yDotK[0][j];\n+              interpolator.storeTime(stepStart + stepSize);\n+\t\t\tdouble sum = a[k-1][0] * yDotK[0][j];\n               for (int l = 1; l < k; ++l) {\n                   sum += a[k-1][l] * yDotK[l][j];\n               }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 104, 
          "faulty": "final double[] y0=equations.getCompleteState();", 
          "type": "InsertBefore", 
          "seed": "setEquations(equations);"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_721/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:03:59.171143010 -0500\n@@ -100,7 +100,8 @@\n     setEquations(equations);\n     final boolean forward = t > equations.getTime();\n \n-    // create some internal working arrays\n+    setEquations(equations);\n+\t// create some internal working arrays\n     final double[] y0      = equations.getCompleteState();\n     final double[] y       = y0.clone();\n     final int stages       = c.length + 1;\n@@ -122,7 +123,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 99, 
          "faulty": "sanityChecks(equations,t);", 
          "type": "Delete", 
          "seed": "setEquations(equations);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 135, 
          "faulty": "for (int k=1; k < stages; ++k) {\n  for (int j=0; j < y0.length; ++j) {\n    double sum=a[k - 1][0] * yDotK[0][j];\n    for (int l=1; l < k; ++l) {\n      sum+=a[k - 1][l] * yDotK[l][j];\n    }\n    yTmp[j]=y[j] + stepSize * sum;\n  }\n  computeDerivatives(stepStart + c[k - 1] * stepSize,yTmp,yDotK[k]);\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 107, 
          "faulty": "final double[][] yDotK=new double[stages][];", 
          "type": "Replace", 
          "seed": "final double[][] yDotK=new double[stages][y.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_425/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:54:00.764812935 -0500\n@@ -96,7 +96,6 @@\n       throws NumberIsTooSmallException, DimensionMismatchException,\n              MaxCountExceededException, NoBracketingException {\n \n-    sanityChecks(equations, t);\n     setEquations(equations);\n     final boolean forward = t > equations.getTime();\n \n@@ -104,7 +103,7 @@\n     final double[] y0      = equations.getCompleteState();\n     final double[] y       = y0.clone();\n     final int stages       = c.length + 1;\n-    final double[][] yDotK = new double[stages][];\n+    final double[][] yDotK = new double[stages][y.length];\n     for (int i = 0; i < stages; ++i) {\n       yDotK [i] = new double[y0.length];\n     }\n@@ -131,7 +130,11 @@\n       // first stage\n       computeDerivatives(stepStart, y, yDotK[0]);\n \n-      // next stages\n+      if ((forward && (stepStart + stepSize > t))\n+\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\t// next stages\n       for (int k = 1; k < stages; ++k) {\n \n           for (int j = 0; j < y0.length; ++j) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 112, 
          "faulty": "final double[] yDotTmp=new double[y0.length];", 
          "type": "Replace", 
          "seed": "final double[] yDotTmp=new double[y.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (forward) {\n  if (stepStart + stepSize >= t) {\n    stepSize=t - stepStart;\n  }\n}\n else {\n  if (stepStart + stepSize <= t) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_734/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:04:22.123244227 -0500\n@@ -109,7 +109,7 @@\n       yDotK [i] = new double[y0.length];\n     }\n     final double[] yTmp    = y0.clone();\n-    final double[] yDotTmp = new double[y0.length];\n+    final double[] yDotTmp = new double[y.length];\n \n     // set up an interpolator sharing the integrator arrays\n     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n@@ -122,7 +122,16 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (forward) {\n+\t\tif (stepStart + stepSize >= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t} else {\n+\t\tif (stepStart + stepSize <= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 115, 
          "faulty": "final RungeKuttaStepInterpolator interpolator=(RungeKuttaStepInterpolator)prototype.copy();", 
          "type": "InsertBefore", 
          "seed": "stepSize=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_370/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:52:18.824407127 -0500\n@@ -111,7 +111,8 @@\n     final double[] yTmp    = y0.clone();\n     final double[] yDotTmp = new double[y0.length];\n \n-    // set up an interpolator sharing the integrator arrays\n+    stepSize = Double.NaN;\n+\t// set up an interpolator sharing the integrator arrays\n     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n     interpolator.reinitialize(this, yTmp, yDotK, forward,\n                               equations.getPrimaryMapper(), equations.getSecondaryMappers());\n@@ -122,7 +123,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 108, 
          "faulty": "for (int i=0; i < stages; ++i) {\n  yDotK[i]=new double[y0.length];\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < stages; ++i) {\n  yDotK[i]=new double[y0.length];\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 111, 
          "faulty": "final double[] yTmp=y0.clone();", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < stages; ++i) {\n  yDotK[i]=new double[y0.length];\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_783/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:06:09.959711137 -0500\n@@ -106,9 +106,15 @@\n     final int stages       = c.length + 1;\n     final double[][] yDotK = new double[stages][];\n     for (int i = 0; i < stages; ++i) {\n+\t\tyDotK[i] = new double[y0.length];\n+\t}\n+\tfor (int i = 0; i < stages; ++i) {\n       yDotK [i] = new double[y0.length];\n     }\n-    final double[] yTmp    = y0.clone();\n+    for (int i = 0; i < stages; ++i) {\n+\t\tyDotK[i] = new double[y0.length];\n+\t}\n+\tfinal double[] yTmp    = y0.clone();\n     final double[] yDotTmp = new double[y0.length];\n \n     // set up an interpolator sharing the integrator arrays\n@@ -122,7 +128,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 139, 
          "faulty": "for (int l=1; l < k; ++l) {\n  sum+=a[k - 1][l] * yDotK[l][j];\n}", 
          "type": "InsertBefore", 
          "seed": "yDotK[k]=interpolator.yDotK[k].clone();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 135, 
          "faulty": "for (int k=1; k < stages; ++k) {\n  for (int j=0; j < y0.length; ++j) {\n    double sum=a[k - 1][0] * yDotK[0][j];\n    for (int l=1; l < k; ++l) {\n      sum+=a[k - 1][l] * yDotK[l][j];\n    }\n    yTmp[j]=y[j] + stepSize * sum;\n  }\n  computeDerivatives(stepStart + c[k - 1] * stepSize,yTmp,yDotK[k]);\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1239/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:22:20.919936631 -0500\n@@ -131,12 +131,17 @@\n       // first stage\n       computeDerivatives(stepStart, y, yDotK[0]);\n \n-      // next stages\n+      if ((forward && (stepStart + stepSize > t))\n+\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\t// next stages\n       for (int k = 1; k < stages; ++k) {\n \n           for (int j = 0; j < y0.length; ++j) {\n               double sum = a[k-1][0] * yDotK[0][j];\n-              for (int l = 1; l < k; ++l) {\n+              yDotK[k] = interpolator.yDotK[k].clone();\n+\t\t\tfor (int l = 1; l < k; ++l) {\n                   sum += a[k-1][l] * yDotK[l][j];\n               }\n               yTmp[j] = y[j] + stepSize * sum;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 108, 
          "faulty": "for (int i=0; i < stages; ++i) {\n  yDotK[i]=new double[y0.length];\n}", 
          "type": "InsertBefore", 
          "seed": "stepSize=forward ? step : -step;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 99, 
          "faulty": "sanityChecks(equations,t);", 
          "type": "Delete", 
          "seed": "this.step=FastMath.abs(step);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 135, 
          "faulty": "for (int k=1; k < stages; ++k) {\n  for (int j=0; j < y0.length; ++j) {\n    double sum=a[k - 1][0] * yDotK[0][j];\n    for (int l=1; l < k; ++l) {\n      sum+=a[k - 1][l] * yDotK[l][j];\n    }\n    yTmp[j]=y[j] + stepSize * sum;\n  }\n  computeDerivatives(stepStart + c[k - 1] * stepSize,yTmp,yDotK[k]);\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_827/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:07:36.684103772 -0500\n@@ -96,7 +96,6 @@\n       throws NumberIsTooSmallException, DimensionMismatchException,\n              MaxCountExceededException, NoBracketingException {\n \n-    sanityChecks(equations, t);\n     setEquations(equations);\n     final boolean forward = t > equations.getTime();\n \n@@ -105,7 +104,8 @@\n     final double[] y       = y0.clone();\n     final int stages       = c.length + 1;\n     final double[][] yDotK = new double[stages][];\n-    for (int i = 0; i < stages; ++i) {\n+    stepSize = forward ? step : -step;\n+\tfor (int i = 0; i < stages; ++i) {\n       yDotK [i] = new double[y0.length];\n     }\n     final double[] yTmp    = y0.clone();\n@@ -131,7 +131,11 @@\n       // first stage\n       computeDerivatives(stepStart, y, yDotK[0]);\n \n-      // next stages\n+      if ((forward && (stepStart + stepSize > t))\n+\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\t// next stages\n       for (int k = 1; k < stages; ++k) {\n \n           for (int j = 0; j < y0.length; ++j) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 138, 
          "faulty": "double sum=a[k - 1][0] * yDotK[0][j];", 
          "type": "InsertBefore", 
          "seed": "interpolator.storeTime(stepStart + stepSize);"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1573/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:34:32.983122627 -0500\n@@ -122,7 +122,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n@@ -135,7 +143,8 @@\n       for (int k = 1; k < stages; ++k) {\n \n           for (int j = 0; j < y0.length; ++j) {\n-              double sum = a[k-1][0] * yDotK[0][j];\n+              interpolator.storeTime(stepStart + stepSize);\n+\t\t\tdouble sum = a[k-1][0] * yDotK[0][j];\n               for (int l = 1; l < k; ++l) {\n                   sum += a[k-1][l] * yDotK[l][j];\n               }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 111, 
          "faulty": "final double[] yTmp=y0.clone();", 
          "type": "InsertBefore", 
          "seed": "stepSize=forward ? step : -step;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_912/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:10:36.156939943 -0500\n@@ -108,7 +108,8 @@\n     for (int i = 0; i < stages; ++i) {\n       yDotK [i] = new double[y0.length];\n     }\n-    final double[] yTmp    = y0.clone();\n+    stepSize = forward ? step : -step;\n+\tfinal double[] yTmp    = y0.clone();\n     final double[] yDotTmp = new double[y0.length];\n \n     // set up an interpolator sharing the integrator arrays\n@@ -122,7 +123,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 115, 
          "faulty": "final RungeKuttaStepInterpolator interpolator=(RungeKuttaStepInterpolator)prototype.copy();", 
          "type": "InsertBefore", 
          "seed": "if (stepStart + stepSize <= t) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 135, 
          "faulty": "for (int k=1; k < stages; ++k) {\n  for (int j=0; j < y0.length; ++j) {\n    double sum=a[k - 1][0] * yDotK[0][j];\n    for (int l=1; l < k; ++l) {\n      sum+=a[k - 1][l] * yDotK[l][j];\n    }\n    yTmp[j]=y[j] + stepSize * sum;\n  }\n  computeDerivatives(stepStart + c[k - 1] * stepSize,yTmp,yDotK[k]);\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_550/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:58:26.605825186 -0500\n@@ -111,7 +111,10 @@\n     final double[] yTmp    = y0.clone();\n     final double[] yDotTmp = new double[y0.length];\n \n-    // set up an interpolator sharing the integrator arrays\n+    if (stepStart + stepSize <= t) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\t// set up an interpolator sharing the integrator arrays\n     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n     interpolator.reinitialize(this, yTmp, yDotK, forward,\n                               equations.getPrimaryMapper(), equations.getSecondaryMappers());\n@@ -131,7 +134,11 @@\n       // first stage\n       computeDerivatives(stepStart, y, yDotK[0]);\n \n-      // next stages\n+      if ((forward && (stepStart + stepSize > t))\n+\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\t// next stages\n       for (int k = 1; k < stages; ++k) {\n \n           for (int j = 0; j < y0.length; ++j) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (forward) {\n  if (stepStart + stepSize >= t) {\n    stepSize=t - stepStart;\n  }\n}\n else {\n  if (stepStart + stepSize <= t) {\n    stepSize=t - stepStart;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 105, 
          "faulty": "final double[] y=y0.clone();", 
          "type": "InsertBefore", 
          "seed": "if (stepStart + stepSize <= t) {\n  stepSize=t - stepStart;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_798/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:06:42.791854597 -0500\n@@ -102,7 +102,10 @@\n \n     // create some internal working arrays\n     final double[] y0      = equations.getCompleteState();\n-    final double[] y       = y0.clone();\n+    if (stepStart + stepSize <= t) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\tfinal double[] y       = y0.clone();\n     final int stages       = c.length + 1;\n     final double[][] yDotK = new double[stages][];\n     for (int i = 0; i < stages; ++i) {\n@@ -122,7 +125,16 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (forward) {\n+\t\tif (stepStart + stepSize >= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t} else {\n+\t\tif (stepStart + stepSize <= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (forward) {\n  if (stepStart + stepSize >= t) {\n    stepSize=t - stepStart;\n  }\n}\n else {\n  if (stepStart + stepSize <= t) {\n    stepSize=t - stepStart;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 101, 
          "faulty": "final boolean forward=t > equations.getTime();", 
          "type": "InsertBefore", 
          "seed": "if (stepStart + stepSize <= t) {\n  stepSize=t - stepStart;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_732/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:04:20.023234995 -0500\n@@ -98,7 +98,10 @@\n \n     sanityChecks(equations, t);\n     setEquations(equations);\n-    final boolean forward = t > equations.getTime();\n+    if (stepStart + stepSize <= t) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\tfinal boolean forward = t > equations.getTime();\n \n     // create some internal working arrays\n     final double[] y0      = equations.getCompleteState();\n@@ -122,7 +125,16 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (forward) {\n+\t\tif (stepStart + stepSize >= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t} else {\n+\t\tif (stepStart + stepSize <= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 99, 
          "faulty": "sanityChecks(equations,t);", 
          "type": "Delete", 
          "seed": "stepStart=equations.getTime();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_268/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:48:46.619496202 -0500\n@@ -96,7 +96,6 @@\n       throws NumberIsTooSmallException, DimensionMismatchException,\n              MaxCountExceededException, NoBracketingException {\n \n-    sanityChecks(equations, t);\n     setEquations(equations);\n     final boolean forward = t > equations.getTime();\n \n@@ -122,7 +121,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 100, 
          "faulty": "setEquations(equations);", 
          "type": "InsertBefore", 
          "seed": "stepSize=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1670/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:38:11.832043574 -0500\n@@ -97,7 +97,8 @@\n              MaxCountExceededException, NoBracketingException {\n \n     sanityChecks(equations, t);\n-    setEquations(equations);\n+    stepSize = Double.NaN;\n+\tsetEquations(equations);\n     final boolean forward = t > equations.getTime();\n \n     // create some internal working arrays\n@@ -122,7 +123,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 111, 
          "faulty": "final double[] yTmp=y0.clone();", 
          "type": "InsertBefore", 
          "seed": "if (stepStart + stepSize >= t) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_885/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:09:47.468711516 -0500\n@@ -108,7 +108,10 @@\n     for (int i = 0; i < stages; ++i) {\n       yDotK [i] = new double[y0.length];\n     }\n-    final double[] yTmp    = y0.clone();\n+    if (stepStart + stepSize >= t) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\tfinal double[] yTmp    = y0.clone();\n     final double[] yDotTmp = new double[y0.length];\n \n     // set up an interpolator sharing the integrator arrays\n@@ -122,7 +125,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (forward) {\n  if (stepStart + stepSize >= t) {\n    stepSize=t - stepStart;\n  }\n}\n else {\n  if (stepStart + stepSize <= t) {\n    stepSize=t - stepStart;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 135, 
          "faulty": "for (int k=1; k < stages; ++k) {\n  for (int j=0; j < y0.length; ++j) {\n    double sum=a[k - 1][0] * yDotK[0][j];\n    for (int l=1; l < k; ++l) {\n      sum+=a[k - 1][l] * yDotK[l][j];\n    }\n    yTmp[j]=y[j] + stepSize * sum;\n  }\n  computeDerivatives(stepStart + c[k - 1] * stepSize,yTmp,yDotK[k]);\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1423/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:29:00.933651663 -0500\n@@ -122,7 +122,16 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (forward) {\n+\t\tif (stepStart + stepSize >= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t} else {\n+\t\tif (stepStart + stepSize <= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n@@ -131,7 +140,11 @@\n       // first stage\n       computeDerivatives(stepStart, y, yDotK[0]);\n \n-      // next stages\n+      if ((forward && (stepStart + stepSize > t))\n+\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\t// next stages\n       for (int k = 1; k < stages; ++k) {\n \n           for (int j = 0; j < y0.length; ++j) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (forward) {\n  if (stepStart + stepSize >= t) {\n    stepSize=t - stepStart;\n  }\n}\n else {\n  if (stepStart + stepSize <= t) {\n    stepSize=t - stepStart;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 105, 
          "faulty": "final double[] y=y0.clone();", 
          "type": "InsertBefore", 
          "seed": "super.sanityChecks(equations,t);"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_795/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:06:38.611835062 -0500\n@@ -102,7 +102,8 @@\n \n     // create some internal working arrays\n     final double[] y0      = equations.getCompleteState();\n-    final double[] y       = y0.clone();\n+    super.sanityChecks(equations, t);\n+\tfinal double[] y       = y0.clone();\n     final int stages       = c.length + 1;\n     final double[][] yDotK = new double[stages][];\n     for (int i = 0; i < stages; ++i) {\n@@ -122,7 +123,16 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (forward) {\n+\t\tif (stepStart + stepSize >= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t} else {\n+\t\tif (stepStart + stepSize <= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 129, 
          "faulty": "interpolator.shift();", 
          "type": "InsertBefore", 
          "seed": "super.sanityChecks(equations,t);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1164/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:19:38.847282122 -0500\n@@ -122,11 +122,20 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n-      interpolator.shift();\n+      super.sanityChecks(equations, t);\n+\tinterpolator.shift();\n \n       // first stage\n       computeDerivatives(stepStart, y, yDotK[0]);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 115, 
          "faulty": "final RungeKuttaStepInterpolator interpolator=(RungeKuttaStepInterpolator)prototype.copy();", 
          "type": "InsertBefore", 
          "seed": "stepStart=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_811/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:07:07.627970036 -0500\n@@ -111,7 +111,8 @@\n     final double[] yTmp    = y0.clone();\n     final double[] yDotTmp = new double[y0.length];\n \n-    // set up an interpolator sharing the integrator arrays\n+    stepStart = Double.NaN;\n+\t// set up an interpolator sharing the integrator arrays\n     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n     interpolator.reinitialize(this, yTmp, yDotK, forward,\n                               equations.getPrimaryMapper(), equations.getSecondaryMappers());\n@@ -122,7 +123,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 107, 
          "faulty": "final double[][] yDotK=new double[stages][];", 
          "type": "Replace", 
          "seed": "final double[][] yDotK=new double[stages][y.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_613/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:00:25.274265579 -0500\n@@ -104,7 +104,7 @@\n     final double[] y0      = equations.getCompleteState();\n     final double[] y       = y0.clone();\n     final int stages       = c.length + 1;\n-    final double[][] yDotK = new double[stages][];\n+    final double[][] yDotK = new double[stages][y.length];\n     for (int i = 0; i < stages; ++i) {\n       yDotK [i] = new double[y0.length];\n     }\n@@ -122,7 +122,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 100, 
          "faulty": "setEquations(equations);", 
          "type": "InsertBefore", 
          "seed": "stepStart=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_691/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:02:56.470862780 -0500\n@@ -97,7 +97,8 @@\n              MaxCountExceededException, NoBracketingException {\n \n     sanityChecks(equations, t);\n-    setEquations(equations);\n+    stepStart = Double.NaN;\n+\tsetEquations(equations);\n     final boolean forward = t > equations.getTime();\n \n     // create some internal working arrays\n@@ -122,7 +123,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 118, 
          "faulty": "interpolator.storeTime(equations.getTime());", 
          "type": "Delete", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_610/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:00:21.090250121 -0500\n@@ -115,14 +115,20 @@\n     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n     interpolator.reinitialize(this, yTmp, yDotK, forward,\n                               equations.getPrimaryMapper(), equations.getSecondaryMappers());\n-    interpolator.storeTime(equations.getTime());\n-\n     // set up integration control objects\n     stepStart = equations.getTime();\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 118, 
          "faulty": "interpolator.storeTime(equations.getTime());", 
          "type": "InsertBefore", 
          "seed": "if (forward) {\n  if (stepStart + stepSize >= t) {\n    stepSize=t - stepStart;\n  }\n}\n else {\n  if (stepStart + stepSize <= t) {\n    stepSize=t - stepStart;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 99, 
          "faulty": "sanityChecks(equations,t);", 
          "type": "InsertBefore", 
          "seed": "setEquations(equations);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 135, 
          "faulty": "for (int k=1; k < stages; ++k) {\n  for (int j=0; j < y0.length; ++j) {\n    double sum=a[k - 1][0] * yDotK[0][j];\n    for (int l=1; l < k; ++l) {\n      sum+=a[k - 1][l] * yDotK[l][j];\n    }\n    yTmp[j]=y[j] + stepSize * sum;\n  }\n  computeDerivatives(stepStart + c[k - 1] * stepSize,yTmp,yDotK[k]);\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_456/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:54:59.009039240 -0500\n@@ -96,7 +96,8 @@\n       throws NumberIsTooSmallException, DimensionMismatchException,\n              MaxCountExceededException, NoBracketingException {\n \n-    sanityChecks(equations, t);\n+    setEquations(equations);\n+\tsanityChecks(equations, t);\n     setEquations(equations);\n     final boolean forward = t > equations.getTime();\n \n@@ -115,7 +116,16 @@\n     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n     interpolator.reinitialize(this, yTmp, yDotK, forward,\n                               equations.getPrimaryMapper(), equations.getSecondaryMappers());\n-    interpolator.storeTime(equations.getTime());\n+    if (forward) {\n+\t\tif (stepStart + stepSize >= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t} else {\n+\t\tif (stepStart + stepSize <= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\tinterpolator.storeTime(equations.getTime());\n \n     // set up integration control objects\n     stepStart = equations.getTime();\n@@ -131,7 +141,11 @@\n       // first stage\n       computeDerivatives(stepStart, y, yDotK[0]);\n \n-      // next stages\n+      if ((forward && (stepStart + stepSize > t))\n+\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\t// next stages\n       for (int k = 1; k < stages; ++k) {\n \n           for (int j = 0; j < y0.length; ++j) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/FastMath.java", 
          "line": 3293, 
          "faulty": "final long sign=bits & 0x8000000000000000L;", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(d) || Double.isNaN(direction)) {\n  return Double.NaN;\n}\n else if (d == direction) {\n  return direction;\n}\n else if (Double.isInfinite(d)) {\n  return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;\n}\n else if (d == 0) {\n  return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 107, 
          "faulty": "final double[][] yDotK=new double[stages][];", 
          "type": "Replace", 
          "seed": "final double[][] yDotK=new double[stages][y.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-29 06:15:23.019936000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1614/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-29 07:35:57.891483350 -0500\n@@ -3290,7 +3290,16 @@\n         // are handled just as normal numbers\n         // can use raw bits since already dealt with infinity and NaN\n         final long bits = Double.doubleToRawLongBits(d);\n-        final long sign = bits & 0x8000000000000000L;\n+        if (Double.isNaN(d) || Double.isNaN(direction)) {\n+\t\t\treturn Double.NaN;\n+\t\t} else if (d == direction) {\n+\t\t\treturn direction;\n+\t\t} else if (Double.isInfinite(d)) {\n+\t\t\treturn (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;\n+\t\t} else if (d == 0) {\n+\t\t\treturn (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;\n+\t\t}\n+\t\tfinal long sign = bits & 0x8000000000000000L;\n         if ((direction < d) ^ (sign == 0L)) {\n             return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));\n         } else {\n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1614/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:35:57.895483367 -0500\n@@ -104,7 +104,7 @@\n     final double[] y0      = equations.getCompleteState();\n     final double[] y       = y0.clone();\n     final int stages       = c.length + 1;\n-    final double[][] yDotK = new double[stages][];\n+    final double[][] yDotK = new double[stages][y.length];\n     for (int i = 0; i < stages; ++i) {\n       yDotK [i] = new double[y0.length];\n     }\n@@ -122,7 +122,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 108, 
          "faulty": "for (int i=0; i < stages; ++i) {\n  yDotK[i]=new double[y0.length];\n}", 
          "type": "InsertBefore", 
          "seed": "stepSize=forward ? step : -step;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1456/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:30:10.541969937 -0500\n@@ -105,7 +105,8 @@\n     final double[] y       = y0.clone();\n     final int stages       = c.length + 1;\n     final double[][] yDotK = new double[stages][];\n-    for (int i = 0; i < stages; ++i) {\n+    stepSize = forward ? step : -step;\n+\tfor (int i = 0; i < stages; ++i) {\n       yDotK [i] = new double[y0.length];\n     }\n     final double[] yTmp    = y0.clone();\n@@ -122,7 +123,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 100, 
          "faulty": "setEquations(equations);", 
          "type": "InsertBefore", 
          "seed": "stepStart=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (forward) {\n  if (stepStart + stepSize >= t) {\n    stepSize=t - stepStart;\n  }\n}\n else {\n  if (stepStart + stepSize <= t) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1588/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:35:00.523240165 -0500\n@@ -97,7 +97,8 @@\n              MaxCountExceededException, NoBracketingException {\n \n     sanityChecks(equations, t);\n-    setEquations(equations);\n+    stepStart = Double.NaN;\n+\tsetEquations(equations);\n     final boolean forward = t > equations.getTime();\n \n     // create some internal working arrays\n@@ -122,7 +123,16 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (forward) {\n+\t\tif (stepStart + stepSize >= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t} else {\n+\t\tif (stepStart + stepSize <= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 111, 
          "faulty": "final double[] yTmp=y0.clone();", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < stages; ++i) {\n  yDotK[i]=new double[y0.length];\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_668/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:02:14.790673214 -0500\n@@ -108,7 +108,10 @@\n     for (int i = 0; i < stages; ++i) {\n       yDotK [i] = new double[y0.length];\n     }\n-    final double[] yTmp    = y0.clone();\n+    for (int i = 0; i < stages; ++i) {\n+\t\tyDotK[i] = new double[y0.length];\n+\t}\n+\tfinal double[] yTmp    = y0.clone();\n     final double[] yDotTmp = new double[y0.length];\n \n     // set up an interpolator sharing the integrator arrays\n@@ -122,7 +125,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 112, 
          "faulty": "final double[] yDotTmp=new double[y0.length];", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1036/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:15:00.950120523 -0500\n@@ -109,7 +109,11 @@\n       yDotK [i] = new double[y0.length];\n     }\n     final double[] yTmp    = y0.clone();\n-    final double[] yDotTmp = new double[y0.length];\n+    if ((forward && (stepStart + stepSize > t))\n+\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\tfinal double[] yDotTmp = new double[y0.length];\n \n     // set up an interpolator sharing the integrator arrays\n     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n@@ -122,7 +126,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 111, 
          "faulty": "final double[] yTmp=y0.clone();", 
          "type": "InsertBefore", 
          "seed": "equations.setCompleteState(y);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 135, 
          "faulty": "for (int k=1; k < stages; ++k) {\n  for (int j=0; j < y0.length; ++j) {\n    double sum=a[k - 1][0] * yDotK[0][j];\n    for (int l=1; l < k; ++l) {\n      sum+=a[k - 1][l] * yDotK[l][j];\n    }\n    yTmp[j]=y[j] + stepSize * sum;\n  }\n  computeDerivatives(stepStart + c[k - 1] * stepSize,yTmp,yDotK[k]);\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_649/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:01:38.550535645 -0500\n@@ -108,7 +108,8 @@\n     for (int i = 0; i < stages; ++i) {\n       yDotK [i] = new double[y0.length];\n     }\n-    final double[] yTmp    = y0.clone();\n+    equations.setCompleteState(y);\n+\tfinal double[] yTmp    = y0.clone();\n     final double[] yDotTmp = new double[y0.length];\n \n     // set up an interpolator sharing the integrator arrays\n@@ -131,7 +132,11 @@\n       // first stage\n       computeDerivatives(stepStart, y, yDotK[0]);\n \n-      // next stages\n+      if ((forward && (stepStart + stepSize > t))\n+\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\t// next stages\n       for (int k = 1; k < stages; ++k) {\n \n           for (int j = 0; j < y0.length; ++j) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 115, 
          "faulty": "final RungeKuttaStepInterpolator interpolator=(RungeKuttaStepInterpolator)prototype.copy();", 
          "type": "InsertBefore", 
          "seed": "stepSize=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (forward) {\n  if (stepStart + stepSize >= t) {\n    stepSize=t - stepStart;\n  }\n}\n else {\n  if (stepStart + stepSize <= t) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1087/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:16:48.862578851 -0500\n@@ -111,7 +111,8 @@\n     final double[] yTmp    = y0.clone();\n     final double[] yDotTmp = new double[y0.length];\n \n-    // set up an interpolator sharing the integrator arrays\n+    stepSize = Double.NaN;\n+\t// set up an interpolator sharing the integrator arrays\n     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n     interpolator.reinitialize(this, yTmp, yDotK, forward,\n                               equations.getPrimaryMapper(), equations.getSecondaryMappers());\n@@ -122,7 +123,16 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (forward) {\n+\t\tif (stepStart + stepSize >= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t} else {\n+\t\tif (stepStart + stepSize <= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 111, 
          "faulty": "final double[] yTmp=y0.clone();", 
          "type": "InsertBefore", 
          "seed": "if (stepStart + stepSize >= t) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 99, 
          "faulty": "sanityChecks(equations,t);", 
          "type": "Delete", 
          "seed": "this.step=FastMath.abs(step);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1210/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:21:23.643706813 -0500\n@@ -96,7 +96,6 @@\n       throws NumberIsTooSmallException, DimensionMismatchException,\n              MaxCountExceededException, NoBracketingException {\n \n-    sanityChecks(equations, t);\n     setEquations(equations);\n     final boolean forward = t > equations.getTime();\n \n@@ -108,7 +107,10 @@\n     for (int i = 0; i < stages; ++i) {\n       yDotK [i] = new double[y0.length];\n     }\n-    final double[] yTmp    = y0.clone();\n+    if (stepStart + stepSize >= t) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\tfinal double[] yTmp    = y0.clone();\n     final double[] yDotTmp = new double[y0.length];\n \n     // set up an interpolator sharing the integrator arrays\n@@ -122,7 +124,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/FastMath.java", 
          "line": 3293, 
          "faulty": "final long sign=bits & 0x8000000000000000L;", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(d) || Double.isNaN(direction)) {\n  return Double.NaN;\n}\n else if (d == direction) {\n  return direction;\n}\n else if (Double.isInfinite(d)) {\n  return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;\n}\n else if (d == 0) {\n  return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-29 06:15:23.019936000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_562/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-29 06:58:52.809922829 -0500\n@@ -3290,7 +3290,16 @@\n         // are handled just as normal numbers\n         // can use raw bits since already dealt with infinity and NaN\n         final long bits = Double.doubleToRawLongBits(d);\n-        final long sign = bits & 0x8000000000000000L;\n+        if (Double.isNaN(d) || Double.isNaN(direction)) {\n+\t\t\treturn Double.NaN;\n+\t\t} else if (d == direction) {\n+\t\t\treturn direction;\n+\t\t} else if (Double.isInfinite(d)) {\n+\t\t\treturn (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;\n+\t\t} else if (d == 0) {\n+\t\t\treturn (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;\n+\t\t}\n+\t\tfinal long sign = bits & 0x8000000000000000L;\n         if ((direction < d) ^ (sign == 0L)) {\n             return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));\n         } else {\n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_562/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:58:52.809922829 -0500\n@@ -122,7 +122,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 108, 
          "faulty": "for (int i=0; i < stages; ++i) {\n  yDotK[i]=new double[y0.length];\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < stages; ++i) {\n  yDotK[i]=new double[y0.length];\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 99, 
          "faulty": "sanityChecks(equations,t);", 
          "type": "Delete", 
          "seed": "stepStart=equations.getTime();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_374/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:52:23.976427998 -0500\n@@ -96,7 +96,6 @@\n       throws NumberIsTooSmallException, DimensionMismatchException,\n              MaxCountExceededException, NoBracketingException {\n \n-    sanityChecks(equations, t);\n     setEquations(equations);\n     final boolean forward = t > equations.getTime();\n \n@@ -106,6 +105,9 @@\n     final int stages       = c.length + 1;\n     final double[][] yDotK = new double[stages][];\n     for (int i = 0; i < stages; ++i) {\n+\t\tyDotK[i] = new double[y0.length];\n+\t}\n+\tfor (int i = 0; i < stages; ++i) {\n       yDotK [i] = new double[y0.length];\n     }\n     final double[] yTmp    = y0.clone();\n@@ -122,7 +124,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 112, 
          "faulty": "final double[] yDotTmp=new double[y0.length];", 
          "type": "Replace", 
          "seed": "final double[] yDotTmp=new double[y.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 135, 
          "faulty": "for (int k=1; k < stages; ++k) {\n  for (int j=0; j < y0.length; ++j) {\n    double sum=a[k - 1][0] * yDotK[0][j];\n    for (int l=1; l < k; ++l) {\n      sum+=a[k - 1][l] * yDotK[l][j];\n    }\n    yTmp[j]=y[j] + stepSize * sum;\n  }\n  computeDerivatives(stepStart + c[k - 1] * stepSize,yTmp,yDotK[k]);\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1524/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:32:35.650615281 -0500\n@@ -109,7 +109,7 @@\n       yDotK [i] = new double[y0.length];\n     }\n     final double[] yTmp    = y0.clone();\n-    final double[] yDotTmp = new double[y0.length];\n+    final double[] yDotTmp = new double[y.length];\n \n     // set up an interpolator sharing the integrator arrays\n     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n@@ -131,7 +131,11 @@\n       // first stage\n       computeDerivatives(stepStart, y, yDotK[0]);\n \n-      // next stages\n+      if ((forward && (stepStart + stepSize > t))\n+\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\t// next stages\n       for (int k = 1; k < stages; ++k) {\n \n           for (int j = 0; j < y0.length; ++j) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/FastMath.java", 
          "line": 3292, 
          "faulty": "final long bits=Double.doubleToRawLongBits(d);", 
          "type": "InsertBefore", 
          "seed": "if (d == direction) {\n  return direction;\n}\n else if (Double.isInfinite(d)) {\n  return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;\n}\n else if (d == 0) {\n  return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 135, 
          "faulty": "for (int k=1; k < stages; ++k) {\n  for (int j=0; j < y0.length; ++j) {\n    double sum=a[k - 1][0] * yDotK[0][j];\n    for (int l=1; l < k; ++l) {\n      sum+=a[k - 1][l] * yDotK[l][j];\n    }\n    yTmp[j]=y[j] + stepSize * sum;\n  }\n  computeDerivatives(stepStart + c[k - 1] * stepSize,yTmp,yDotK[k]);\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-29 06:15:23.019936000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1378/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-29 07:27:13.493146755 -0500\n@@ -3286,7 +3286,14 @@\n         } else if (d == 0) {\n             return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;\n         }\n-        // special cases MAX_VALUE to infinity and  MIN_VALUE to 0\n+        if (d == direction) {\n+\t\t\treturn direction;\n+\t\t} else if (Double.isInfinite(d)) {\n+\t\t\treturn (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;\n+\t\t} else if (d == 0) {\n+\t\t\treturn (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;\n+\t\t}\n+\t\t// special cases MAX_VALUE to infinity and  MIN_VALUE to 0\n         // are handled just as normal numbers\n         // can use raw bits since already dealt with infinity and NaN\n         final long bits = Double.doubleToRawLongBits(d);\n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1378/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:27:13.493146755 -0500\n@@ -131,7 +131,11 @@\n       // first stage\n       computeDerivatives(stepStart, y, yDotK[0]);\n \n-      // next stages\n+      if ((forward && (stepStart + stepSize > t))\n+\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\t// next stages\n       for (int k = 1; k < stages; ++k) {\n \n           for (int j = 0; j < y0.length; ++j) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 99, 
          "faulty": "sanityChecks(equations,t);", 
          "type": "InsertBefore", 
          "seed": "if (stepStart + stepSize >= t) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_438/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:54:27.120915761 -0500\n@@ -96,7 +96,10 @@\n       throws NumberIsTooSmallException, DimensionMismatchException,\n              MaxCountExceededException, NoBracketingException {\n \n-    sanityChecks(equations, t);\n+    if (stepStart + stepSize >= t) {\n+\t\t\t\t\tstepSize = t - stepStart;\n+\t\t\t\t}\n+\tsanityChecks(equations, t);\n     setEquations(equations);\n     final boolean forward = t > equations.getTime();\n \n@@ -122,7 +125,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 135, 
          "faulty": "for (int k=1; k < stages; ++k) {\n  for (int j=0; j < y0.length; ++j) {\n    double sum=a[k - 1][0] * yDotK[0][j];\n    for (int l=1; l < k; ++l) {\n      sum+=a[k - 1][l] * yDotK[l][j];\n    }\n    yTmp[j]=y[j] + stepSize * sum;\n  }\n  computeDerivatives(stepStart + c[k - 1] * stepSize,yTmp,yDotK[k]);\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 107, 
          "faulty": "final double[][] yDotK=new double[stages][];", 
          "type": "Replace", 
          "seed": "final double[][] yDotK=new double[stages][y.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_490/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:56:10.185311747 -0500\n@@ -104,7 +104,7 @@\n     final double[] y0      = equations.getCompleteState();\n     final double[] y       = y0.clone();\n     final int stages       = c.length + 1;\n-    final double[][] yDotK = new double[stages][];\n+    final double[][] yDotK = new double[stages][y.length];\n     for (int i = 0; i < stages; ++i) {\n       yDotK [i] = new double[y0.length];\n     }\n@@ -131,7 +131,11 @@\n       // first stage\n       computeDerivatives(stepStart, y, yDotK[0]);\n \n-      // next stages\n+      if ((forward && (stepStart + stepSize > t))\n+\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\t// next stages\n       for (int k = 1; k < stages; ++k) {\n \n           for (int j = 0; j < y0.length; ++j) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 100, 
          "faulty": "setEquations(equations);", 
          "type": "InsertBefore", 
          "seed": "isLastStep=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "Replace", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1205/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:21:15.235672948 -0500\n@@ -97,7 +97,8 @@\n              MaxCountExceededException, NoBracketingException {\n \n     sanityChecks(equations, t);\n-    setEquations(equations);\n+    isLastStep = false;\n+\tsetEquations(equations);\n     final boolean forward = t > equations.getTime();\n \n     // create some internal working arrays\n@@ -122,8 +123,14 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n-    isLastStep = false;\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n     do {\n \n       interpolator.shift();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 118, 
          "faulty": "interpolator.storeTime(equations.getTime());", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_925/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:11:15.825123058 -0500\n@@ -115,14 +115,26 @@\n     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n     interpolator.reinitialize(this, yTmp, yDotK, forward,\n                               equations.getPrimaryMapper(), equations.getSecondaryMappers());\n-    interpolator.storeTime(equations.getTime());\n+    if ((forward && (stepStart + stepSize > t))\n+\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\tinterpolator.storeTime(equations.getTime());\n \n     // set up integration control objects\n     stepStart = equations.getTime();\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 101, 
          "faulty": "final boolean forward=t > equations.getTime();", 
          "type": "InsertBefore", 
          "seed": "if (stepStart + stepSize <= t) {\n  stepSize=t - stepStart;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_909/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:10:31.888920085 -0500\n@@ -98,7 +98,10 @@\n \n     sanityChecks(equations, t);\n     setEquations(equations);\n-    final boolean forward = t > equations.getTime();\n+    if (stepStart + stepSize <= t) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\tfinal boolean forward = t > equations.getTime();\n \n     // create some internal working arrays\n     final double[] y0      = equations.getCompleteState();\n@@ -122,7 +125,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 112, 
          "faulty": "final double[] yDotTmp=new double[y0.length];", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (forward) {\n  if (stepStart + stepSize >= t) {\n    stepSize=t - stepStart;\n  }\n}\n else {\n  if (stepStart + stepSize <= t) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_535/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:57:52.701698443 -0500\n@@ -109,7 +109,11 @@\n       yDotK [i] = new double[y0.length];\n     }\n     final double[] yTmp    = y0.clone();\n-    final double[] yDotTmp = new double[y0.length];\n+    if ((forward && (stepStart + stepSize > t))\n+\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\tfinal double[] yDotTmp = new double[y0.length];\n \n     // set up an interpolator sharing the integrator arrays\n     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n@@ -122,7 +126,16 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (forward) {\n+\t\tif (stepStart + stepSize >= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t} else {\n+\t\tif (stepStart + stepSize <= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (forward) {\n  if (stepStart + stepSize >= t) {\n    stepSize=t - stepStart;\n  }\n}\n else {\n  if (stepStart + stepSize <= t) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_541/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:58:05.885747787 -0500\n@@ -122,7 +122,16 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (forward) {\n+\t\tif (stepStart + stepSize >= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t} else {\n+\t\tif (stepStart + stepSize <= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 118, 
          "faulty": "interpolator.storeTime(equations.getTime());", 
          "type": "InsertBefore", 
          "seed": "interpolator.reinitialize(this,yTmp,yDotK,forward,equations.getPrimaryMapper(),equations.getSecondaryMappers());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1622/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:36:15.735558566 -0500\n@@ -115,14 +115,24 @@\n     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n     interpolator.reinitialize(this, yTmp, yDotK, forward,\n                               equations.getPrimaryMapper(), equations.getSecondaryMappers());\n-    interpolator.storeTime(equations.getTime());\n+    interpolator.reinitialize(this, yTmp, yDotK, forward,\n+\t\t\tequations.getPrimaryMapper(), equations.getSecondaryMappers());\n+\tinterpolator.storeTime(equations.getTime());\n \n     // set up integration control objects\n     stepStart = equations.getTime();\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 115, 
          "faulty": "final RungeKuttaStepInterpolator interpolator=(RungeKuttaStepInterpolator)prototype.copy();", 
          "type": "InsertBefore", 
          "seed": "if (forward) {\n  if (stepStart + stepSize >= t) {\n    stepSize=t - stepStart;\n  }\n}\n else {\n  if (stepStart + stepSize <= t) {\n    stepSize=t - stepStart;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_685/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:02:48.622827295 -0500\n@@ -111,7 +111,16 @@\n     final double[] yTmp    = y0.clone();\n     final double[] yDotTmp = new double[y0.length];\n \n-    // set up an interpolator sharing the integrator arrays\n+    if (forward) {\n+\t\tif (stepStart + stepSize >= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t} else {\n+\t\tif (stepStart + stepSize <= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// set up an interpolator sharing the integrator arrays\n     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n     interpolator.reinitialize(this, yTmp, yDotK, forward,\n                               equations.getPrimaryMapper(), equations.getSecondaryMappers());\n@@ -122,7 +131,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 105, 
          "faulty": "final double[] y=y0.clone();", 
          "type": "InsertBefore", 
          "seed": "if (forward) {\n  if (stepStart + stepSize >= t) {\n    stepSize=t - stepStart;\n  }\n}\n else {\n  if (stepStart + stepSize <= t) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1004/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:14:02.569867804 -0500\n@@ -102,7 +102,16 @@\n \n     // create some internal working arrays\n     final double[] y0      = equations.getCompleteState();\n-    final double[] y       = y0.clone();\n+    if (forward) {\n+\t\tif (stepStart + stepSize >= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t} else {\n+\t\tif (stepStart + stepSize <= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\tfinal double[] y       = y0.clone();\n     final int stages       = c.length + 1;\n     final double[][] yDotK = new double[stages][];\n     for (int i = 0; i < stages; ++i) {\n@@ -122,7 +131,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 108, 
          "faulty": "for (int i=0; i < stages; ++i) {\n  yDotK[i]=new double[y0.length];\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < stages; ++i) {\n  yDotK[i]=new double[y0.length];\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 118, 
          "faulty": "interpolator.storeTime(equations.getTime());", 
          "type": "Delete", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1228/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:22:02.091861248 -0500\n@@ -106,6 +106,9 @@\n     final int stages       = c.length + 1;\n     final double[][] yDotK = new double[stages][];\n     for (int i = 0; i < stages; ++i) {\n+\t\tyDotK[i] = new double[y0.length];\n+\t}\n+\tfor (int i = 0; i < stages; ++i) {\n       yDotK [i] = new double[y0.length];\n     }\n     final double[] yTmp    = y0.clone();\n@@ -115,14 +118,20 @@\n     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n     interpolator.reinitialize(this, yTmp, yDotK, forward,\n                               equations.getPrimaryMapper(), equations.getSecondaryMappers());\n-    interpolator.storeTime(equations.getTime());\n-\n     // set up integration control objects\n     stepStart = equations.getTime();\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 104, 
          "faulty": "final double[] y0=equations.getCompleteState();", 
          "type": "InsertBefore", 
          "seed": "stepSize=t - stepStart;"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1476/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:30:56.790178081 -0500\n@@ -100,7 +100,8 @@\n     setEquations(equations);\n     final boolean forward = t > equations.getTime();\n \n-    // create some internal working arrays\n+    stepSize = t - stepStart;\n+\t// create some internal working arrays\n     final double[] y0      = equations.getCompleteState();\n     final double[] y       = y0.clone();\n     final int stages       = c.length + 1;\n@@ -122,7 +123,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 112, 
          "faulty": "final double[] yDotTmp=new double[y0.length];", 
          "type": "Replace", 
          "seed": "final double[] yDotTmp=new double[y.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_693/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:02:58.606872420 -0500\n@@ -109,7 +109,7 @@\n       yDotK [i] = new double[y0.length];\n     }\n     final double[] yTmp    = y0.clone();\n-    final double[] yDotTmp = new double[y0.length];\n+    final double[] yDotTmp = new double[y.length];\n \n     // set up an interpolator sharing the integrator arrays\n     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n@@ -122,7 +122,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 115, 
          "faulty": "final RungeKuttaStepInterpolator interpolator=(RungeKuttaStepInterpolator)prototype.copy();", 
          "type": "InsertBefore", 
          "seed": "if (stepStart + stepSize <= t) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 99, 
          "faulty": "sanityChecks(equations,t);", 
          "type": "InsertBefore", 
          "seed": "setEquations(equations);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 135, 
          "faulty": "for (int k=1; k < stages; ++k) {\n  for (int j=0; j < y0.length; ++j) {\n    double sum=a[k - 1][0] * yDotK[0][j];\n    for (int l=1; l < k; ++l) {\n      sum+=a[k - 1][l] * yDotK[l][j];\n    }\n    yTmp[j]=y[j] + stepSize * sum;\n  }\n  computeDerivatives(stepStart + c[k - 1] * stepSize,yTmp,yDotK[k]);\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_972/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:12:53.705564695 -0500\n@@ -96,7 +96,8 @@\n       throws NumberIsTooSmallException, DimensionMismatchException,\n              MaxCountExceededException, NoBracketingException {\n \n-    sanityChecks(equations, t);\n+    setEquations(equations);\n+\tsanityChecks(equations, t);\n     setEquations(equations);\n     final boolean forward = t > equations.getTime();\n \n@@ -111,7 +112,10 @@\n     final double[] yTmp    = y0.clone();\n     final double[] yDotTmp = new double[y0.length];\n \n-    // set up an interpolator sharing the integrator arrays\n+    if (stepStart + stepSize <= t) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\t// set up an interpolator sharing the integrator arrays\n     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n     interpolator.reinitialize(this, yTmp, yDotK, forward,\n                               equations.getPrimaryMapper(), equations.getSecondaryMappers());\n@@ -131,7 +135,11 @@\n       // first stage\n       computeDerivatives(stepStart, y, yDotK[0]);\n \n-      // next stages\n+      if ((forward && (stepStart + stepSize > t))\n+\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\t// next stages\n       for (int k = 1; k < stages; ++k) {\n \n           for (int j = 0; j < y0.length; ++j) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 115, 
          "faulty": "final RungeKuttaStepInterpolator interpolator=(RungeKuttaStepInterpolator)prototype.copy();", 
          "type": "InsertBefore", 
          "seed": "stepSize=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 99, 
          "faulty": "sanityChecks(equations,t);", 
          "type": "Delete", 
          "seed": "if (stepStart + stepSize >= t) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 135, 
          "faulty": "for (int k=1; k < stages; ++k) {\n  for (int j=0; j < y0.length; ++j) {\n    double sum=a[k - 1][0] * yDotK[0][j];\n    for (int l=1; l < k; ++l) {\n      sum+=a[k - 1][l] * yDotK[l][j];\n    }\n    yTmp[j]=y[j] + stepSize * sum;\n  }\n  computeDerivatives(stepStart + c[k - 1] * stepSize,yTmp,yDotK[k]);\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_492/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:56:12.289319746 -0500\n@@ -96,7 +96,6 @@\n       throws NumberIsTooSmallException, DimensionMismatchException,\n              MaxCountExceededException, NoBracketingException {\n \n-    sanityChecks(equations, t);\n     setEquations(equations);\n     final boolean forward = t > equations.getTime();\n \n@@ -111,7 +110,8 @@\n     final double[] yTmp    = y0.clone();\n     final double[] yDotTmp = new double[y0.length];\n \n-    // set up an interpolator sharing the integrator arrays\n+    stepSize = Double.NaN;\n+\t// set up an interpolator sharing the integrator arrays\n     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n     interpolator.reinitialize(this, yTmp, yDotK, forward,\n                               equations.getPrimaryMapper(), equations.getSecondaryMappers());\n@@ -131,7 +131,11 @@\n       // first stage\n       computeDerivatives(stepStart, y, yDotK[0]);\n \n-      // next stages\n+      if ((forward && (stepStart + stepSize > t))\n+\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\t// next stages\n       for (int k = 1; k < stages; ++k) {\n \n           for (int j = 0; j < y0.length; ++j) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 112, 
          "faulty": "final double[] yDotTmp=new double[y0.length];", 
          "type": "InsertBefore", 
          "seed": "stepStart=equations.getTime();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (forward) {\n  if (stepStart + stepSize >= t) {\n    stepSize=t - stepStart;\n  }\n}\n else {\n  if (stepStart + stepSize <= t) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_979/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:13:05.057615063 -0500\n@@ -109,7 +109,8 @@\n       yDotK [i] = new double[y0.length];\n     }\n     final double[] yTmp    = y0.clone();\n-    final double[] yDotTmp = new double[y0.length];\n+    stepStart = equations.getTime();\n+\tfinal double[] yDotTmp = new double[y0.length];\n \n     // set up an interpolator sharing the integrator arrays\n     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n@@ -122,7 +123,16 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (forward) {\n+\t\tif (stepStart + stepSize >= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t} else {\n+\t\tif (stepStart + stepSize <= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 105, 
          "faulty": "final double[] y=y0.clone();", 
          "type": "InsertBefore", 
          "seed": "stepSize=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_744/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:04:52.803378465 -0500\n@@ -102,7 +102,8 @@\n \n     // create some internal working arrays\n     final double[] y0      = equations.getCompleteState();\n-    final double[] y       = y0.clone();\n+    stepSize = Double.NaN;\n+\tfinal double[] y       = y0.clone();\n     final int stages       = c.length + 1;\n     final double[][] yDotK = new double[stages][];\n     for (int i = 0; i < stages; ++i) {\n@@ -122,7 +123,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 101, 
          "faulty": "final boolean forward=t > equations.getTime();", 
          "type": "InsertBefore", 
          "seed": "if (stepStart + stepSize >= t) {\n  stepSize=t - stepStart;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_658/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:01:58.350608436 -0500\n@@ -98,7 +98,10 @@\n \n     sanityChecks(equations, t);\n     setEquations(equations);\n-    final boolean forward = t > equations.getTime();\n+    if (stepStart + stepSize >= t) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\tfinal boolean forward = t > equations.getTime();\n \n     // create some internal working arrays\n     final double[] y0      = equations.getCompleteState();\n@@ -122,7 +125,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 129, 
          "faulty": "interpolator.shift();", 
          "type": "InsertBefore", 
          "seed": "interpolator.shift();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (forward) {\n  if (stepStart + stepSize >= t) {\n    stepSize=t - stepStart;\n  }\n}\n else {\n  if (stepStart + stepSize <= t) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_753/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:05:11.307458869 -0500\n@@ -122,11 +122,21 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (forward) {\n+\t\tif (stepStart + stepSize >= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t} else {\n+\t\tif (stepStart + stepSize <= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n       interpolator.shift();\n+\tinterpolator.shift();\n \n       // first stage\n       computeDerivatives(stepStart, y, yDotK[0]);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 112, 
          "faulty": "final double[] yDotTmp=new double[y0.length];", 
          "type": "Replace", 
          "seed": "final double[] yDotTmp=new double[y.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 105, 
          "faulty": "final double[] y=y0.clone();", 
          "type": "InsertBefore", 
          "seed": "if (stepStart + stepSize <= t) {\n  stepSize=t - stepStart;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1031/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:14:52.658084847 -0500\n@@ -102,14 +102,17 @@\n \n     // create some internal working arrays\n     final double[] y0      = equations.getCompleteState();\n-    final double[] y       = y0.clone();\n+    if (stepStart + stepSize <= t) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\tfinal double[] y       = y0.clone();\n     final int stages       = c.length + 1;\n     final double[][] yDotK = new double[stages][];\n     for (int i = 0; i < stages; ++i) {\n       yDotK [i] = new double[y0.length];\n     }\n     final double[] yTmp    = y0.clone();\n-    final double[] yDotTmp = new double[y0.length];\n+    final double[] yDotTmp = new double[y.length];\n \n     // set up an interpolator sharing the integrator arrays\n     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n@@ -122,7 +125,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 112, 
          "faulty": "final double[] yDotTmp=new double[y0.length];", 
          "type": "Replace", 
          "seed": "final double[] yDotTmp=new double[y.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 129, 
          "faulty": "interpolator.shift();", 
          "type": "InsertBefore", 
          "seed": "super.sanityChecks(equations,t);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1113/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:17:50.714837111 -0500\n@@ -109,7 +109,7 @@\n       yDotK [i] = new double[y0.length];\n     }\n     final double[] yTmp    = y0.clone();\n-    final double[] yDotTmp = new double[y0.length];\n+    final double[] yDotTmp = new double[y.length];\n \n     // set up an interpolator sharing the integrator arrays\n     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n@@ -122,11 +122,20 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n-      interpolator.shift();\n+      super.sanityChecks(equations, t);\n+\tinterpolator.shift();\n \n       // first stage\n       computeDerivatives(stepStart, y, yDotK[0]);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/FastMath.java", 
          "line": 3293, 
          "faulty": "final long sign=bits & 0x8000000000000000L;", 
          "type": "InsertBefore", 
          "seed": "if (Double.isInfinite(d)) {\n  return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;\n}\n else if (d == 0) {\n  return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 105, 
          "faulty": "final double[] y=y0.clone();", 
          "type": "InsertBefore", 
          "seed": "if (stepStart + stepSize <= t) {\n  stepSize=t - stepStart;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-29 06:15:23.019936000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1332/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-29 07:25:39.276722573 -0500\n@@ -3290,7 +3290,12 @@\n         // are handled just as normal numbers\n         // can use raw bits since already dealt with infinity and NaN\n         final long bits = Double.doubleToRawLongBits(d);\n-        final long sign = bits & 0x8000000000000000L;\n+        if (Double.isInfinite(d)) {\n+\t\t\treturn (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;\n+\t\t} else if (d == 0) {\n+\t\t\treturn (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;\n+\t\t}\n+\t\tfinal long sign = bits & 0x8000000000000000L;\n         if ((direction < d) ^ (sign == 0L)) {\n             return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));\n         } else {\n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1332/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:25:39.280722589 -0500\n@@ -102,7 +102,10 @@\n \n     // create some internal working arrays\n     final double[] y0      = equations.getCompleteState();\n-    final double[] y       = y0.clone();\n+    if (stepStart + stepSize <= t) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\tfinal double[] y       = y0.clone();\n     final int stages       = c.length + 1;\n     final double[][] yDotK = new double[stages][];\n     for (int i = 0; i < stages; ++i) {\n@@ -122,7 +125,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 118, 
          "faulty": "interpolator.storeTime(equations.getTime());", 
          "type": "InsertBefore", 
          "seed": "if (forward) {\n  if (stepStart + stepSize >= t) {\n    stepSize=t - stepStart;\n  }\n}\n else {\n  if (stepStart + stepSize <= t) {\n    stepSize=t - stepStart;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 99, 
          "faulty": "sanityChecks(equations,t);", 
          "type": "Delete", 
          "seed": "setEquations(equations);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 135, 
          "faulty": "for (int k=1; k < stages; ++k) {\n  for (int j=0; j < y0.length; ++j) {\n    double sum=a[k - 1][0] * yDotK[0][j];\n    for (int l=1; l < k; ++l) {\n      sum+=a[k - 1][l] * yDotK[l][j];\n    }\n    yTmp[j]=y[j] + stepSize * sum;\n  }\n  computeDerivatives(stepStart + c[k - 1] * stepSize,yTmp,yDotK[k]);\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_349/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:51:31.632213776 -0500\n@@ -96,7 +96,6 @@\n       throws NumberIsTooSmallException, DimensionMismatchException,\n              MaxCountExceededException, NoBracketingException {\n \n-    sanityChecks(equations, t);\n     setEquations(equations);\n     final boolean forward = t > equations.getTime();\n \n@@ -115,7 +114,16 @@\n     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n     interpolator.reinitialize(this, yTmp, yDotK, forward,\n                               equations.getPrimaryMapper(), equations.getSecondaryMappers());\n-    interpolator.storeTime(equations.getTime());\n+    if (forward) {\n+\t\tif (stepStart + stepSize >= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t} else {\n+\t\tif (stepStart + stepSize <= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\tinterpolator.storeTime(equations.getTime());\n \n     // set up integration control objects\n     stepStart = equations.getTime();\n@@ -131,7 +139,11 @@\n       // first stage\n       computeDerivatives(stepStart, y, yDotK[0]);\n \n-      // next stages\n+      if ((forward && (stepStart + stepSize > t))\n+\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\t// next stages\n       for (int k = 1; k < stages; ++k) {\n \n           for (int j = 0; j < y0.length; ++j) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 111, 
          "faulty": "final double[] yTmp=y0.clone();", 
          "type": "InsertBefore", 
          "seed": "equations.setCompleteState(y);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/FastMath.java", 
          "line": 3293, 
          "faulty": "final long sign=bits & 0x8000000000000000L;", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {\n  return d;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (forward) {\n  if (stepStart + stepSize >= t) {\n    stepSize=t - stepStart;\n  }\n}\n else {\n  if (stepStart + stepSize <= t) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-29 06:15:23.019936000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_748/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-29 07:04:58.991405399 -0500\n@@ -3290,7 +3290,10 @@\n         // are handled just as normal numbers\n         // can use raw bits since already dealt with infinity and NaN\n         final long bits = Double.doubleToRawLongBits(d);\n-        final long sign = bits & 0x8000000000000000L;\n+        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {\n+\t\t\treturn d;\n+\t\t}\n+\t\tfinal long sign = bits & 0x8000000000000000L;\n         if ((direction < d) ^ (sign == 0L)) {\n             return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));\n         } else {\n\n\n--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_748/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:04:58.995405416 -0500\n@@ -108,7 +108,8 @@\n     for (int i = 0; i < stages; ++i) {\n       yDotK [i] = new double[y0.length];\n     }\n-    final double[] yTmp    = y0.clone();\n+    equations.setCompleteState(y);\n+\tfinal double[] yTmp    = y0.clone();\n     final double[] yDotTmp = new double[y0.length];\n \n     // set up an interpolator sharing the integrator arrays\n@@ -122,7 +123,16 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (forward) {\n+\t\tif (stepStart + stepSize >= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t} else {\n+\t\tif (stepStart + stepSize <= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 101, 
          "faulty": "final boolean forward=t > equations.getTime();", 
          "type": "InsertBefore", 
          "seed": "if (stepStart + stepSize <= t) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 107, 
          "faulty": "final double[][] yDotK=new double[stages][];", 
          "type": "Replace", 
          "seed": "final double[][] yDotK=new double[stages][y.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1359/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:26:32.176947513 -0500\n@@ -98,13 +98,16 @@\n \n     sanityChecks(equations, t);\n     setEquations(equations);\n-    final boolean forward = t > equations.getTime();\n+    if (stepStart + stepSize <= t) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\tfinal boolean forward = t > equations.getTime();\n \n     // create some internal working arrays\n     final double[] y0      = equations.getCompleteState();\n     final double[] y       = y0.clone();\n     final int stages       = c.length + 1;\n-    final double[][] yDotK = new double[stages][];\n+    final double[][] yDotK = new double[stages][y.length];\n     for (int i = 0; i < stages; ++i) {\n       yDotK [i] = new double[y0.length];\n     }\n@@ -122,7 +125,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 108, 
          "faulty": "for (int i=0; i < stages; ++i) {\n  yDotK[i]=new double[y0.length];\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < stages; ++i) {\n  yDotK[i]=new double[y0.length];\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 107, 
          "faulty": "final double[][] yDotK=new double[stages][];", 
          "type": "Replace", 
          "seed": "final double[][] yDotK=new double[stages][y.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_672/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:02:21.126702211 -0500\n@@ -104,8 +104,11 @@\n     final double[] y0      = equations.getCompleteState();\n     final double[] y       = y0.clone();\n     final int stages       = c.length + 1;\n-    final double[][] yDotK = new double[stages][];\n+    final double[][] yDotK = new double[stages][y.length];\n     for (int i = 0; i < stages; ++i) {\n+\t\tyDotK[i] = new double[y0.length];\n+\t}\n+\tfor (int i = 0; i < stages; ++i) {\n       yDotK [i] = new double[y0.length];\n     }\n     final double[] yTmp    = y0.clone();\n@@ -122,7 +125,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 108, 
          "faulty": "for (int i=0; i < stages; ++i) {\n  yDotK[i]=new double[y0.length];\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < stages; ++i) {\n  yDotK[i]=new double[y0.length];\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_604/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:00:12.738219253 -0500\n@@ -106,6 +106,9 @@\n     final int stages       = c.length + 1;\n     final double[][] yDotK = new double[stages][];\n     for (int i = 0; i < stages; ++i) {\n+\t\tyDotK[i] = new double[y0.length];\n+\t}\n+\tfor (int i = 0; i < stages; ++i) {\n       yDotK [i] = new double[y0.length];\n     }\n     final double[] yTmp    = y0.clone();\n@@ -122,7 +125,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 99, 
          "faulty": "sanityChecks(equations,t);", 
          "type": "Delete", 
          "seed": "setEquations(equations);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (forward) {\n  if (stepStart + stepSize >= t) {\n    stepSize=t - stepStart;\n  }\n}\n else {\n  if (stepStart + stepSize <= t) {\n    stepSize=t - stepStart;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 135, 
          "faulty": "for (int k=1; k < stages; ++k) {\n  for (int j=0; j < y0.length; ++j) {\n    double sum=a[k - 1][0] * yDotK[0][j];\n    for (int l=1; l < k; ++l) {\n      sum+=a[k - 1][l] * yDotK[l][j];\n    }\n    yTmp[j]=y[j] + stepSize * sum;\n  }\n  computeDerivatives(stepStart + c[k - 1] * stepSize,yTmp,yDotK[k]);\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1023/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:14:38.130022171 -0500\n@@ -96,7 +96,6 @@\n       throws NumberIsTooSmallException, DimensionMismatchException,\n              MaxCountExceededException, NoBracketingException {\n \n-    sanityChecks(equations, t);\n     setEquations(equations);\n     final boolean forward = t > equations.getTime();\n \n@@ -122,7 +121,16 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (forward) {\n+\t\tif (stepStart + stepSize >= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t} else {\n+\t\tif (stepStart + stepSize <= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n@@ -131,7 +139,11 @@\n       // first stage\n       computeDerivatives(stepStart, y, yDotK[0]);\n \n-      // next stages\n+      if ((forward && (stepStart + stepSize > t))\n+\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\t// next stages\n       for (int k = 1; k < stages; ++k) {\n \n           for (int j = 0; j < y0.length; ++j) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 135, 
          "faulty": "for (int k=1; k < stages; ++k) {\n  for (int j=0; j < y0.length; ++j) {\n    double sum=a[k - 1][0] * yDotK[0][j];\n    for (int l=1; l < k; ++l) {\n      sum+=a[k - 1][l] * yDotK[l][j];\n    }\n    yTmp[j]=y[j] + stepSize * sum;\n  }\n  computeDerivatives(stepStart + c[k - 1] * stepSize,yTmp,yDotK[k]);\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_334/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:50:55.760063861 -0500\n@@ -131,7 +131,11 @@\n       // first stage\n       computeDerivatives(stepStart, y, yDotK[0]);\n \n-      // next stages\n+      if ((forward && (stepStart + stepSize > t))\n+\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\t// next stages\n       for (int k = 1; k < stages; ++k) {\n \n           for (int j = 0; j < y0.length; ++j) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_397/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:53:10.836615951 -0500\n@@ -122,7 +122,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 111, 
          "faulty": "final double[] yTmp=y0.clone();", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < stages; ++i) {\n  yDotK[i]=new double[y0.length];\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 100, 
          "faulty": "setEquations(equations);", 
          "type": "InsertBefore", 
          "seed": "if (stepStart + stepSize >= t) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (forward) {\n  if (stepStart + stepSize >= t) {\n    stepSize=t - stepStart;\n  }\n}\n else {\n  if (stepStart + stepSize <= t) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1199/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:21:04.819630948 -0500\n@@ -97,7 +97,10 @@\n              MaxCountExceededException, NoBracketingException {\n \n     sanityChecks(equations, t);\n-    setEquations(equations);\n+    if (stepStart + stepSize >= t) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\tsetEquations(equations);\n     final boolean forward = t > equations.getTime();\n \n     // create some internal working arrays\n@@ -108,7 +111,10 @@\n     for (int i = 0; i < stages; ++i) {\n       yDotK [i] = new double[y0.length];\n     }\n-    final double[] yTmp    = y0.clone();\n+    for (int i = 0; i < stages; ++i) {\n+\t\tyDotK[i] = new double[y0.length];\n+\t}\n+\tfinal double[] yTmp    = y0.clone();\n     final double[] yDotTmp = new double[y0.length];\n \n     // set up an interpolator sharing the integrator arrays\n@@ -122,7 +128,16 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (forward) {\n+\t\tif (stepStart + stepSize >= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t} else {\n+\t\tif (stepStart + stepSize <= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 111, 
          "faulty": "final double[] yTmp=y0.clone();", 
          "type": "InsertBefore", 
          "seed": "equations.setCompleteState(y);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 135, 
          "faulty": "for (int k=1; k < stages; ++k) {\n  for (int j=0; j < y0.length; ++j) {\n    double sum=a[k - 1][0] * yDotK[0][j];\n    for (int l=1; l < k; ++l) {\n      sum+=a[k - 1][l] * yDotK[l][j];\n    }\n    yTmp[j]=y[j] + stepSize * sum;\n  }\n  computeDerivatives(stepStart + c[k - 1] * stepSize,yTmp,yDotK[k]);\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 105, 
          "faulty": "final double[] y=y0.clone();", 
          "type": "InsertBefore", 
          "seed": "if (forward) {\n  if (stepStart + stepSize >= t) {\n    stepSize=t - stepStart;\n  }\n}\n else {\n  if (stepStart + stepSize <= t) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1140/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:18:48.027073926 -0500\n@@ -102,13 +102,23 @@\n \n     // create some internal working arrays\n     final double[] y0      = equations.getCompleteState();\n-    final double[] y       = y0.clone();\n+    if (forward) {\n+\t\tif (stepStart + stepSize >= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t} else {\n+\t\tif (stepStart + stepSize <= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\tfinal double[] y       = y0.clone();\n     final int stages       = c.length + 1;\n     final double[][] yDotK = new double[stages][];\n     for (int i = 0; i < stages; ++i) {\n       yDotK [i] = new double[y0.length];\n     }\n-    final double[] yTmp    = y0.clone();\n+    equations.setCompleteState(y);\n+\tfinal double[] yTmp    = y0.clone();\n     final double[] yDotTmp = new double[y0.length];\n \n     // set up an interpolator sharing the integrator arrays\n@@ -131,7 +141,11 @@\n       // first stage\n       computeDerivatives(stepStart, y, yDotK[0]);\n \n-      // next stages\n+      if ((forward && (stepStart + stepSize > t))\n+\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\t// next stages\n       for (int k = 1; k < stages; ++k) {\n \n           for (int j = 0; j < y0.length; ++j) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 129, 
          "faulty": "interpolator.shift();", 
          "type": "InsertBefore", 
          "seed": "interpolator.shift();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 135, 
          "faulty": "for (int k=1; k < stages; ++k) {\n  for (int j=0; j < y0.length; ++j) {\n    double sum=a[k - 1][0] * yDotK[0][j];\n    for (int l=1; l < k; ++l) {\n      sum+=a[k - 1][l] * yDotK[l][j];\n    }\n    yTmp[j]=y[j] + stepSize * sum;\n  }\n  computeDerivatives(stepStart + c[k - 1] * stepSize,yTmp,yDotK[k]);\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_961/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:12:36.041485985 -0500\n@@ -127,11 +127,16 @@\n     do {\n \n       interpolator.shift();\n+\tinterpolator.shift();\n \n       // first stage\n       computeDerivatives(stepStart, y, yDotK[0]);\n \n-      // next stages\n+      if ((forward && (stepStart + stepSize > t))\n+\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\t// next stages\n       for (int k = 1; k < stages; ++k) {\n \n           for (int j = 0; j < y0.length; ++j) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 115, 
          "faulty": "final RungeKuttaStepInterpolator interpolator=(RungeKuttaStepInterpolator)prototype.copy();", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_998/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:13:52.089822041 -0500\n@@ -111,7 +111,11 @@\n     final double[] yTmp    = y0.clone();\n     final double[] yDotTmp = new double[y0.length];\n \n-    // set up an interpolator sharing the integrator arrays\n+    if ((forward && (stepStart + stepSize > t))\n+\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\t// set up an interpolator sharing the integrator arrays\n     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n     interpolator.reinitialize(this, yTmp, yDotK, forward,\n                               equations.getPrimaryMapper(), equations.getSecondaryMappers());\n@@ -122,7 +126,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 118, 
          "faulty": "interpolator.storeTime(equations.getTime());", 
          "type": "InsertBefore", 
          "seed": "if (forward) {\n  if (stepStart + stepSize >= t) {\n    stepSize=t - stepStart;\n  }\n}\n else {\n  if (stepStart + stepSize <= t) {\n    stepSize=t - stepStart;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (forward) {\n  if (stepStart + stepSize >= t) {\n    stepSize=t - stepStart;\n  }\n}\n else {\n  if (stepStart + stepSize <= t) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_687/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:02:50.718836781 -0500\n@@ -115,14 +115,32 @@\n     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n     interpolator.reinitialize(this, yTmp, yDotK, forward,\n                               equations.getPrimaryMapper(), equations.getSecondaryMappers());\n-    interpolator.storeTime(equations.getTime());\n+    if (forward) {\n+\t\tif (stepStart + stepSize >= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t} else {\n+\t\tif (stepStart + stepSize <= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\tinterpolator.storeTime(equations.getTime());\n \n     // set up integration control objects\n     stepStart = equations.getTime();\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (forward) {\n+\t\tif (stepStart + stepSize >= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t} else {\n+\t\tif (stepStart + stepSize <= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 115, 
          "faulty": "final RungeKuttaStepInterpolator interpolator=(RungeKuttaStepInterpolator)prototype.copy();", 
          "type": "InsertBefore", 
          "seed": "if (forward) {\n  if (stepStart + stepSize >= t) {\n    stepSize=t - stepStart;\n  }\n}\n else {\n  if (stepStart + stepSize <= t) {\n    stepSize=t - stepStart;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 99, 
          "faulty": "sanityChecks(equations,t);", 
          "type": "Delete", 
          "seed": "if (stepStart + stepSize >= t) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (!isLastStep) {\n  interpolator.storeTime(stepStart);\n  final double nextT=stepStart + stepSize;\n  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);\n  if (nextIsLast) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_1368/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 07:26:48.801028050 -0500\n@@ -96,7 +96,6 @@\n       throws NumberIsTooSmallException, DimensionMismatchException,\n              MaxCountExceededException, NoBracketingException {\n \n-    sanityChecks(equations, t);\n     setEquations(equations);\n     final boolean forward = t > equations.getTime();\n \n@@ -111,7 +110,16 @@\n     final double[] yTmp    = y0.clone();\n     final double[] yDotTmp = new double[y0.length];\n \n-    // set up an interpolator sharing the integrator arrays\n+    if (forward) {\n+\t\tif (stepStart + stepSize >= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t} else {\n+\t\tif (stepStart + stepSize <= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// set up an interpolator sharing the integrator arrays\n     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n     interpolator.reinitialize(this, yTmp, yDotK, forward,\n                               equations.getPrimaryMapper(), equations.getSecondaryMappers());\n@@ -122,7 +130,15 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (!isLastStep) {\n+\t\tinterpolator.storeTime(stepStart);\n+\t\tfinal double nextT = stepStart + stepSize;\n+\t\tfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+\t\tif (nextIsLast) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 99, 
          "faulty": "sanityChecks(equations,t);", 
          "type": "Delete", 
          "seed": "setEquations(equations);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 135, 
          "faulty": "for (int k=1; k < stages; ++k) {\n  for (int j=0; j < y0.length; ++j) {\n    double sum=a[k - 1][0] * yDotK[0][j];\n    for (int l=1; l < k; ++l) {\n      sum+=a[k - 1][l] * yDotK[l][j];\n    }\n    yTmp[j]=y[j] + stepSize * sum;\n  }\n  computeDerivatives(stepStart + c[k - 1] * stepSize,yTmp,yDotK[k]);\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_225/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:47:13.267047445 -0500\n@@ -96,7 +96,6 @@\n       throws NumberIsTooSmallException, DimensionMismatchException,\n              MaxCountExceededException, NoBracketingException {\n \n-    sanityChecks(equations, t);\n     setEquations(equations);\n     final boolean forward = t > equations.getTime();\n \n@@ -131,7 +130,11 @@\n       // first stage\n       computeDerivatives(stepStart, y, yDotK[0]);\n \n-      // next stages\n+      if ((forward && (stepStart + stepSize > t))\n+\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\t// next stages\n       for (int k = 1; k < stages; ++k) {\n \n           for (int j = 0; j < y0.length; ++j) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 135, 
          "faulty": "for (int k=1; k < stages; ++k) {\n  for (int j=0; j < y0.length; ++j) {\n    double sum=a[k - 1][0] * yDotK[0][j];\n    for (int l=1; l < k; ++l) {\n      sum+=a[k - 1][l] * yDotK[l][j];\n    }\n    yTmp[j]=y[j] + stepSize * sum;\n  }\n  computeDerivatives(stepStart + c[k - 1] * stepSize,yTmp,yDotK[k]);\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 105, 
          "faulty": "final double[] y=y0.clone();", 
          "type": "InsertBefore", 
          "seed": "if (forward) {\n  if (stepStart + stepSize >= t) {\n    stepSize=t - stepStart;\n  }\n}\n else {\n  if (stepStart + stepSize <= t) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_391/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:53:01.820580037 -0500\n@@ -102,7 +102,16 @@\n \n     // create some internal working arrays\n     final double[] y0      = equations.getCompleteState();\n-    final double[] y       = y0.clone();\n+    if (forward) {\n+\t\tif (stepStart + stepSize >= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t} else {\n+\t\tif (stepStart + stepSize <= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\tfinal double[] y       = y0.clone();\n     final int stages       = c.length + 1;\n     final double[][] yDotK = new double[stages][];\n     for (int i = 0; i < stages; ++i) {\n@@ -131,7 +140,11 @@\n       // first stage\n       computeDerivatives(stepStart, y, yDotK[0]);\n \n-      // next stages\n+      if ((forward && (stepStart + stepSize > t))\n+\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\tstepSize = t - stepStart;\n+\t}\n+\t// next stages\n       for (int k = 1; k < stages; ++k) {\n \n           for (int j = 0; j < y0.length; ++j) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 99, 
          "faulty": "sanityChecks(equations,t);", 
          "type": "Delete", 
          "seed": "if (stepStart + stepSize >= t) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java", 
          "line": 126, 
          "faulty": "isLastStep=false;", 
          "type": "InsertBefore", 
          "seed": "if (forward) {\n  if (stepStart + stepSize >= t) {\n    stepSize=t - stepStart;\n  }\n}\n else {\n  if (stepStart + stepSize <= t) {\n    stepSize=t - stepStart;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:15:22.627928000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/patches_nwue/Patch_379/patched/tmp/Arja_Bug_dot_jar_Commons-Math_69273dca/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java\t2018-12-29 06:52:32.288461580 -0500\n@@ -96,7 +96,6 @@\n       throws NumberIsTooSmallException, DimensionMismatchException,\n              MaxCountExceededException, NoBracketingException {\n \n-    sanityChecks(equations, t);\n     setEquations(equations);\n     final boolean forward = t > equations.getTime();\n \n@@ -122,7 +121,16 @@\n     stepSize  = forward ? step : -step;\n     initIntegration(equations.getTime(), y0, t);\n \n-    // main integration loop\n+    if (forward) {\n+\t\tif (stepStart + stepSize >= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t} else {\n+\t\tif (stepStart + stepSize <= t) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t}\n+\t// main integration loop\n     isLastStep = false;\n     do {\n \n\n\n"
    }
  ]
}