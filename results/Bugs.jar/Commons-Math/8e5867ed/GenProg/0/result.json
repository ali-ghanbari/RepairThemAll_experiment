{
  "repair_end": "2018-12-31 00:49:55.111917", 
  "repair_begin": "2018-12-31 00:23:26.612573", 
  "patches": [
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_397/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:48:19.895558544 -0500\n@@ -472,11 +472,12 @@\n             } else {\n                 unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             }\n-            break;\n+            boolean negate = false;\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n             double fraction = unscaled - FastMath.floor(unscaled);\n-            if (fraction > 0.5) {\n+            double resultLow = 0;\n+\t\t\tif (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n@@ -502,7 +503,8 @@\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n             unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -516,7 +518,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 479, 
          "faulty": "if (fraction > 0.5) {\n  unscaled=FastMath.ceil(unscaled);\n}\n else {\n  unscaled=FastMath.floor(unscaled);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 475, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "double b=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 505, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 475, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "boolean negate=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_390/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:48:18.135528825 -0500\n@@ -472,12 +472,15 @@\n             } else {\n                 unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             }\n-            break;\n+            ;\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n-            if (fraction > 0.5) {\n-                unscaled = FastMath.ceil(unscaled);\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n+            double resultLow = 0;\n+\t\t\tif (fraction > 0.5) {\n+                long result = 1;\n+\t\t\t\tunscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n             }\n@@ -487,17 +490,20 @@\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n+\t\t\t\tunscaled = FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\tDouble.POSITIVE_INFINITY);\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n@@ -516,7 +522,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 479, 
          "faulty": "if (fraction > 0.5) {\n  unscaled=FastMath.ceil(unscaled);\n}\n else {\n  unscaled=FastMath.floor(unscaled);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 491, 
          "faulty": "unscaled=FastMath.floor(unscaled);", 
          "type": "Delete", 
          "seed": "return (float)getContractionCriterion();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 480, 
          "faulty": "unscaled=FastMath.ceil(unscaled);", 
          "type": "InsertBefore", 
          "seed": "long result=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 475, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "double result=1d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 494, 
          "faulty": "if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  unscaled=FastMath.ceil(unscaled);\n}", 
          "type": "Delete", 
          "seed": "int n=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_191/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:35.018786012 -0500\n@@ -475,7 +475,8 @@\n             break;\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -516,7 +517,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 484, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_218/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:40.442881099 -0500\n@@ -475,7 +475,8 @@\n             break;\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -487,21 +488,24 @@\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n+\t\t\t\tdouble hiPrec[] = new double[2];\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n+            final double hiPrec[] = new double[2];\n+\t\t\tunscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n@@ -516,7 +520,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double hiPrec[]=new double[2];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 504, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);", 
          "type": "InsertBefore", 
          "seed": "final double hiPrec[]=new double[2];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_216/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:40.214877113 -0500\n@@ -487,17 +487,19 @@\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n+\t\t\t\tdouble hiPrec[] = new double[2];\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n@@ -516,7 +518,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double hiPrec[]=new double[2];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 496, 
          "faulty": "unscaled=FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "double fraction=unscaled - FastMath.floor(unscaled);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_307/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:48:00.723232348 -0500\n@@ -475,7 +475,8 @@\n             break;\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -501,7 +502,8 @@\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n+            final double rln10a = 0.4342944622039795;\n+\t\t\tunscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n@@ -516,7 +518,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 504, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);", 
          "type": "InsertBefore", 
          "seed": "final double rln10a=0.4342944622039795;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_425/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:48:26.839675365 -0500\n@@ -434,7 +434,8 @@\n     public static float round(float x, int scale, int roundingMethod)\n         throws MathArithmeticException, MathIllegalArgumentException {\n         final float sign = FastMath.copySign(1f, x);\n-        final float factor = (float) FastMath.pow(10.0f, scale) * sign;\n+        double b = 0;\n+\t\tfinal float factor = (float) FastMath.pow(10.0f, scale) * sign;\n         return (float) roundUnscaled(x * factor, sign, roundingMethod) / factor;\n     }\n \n@@ -472,11 +473,13 @@\n             } else {\n                 unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             }\n-            break;\n+            ;\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n-            if (fraction > 0.5) {\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n+            double resultLow = 0;\n+\t\t\tif (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n@@ -487,22 +490,26 @@\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n+\t\t\t\tunscaled = FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\tDouble.POSITIVE_INFINITY);\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n             unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -516,7 +523,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 479, 
          "faulty": "if (fraction > 0.5) {\n  unscaled=FastMath.ceil(unscaled);\n}\n else {\n  unscaled=FastMath.floor(unscaled);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 475, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "double b=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 505, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 437, 
          "faulty": "final float factor=(float)FastMath.pow(10.0f,scale) * sign;", 
          "type": "InsertBefore", 
          "seed": "double b=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_373/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:48:14.447466404 -0500\n@@ -472,11 +472,13 @@\n             } else {\n                 unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             }\n-            break;\n+            ;\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n-            if (fraction > 0.5) {\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n+            double resultLow = 0;\n+\t\t\tif (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n@@ -487,22 +489,26 @@\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n+\t\t\t\tunscaled = FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\tDouble.POSITIVE_INFINITY);\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n             unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -516,7 +522,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 479, 
          "faulty": "if (fraction > 0.5) {\n  unscaled=FastMath.ceil(unscaled);\n}\n else {\n  unscaled=FastMath.floor(unscaled);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 475, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "double b=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 505, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_301/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:59.139205151 -0500\n@@ -457,11 +457,16 @@\n         throws MathArithmeticException, MathIllegalArgumentException {\n         switch (roundingMethod) {\n         case BigDecimal.ROUND_CEILING :\n-            if (sign == -1) {\n-                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n-            } else {\n-                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));\n-            }\n+            {\n+\t\t\t\tdouble reduceResults[] = new double[3];\n+\t\t\t\tif (sign == -1) {\n+\t\t\t\t\tunscaled = FastMath.floor(FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\t\tDouble.NEGATIVE_INFINITY));\n+\t\t\t\t} else {\n+\t\t\t\t\tunscaled = FastMath.ceil(FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\t\tDouble.POSITIVE_INFINITY));\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         case BigDecimal.ROUND_DOWN :\n             unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n@@ -472,10 +477,14 @@\n             } else {\n                 unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             }\n-            break;\n+            {\n+\t\t\t\tfinal double rln10b = 1.9699272335463627E-8;\n+\t\t\t\tbreak;\n+\t\t\t}\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -487,28 +496,32 @@\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n+\t\t\t\tdouble xb = 0;\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n+            final double rln10a = 0.4342944622039795;\n+\t\t\tunscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n             }\n-            break;\n+            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+\t\t\tbreak;\n         }\n         case BigDecimal.ROUND_UNNECESSARY :\n             if (unscaled != FastMath.floor(unscaled)) {\n@@ -516,7 +529,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 461, 
          "faulty": "unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 511, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 496, 
          "faulty": "unscaled=FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 475, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "final double rln10b=1.9699272335463627E-8;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 504, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);", 
          "type": "InsertBefore", 
          "seed": "final double rln10a=0.4342944622039795;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double xb=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 460, 
          "faulty": "if (sign == -1) {\n  unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));\n}\n else {\n  unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));\n}", 
          "type": "InsertBefore", 
          "seed": "double reduceResults[]=new double[3];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_309/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:48:01.083238526 -0500\n@@ -457,11 +457,16 @@\n         throws MathArithmeticException, MathIllegalArgumentException {\n         switch (roundingMethod) {\n         case BigDecimal.ROUND_CEILING :\n-            if (sign == -1) {\n-                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n-            } else {\n-                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));\n-            }\n+            {\n+\t\t\t\tdouble reduceResults[] = new double[3];\n+\t\t\t\tif (sign == -1) {\n+\t\t\t\t\tunscaled = FastMath.floor(FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\t\tDouble.NEGATIVE_INFINITY));\n+\t\t\t\t} else {\n+\t\t\t\t\tunscaled = FastMath.ceil(FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\t\tDouble.POSITIVE_INFINITY));\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         case BigDecimal.ROUND_DOWN :\n             unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n@@ -472,10 +477,11 @@\n             } else {\n                 unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             }\n-            break;\n+            boolean subnormal = false;\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -487,28 +493,32 @@\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n+\t\t\t\tdouble xb = 0;\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n+            final double rln10a = 0.4342944622039795;\n+\t\t\tunscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n             }\n-            break;\n+            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+\t\t\tbreak;\n         }\n         case BigDecimal.ROUND_UNNECESSARY :\n             if (unscaled != FastMath.floor(unscaled)) {\n@@ -516,7 +526,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 461, 
          "faulty": "unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 511, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 496, 
          "faulty": "unscaled=FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 475, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "final double rln10b=1.9699272335463627E-8;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 504, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);", 
          "type": "InsertBefore", 
          "seed": "final double rln10a=0.4342944622039795;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double xb=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 460, 
          "faulty": "if (sign == -1) {\n  unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));\n}\n else {\n  unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));\n}", 
          "type": "InsertBefore", 
          "seed": "double reduceResults[]=new double[3];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 491, 
          "faulty": "unscaled=FastMath.floor(unscaled);", 
          "type": "Delete", 
          "seed": "double dPrev=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 463, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Delete", 
          "seed": "long result=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 475, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "boolean subnormal=false;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_313/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:48:01.647248197 -0500\n@@ -457,11 +457,16 @@\n         throws MathArithmeticException, MathIllegalArgumentException {\n         switch (roundingMethod) {\n         case BigDecimal.ROUND_CEILING :\n-            if (sign == -1) {\n-                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n-            } else {\n-                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));\n-            }\n+            {\n+\t\t\t\tdouble reduceResults[] = new double[3];\n+\t\t\t\tif (sign == -1) {\n+\t\t\t\t\tunscaled = FastMath.floor(FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\t\tDouble.NEGATIVE_INFINITY));\n+\t\t\t\t} else {\n+\t\t\t\t\tunscaled = FastMath.ceil(FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\t\tDouble.POSITIVE_INFINITY));\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         case BigDecimal.ROUND_DOWN :\n             unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n@@ -472,10 +477,11 @@\n             } else {\n                 unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             }\n-            break;\n+            boolean subnormal = false;\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -487,28 +493,32 @@\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n-            break;\n+\t\t\t\tdouble xb = 0;\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+            final double[] hiPrec = new double[2];\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n+            final double rln10a = 0.4342944622039795;\n+\t\t\tunscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n             }\n-            break;\n+            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+\t\t\tbreak;\n         }\n         case BigDecimal.ROUND_UNNECESSARY :\n             if (unscaled != FastMath.floor(unscaled)) {\n@@ -516,7 +526,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 461, 
          "faulty": "unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 511, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 496, 
          "faulty": "unscaled=FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 475, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "final double rln10b=1.9699272335463627E-8;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 504, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);", 
          "type": "InsertBefore", 
          "seed": "final double rln10a=0.4342944622039795;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double xb=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 460, 
          "faulty": "if (sign == -1) {\n  unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));\n}\n else {\n  unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));\n}", 
          "type": "InsertBefore", 
          "seed": "double reduceResults[]=new double[3];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 491, 
          "faulty": "unscaled=FastMath.floor(unscaled);", 
          "type": "Delete", 
          "seed": "double dPrev=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 463, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Delete", 
          "seed": "long result=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 475, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "boolean subnormal=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 498, 
          "faulty": "unscaled=FastMath.ceil(unscaled);", 
          "type": "Delete", 
          "seed": "if (unscaled != FastMath.floor(unscaled)) {\n  throw new MathArithmeticException();\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 501, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "final double[] hiPrec=new double[2];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 461, 
          "faulty": "unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));", 
          "type": "Delete", 
          "seed": "return Decimal64.ZERO;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_282/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:54.635127597 -0500\n@@ -475,13 +475,15 @@\n             break;\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n-                unscaled = FastMath.floor(unscaled);\n+                double dPrev = 0.0;\n+\t\t\t\tunscaled = FastMath.floor(unscaled);\n             }\n-            break;\n+            int count = 1;\n         }\n         case BigDecimal.ROUND_HALF_EVEN : {\n             double fraction = unscaled - FastMath.floor(unscaled);\n@@ -516,7 +518,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 482, 
          "faulty": "unscaled=FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "double dPrev=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 484, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "int count=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_224/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:41.510899764 -0500\n@@ -474,7 +474,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_HALF_DOWN : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+            long result = 1;\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n@@ -487,17 +487,19 @@\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n+\t\t\t\tdouble hiPrec[] = new double[2];\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n@@ -516,7 +518,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double hiPrec[]=new double[2];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 477, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);", 
          "type": "Replace", 
          "seed": "long result=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_231/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:42.702920574 -0500\n@@ -474,7 +474,8 @@\n             }\n             break;\n         case BigDecimal.ROUND_HALF_DOWN : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+            final double lns[] = new double[2];\n+\t\t\tunscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n@@ -501,7 +502,6 @@\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n@@ -516,7 +516,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 504, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);", 
          "type": "Delete", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 477, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);", 
          "type": "InsertBefore", 
          "seed": "final double lns[]=new double[2];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_383/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:48:16.395499398 -0500\n@@ -472,11 +472,12 @@\n             } else {\n                 unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             }\n-            break;\n+            ;\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n             double fraction = unscaled - FastMath.floor(unscaled);\n-            if (fraction > 0.5) {\n+            double resultLow = 0;\n+\t\t\tif (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n@@ -487,22 +488,26 @@\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n+\t\t\t\tunscaled = FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\tDouble.POSITIVE_INFINITY);\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n             unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -516,7 +521,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 479, 
          "faulty": "if (fraction > 0.5) {\n  unscaled=FastMath.ceil(unscaled);\n}\n else {\n  unscaled=FastMath.floor(unscaled);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 475, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "double b=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 505, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_399/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:48:20.175563267 -0500\n@@ -455,7 +455,8 @@\n                                         double sign,\n                                         int roundingMethod)\n         throws MathArithmeticException, MathIllegalArgumentException {\n-        switch (roundingMethod) {\n+        final double pi2b = 6.123233995736766E-17;\n+\t\tswitch (roundingMethod) {\n         case BigDecimal.ROUND_CEILING :\n             if (sign == -1) {\n                 unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n@@ -472,12 +473,15 @@\n             } else {\n                 unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             }\n-            break;\n+            ;\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n-            if (fraction > 0.5) {\n-                unscaled = FastMath.ceil(unscaled);\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n+            double resultLow = 0;\n+\t\t\tif (fraction > 0.5) {\n+                long result = 1;\n+\t\t\t\tunscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n             }\n@@ -487,22 +491,26 @@\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n+\t\t\t\tunscaled = FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\tDouble.POSITIVE_INFINITY);\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n             unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -516,7 +524,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 458, 
          "faulty": "switch (roundingMethod) {\ncase BigDecimal.ROUND_CEILING:\n  if (sign == -1) {\n    unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));\n  }\n else {\n    unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));\n  }\nbreak;\ncase BigDecimal.ROUND_DOWN:\nunscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));\nbreak;\ncase BigDecimal.ROUND_FLOOR:\nif (sign == -1) {\nunscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));\n}\n else {\nunscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));\n}\nbreak;\ncase BigDecimal.ROUND_HALF_DOWN:\n{\nunscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);\ndouble fraction=unscaled - FastMath.floor(unscaled);\nif (fraction > 0.5) {\nunscaled=FastMath.ceil(unscaled);\n}\n else {\nunscaled=FastMath.floor(unscaled);\n}\nbreak;\n}\ncase BigDecimal.ROUND_HALF_EVEN:\n{\ndouble fraction=unscaled - FastMath.floor(unscaled);\nif (fraction > 0.5) {\nunscaled=FastMath.ceil(unscaled);\n}\n else if (fraction < 0.5) {\nunscaled=FastMath.floor(unscaled);\n}\n else {\nif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\nunscaled=FastMath.floor(unscaled);\n}\n else {\nunscaled=FastMath.ceil(unscaled);\n}\n}\nbreak;\n}\ncase BigDecimal.ROUND_HALF_UP:\n{\nunscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);\ndouble fraction=unscaled - FastMath.floor(unscaled);\nif (fraction >= 0.5) {\nunscaled=FastMath.ceil(unscaled);\n}\n else {\nunscaled=FastMath.floor(unscaled);\n}\nbreak;\n}\ncase BigDecimal.ROUND_UNNECESSARY:\nif (unscaled != FastMath.floor(unscaled)) {\nthrow new MathArithmeticException();\n}\nbreak;\ncase BigDecimal.ROUND_UP:\nunscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));\nbreak;\ndefault :\nthrow new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,roundingMethod,\"ROUND_CEILING\",BigDecimal.ROUND_CEILING,\"ROUND_DOWN\",BigDecimal.ROUND_DOWN,\"ROUND_FLOOR\",BigDecimal.ROUND_FLOOR,\"ROUND_HALF_DOWN\",BigDecimal.ROUND_HALF_DOWN,\"ROUND_HALF_EVEN\",BigDecimal.ROUND_HALF_EVEN,\"ROUND_HALF_UP\",BigDecimal.ROUND_HALF_UP,\"ROUND_UNNECESSARY\",BigDecimal.ROUND_UNNECESSARY,\"ROUND_UP\",BigDecimal.ROUND_UP);\n}", 
          "type": "InsertBefore", 
          "seed": "final double pi2b=6.123233995736766E-17;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 491, 
          "faulty": "unscaled=FastMath.floor(unscaled);", 
          "type": "Delete", 
          "seed": "return (float)getContractionCriterion();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 480, 
          "faulty": "unscaled=FastMath.ceil(unscaled);", 
          "type": "InsertBefore", 
          "seed": "long result=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 479, 
          "faulty": "if (fraction > 0.5) {\n  unscaled=FastMath.ceil(unscaled);\n}\n else {\n  unscaled=FastMath.floor(unscaled);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 475, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "double b=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 505, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_323/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:48:03.287276294 -0500\n@@ -474,8 +474,8 @@\n             }\n             break;\n         case BigDecimal.ROUND_HALF_DOWN : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -501,7 +501,8 @@\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n+            final double rln10a = 0.4342944622039795;\n+\t\t\tunscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n@@ -516,7 +517,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 504, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);", 
          "type": "InsertBefore", 
          "seed": "final double rln10a=0.4342944622039795;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 477, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);", 
          "type": "Delete", 
          "seed": "return LazyHolder.INSTANCE;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_321/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:48:02.935270268 -0500\n@@ -475,7 +475,8 @@\n             break;\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -485,7 +486,8 @@\n         }\n         case BigDecimal.ROUND_HALF_EVEN : {\n             double fraction = unscaled - FastMath.floor(unscaled);\n-            if (fraction > 0.5) {\n+            final double pi2b = 6.123233995736766E-17;\n+\t\t\tif (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else if (fraction < 0.5) {\n                 unscaled = FastMath.floor(unscaled);\n@@ -501,7 +503,8 @@\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n+            final double rln10a = 0.4342944622039795;\n+\t\t\tunscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n@@ -516,7 +519,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 504, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);", 
          "type": "InsertBefore", 
          "seed": "final double rln10a=0.4342944622039795;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 488, 
          "faulty": "if (fraction > 0.5) {\n  unscaled=FastMath.ceil(unscaled);\n}\n else if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "final double pi2b=6.123233995736766E-17;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_431/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:48:27.843692200 -0500\n@@ -472,11 +472,13 @@\n             } else {\n                 unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             }\n-            break;\n+            ;\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n-            if (fraction > 0.5) {\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n+            double resultLow = 0;\n+\t\t\tif (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n@@ -487,26 +489,34 @@\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n+\t\t\t\tunscaled = FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\tDouble.POSITIVE_INFINITY);\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n             unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n-                unscaled = FastMath.floor(unscaled);\n+                if (fraction > 0.5) {\n+\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t}\n             }\n             break;\n         }\n@@ -516,7 +526,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 479, 
          "faulty": "if (fraction > 0.5) {\n  unscaled=FastMath.ceil(unscaled);\n}\n else {\n  unscaled=FastMath.floor(unscaled);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 475, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "double b=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 505, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 509, 
          "faulty": "unscaled=FastMath.floor(unscaled);", 
          "type": "Replace", 
          "seed": "if (fraction > 0.5) {\n  unscaled=FastMath.ceil(unscaled);\n}\n else {\n  unscaled=FastMath.floor(unscaled);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_220/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:40.670885086 -0500\n@@ -458,7 +458,8 @@\n         switch (roundingMethod) {\n         case BigDecimal.ROUND_CEILING :\n             if (sign == -1) {\n-                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n+                double resultLow = 0;\n+\t\t\t\tunscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             } else {\n                 unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));\n             }\n@@ -516,7 +517,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 461, 
          "faulty": "unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_205/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:37.750833968 -0500\n@@ -487,17 +487,19 @@\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n+\t\t\t\tdouble hiPrec[] = new double[2];\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n@@ -516,7 +518,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double hiPrec[]=new double[2];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_278/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:53.659110749 -0500\n@@ -458,7 +458,8 @@\n         switch (roundingMethod) {\n         case BigDecimal.ROUND_CEILING :\n             if (sign == -1) {\n-                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n+                double resultLow = 0;\n+\t\t\t\tunscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             } else {\n                 unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));\n             }\n@@ -479,7 +480,8 @@\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n-                unscaled = FastMath.floor(unscaled);\n+                double dPrev = 0.0;\n+\t\t\t\tunscaled = FastMath.floor(unscaled);\n             }\n             break;\n         }\n@@ -508,7 +510,8 @@\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n             }\n-            break;\n+            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+\t\t\tbreak;\n         }\n         case BigDecimal.ROUND_UNNECESSARY :\n             if (unscaled != FastMath.floor(unscaled)) {\n@@ -516,7 +519,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 461, 
          "faulty": "unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 511, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 482, 
          "faulty": "unscaled=FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "double dPrev=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_440/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:48:29.851725827 -0500\n@@ -472,11 +472,13 @@\n             } else {\n                 unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             }\n-            break;\n+            ;\n         case BigDecimal.ROUND_HALF_DOWN : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n-            if (fraction > 0.5) {\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n+            double resultLow = 0;\n+\t\t\tint count = 1;\n+\t\t\tif (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n@@ -487,17 +489,20 @@\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n+\t\t\t\tunscaled = FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\tDouble.POSITIVE_INFINITY);\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n@@ -516,7 +521,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 479, 
          "faulty": "if (fraction > 0.5) {\n  unscaled=FastMath.ceil(unscaled);\n}\n else {\n  unscaled=FastMath.floor(unscaled);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 475, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "double b=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 477, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);", 
          "type": "Delete", 
          "seed": "SAFE_MIN=Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 479, 
          "faulty": "if (fraction > 0.5) {\n  unscaled=FastMath.ceil(unscaled);\n}\n else {\n  unscaled=FastMath.floor(unscaled);\n}", 
          "type": "InsertBefore", 
          "seed": "int count=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_375/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:48:14.739471353 -0500\n@@ -475,8 +475,11 @@\n             break;\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n-            if (fraction > 0.5) {\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n+            double resultLow = 0;\n+\t\t\tint result = 1;\n+\t\t\tif (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n@@ -487,28 +490,33 @@\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n+\t\t\t\tunscaled = FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\tDouble.POSITIVE_INFINITY);\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n+            final double rln10a = 0.4342944622039795;\n+\t\t\tunscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n             }\n-            break;\n+            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+\t\t\tbreak;\n         }\n         case BigDecimal.ROUND_UNNECESSARY :\n             if (unscaled != FastMath.floor(unscaled)) {\n@@ -516,7 +524,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 511, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 504, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);", 
          "type": "InsertBefore", 
          "seed": "final double rln10a=0.4342944622039795;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 479, 
          "faulty": "if (fraction > 0.5) {\n  unscaled=FastMath.ceil(unscaled);\n}\n else {\n  unscaled=FastMath.floor(unscaled);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 479, 
          "faulty": "if (fraction > 0.5) {\n  unscaled=FastMath.ceil(unscaled);\n}\n else {\n  unscaled=FastMath.floor(unscaled);\n}", 
          "type": "InsertBefore", 
          "seed": "int result=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_276/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:53.391106120 -0500\n@@ -458,7 +458,8 @@\n         switch (roundingMethod) {\n         case BigDecimal.ROUND_CEILING :\n             if (sign == -1) {\n-                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n+                double resultLow = 0;\n+\t\t\t\tunscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             } else {\n                 unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));\n             }\n@@ -472,14 +473,19 @@\n             } else {\n                 unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             }\n-            break;\n+            {\n+\t\t\t\tfinal double rln10b = 1.9699272335463627E-8;\n+\t\t\t\tbreak;\n+\t\t\t}\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n-                unscaled = FastMath.floor(unscaled);\n+                double dPrev = 0.0;\n+\t\t\t\tunscaled = FastMath.floor(unscaled);\n             }\n             break;\n         }\n@@ -493,7 +499,8 @@\n                 // The following equality test is intentional and needed for rounding purposes\n                 if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n                     .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n+                    double resultLow = 0;\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n                 } else { // odd\n                     unscaled = FastMath.ceil(unscaled);\n                 }\n@@ -508,7 +515,8 @@\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n             }\n-            break;\n+            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+\t\t\tbreak;\n         }\n         case BigDecimal.ROUND_UNNECESSARY :\n             if (unscaled != FastMath.floor(unscaled)) {\n@@ -516,7 +524,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 461, 
          "faulty": "unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 511, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 482, 
          "faulty": "unscaled=FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "double dPrev=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 496, 
          "faulty": "unscaled=FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 475, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "final double rln10b=1.9699272335463627E-8;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_325/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:48:03.611281839 -0500\n@@ -457,11 +457,16 @@\n         throws MathArithmeticException, MathIllegalArgumentException {\n         switch (roundingMethod) {\n         case BigDecimal.ROUND_CEILING :\n-            if (sign == -1) {\n-                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n-            } else {\n-                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));\n-            }\n+            {\n+\t\t\t\tdouble reduceResults[] = new double[3];\n+\t\t\t\tif (sign == -1) {\n+\t\t\t\t\tunscaled = FastMath.floor(FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\t\tDouble.NEGATIVE_INFINITY));\n+\t\t\t\t} else {\n+\t\t\t\t\tunscaled = FastMath.ceil(FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\t\tDouble.POSITIVE_INFINITY));\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         case BigDecimal.ROUND_DOWN :\n             unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n@@ -472,10 +477,14 @@\n             } else {\n                 unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             }\n-            break;\n+            {\n+\t\t\t\tfinal double rln10b = 1.9699272335463627E-8;\n+\t\t\t\tbreak;\n+\t\t\t}\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -487,28 +496,32 @@\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n+\t\t\t\tdouble xb = 0;\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n+            final double rln10a = 0.4342944622039795;\n+\t\t\tunscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n             }\n-            break;\n+            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+\t\t\tbreak;\n         }\n         case BigDecimal.ROUND_UNNECESSARY :\n             if (unscaled != FastMath.floor(unscaled)) {\n@@ -516,7 +529,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 511, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 496, 
          "faulty": "unscaled=FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 475, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "final double rln10b=1.9699272335463627E-8;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 504, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);", 
          "type": "InsertBefore", 
          "seed": "final double rln10a=0.4342944622039795;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double xb=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 460, 
          "faulty": "if (sign == -1) {\n  unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));\n}\n else {\n  unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));\n}", 
          "type": "InsertBefore", 
          "seed": "double reduceResults[]=new double[3];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_327/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:48:03.903286837 -0500\n@@ -457,11 +457,16 @@\n         throws MathArithmeticException, MathIllegalArgumentException {\n         switch (roundingMethod) {\n         case BigDecimal.ROUND_CEILING :\n-            if (sign == -1) {\n-                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n-            } else {\n-                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));\n-            }\n+            {\n+\t\t\t\tdouble reduceResults[] = new double[3];\n+\t\t\t\tif (sign == -1) {\n+\t\t\t\t\tunscaled = FastMath.floor(FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\t\tDouble.NEGATIVE_INFINITY));\n+\t\t\t\t} else {\n+\t\t\t\t\tunscaled = FastMath.ceil(FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\t\tDouble.POSITIVE_INFINITY));\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         case BigDecimal.ROUND_DOWN :\n             unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n@@ -475,7 +480,8 @@\n             break;\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -512,11 +518,12 @@\n         }\n         case BigDecimal.ROUND_UNNECESSARY :\n             if (unscaled != FastMath.floor(unscaled)) {\n-                throw new MathArithmeticException();\n+                double est = -0.010714690733195933;\n+\t\t\t\tthrow new MathArithmeticException();\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 460, 
          "faulty": "if (sign == -1) {\n  unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));\n}\n else {\n  unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));\n}", 
          "type": "InsertBefore", 
          "seed": "double reduceResults[]=new double[3];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 515, 
          "faulty": "throw new MathArithmeticException();", 
          "type": "InsertBefore", 
          "seed": "double est=-0.010714690733195933;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 463, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Delete", 
          "seed": "if (shouldGrowTable()) {\n  growTable();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_243/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:45.134962960 -0500\n@@ -487,17 +487,19 @@\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n+\t\t\t\tdouble hiPrec[] = new double[2];\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n@@ -516,8 +518,11 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n-            break;\n+            unscaled = FastMath.ceil(unscaled);\n+            {\n+\t\t\t\tfinal double rln10a = 0.4342944622039795;\n+\t\t\t\tbreak;\n+\t\t\t}\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n                                                    roundingMethod,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double hiPrec[]=new double[2];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 520, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "final double rln10a=0.4342944622039795;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 491, 
          "faulty": "unscaled=FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "advance();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_284/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:54.867131601 -0500\n@@ -434,7 +434,8 @@\n     public static float round(float x, int scale, int roundingMethod)\n         throws MathArithmeticException, MathIllegalArgumentException {\n         final float sign = FastMath.copySign(1f, x);\n-        final float factor = (float) FastMath.pow(10.0f, scale) * sign;\n+        final int s = Float.floatToRawIntBits(sign);\n+\t\tfinal float factor = (float) FastMath.pow(10.0f, scale) * sign;\n         return (float) roundUnscaled(x * factor, sign, roundingMethod) / factor;\n     }\n \n@@ -458,7 +459,8 @@\n         switch (roundingMethod) {\n         case BigDecimal.ROUND_CEILING :\n             if (sign == -1) {\n-                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n+                double resultLow = 0;\n+\t\t\t\tunscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             } else {\n                 unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));\n             }\n@@ -474,12 +476,14 @@\n             }\n             break;\n         case BigDecimal.ROUND_HALF_DOWN : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            int idx = 0;\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n-                unscaled = FastMath.floor(unscaled);\n+                double dPrev = 0.0;\n+\t\t\t\tunscaled = FastMath.floor(unscaled);\n             }\n             break;\n         }\n@@ -508,7 +512,9 @@\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n             }\n-            break;\n+            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+\t\t\tfinal double pi2a = 1.5707963267948966;\n+\t\t\tbreak;\n         }\n         case BigDecimal.ROUND_UNNECESSARY :\n             if (unscaled != FastMath.floor(unscaled)) {\n@@ -516,7 +522,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 461, 
          "faulty": "unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 511, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 482, 
          "faulty": "unscaled=FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "double dPrev=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 437, 
          "faulty": "final float factor=(float)FastMath.pow(10.0f,scale) * sign;", 
          "type": "InsertBefore", 
          "seed": "final int s=Float.floatToRawIntBits(sign);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 477, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);", 
          "type": "Replace", 
          "seed": "int idx=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 511, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "final double pi2a=1.5707963267948966;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_402/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:48:20.683571834 -0500\n@@ -467,16 +467,22 @@\n             unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             break;\n         case BigDecimal.ROUND_FLOOR :\n-            if (sign == -1) {\n-                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));\n-            } else {\n-                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n-            }\n-            break;\n+            {\n+\t\t\t\tdouble max = 0;\n+\t\t\t\tif (sign == -1) {\n+\t\t\t\t\tunscaled = FastMath.ceil(FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\t\tDouble.POSITIVE_INFINITY));\n+\t\t\t\t} else {\n+\t\t\t\t\tunscaled = FastMath.floor(FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\t\tDouble.NEGATIVE_INFINITY));\n+\t\t\t\t}\n+\t\t\t}\n+            ;\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n             double fraction = unscaled - FastMath.floor(unscaled);\n-            if (fraction > 0.5) {\n+            double resultLow = 0;\n+\t\t\tif (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n@@ -487,22 +493,26 @@\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n+\t\t\t\tunscaled = FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\tDouble.POSITIVE_INFINITY);\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n             unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -516,7 +526,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 479, 
          "faulty": "if (fraction > 0.5) {\n  unscaled=FastMath.ceil(unscaled);\n}\n else {\n  unscaled=FastMath.floor(unscaled);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 475, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "double b=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 475, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "double b=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 505, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 470, 
          "faulty": "if (sign == -1) {\n  unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));\n}\n else {\n  unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));\n}", 
          "type": "InsertBefore", 
          "seed": "double max=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_334/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:48:05.527314602 -0500\n@@ -457,11 +457,16 @@\n         throws MathArithmeticException, MathIllegalArgumentException {\n         switch (roundingMethod) {\n         case BigDecimal.ROUND_CEILING :\n-            if (sign == -1) {\n-                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n-            } else {\n-                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));\n-            }\n+            {\n+\t\t\t\tdouble reduceResults[] = new double[3];\n+\t\t\t\tif (sign == -1) {\n+\t\t\t\t\tunscaled = FastMath.floor(FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\t\tDouble.NEGATIVE_INFINITY));\n+\t\t\t\t} else {\n+\t\t\t\t\tunscaled = FastMath.ceil(FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\t\tDouble.POSITIVE_INFINITY));\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         case BigDecimal.ROUND_DOWN :\n             unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n@@ -472,10 +477,14 @@\n             } else {\n                 unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             }\n-            break;\n+            {\n+\t\t\t\tfinal double rln10b = 1.9699272335463627E-8;\n+\t\t\t\tbreak;\n+\t\t\t}\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -485,23 +494,27 @@\n         }\n         case BigDecimal.ROUND_HALF_EVEN : {\n             double fraction = unscaled - FastMath.floor(unscaled);\n-            if (fraction > 0.5) {\n+            final double factb = 3.145894820876798E-6;\n+\t\t\tif (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n+\t\t\t\tdouble xb = 0;\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n+            final double rln10a = 0.4342944622039795;\n+\t\t\tunscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n@@ -511,12 +524,15 @@\n             break;\n         }\n         case BigDecimal.ROUND_UNNECESSARY :\n-            if (unscaled != FastMath.floor(unscaled)) {\n-                throw new MathArithmeticException();\n-            }\n+            {\n+\t\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n+\t\t\t\tif (unscaled != FastMath.floor(unscaled)) {\n+\t\t\t\t\tthrow new MathArithmeticException();\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 496, 
          "faulty": "unscaled=FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 475, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "final double rln10b=1.9699272335463627E-8;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 504, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);", 
          "type": "InsertBefore", 
          "seed": "final double rln10a=0.4342944622039795;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double xb=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 460, 
          "faulty": "if (sign == -1) {\n  unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));\n}\n else {\n  unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));\n}", 
          "type": "InsertBefore", 
          "seed": "double reduceResults[]=new double[3];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 514, 
          "faulty": "if (unscaled != FastMath.floor(unscaled)) {\n  throw new MathArithmeticException();\n}", 
          "type": "InsertBefore", 
          "seed": "double fraction=unscaled - FastMath.floor(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 488, 
          "faulty": "if (fraction > 0.5) {\n  unscaled=FastMath.ceil(unscaled);\n}\n else if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "final double factb=3.145894820876798E-6;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_359/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:48:10.607401200 -0500\n@@ -458,7 +458,8 @@\n         switch (roundingMethod) {\n         case BigDecimal.ROUND_CEILING :\n             if (sign == -1) {\n-                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n+                double resultLow = 0;\n+\t\t\t\tunscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             } else {\n                 unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));\n             }\n@@ -475,8 +476,10 @@\n             break;\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n-            if (fraction > 0.5) {\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n+            double resultLow = 0;\n+\t\t\tif (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n@@ -487,28 +490,33 @@\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n+\t\t\t\tunscaled = FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\tDouble.POSITIVE_INFINITY);\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n+            final double rln10a = 0.4342944622039795;\n+\t\t\tunscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n             }\n-            break;\n+            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+\t\t\tbreak;\n         }\n         case BigDecimal.ROUND_UNNECESSARY :\n             if (unscaled != FastMath.floor(unscaled)) {\n@@ -516,7 +524,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 461, 
          "faulty": "unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 511, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 504, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);", 
          "type": "InsertBefore", 
          "seed": "final double rln10a=0.4342944622039795;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 479, 
          "faulty": "if (fraction > 0.5) {\n  unscaled=FastMath.ceil(unscaled);\n}\n else {\n  unscaled=FastMath.floor(unscaled);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_319/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:48:02.707266362 -0500\n@@ -457,11 +457,16 @@\n         throws MathArithmeticException, MathIllegalArgumentException {\n         switch (roundingMethod) {\n         case BigDecimal.ROUND_CEILING :\n-            if (sign == -1) {\n-                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n-            } else {\n-                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));\n-            }\n+            {\n+\t\t\t\tdouble reduceResults[] = new double[3];\n+\t\t\t\tif (sign == -1) {\n+\t\t\t\t\tunscaled = FastMath.floor(FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\t\tDouble.NEGATIVE_INFINITY));\n+\t\t\t\t} else {\n+\t\t\t\t\tunscaled = FastMath.ceil(FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\t\tDouble.POSITIVE_INFINITY));\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         case BigDecimal.ROUND_DOWN :\n             unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n@@ -472,10 +477,14 @@\n             } else {\n                 unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             }\n-            break;\n+            {\n+\t\t\t\tfinal double rln10b = 1.9699272335463627E-8;\n+\t\t\t\tbreak;\n+\t\t\t}\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -487,36 +496,43 @@\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n+\t\t\t\tdouble xb = 0;\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n+            final double rln10a = 0.4342944622039795;\n+\t\t\tunscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n             }\n-            break;\n+            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+\t\t\tbreak;\n         }\n         case BigDecimal.ROUND_UNNECESSARY :\n-            if (unscaled != FastMath.floor(unscaled)) {\n-                throw new MathArithmeticException();\n-            }\n+            {\n+\t\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n+\t\t\t\tif (unscaled != FastMath.floor(unscaled)) {\n+\t\t\t\t\tthrow new MathArithmeticException();\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 461, 
          "faulty": "unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 511, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 496, 
          "faulty": "unscaled=FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 475, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "final double rln10b=1.9699272335463627E-8;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 504, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);", 
          "type": "InsertBefore", 
          "seed": "final double rln10a=0.4342944622039795;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double xb=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 460, 
          "faulty": "if (sign == -1) {\n  unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));\n}\n else {\n  unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));\n}", 
          "type": "InsertBefore", 
          "seed": "double reduceResults[]=new double[3];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 514, 
          "faulty": "if (unscaled != FastMath.floor(unscaled)) {\n  throw new MathArithmeticException();\n}", 
          "type": "InsertBefore", 
          "seed": "double fraction=unscaled - FastMath.floor(unscaled);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_255/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:47.226999339 -0500\n@@ -458,7 +458,8 @@\n         switch (roundingMethod) {\n         case BigDecimal.ROUND_CEILING :\n             if (sign == -1) {\n-                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n+                double resultLow = 0;\n+\t\t\t\tunscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             } else {\n                 unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));\n             }\n@@ -475,11 +476,13 @@\n             break;\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n-                unscaled = FastMath.floor(unscaled);\n+                double dPrev = 0.0;\n+\t\t\t\tunscaled = FastMath.floor(unscaled);\n             }\n             break;\n         }\n@@ -508,7 +511,8 @@\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n             }\n-            break;\n+            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+\t\t\tbreak;\n         }\n         case BigDecimal.ROUND_UNNECESSARY :\n             if (unscaled != FastMath.floor(unscaled)) {\n@@ -516,7 +520,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 461, 
          "faulty": "unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 511, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 482, 
          "faulty": "unscaled=FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "double dPrev=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_138/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:22.934572338 -0500\n@@ -485,7 +485,8 @@\n         }\n         case BigDecimal.ROUND_HALF_EVEN : {\n             double fraction = unscaled - FastMath.floor(unscaled);\n-            if (fraction > 0.5) {\n+            long result = 1l;\n+\t\t\tif (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else if (fraction < 0.5) {\n                 unscaled = FastMath.floor(unscaled);\n@@ -516,7 +517,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 488, 
          "faulty": "if (fraction > 0.5) {\n  unscaled=FastMath.ceil(unscaled);\n}\n else if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "long result=1l;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_246/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:45.718973122 -0500\n@@ -458,7 +458,8 @@\n         switch (roundingMethod) {\n         case BigDecimal.ROUND_CEILING :\n             if (sign == -1) {\n-                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n+                double resultLow = 0;\n+\t\t\t\tunscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             } else {\n                 unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));\n             }\n@@ -475,7 +476,8 @@\n             break;\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -508,7 +510,8 @@\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n             }\n-            break;\n+            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+\t\t\tbreak;\n         }\n         case BigDecimal.ROUND_UNNECESSARY :\n             if (unscaled != FastMath.floor(unscaled)) {\n@@ -516,7 +519,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 461, 
          "faulty": "unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 511, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_269/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:50.959064065 -0500\n@@ -475,11 +475,13 @@\n             break;\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n-                unscaled = FastMath.floor(unscaled);\n+                double dPrev = 0.0;\n+\t\t\t\tunscaled = FastMath.floor(unscaled);\n             }\n             break;\n         }\n@@ -516,7 +518,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 482, 
          "faulty": "unscaled=FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "double dPrev=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_311/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:48:01.371243465 -0500\n@@ -457,11 +457,16 @@\n         throws MathArithmeticException, MathIllegalArgumentException {\n         switch (roundingMethod) {\n         case BigDecimal.ROUND_CEILING :\n-            if (sign == -1) {\n-                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n-            } else {\n-                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));\n-            }\n+            {\n+\t\t\t\tdouble reduceResults[] = new double[3];\n+\t\t\t\tif (sign == -1) {\n+\t\t\t\t\tunscaled = FastMath.floor(FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\t\tDouble.NEGATIVE_INFINITY));\n+\t\t\t\t} else {\n+\t\t\t\t\tunscaled = FastMath.ceil(FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\t\tDouble.POSITIVE_INFINITY));\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         case BigDecimal.ROUND_DOWN :\n             unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n@@ -472,10 +477,11 @@\n             } else {\n                 unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             }\n-            break;\n+            boolean subnormal = false;\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -487,28 +493,32 @@\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n+\t\t\t\tdouble xb = 0;\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n+            final double rln10a = 0.4342944622039795;\n+\t\t\tunscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n             }\n-            break;\n+            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+\t\t\tbreak;\n         }\n         case BigDecimal.ROUND_UNNECESSARY :\n             if (unscaled != FastMath.floor(unscaled)) {\n@@ -516,7 +526,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 461, 
          "faulty": "unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 511, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 496, 
          "faulty": "unscaled=FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 475, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "final double rln10b=1.9699272335463627E-8;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 504, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);", 
          "type": "InsertBefore", 
          "seed": "final double rln10a=0.4342944622039795;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double xb=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 460, 
          "faulty": "if (sign == -1) {\n  unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));\n}\n else {\n  unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));\n}", 
          "type": "InsertBefore", 
          "seed": "double reduceResults[]=new double[3];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 491, 
          "faulty": "unscaled=FastMath.floor(unscaled);", 
          "type": "Delete", 
          "seed": "double dPrev=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 463, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Delete", 
          "seed": "long result=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 475, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "boolean subnormal=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 498, 
          "faulty": "unscaled=FastMath.ceil(unscaled);", 
          "type": "Delete", 
          "seed": "if (unscaled != FastMath.floor(unscaled)) {\n  throw new MathArithmeticException();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_435/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:48:28.859709222 -0500\n@@ -474,9 +474,10 @@\n             }\n             break;\n         case BigDecimal.ROUND_HALF_DOWN : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n-            if (fraction > 0.5) {\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n+            double resultLow = 0;\n+\t\t\tif (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n@@ -487,22 +488,25 @@\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n-            break;\n+\t\t\t\tunscaled = FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\tDouble.POSITIVE_INFINITY);\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n             unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -516,7 +520,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 479, 
          "faulty": "if (fraction > 0.5) {\n  unscaled=FastMath.ceil(unscaled);\n}\n else {\n  unscaled=FastMath.floor(unscaled);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 505, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 501, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 477, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);", 
          "type": "Delete", 
          "seed": "SAFE_MIN=Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_342/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:48:06.799336322 -0500\n@@ -457,11 +457,16 @@\n         throws MathArithmeticException, MathIllegalArgumentException {\n         switch (roundingMethod) {\n         case BigDecimal.ROUND_CEILING :\n-            if (sign == -1) {\n-                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n-            } else {\n-                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));\n-            }\n+            {\n+\t\t\t\tdouble reduceResults[] = new double[3];\n+\t\t\t\tif (sign == -1) {\n+\t\t\t\t\tunscaled = FastMath.floor(FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\t\tDouble.NEGATIVE_INFINITY));\n+\t\t\t\t} else {\n+\t\t\t\t\tunscaled = FastMath.ceil(FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\t\tDouble.POSITIVE_INFINITY));\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         case BigDecimal.ROUND_DOWN :\n             unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n@@ -472,10 +477,14 @@\n             } else {\n                 unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             }\n-            break;\n+            {\n+\t\t\t\tfinal double rln10b = 1.9699272335463627E-8;\n+\t\t\t\tbreak;\n+\t\t\t}\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -487,28 +496,33 @@\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n+\t\t\t\tdouble xb = 0;\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n+            final double rln10a = 0.4342944622039795;\n+\t\t\tunscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n             }\n-            break;\n+            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+\t\t\tunscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+\t\t\tbreak;\n         }\n         case BigDecimal.ROUND_UNNECESSARY :\n             if (unscaled != FastMath.floor(unscaled)) {\n@@ -516,7 +530,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 461, 
          "faulty": "unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 511, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 496, 
          "faulty": "unscaled=FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 461, 
          "faulty": "unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 511, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 496, 
          "faulty": "unscaled=FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 475, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "final double rln10b=1.9699272335463627E-8;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 504, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);", 
          "type": "InsertBefore", 
          "seed": "final double rln10a=0.4342944622039795;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double xb=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 460, 
          "faulty": "if (sign == -1) {\n  unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));\n}\n else {\n  unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));\n}", 
          "type": "InsertBefore", 
          "seed": "double reduceResults[]=new double[3];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 491, 
          "faulty": "unscaled=FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_252/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:46.734990790 -0500\n@@ -474,8 +474,10 @@\n             }\n             break;\n         case BigDecimal.ROUND_HALF_DOWN : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            final double lns[] = new double[2];\n+\t\t\tunscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -487,17 +489,19 @@\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n+\t\t\t\tdouble hiPrec[] = new double[2];\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n@@ -516,7 +520,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double hiPrec[]=new double[2];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 477, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);", 
          "type": "InsertBefore", 
          "seed": "final double lns[]=new double[2];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_160/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:27.942661201 -0500\n@@ -462,7 +462,10 @@\n             } else {\n                 unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));\n             }\n-            break;\n+            {\n+\t\t\t\tfinal double facta = 57.2957763671875;\n+\t\t\t\tbreak;\n+\t\t\t}\n         case BigDecimal.ROUND_DOWN :\n             unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             break;\n@@ -498,7 +501,6 @@\n                     unscaled = FastMath.ceil(unscaled);\n                 }\n             }\n-            break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n             unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n@@ -516,7 +518,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 465, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "final double facta=57.2957763671875;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 501, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_176/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:31.634726430 -0500\n@@ -475,13 +475,15 @@\n             break;\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            int x = 0;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n             }\n-            break;\n+            double sum = 0d;\n+\t\t\tbreak;\n         }\n         case BigDecimal.ROUND_HALF_EVEN : {\n             double fraction = unscaled - FastMath.floor(unscaled);\n@@ -516,7 +518,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 484, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "double sum=0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int x=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_171/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:30.594708080 -0500\n@@ -481,7 +481,8 @@\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n             }\n-            break;\n+            double sum = 0d;\n+\t\t\tbreak;\n         }\n         case BigDecimal.ROUND_HALF_EVEN : {\n             double fraction = unscaled - FastMath.floor(unscaled);\n@@ -516,7 +517,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 484, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "double sum=0d;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_406/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:48:21.879591991 -0500\n@@ -470,13 +470,17 @@\n             if (sign == -1) {\n                 unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));\n             } else {\n-                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n+                boolean newMapping = true;\n+\t\t\t\tunscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             }\n-            break;\n+            boolean negate = false;\n         case BigDecimal.ROUND_HALF_DOWN : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n-            if (fraction > 0.5) {\n+            final int[] hashData = new int[6];\n+\t\t\tunscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n+            double resultLow = 0;\n+\t\t\tif (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n@@ -502,7 +506,8 @@\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n             unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -516,7 +521,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 479, 
          "faulty": "if (fraction > 0.5) {\n  unscaled=FastMath.ceil(unscaled);\n}\n else {\n  unscaled=FastMath.floor(unscaled);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 475, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "double b=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 505, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 475, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "boolean negate=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 473, 
          "faulty": "unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));", 
          "type": "InsertBefore", 
          "seed": "boolean newMapping=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 477, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);", 
          "type": "InsertBefore", 
          "seed": "final int[] hashData=new int[6];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_315/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:48:01.911252724 -0500\n@@ -457,11 +457,16 @@\n         throws MathArithmeticException, MathIllegalArgumentException {\n         switch (roundingMethod) {\n         case BigDecimal.ROUND_CEILING :\n-            if (sign == -1) {\n-                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n-            } else {\n-                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));\n-            }\n+            {\n+\t\t\t\tdouble reduceResults[] = new double[3];\n+\t\t\t\tif (sign == -1) {\n+\t\t\t\t\tunscaled = FastMath.floor(FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\t\tDouble.NEGATIVE_INFINITY));\n+\t\t\t\t} else {\n+\t\t\t\t\tunscaled = FastMath.ceil(FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\t\tDouble.POSITIVE_INFINITY));\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         case BigDecimal.ROUND_DOWN :\n             unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n@@ -472,10 +477,14 @@\n             } else {\n                 unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             }\n-            break;\n+            {\n+\t\t\t\tfinal double rln10b = 1.9699272335463627E-8;\n+\t\t\t\tbreak;\n+\t\t\t}\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -487,28 +496,34 @@\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n+\t\t\t\tdouble xb = 0;\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n+            final double rln10a = 0.4342944622039795;\n+\t\t\tunscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n             double fraction = unscaled - FastMath.floor(unscaled);\n-            if (fraction >= 0.5) {\n+            final double hiPrec[] = new double[2];\n+\t\t\tif (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n             }\n-            break;\n+            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+\t\t\tunscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+\t\t\tbreak;\n         }\n         case BigDecimal.ROUND_UNNECESSARY :\n             if (unscaled != FastMath.floor(unscaled)) {\n@@ -516,7 +531,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 461, 
          "faulty": "unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 511, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 496, 
          "faulty": "unscaled=FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 475, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "final double rln10b=1.9699272335463627E-8;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 461, 
          "faulty": "unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 511, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 496, 
          "faulty": "unscaled=FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 475, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "final double rln10b=1.9699272335463627E-8;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 504, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);", 
          "type": "InsertBefore", 
          "seed": "final double rln10a=0.4342944622039795;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double xb=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 460, 
          "faulty": "if (sign == -1) {\n  unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));\n}\n else {\n  unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));\n}", 
          "type": "InsertBefore", 
          "seed": "double reduceResults[]=new double[3];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 506, 
          "faulty": "if (fraction >= 0.5) {\n  unscaled=FastMath.ceil(unscaled);\n}\n else {\n  unscaled=FastMath.floor(unscaled);\n}", 
          "type": "InsertBefore", 
          "seed": "final double hiPrec[]=new double[2];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_377/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:48:15.071476980 -0500\n@@ -455,7 +455,8 @@\n                                         double sign,\n                                         int roundingMethod)\n         throws MathArithmeticException, MathIllegalArgumentException {\n-        switch (roundingMethod) {\n+        final double pi2b = 6.123233995736766E-17;\n+\t\tswitch (roundingMethod) {\n         case BigDecimal.ROUND_CEILING :\n             if (sign == -1) {\n                 unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n@@ -472,12 +473,14 @@\n             } else {\n                 unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             }\n-            break;\n+            ;\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n-                unscaled = FastMath.ceil(unscaled);\n+                long result = 1;\n+\t\t\t\tunscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n             }\n@@ -487,17 +490,20 @@\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n+\t\t\t\tunscaled = FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\tDouble.POSITIVE_INFINITY);\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n@@ -516,7 +522,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 458, 
          "faulty": "switch (roundingMethod) {\ncase BigDecimal.ROUND_CEILING:\n  if (sign == -1) {\n    unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));\n  }\n else {\n    unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));\n  }\nbreak;\ncase BigDecimal.ROUND_DOWN:\nunscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));\nbreak;\ncase BigDecimal.ROUND_FLOOR:\nif (sign == -1) {\nunscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));\n}\n else {\nunscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));\n}\nbreak;\ncase BigDecimal.ROUND_HALF_DOWN:\n{\nunscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);\ndouble fraction=unscaled - FastMath.floor(unscaled);\nif (fraction > 0.5) {\nunscaled=FastMath.ceil(unscaled);\n}\n else {\nunscaled=FastMath.floor(unscaled);\n}\nbreak;\n}\ncase BigDecimal.ROUND_HALF_EVEN:\n{\ndouble fraction=unscaled - FastMath.floor(unscaled);\nif (fraction > 0.5) {\nunscaled=FastMath.ceil(unscaled);\n}\n else if (fraction < 0.5) {\nunscaled=FastMath.floor(unscaled);\n}\n else {\nif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\nunscaled=FastMath.floor(unscaled);\n}\n else {\nunscaled=FastMath.ceil(unscaled);\n}\n}\nbreak;\n}\ncase BigDecimal.ROUND_HALF_UP:\n{\nunscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);\ndouble fraction=unscaled - FastMath.floor(unscaled);\nif (fraction >= 0.5) {\nunscaled=FastMath.ceil(unscaled);\n}\n else {\nunscaled=FastMath.floor(unscaled);\n}\nbreak;\n}\ncase BigDecimal.ROUND_UNNECESSARY:\nif (unscaled != FastMath.floor(unscaled)) {\nthrow new MathArithmeticException();\n}\nbreak;\ncase BigDecimal.ROUND_UP:\nunscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));\nbreak;\ndefault :\nthrow new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,roundingMethod,\"ROUND_CEILING\",BigDecimal.ROUND_CEILING,\"ROUND_DOWN\",BigDecimal.ROUND_DOWN,\"ROUND_FLOOR\",BigDecimal.ROUND_FLOOR,\"ROUND_HALF_DOWN\",BigDecimal.ROUND_HALF_DOWN,\"ROUND_HALF_EVEN\",BigDecimal.ROUND_HALF_EVEN,\"ROUND_HALF_UP\",BigDecimal.ROUND_HALF_UP,\"ROUND_UNNECESSARY\",BigDecimal.ROUND_UNNECESSARY,\"ROUND_UP\",BigDecimal.ROUND_UP);\n}", 
          "type": "InsertBefore", 
          "seed": "final double pi2b=6.123233995736766E-17;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 491, 
          "faulty": "unscaled=FastMath.floor(unscaled);", 
          "type": "Delete", 
          "seed": "return (float)getContractionCriterion();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 480, 
          "faulty": "unscaled=FastMath.ceil(unscaled);", 
          "type": "InsertBefore", 
          "seed": "long result=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 475, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "double result=1d;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_347/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:48:07.931355632 -0500\n@@ -458,7 +458,8 @@\n         switch (roundingMethod) {\n         case BigDecimal.ROUND_CEILING :\n             if (sign == -1) {\n-                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n+                double resultLow = 0;\n+\t\t\t\tunscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             } else {\n                 unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));\n             }\n@@ -474,8 +475,8 @@\n             }\n             break;\n         case BigDecimal.ROUND_HALF_DOWN : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -484,7 +485,8 @@\n             break;\n         }\n         case BigDecimal.ROUND_HALF_EVEN : {\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            int quadrant = 0;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else if (fraction < 0.5) {\n@@ -501,14 +503,16 @@\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n+            final double rln10a = 0.4342944622039795;\n+\t\t\tunscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n             }\n-            break;\n+            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+\t\t\tbreak;\n         }\n         case BigDecimal.ROUND_UNNECESSARY :\n             if (unscaled != FastMath.floor(unscaled)) {\n@@ -516,7 +520,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 461, 
          "faulty": "unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 511, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 504, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);", 
          "type": "InsertBefore", 
          "seed": "final double rln10a=0.4342944622039795;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 477, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);", 
          "type": "Delete", 
          "seed": "return LazyHolder.INSTANCE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 487, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int quadrant=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_207/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:38.078839719 -0500\n@@ -479,7 +479,8 @@\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n-                unscaled = FastMath.floor(unscaled);\n+                double resultHigh = 1;\n+\t\t\t\tunscaled = FastMath.floor(unscaled);\n             }\n             break;\n         }\n@@ -516,7 +517,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 482, 
          "faulty": "unscaled=FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_228/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:42.210911988 -0500\n@@ -487,17 +487,19 @@\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n+\t\t\t\tdouble hiPrec[] = new double[2];\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n@@ -516,8 +518,11 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n-            break;\n+            unscaled = FastMath.ceil(unscaled);\n+            {\n+\t\t\t\tfinal double rln10a = 0.4342944622039795;\n+\t\t\t\tbreak;\n+\t\t\t}\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n                                                    roundingMethod,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double hiPrec[]=new double[2];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 520, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "final double rln10a=0.4342944622039795;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_336/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:48:05.763318634 -0500\n@@ -458,7 +458,8 @@\n         switch (roundingMethod) {\n         case BigDecimal.ROUND_CEILING :\n             if (sign == -1) {\n-                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n+                double resultLow = 0;\n+\t\t\t\tunscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             } else {\n                 unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));\n             }\n@@ -474,8 +475,8 @@\n             }\n             break;\n         case BigDecimal.ROUND_HALF_DOWN : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -501,14 +502,16 @@\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n+            final double rln10a = 0.4342944622039795;\n+\t\t\tunscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n             }\n-            break;\n+            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+\t\t\tbreak;\n         }\n         case BigDecimal.ROUND_UNNECESSARY :\n             if (unscaled != FastMath.floor(unscaled)) {\n@@ -516,7 +519,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 461, 
          "faulty": "unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 511, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 504, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);", 
          "type": "InsertBefore", 
          "seed": "final double rln10a=0.4342944622039795;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 477, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);", 
          "type": "Delete", 
          "seed": "return LazyHolder.INSTANCE;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_150/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:25.666620869 -0500\n@@ -462,7 +462,10 @@\n             } else {\n                 unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));\n             }\n-            break;\n+            {\n+\t\t\t\tfinal double facta = 57.2957763671875;\n+\t\t\t\tbreak;\n+\t\t\t}\n         case BigDecimal.ROUND_DOWN :\n             unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             break;\n@@ -516,7 +519,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 465, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "final double facta=57.2957763671875;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_340/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:48:06.523331611 -0500\n@@ -474,9 +474,10 @@\n             }\n             break;\n         case BigDecimal.ROUND_HALF_DOWN : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n-            if (fraction > 0.5) {\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n+            double resultLow = 0;\n+\t\t\tif (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n@@ -501,7 +502,8 @@\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n+            final double rln10a = 0.4342944622039795;\n+\t\t\tunscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n@@ -516,7 +518,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 504, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);", 
          "type": "InsertBefore", 
          "seed": "final double rln10a=0.4342944622039795;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 477, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);", 
          "type": "Delete", 
          "seed": "return LazyHolder.INSTANCE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 479, 
          "faulty": "if (fraction > 0.5) {\n  unscaled=FastMath.ceil(unscaled);\n}\n else {\n  unscaled=FastMath.floor(unscaled);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_394/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:48:19.227547269 -0500\n@@ -472,11 +472,15 @@\n             } else {\n                 unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             }\n-            break;\n+            {\n+\t\t\t\tfinal double lns[] = new double[2];\n+\t\t\t\tbreak;\n+\t\t\t}\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n             double fraction = unscaled - FastMath.floor(unscaled);\n-            if (fraction > 0.5) {\n+            double resultLow = 0;\n+\t\t\tif (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n@@ -487,22 +491,26 @@\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n+\t\t\t\tunscaled = FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\tDouble.POSITIVE_INFINITY);\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n             unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -516,7 +524,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 479, 
          "faulty": "if (fraction > 0.5) {\n  unscaled=FastMath.ceil(unscaled);\n}\n else {\n  unscaled=FastMath.floor(unscaled);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 475, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "double b=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 505, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 475, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "final double lns[]=new double[2];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_241/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:44.858958154 -0500\n@@ -474,30 +474,36 @@\n             }\n             break;\n         case BigDecimal.ROUND_HALF_DOWN : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+            long result = 1;\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n             }\n-            break;\n         }\n         case BigDecimal.ROUND_HALF_EVEN : {\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n-                unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n+                if (fraction > 0.5) {\n+\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t}\n+\t\t\t\tunscaled = FastMath.ceil(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n+\t\t\t\tdouble hiPrec[] = new double[2];\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n@@ -516,7 +522,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double hiPrec[]=new double[2];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 477, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);", 
          "type": "Replace", 
          "seed": "long result=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 484, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "final double factb=1.997844754509471E-9;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 489, 
          "faulty": "unscaled=FastMath.ceil(unscaled);", 
          "type": "InsertBefore", 
          "seed": "if (fraction > 0.5) {\n  unscaled=FastMath.ceil(unscaled);\n}\n else {\n  unscaled=FastMath.floor(unscaled);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_158/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:27.574654685 -0500\n@@ -474,7 +474,8 @@\n             }\n             break;\n         case BigDecimal.ROUND_HALF_DOWN : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+            final int splitFactor = 0x8000001;\n+\t\t\tunscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n@@ -516,7 +517,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 477, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);", 
          "type": "InsertBefore", 
          "seed": "final int splitFactor=0x8000001;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_233/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:43.030926298 -0500\n@@ -458,7 +458,8 @@\n         switch (roundingMethod) {\n         case BigDecimal.ROUND_CEILING :\n             if (sign == -1) {\n-                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n+                double zb = 0.008336750013465571;\n+\t\t\t\tunscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             } else {\n                 unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));\n             }\n@@ -487,23 +488,26 @@\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n+\t\t\t\tdouble hiPrec[] = new double[2];\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n             unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n             double fraction = unscaled - FastMath.floor(unscaled);\n-            if (fraction >= 0.5) {\n+            double xb = 0.0;\n+\t\t\tif (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n@@ -516,8 +520,11 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n-            break;\n+            unscaled = FastMath.ceil(unscaled);\n+            {\n+\t\t\t\tfinal double rln10a = 0.4342944622039795;\n+\t\t\t\tbreak;\n+\t\t\t}\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n                                                    roundingMethod,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double hiPrec[]=new double[2];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 520, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "final double rln10a=0.4342944622039795;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 506, 
          "faulty": "if (fraction >= 0.5) {\n  unscaled=FastMath.ceil(unscaled);\n}\n else {\n  unscaled=FastMath.floor(unscaled);\n}", 
          "type": "InsertBefore", 
          "seed": "double xb=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 461, 
          "faulty": "unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_196/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:35.942802246 -0500\n@@ -475,7 +475,8 @@\n             break;\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -516,7 +517,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_248/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:45.950977159 -0500\n@@ -487,21 +487,24 @@\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n+\t\t\t\tdouble hiPrec[] = new double[2];\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n+            final double hiPrec[] = new double[2];\n+\t\t\tunscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n@@ -516,7 +519,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double hiPrec[]=new double[2];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 504, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);", 
          "type": "InsertBefore", 
          "seed": "final double hiPrec[]=new double[2];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_429/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:48:27.611688311 -0500\n@@ -472,11 +472,13 @@\n             } else {\n                 unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             }\n-            break;\n+            ;\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n-            if (fraction > 0.5) {\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n+            double resultLow = 0;\n+\t\t\tif (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n@@ -487,22 +489,26 @@\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n-            } else if (fraction < 0.5) {\n-                unscaled = FastMath.floor(unscaled);\n             } else {\n-                // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n-                } else { // odd\n-                    unscaled = FastMath.ceil(unscaled);\n-                }\n-            }\n+\t\t\t\tunscaled = FastMath.nextAfter(unscaled,\n+\t\t\t\t\t\tDouble.POSITIVE_INFINITY);\n+\t\t\t\tif (fraction < 0.5) {\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n+\t\t\t\t\t\t\t.floor(unscaled) / 2.0)) {\n+\t\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tunscaled = FastMath.ceil(unscaled);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n             unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -516,8 +522,13 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n-            break;\n+            unscaled = FastMath.ceil(unscaled);\n+            {\n+\t\t\t\tif (unscaled != FastMath.floor(unscaled)) {\n+\t\t\t\t\tthrow new MathArithmeticException();\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\t}\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n                                                    roundingMethod,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 479, 
          "faulty": "if (fraction > 0.5) {\n  unscaled=FastMath.ceil(unscaled);\n}\n else {\n  unscaled=FastMath.floor(unscaled);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 490, 
          "faulty": "if (fraction < 0.5) {\n  unscaled=FastMath.floor(unscaled);\n}\n else {\n  if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {\n    unscaled=FastMath.floor(unscaled);\n  }\n else {\n    unscaled=FastMath.ceil(unscaled);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 475, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "double b=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 505, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 520, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "if (unscaled != FastMath.floor(unscaled)) {\n  throw new MathArithmeticException();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_185/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:33.534759906 -0500\n@@ -501,7 +501,6 @@\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n@@ -516,7 +515,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 504, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);", 
          "type": "Delete", 
          "seed": "double b=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_201/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:36.982820501 -0500\n@@ -475,7 +475,8 @@\n             break;\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -501,7 +502,6 @@\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n@@ -516,7 +516,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 504, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);", 
          "type": "Delete", 
          "seed": "double b=0.0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_288/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:55.711146153 -0500\n@@ -458,7 +458,8 @@\n         switch (roundingMethod) {\n         case BigDecimal.ROUND_CEILING :\n             if (sign == -1) {\n-                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n+                double resultLow = 0;\n+\t\t\t\tunscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             } else {\n                 unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));\n             }\n@@ -472,10 +473,14 @@\n             } else {\n                 unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n             }\n-            break;\n+            {\n+\t\t\t\tfinal double rln10b = 1.9699272335463627E-8;\n+\t\t\t\tbreak;\n+\t\t\t}\n         case BigDecimal.ROUND_HALF_DOWN : {\n             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n-            double fraction = unscaled - FastMath.floor(unscaled);\n+            int n = 1;\n+\t\t\tdouble fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction > 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n@@ -493,7 +498,8 @@\n                 // The following equality test is intentional and needed for rounding purposes\n                 if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n                     .floor(unscaled) / 2.0)) { // even\n-                    unscaled = FastMath.floor(unscaled);\n+                    double resultLow = 0;\n+\t\t\t\t\tunscaled = FastMath.floor(unscaled);\n                 } else { // odd\n                     unscaled = FastMath.ceil(unscaled);\n                 }\n@@ -501,14 +507,16 @@\n             break;\n         }\n         case BigDecimal.ROUND_HALF_UP : {\n-            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n+            final double rln10a = 0.4342944622039795;\n+\t\t\tunscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);\n             double fraction = unscaled - FastMath.floor(unscaled);\n             if (fraction >= 0.5) {\n                 unscaled = FastMath.ceil(unscaled);\n             } else {\n                 unscaled = FastMath.floor(unscaled);\n             }\n-            break;\n+            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n+\t\t\tbreak;\n         }\n         case BigDecimal.ROUND_UNNECESSARY :\n             if (unscaled != FastMath.floor(unscaled)) {\n@@ -516,7 +524,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 478, 
          "faulty": "double fraction=unscaled - FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 461, 
          "faulty": "unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 511, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 496, 
          "faulty": "unscaled=FastMath.floor(unscaled);", 
          "type": "InsertBefore", 
          "seed": "double resultLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 475, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "final double rln10b=1.9699272335463627E-8;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 504, 
          "faulty": "unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);", 
          "type": "InsertBefore", 
          "seed": "final double rln10a=0.4342944622039795;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:22:44.185026000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_121/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-30 18:47:18.722506100 -0500\n@@ -516,7 +516,7 @@\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n+            unscaled = FastMath.ceil(unscaled);\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 519, 
          "faulty": "unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));", 
          "type": "Replace", 
          "seed": "unscaled=FastMath.ceil(unscaled);"
        }
      ]
    }
  ]
}