{"general":{"NR_RIGHT_COMPILATIONS":3,"NR_ERRONEOUS_VARIANCES":null,"EXECUTION_IDENTIFIER":"Commons-Math-fc409e88","OUTPUT_STATUS":"STOP_BY_PATCH_FOUND","NR_FAILLING_COMPILATIONS":4,"NR_GENERATIONS":7,"TOTAL_TIME":299.219,"NR_FAILING_VALIDATION_PROCESS":null},"patches":[{"VARIANT_ID":"14","VALIDATION":"|true|0|2407|[]|","patchhunks":[{"LOCATION":"org.apache.commons.math.optimization.direct.CMAESOptimizer","PATH":"\\\/tmp\\\/Cardumen_Bug_dot_jar_Commons-Math_fc409e88\\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/direct\\\/CMAESOptimizer.java","INGREDIENT_SCOPE":"-","SUSPICIOUNESS":"0.5","INGREDIENT_PARENT":"-_double_0","PATCH_HUNK_TYPE":"CtUnaryOperatorImpl|CtLocalVariableImpl","ORIGINAL_CODE":"(boundaries[1][i]) - (boundaries[0][i])","BUGGY_CODE_TYPE":"CtBinaryOperatorImpl|CtLocalVariableImpl","OPERATOR":"ExpressionReplaceOperator","MODIFIED_FILE_PATH":"\\\/tmp\\\/Cardumen_Bug_dot_jar_Commons-Math_fc409e88\\\/.\\\/output_astor\\\/AstorMain-Commons-Math-fc409e88\\\/\\\/src\\\/\\\/variant-14\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/direct\\\/CMAESOptimizer.java","LINE":"861","MP_RANKING":"7","PATCH_HUNK_CODE":"-(valueRange)"}],"TIME":"298","GENERATION":"7","FOLDER_SOLUTION_CODE":"\\\/tmp\\\/Cardumen_Bug_dot_jar_Commons-Math_fc409e88\\\/.\\\/output_astor\\\/AstorMain-Commons-Math-fc409e88\\\/\\\/bin\\\/\\\/variant-14","PATCH_DIFF_ORIG":"\\\/var\\\/lib\\\/oar\\\/.batch_job_bashrc: line 5: \\\/home\\\/tdurieux\\\/.bashrc: No such file or directory\\n--- \\\/tmp\\\/Cardumen_Bug_dot_jar_Commons-Math_fc409e88\\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/direct\\\/CMAESOptimizerjava\\n+++ \\\/tmp\\\/Cardumen_Bug_dot_jar_Commons-Math_fc409e88\\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/direct\\\/CMAESOptimizerjava\\n@@ -858,44 +858,44 @@\\n \\t\\t\\t\\treturn x;\\n \\t\\t\\tdouble[] res = new double[x.length];\\n \\t\\t\\tfor (int i = 0; i < (x.length); i++) {\\n-\\t\\t\\t\\tdouble diff = (boundaries[1][i]) - (boundaries[0][i]);\\n-\\t\\t\\t\\tres[i] = ((x[i]) - (boundaries[0][i])) \\\/ diff;\\n-\\t\\t\\t}\\n-\\t\\t\\treturn res;\\n-\\t\\t}\\n+\\t\\t\\t\\tdouble diff = \\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\n \\n \\n \\n \\n \\n-\\t\\tpublic double[] decode(final double[] x) {\\n-\\t\\t\\tif ((boundaries) == null)\\n-\\t\\t\\t\\treturn x;\\n-\\t\\t\\tdouble[] res = new double[x.length];\\n-\\t\\t\\tfor (int i = 0; i < (x.length); i++) {\\n-\\t\\t\\t\\tdouble diff = (boundaries[1][i]) - (boundaries[0][i]);\\n-\\t\\t\\t\\tres[i] = (diff * (x[i])) + (boundaries[0][i]);\\n-\\t\\t\\t}\\n-\\t\\t\\treturn res;\\n-\\t\\t}\\n \\n \\n \\n \\n \\n \\n-\\t\\tpublic double value(final double[] point) {\\n-\\t\\t\\tdouble value;\\n-\\t\\t\\tif (((boundaries) != null) && (isRepairMode)) {\\n-\\t\\t\\t\\tdouble[] repaired = repair(point);\\n-\\t\\t\\t\\tvalue = (org.apache.commons.math.optimization.direct.CMAESOptimizer.this.computeObjectiveValue(\\n-\\t\\t\\t\\tdecode(repaired))) + \\n-\\t\\t\\t\\t(penalty(point, repaired));\\n-\\t\\t\\t}else\\n-\\t\\t\\t\\tvalue = org.apache.commons.math.optimization.direct.CMAESOptimizer.this.computeObjectiveValue(\\n-\\t\\t\\t\\tdecode(point));\\n-\\t\\t\\treturn isMinimize ? value : -value;\\n+\\t\\t\\t\\t-(valueRange); \\t\\t\\t\\tres[i] = ((x[i]) - (boundaries[0][i])) \\\/ diff;} \\t\\t\\treturn res;} \\t\\tpublic double[] decode(final double[] x) { \\t\\t\\tif ((boundaries) == null) \\t\\t\\t\\treturn x; \\t\\t\\tdouble[] res = new double[x.length]; \\t\\t\\tfor (int i = 0; i < (x.length); i++) { \\t\\t\\t\\tdouble diff = (boundaries[1][i]) - (boundaries[0][i]); \\t\\t\\t\\tres[i] = (diff * (x[i])) + (boundaries[0][i]);} \\t\\t\\treturn res;} \\t\\tpublic double value(final double[] point) { \\t\\t\\tdouble value; \\t\\t\\tif (((boundaries) != null) && (isRepairMode)) { \\t\\t\\t\\tdouble[] repaired = repair(point); \\t\\t\\t\\tvalue = (org.apache.commons.math.optimization.direct.CMAESOptimizer.this.computeObjectiveValue(decode(repaired))) + (penalty(point, repaired));}else \\t\\t\\t\\tvalue = org.apache.commons.math.optimization.direct.CMAESOptimizer.this.computeObjectiveValue(decode(point)); \\t\\t\\treturn isMinimize ? value : -value;\\n \\t\\t}\\n \\n \\n\\n"}]}