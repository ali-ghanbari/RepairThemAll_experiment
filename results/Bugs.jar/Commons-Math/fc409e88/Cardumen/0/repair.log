cd /tmp/Cardumen_Bug_dot_jar_Commons-Math_fc409e88;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -Xmx4048m -cp /home/tdurieux/RepairThemAll/script/../libs/jtestex7.jar:/home/tdurieux/RepairThemAll/script/../repair_tools/astor.jar fr.inria.main.evolution.AstorMain \
	-mode cardumen \
	-location . \
	-id Commons-Math-fc409e88 \
	-failing org.apache.commons.math.util.MathUtilsTest \
	-jvm4testexecution /home/tdurieux/openjdk-1.7.0/bin/ \
	-jvm4evosuitetestexecution /home/tdurieux/openjdk-1.7.0/bin/ \
	-maxgen 1000000 \
	-maxtime 120 \
	-stopfirst true \
	-seed 0 \
	-scope local \
	-population 1 \
	-javacompliancelevel 7 \
	-srcjavafolder src/main/java \
	-srctestfolder src/test/java \
	-binjavafolder target/classes \
	-bintestfolder target/test-classes \
	-parameters x:x:maxCombinationVariableLimit:true:maxVarCombination:1000 \
	-dependencies /home/tdurieux/.m2/repository/junit/junit/4.8.2/junit-4.8.2.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
[INFO ] fr.inria.astor.core.setup.ProjectConfiguration.getVersionJDK(ProjectConfiguration.java:282) - Version of the JVM used: 1.7.0-u80-unofficial
[INFO ] fr.inria.main.AbstractMain.processArguments(AbstractMain.java:370) - Java version of the JDK used to run tests: 1.7.0-u80-unofficial
[INFO ] fr.inria.main.AbstractMain.processArguments(AbstractMain.java:371) - The compliance of the JVM is:  7
[INFO ] fr.inria.main.AbstractMain.processArguments(AbstractMain.java:645) - command line arguments: [-mode  cardumen  -location  .  -id  Commons-Math-fc409e88  -failing  org.apache.commons.math.util.MathUtilsTest  -jvm4testexecution  /home/tdurieux/openjdk-1.7.0/bin/  -jvm4evosuitetestexecution  /home/tdurieux/openjdk-1.7.0/bin/  -maxgen  1000000  -maxtime  120  -stopfirst  true  -seed  0  -scope  local  -population  1  -javacompliancelevel  7  -srcjavafolder  src/main/java  -srctestfolder  src/test/java  -binjavafolder  target/classes  -bintestfolder  target/test-classes  -parameters  x:x:maxCombinationVariableLimit:true:maxVarCombination:1000  -dependencies  /home/tdurieux/.m2/repository/junit/junit/4.8.2/junit-4.8.2.jar]
[INFO ] fr.inria.main.evolution.AstorMain.execute(AstorMain.java:216) - Running Astor on a JDK at /usr/lib/jvm/java-8-openjdk-amd64/jre
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:849) - Source folders: [/tmp/Cardumen_Bug_dot_jar_Commons-Math_fc409e88/./src/main/java]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:868) - Source Test folders: [/tmp/Cardumen_Bug_dot_jar_Commons-Math_fc409e88/./src/test/java]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.calculateSuspicious(GZoltarFaultLocalization.java:75) - -Executing Gzoltar classpath: /tmp/Cardumen_Bug_dot_jar_Commons-Math_fc409e88/./output_astor/AstorMain-Commons-Math-fc409e88//bin//default from 263 classes with test cases
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:149) - Gzoltar fault localization: min susp value parameter: 0.1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:169) - -gz-Adding classpath: [/tmp/Cardumen_Bug_dot_jar_Commons-Math_fc409e88/./output_astor/AstorMain-Commons-Math-fc409e88//bin//default, /home/tdurieux/.m2/repository/junit/junit/4.8.2/junit-4.8.2.jar]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:206) - Test failt: org.apache.commons.math.optimization.direct.CMAESOptimizerTest#testMaximize
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:206) - Test failt: org.apache.commons.math.util.FastMathTest#checkMissingFastMathClasses
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:218) - Gzoltar Test Result Total:2407, fails: 2, GZoltar suspicious 20283, with positive susp 1042
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:226) - nr test results 2407
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:271) - Gzoltar found: 618 with susp > 0.1, we consider: 618
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:689) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:781) - Creating model,  Code location from working folder: /tmp/Cardumen_Bug_dot_jar_Commons-Math_fc409e88/./src/main/java
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:65) - building model: /tmp/Cardumen_Bug_dot_jar_Commons-Math_fc409e88/./src/main/java, compliance level: 7
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:78) - Classpath for building SpoonModel [/home/tdurieux/.m2/repository/junit/junit/4.8.2/junit-4.8.2.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:693) - 
---- Initial suspicious size: 618
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:127) - Total suspicious from FL: 618,  1085
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:136) - Total ModPoint created: 1085
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:140) - Reducing Total ModPoint created to: 1000
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 1000, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.solutionsearch.spaces.ingredients.scopes.ExpressionTypeIngredientSpace.defineSpace(ExpressionTypeIngredientSpace.java:121) - Ingredient search space info : number keys 213 , number values 2491 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 4
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /tmp/Cardumen_Bug_dot_jar_Commons-Math_fc409e88/./output_astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /home/tdurieux/openjdk-1.7.0/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= r-expression
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= target/classes
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 194496
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ingredienttransformstrategy= name-probability-based
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:diff_type= relative
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= expression
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= src/test/java
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:failing= org.apache.commons.math.util.MathUtilsTest
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 7
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:x= x
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= Commons-Math-fc409e88
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= target/test-classes
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.7.0-u80-unofficial
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= gzoltar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= cardumen
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /home/tdurieux/openjdk-1.7.0/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= America/Los_Angeles
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /home/tdurieux/.m2/repository/junit/junit/4.8.2/junit-4.8.2.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= local
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= src/main/java
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= .
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ingredientstrategy= name-probability-based
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:40) - 
----Starting Solution Search
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.processCreatedVariant(AstorCoreEngine.java:436) - -Found Solution, child variant #14
[ERROR] fr.inria.astor.core.solutionsearch.AstorCoreEngine.validateReversedOriginalVariant(AstorCoreEngine.java:346) - Error variant :14 the model was not the same from the original after this generation
[ERROR] fr.inria.astor.core.solutionsearch.AstorCoreEngine.validateReversedOriginalVariant(AstorCoreEngine.java:364) - Undo Error: diff: 
/var/lib/oar/.batch_job_bashrc: line 5: /home/tdurieux/.bashrc: No such file or directory
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1,8 +1,4 @@
-public class CMAESOptimizer extends 
-org.apache.commons.math.optimization.direct.BaseAbstractScalarOptimizer<org.apache.commons.math.analysis.MultivariateRealFunction> implements 
-org.apache.commons.math.optimization.MultivariateRealOptimizer {
-
-
+public class CMAESOptimizer extends org.apache.commons.math.optimization.direct.BaseAbstractScalarOptimizer<org.apache.commons.math.analysis.MultivariateRealFunction> implements org.apache.commons.math.optimization.MultivariateRealOptimizer {
 	public static final int DEFAULT_CHECKFEASABLECOUNT = 0;
 
 	public static final double DEFAULT_STOPFITNESS = 0;
@@ -15,58 +11,24 @@
 
 	public static final org.apache.commons.math.random.RandomGenerator DEFAULT_RANDOMGENERATOR = new org.apache.commons.math.random.MersenneTwister();
 
-
-
-
-
-
-
-
-
 	private int lambda;
 
-
-
-
-
-
-
 	private boolean isActiveCMA;
 
-
-
-
-
 	private int checkFeasableCount;
 
-
-
-
 	private double[][] boundaries;
 
-
-
-
-
 	private double[] inputSigma;
 
 	private int dimension;
 
-
-
-
-
-
-
-
 	private int diagonalOnly = 0;
 
 	private boolean isMinimize = true;
 
 	private boolean generateStatistics = false;
 
-
-
 	private int maxIterations;
 
 	private double stopfitness;
@@ -79,8 +41,6 @@
 
 	private double stopTolHistFun;
 
-
-
 	private int mu;
 
 	private double logMu2;
@@ -89,8 +49,6 @@
 
 	private double mueff;
 
-
-
 	private double sigma;
 
 	private double cc;
@@ -109,8 +67,6 @@
 
 	private double ccovmuSep;
 
-
-
 	private org.apache.commons.math.linear.RealMatrix xmean;
 
 	private org.apache.commons.math.linear.RealMatrix pc;
@@ -133,15 +89,12 @@
 
 	private int iterations;
 
-
 	private double[] fitnessHistory;
 
 	private int historySize;
 
-
 	private org.apache.commons.math.random.RandomGenerator random;
 
-
 	private java.util.List<java.lang.Double> statisticsSigmaHistory = new java.util.ArrayList<java.lang.Double>();
 
 	private java.util.List<org.apache.commons.math.linear.RealMatrix> statisticsMeanHistory = new java.util.ArrayList<org.apache.commons.math.linear.RealMatrix>();
@@ -150,68 +103,19 @@
 
 	private java.util.List<org.apache.commons.math.linear.RealMatrix> statisticsDHistory = new java.util.ArrayList<org.apache.commons.math.linear.RealMatrix>();
 
-
-
-
 	public CMAESOptimizer() {
 		this(0);
 	}
 
-
-
-
-
 	public CMAESOptimizer(int lambda) {
-		this(lambda, null, null, org.apache.commons.math.optimization.direct.CMAESOptimizer.DEFAULT_MAXITERATIONS, org.apache.commons.math.optimization.direct.CMAESOptimizer.DEFAULT_STOPFITNESS, 
-		org.apache.commons.math.optimization.direct.CMAESOptimizer.DEFAULT_ISACTIVECMA, org.apache.commons.math.optimization.direct.CMAESOptimizer.DEFAULT_DIAGONALONLY, 
-		org.apache.commons.math.optimization.direct.CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT, org.apache.commons.math.optimization.direct.CMAESOptimizer.DEFAULT_RANDOMGENERATOR, false);
+		this(lambda, null, null, org.apache.commons.math.optimization.direct.CMAESOptimizer.DEFAULT_MAXITERATIONS, org.apache.commons.math.optimization.direct.CMAESOptimizer.DEFAULT_STOPFITNESS, org.apache.commons.math.optimization.direct.CMAESOptimizer.DEFAULT_ISACTIVECMA, org.apache.commons.math.optimization.direct.CMAESOptimizer.DEFAULT_DIAGONALONLY, org.apache.commons.math.optimization.direct.CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT, org.apache.commons.math.optimization.direct.CMAESOptimizer.DEFAULT_RANDOMGENERATOR, false);
 	}
 
-
-
-
-
-
-
-
-
-
-	public CMAESOptimizer(int lambda, double[] inputSigma, 
-	double[][] boundaries) {
-		this(lambda, inputSigma, boundaries, org.apache.commons.math.optimization.direct.CMAESOptimizer.DEFAULT_MAXITERATIONS, org.apache.commons.math.optimization.direct.CMAESOptimizer.DEFAULT_STOPFITNESS, 
-		org.apache.commons.math.optimization.direct.CMAESOptimizer.DEFAULT_ISACTIVECMA, org.apache.commons.math.optimization.direct.CMAESOptimizer.DEFAULT_DIAGONALONLY, 
-		org.apache.commons.math.optimization.direct.CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT, org.apache.commons.math.optimization.direct.CMAESOptimizer.DEFAULT_RANDOMGENERATOR, false);
+	public CMAESOptimizer(int lambda, double[] inputSigma, double[][] boundaries) {
+		this(lambda, inputSigma, boundaries, org.apache.commons.math.optimization.direct.CMAESOptimizer.DEFAULT_MAXITERATIONS, org.apache.commons.math.optimization.direct.CMAESOptimizer.DEFAULT_STOPFITNESS, org.apache.commons.math.optimization.direct.CMAESOptimizer.DEFAULT_ISACTIVECMA, org.apache.commons.math.optimization.direct.CMAESOptimizer.DEFAULT_DIAGONALONLY, org.apache.commons.math.optimization.direct.CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT, org.apache.commons.math.optimization.direct.CMAESOptimizer.DEFAULT_RANDOMGENERATOR, false);
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-	public CMAESOptimizer(int lambda, double[] inputSigma, 
-	double[][] boundaries, int maxIterations, double stopfitness, 
-	boolean isActiveCMA, int diagonalOnly, int checkFeasableCount, 
-	org.apache.commons.math.random.RandomGenerator random, boolean generateStatistics) {
+	public CMAESOptimizer(int lambda, double[] inputSigma, double[][] boundaries, int maxIterations, double stopfitness, boolean isActiveCMA, int diagonalOnly, int checkFeasableCount, org.apache.commons.math.random.RandomGenerator random, boolean generateStatistics) {
 		this.lambda = lambda;
 		this.inputSigma = (inputSigma == null) ? null : ((double[]) (inputSigma.clone()));
 		if (boundaries == null) {
@@ -220,8 +124,7 @@
 			final int len = boundaries.length;
 			this.boundaries = new double[len][];
 			for (int i = 0; i < len; i++) {
-				this.boundaries[i] = 
-				((boundaries[i]) == null) ? null : ((double[]) (boundaries[i].clone()));
+				this.boundaries[i] = ((boundaries[i]) == null) ? null : ((double[]) (boundaries[i].clone()));
 			}
 		}
 		this.maxIterations = maxIterations;
@@ -233,70 +136,47 @@
 		this.generateStatistics = generateStatistics;
 	}
 
-
-
-
 	public java.util.List<java.lang.Double> getStatisticsSigmaHistory() {
 		return statisticsSigmaHistory;
 	}
 
-
-
-
 	public java.util.List<org.apache.commons.math.linear.RealMatrix> getStatisticsMeanHistory() {
 		return statisticsMeanHistory;
 	}
 
-
-
-
 	public java.util.List<java.lang.Double> getStatisticsFitnessHistory() {
 		return statisticsFitnessHistory;
 	}
 
-
-
-
 	public java.util.List<org.apache.commons.math.linear.RealMatrix> getStatisticsDHistory() {
 		return statisticsDHistory;
 	}
 
-
 	@java.lang.Override
 	protected org.apache.commons.math.optimization.RealPointValuePair doOptimize() {
 		checkParameters();
-
 		isMinimize = getGoalType().equals(org.apache.commons.math.optimization.GoalType.MINIMIZE);
 		final org.apache.commons.math.optimization.direct.CMAESOptimizer.FitnessFunction fitfun = new org.apache.commons.math.optimization.direct.CMAESOptimizer.FitnessFunction();
 		final double[] guess = fitfun.encode(getStartPoint());
-
 		dimension = guess.length;
 		initializeCMA(guess);
 		iterations = 0;
 		double bestValue = fitfun.value(guess);
 		org.apache.commons.math.optimization.direct.CMAESOptimizer.push(fitnessHistory, bestValue);
-		org.apache.commons.math.optimization.RealPointValuePair optimum = new org.apache.commons.math.optimization.RealPointValuePair(getStartPoint(), 
-		(isMinimize ? bestValue : -bestValue));
+		org.apache.commons.math.optimization.RealPointValuePair optimum = new org.apache.commons.math.optimization.RealPointValuePair(getStartPoint(), (isMinimize ? bestValue : -bestValue));
 		org.apache.commons.math.optimization.RealPointValuePair lastResult = null;
-
-
-
-
 		generationLoop : for (iterations = 1; (iterations) <= (maxIterations); (iterations)++) {
-
 			org.apache.commons.math.linear.RealMatrix arz = randn1(dimension, lambda);
 			org.apache.commons.math.linear.RealMatrix arx = org.apache.commons.math.optimization.direct.CMAESOptimizer.zeros(dimension, lambda);
 			double[] fitness = new double[lambda];
-
 			for (int k = 0; k < (lambda); k++) {
 				org.apache.commons.math.linear.RealMatrix arxk = null;
 				for (int i = 0; i < ((checkFeasableCount) + 1); i++) {
 					if ((diagonalOnly) <= 0)
-						arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(
-						sigma));else
+						arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));
+					else
+						arxk = xmean.add(org.apache.commons.math.optimization.direct.CMAESOptimizer.times(diagD, arz.getColumnMatrix(k)).scalarMultiply(sigma));
 
-						arxk = xmean.add(org.apache.commons.math.optimization.direct.CMAESOptimizer.times(diagD, arz.getColumnMatrix(k)).scalarMultiply(
-						sigma));
 					if ((i >= (checkFeasableCount)) || (fitfun.isFeasible(arxk.getColumn(0))))
 						break;
 
@@ -309,9 +189,7 @@
 					break generationLoop;
 				}
 			}
-
 			int[] arindex = sortedIndices(fitness);
-
 			org.apache.commons.math.linear.RealMatrix xold = xmean;
 			org.apache.commons.math.linear.RealMatrix bestArx = org.apache.commons.math.optimization.direct.CMAESOptimizer.selectColumns(arx, org.apache.commons.math.util.MathUtils.copyOf(arindex, mu));
 			xmean = bestArx.multiply(weights);
@@ -319,8 +197,8 @@
 			org.apache.commons.math.linear.RealMatrix zmean = bestArz.multiply(weights);
 			boolean hsig = updateEvolutionPaths(zmean, xold);
 			if ((diagonalOnly) <= 0)
-				updateCovariance(hsig, bestArx, arz, arindex, xold);else
-
+				updateCovariance(hsig, bestArx, arz, arindex, xold);
+			else
 				updateCovarianceDiagonalOnly(hsig, bestArz, xold);
 
 			sigma *= java.lang.Math.exp(java.lang.Math.min(1.0, (((((normps) / (chiN)) - 1.0) * (cs)) / (damps))));
@@ -329,59 +207,55 @@
 			if (bestValue > bestFitness) {
 				bestValue = bestFitness;
 				lastResult = optimum;
-				optimum = new org.apache.commons.math.optimization.RealPointValuePair(
-				fitfun.decode(bestArx.getColumn(0)), 
-				(isMinimize ? bestFitness : -bestFitness));
+				optimum = new org.apache.commons.math.optimization.RealPointValuePair(fitfun.decode(bestArx.getColumn(0)), (isMinimize ? bestFitness : -bestFitness));
 				if (((getConvergenceChecker()) != null) && (lastResult != null)) {
-					if (getConvergenceChecker().converged(
-					iterations, optimum, lastResult))
+					if (getConvergenceChecker().converged(iterations, optimum, lastResult))
 						break generationLoop;
+
 				}
 			}
-
-
 			if ((stopfitness) != 0) {
 				if (bestFitness < (isMinimize ? stopfitness : -(stopfitness)))
 					break generationLoop;
+
 			}
 			double[] sqrtDiagC = org.apache.commons.math.optimization.direct.CMAESOptimizer.sqrt(diagC).getColumn(0);
 			double[] pcCol = pc.getColumn(0);
 			for (int i = 0; i < (dimension); i++) {
 				if (((sigma) * (java.lang.Math.max(java.lang.Math.abs(pcCol[i]), sqrtDiagC[i]))) > (stopTolX))
 					break;
+
 				if (i >= ((dimension) - 1))
 					break generationLoop;
+
 			}
 			for (int i = 0; i < (dimension); i++)
 				if (((sigma) * (sqrtDiagC[i])) > (stopTolUpX))
 					break generationLoop;
+
+
 			double historyBest = org.apache.commons.math.optimization.direct.CMAESOptimizer.min(fitnessHistory);
 			double historyWorst = org.apache.commons.math.optimization.direct.CMAESOptimizer.max(fitnessHistory);
-			if (((iterations) > 2) && (((java.lang.Math.max(historyWorst, worstFitness)) - 
-			(java.lang.Math.min(historyBest, bestFitness))) < (stopTolFun)))
+			if (((iterations) > 2) && (((java.lang.Math.max(historyWorst, worstFitness)) - (java.lang.Math.min(historyBest, bestFitness))) < (stopTolFun)))
 				break generationLoop;
-			if (((iterations) > (fitnessHistory.length)) && 
-			((historyWorst - historyBest) < (stopTolHistFun)))
+
+			if (((iterations) > (fitnessHistory.length)) && ((historyWorst - historyBest) < (stopTolHistFun)))
 				break generationLoop;
 
 			if (((org.apache.commons.math.optimization.direct.CMAESOptimizer.max(diagD)) / (org.apache.commons.math.optimization.direct.CMAESOptimizer.min(diagD))) > 1.0E7)
 				break generationLoop;
 
 			if ((getConvergenceChecker()) != null) {
-				org.apache.commons.math.optimization.RealPointValuePair current = 
-				new org.apache.commons.math.optimization.RealPointValuePair(bestArx.getColumn(0), 
-				(isMinimize ? bestFitness : -bestFitness));
-				if ((lastResult != null) && 
-				(getConvergenceChecker().converged(
-				iterations, current, lastResult)))
+				org.apache.commons.math.optimization.RealPointValuePair current = new org.apache.commons.math.optimization.RealPointValuePair(bestArx.getColumn(0), (isMinimize ? bestFitness : -bestFitness));
+				if ((lastResult != null) && (getConvergenceChecker().converged(iterations, current, lastResult)))
 					break generationLoop;
+
 				lastResult = current;
 			}
-
 			if (bestValue == (fitness[arindex[((int) (0.1 + ((lambda) / 4.0)))]]))
 				sigma = (sigma) * (java.lang.Math.exp((0.2 + ((cs) / (damps)))));
-			if (((iterations) > 2) && (((java.lang.Math.max(historyWorst, bestFitness)) - 
-			(java.lang.Math.min(historyBest, bestFitness))) == 0))
+
+			if (((iterations) > 2) && (((java.lang.Math.max(historyWorst, bestFitness)) - (java.lang.Math.min(historyBest, bestFitness))) == 0))
 				sigma = (sigma) * (java.lang.Math.exp((0.2 + ((cs) / (damps)))));
 
 			org.apache.commons.math.optimization.direct.CMAESOptimizer.push(fitnessHistory, bestFitness);
@@ -396,55 +270,44 @@
 		return optimum;
 	}
 
-
-
-
 	private void checkParameters() {
 		double[] init = getStartPoint();
 		if ((boundaries) != null) {
 			if ((boundaries.length) != 2)
-				throw new org.apache.commons.math.exception.MultiDimensionMismatchException(
-				new java.lang.Integer[]{ boundaries.length }, 
-				new java.lang.Integer[]{ 2 });
+				throw new org.apache.commons.math.exception.MultiDimensionMismatchException(new java.lang.Integer[]{ boundaries.length }, new java.lang.Integer[]{ 2 });
+
 			if (((boundaries[0]) == null) || ((boundaries[1]) == null))
 				throw new org.apache.commons.math.exception.NoDataException();
+
 			if ((boundaries[0].length) != (init.length))
-				throw new org.apache.commons.math.exception.MultiDimensionMismatchException(
-				new java.lang.Integer[]{ boundaries[0].length }, 
-				new java.lang.Integer[]{ init.length });
+				throw new org.apache.commons.math.exception.MultiDimensionMismatchException(new java.lang.Integer[]{ boundaries[0].length }, new java.lang.Integer[]{ init.length });
+
 			if ((boundaries[1].length) != (init.length))
-				throw new org.apache.commons.math.exception.MultiDimensionMismatchException(
-				new java.lang.Integer[]{ boundaries[1].length }, 
-				new java.lang.Integer[]{ init.length });
+				throw new org.apache.commons.math.exception.MultiDimensionMismatchException(new java.lang.Integer[]{ boundaries[1].length }, new java.lang.Integer[]{ init.length });
+
 			for (int i = 0; i < (init.length); i++) {
 				if (((boundaries[0][i]) > (init[i])) || ((boundaries[1][i]) < (init[i])))
-					throw new org.apache.commons.math.exception.OutOfRangeException(init[i], boundaries[0][i], 
-					boundaries[1][i]);
+					throw new org.apache.commons.math.exception.OutOfRangeException(init[i], boundaries[0][i], boundaries[1][i]);
+
 			}
 		}
 		if ((inputSigma) != null) {
 			if ((inputSigma.length) != (init.length))
-				throw new org.apache.commons.math.exception.MultiDimensionMismatchException(
-				new java.lang.Integer[]{ inputSigma.length }, 
-				new java.lang.Integer[]{ init.length });
+				throw new org.apache.commons.math.exception.MultiDimensionMismatchException(new java.lang.Integer[]{ inputSigma.length }, new java.lang.Integer[]{ init.length });
+
 			for (int i = 0; i < (init.length); i++) {
 				if ((inputSigma[i]) < 0)
 					throw new org.apache.commons.math.exception.NotPositiveException(inputSigma[i]);
+
 				if ((boundaries) != null) {
 					if ((inputSigma[i]) > 1.0)
 						throw new org.apache.commons.math.exception.OutOfRangeException(inputSigma[i], 0, 1.0);
+
 				}
 			}
 		}
 	}
 
-
-
-
-
-
-
-
 	private void initializeCMA(double[] guess) {
 		if ((lambda) <= 0)
 			lambda = 4 + ((int) (3.0 * (java.lang.Math.log(dimension))));
@@ -452,16 +315,13 @@
 		double[][] sigmaArray = new double[guess.length][1];
 		for (int i = 0; i < (guess.length); i++)
 			sigmaArray[i][0] = ((inputSigma) != null) ? inputSigma[i] : 0.3;
+
 		org.apache.commons.math.linear.RealMatrix insigma = new org.apache.commons.math.linear.Array2DRowRealMatrix(sigmaArray, false);
 		sigma = org.apache.commons.math.optimization.direct.CMAESOptimizer.max(insigma);
-
-
 		stopTolUpX = 1000.0 * (org.apache.commons.math.optimization.direct.CMAESOptimizer.max(insigma));
 		stopTolX = 1.0E-11 * (org.apache.commons.math.optimization.direct.CMAESOptimizer.max(insigma));
 		stopTolFun = 1.0E-12;
 		stopTolHistFun = 1.0E-13;
-
-
 		mu = (lambda) / 2;
 		logMu2 = java.lang.Math.log(((mu) + 0.5));
 		weights = org.apache.commons.math.optimization.direct.CMAESOptimizer.log(org.apache.commons.math.optimization.direct.CMAESOptimizer.sequence(1, mu, 1)).scalarMultiply((-1.0)).scalarAdd(logMu2);
@@ -474,32 +334,20 @@
 		}
 		weights = weights.scalarMultiply((1.0 / sumw));
 		mueff = (sumw * sumw) / sumwq;
-
-
-		cc = (4.0 + ((mueff) / (dimension))) / 
-		(((dimension) + 4.0) + ((2.0 * (mueff)) / (dimension)));
+		cc = (4.0 + ((mueff) / (dimension))) / (((dimension) + 4.0) + ((2.0 * (mueff)) / (dimension)));
 		cs = ((mueff) + 2.0) / (((dimension) + (mueff)) + 3.0);
-		damps = ((1.0 + (2.0 * (java.lang.Math.max(0, ((java.lang.Math.sqrt((((mueff) - 1.0) / 
-		((dimension) + 1.0)))) - 1.0))))) * 
-		(java.lang.Math.max(0.3, (1.0 - ((dimension) / 
-		(1.0E-6 + (java.lang.Math.min(maxIterations, ((getMaxEvaluations()) / 
-		(lambda)))))))))) + (cs);
+		damps = ((1.0 + (2.0 * (java.lang.Math.max(0, ((java.lang.Math.sqrt((((mueff) - 1.0) / ((dimension) + 1.0)))) - 1.0))))) * (java.lang.Math.max(0.3, (1.0 - ((dimension) / (1.0E-6 + (java.lang.Math.min(maxIterations, ((getMaxEvaluations()) / (lambda)))))))))) + (cs);
 		ccov1 = 2.0 / ((((dimension) + 1.3) * ((dimension) + 1.3)) + (mueff));
-		ccovmu = java.lang.Math.min((1 - (ccov1)), ((2.0 * (((mueff) - 2.0) + (1.0 / (mueff)))) / 
-		((((dimension) + 2.0) * ((dimension) + 2.0)) + (mueff))));
+		ccovmu = java.lang.Math.min((1 - (ccov1)), ((2.0 * (((mueff) - 2.0) + (1.0 / (mueff)))) / ((((dimension) + 2.0) * ((dimension) + 2.0)) + (mueff))));
 		ccov1Sep = java.lang.Math.min(1, (((ccov1) * ((dimension) + 1.5)) / 3.0));
 		ccovmuSep = java.lang.Math.min((1 - (ccov1)), (((ccovmu) * ((dimension) + 1.5)) / 3.0));
-		chiN = (java.lang.Math.sqrt(dimension)) * 
-		((1.0 - (1.0 / (4.0 * (dimension)))) + (1 / ((21.0 * (dimension)) * (dimension))));
-
+		chiN = (java.lang.Math.sqrt(dimension)) * ((1.0 - (1.0 / (4.0 * (dimension)))) + (1 / ((21.0 * (dimension)) * (dimension))));
 		xmean = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(guess);
-
 		diagD = insigma.scalarMultiply((1.0 / (sigma)));
 		diagC = org.apache.commons.math.optimization.direct.CMAESOptimizer.square(diagD);
 		pc = org.apache.commons.math.optimization.direct.CMAESOptimizer.zeros(dimension, 1);
 		ps = org.apache.commons.math.optimization.direct.CMAESOptimizer.zeros(dimension, 1);
 		normps = ps.getFrobeniusNorm();
-
 		B = org.apache.commons.math.optimization.direct.CMAESOptimizer.eye(dimension, dimension);
 		D = org.apache.commons.math.optimization.direct.CMAESOptimizer.ones(dimension, 1);
 		BD = org.apache.commons.math.optimization.direct.CMAESOptimizer.times(B, org.apache.commons.math.optimization.direct.CMAESOptimizer.repmat(diagD.transpose(), dimension, 1));
@@ -508,58 +356,26 @@
 		fitnessHistory = new double[historySize];
 		for (int i = 0; i < (historySize); i++)
 			fitnessHistory[i] = java.lang.Double.MAX_VALUE;
-	}
-
-
-
-
-
-
-
-
-
 
+	}
 
 	private boolean updateEvolutionPaths(org.apache.commons.math.linear.RealMatrix zmean, org.apache.commons.math.linear.RealMatrix xold) {
-		ps = ps.scalarMultiply((1.0 - (cs))).add(
-		B.multiply(zmean).scalarMultiply(
-		java.lang.Math.sqrt((((cs) * (2.0 - (cs))) * (mueff)))));
+		ps = ps.scalarMultiply((1.0 - (cs))).add(B.multiply(zmean).scalarMultiply(java.lang.Math.sqrt((((cs) * (2.0 - (cs))) * (mueff)))));
 		normps = ps.getFrobeniusNorm();
-		boolean hsig = (((normps) / 
-		(java.lang.Math.sqrt((1.0 - (java.lang.Math.pow((1.0 - (cs)), (2.0 * (iterations)))))))) / 
-		(chiN)) < (1.4 + (2.0 / ((dimension) + 1.0)));
+		boolean hsig = (((normps) / (java.lang.Math.sqrt((1.0 - (java.lang.Math.pow((1.0 - (cs)), (2.0 * (iterations)))))))) / (chiN)) < (1.4 + (2.0 / ((dimension) + 1.0)));
 		pc = pc.scalarMultiply((1.0 - (cc)));
 		if (hsig)
-			pc = pc.add(xmean.subtract(xold).scalarMultiply(
-			((java.lang.Math.sqrt((((cc) * (2.0 - (cc))) * (mueff)))) / (sigma))));
+			pc = pc.add(xmean.subtract(xold).scalarMultiply(((java.lang.Math.sqrt((((cc) * (2.0 - (cc))) * (mueff)))) / (sigma))));
+
 		return hsig;
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-	private void updateCovarianceDiagonalOnly(boolean hsig, final org.apache.commons.math.linear.RealMatrix bestArz, final 
-	org.apache.commons.math.linear.RealMatrix xold) {
-
+	private void updateCovarianceDiagonalOnly(boolean hsig, final org.apache.commons.math.linear.RealMatrix bestArz, final org.apache.commons.math.linear.RealMatrix xold) {
 		double oldFac = (hsig) ? 0 : ((ccov1Sep) * (cc)) * (2.0 - (cc));
 		oldFac += (1.0 - (ccov1Sep)) - (ccovmuSep);
-		diagC = diagC.scalarMultiply(oldFac).add(
-
-		org.apache.commons.math.optimization.direct.CMAESOptimizer.square(pc).scalarMultiply(ccov1Sep)).add(
-
-		org.apache.commons.math.optimization.direct.CMAESOptimizer.times(diagC, org.apache.commons.math.optimization.direct.CMAESOptimizer.square(bestArz).multiply(weights)).scalarMultiply(
-		ccovmuSep));
+		diagC = diagC.scalarMultiply(oldFac).add(org.apache.commons.math.optimization.direct.CMAESOptimizer.square(pc).scalarMultiply(ccov1Sep)).add(org.apache.commons.math.optimization.direct.CMAESOptimizer.times(diagC, org.apache.commons.math.optimization.direct.CMAESOptimizer.square(bestArz).multiply(weights)).scalarMultiply(ccovmuSep));
 		diagD = org.apache.commons.math.optimization.direct.CMAESOptimizer.sqrt(diagC);
 		if (((diagonalOnly) > 1) && ((iterations) > (diagonalOnly))) {
-
 			diagonalOnly = 0;
 			B = org.apache.commons.math.optimization.direct.CMAESOptimizer.eye(dimension, dimension);
 			BD = org.apache.commons.math.optimization.direct.CMAESOptimizer.diag(diagD);
@@ -567,46 +383,19 @@
 		}
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-	private void updateCovariance(boolean hsig, final org.apache.commons.math.linear.RealMatrix bestArx, final 
-	org.apache.commons.math.linear.RealMatrix arz, final int[] arindex, final org.apache.commons.math.linear.RealMatrix xold) {
+	private void updateCovariance(boolean hsig, final org.apache.commons.math.linear.RealMatrix bestArx, final org.apache.commons.math.linear.RealMatrix arz, final int[] arindex, final org.apache.commons.math.linear.RealMatrix xold) {
 		double negccov = 0;
 		if (((ccov1) + (ccovmu)) > 0) {
-			org.apache.commons.math.linear.RealMatrix arpos = bestArx.subtract(org.apache.commons.math.optimization.direct.CMAESOptimizer.repmat(xold, 1, mu)).scalarMultiply(
-			(1.0 / (sigma)));
-			org.apache.commons.math.linear.RealMatrix roneu = pc.multiply(pc.transpose()).scalarMultiply(
-			ccov1);
-
+			org.apache.commons.math.linear.RealMatrix arpos = bestArx.subtract(org.apache.commons.math.optimization.direct.CMAESOptimizer.repmat(xold, 1, mu)).scalarMultiply((1.0 / (sigma)));
+			org.apache.commons.math.linear.RealMatrix roneu = pc.multiply(pc.transpose()).scalarMultiply(ccov1);
 			double oldFac = (hsig) ? 0 : ((ccov1) * (cc)) * (2.0 - (cc));
 			oldFac += (1.0 - (ccov1)) - (ccovmu);
 			if (isActiveCMA) {
-
-				negccov = (((1.0 - (ccovmu)) * 0.25) * (mueff)) / 
-				((java.lang.Math.pow(((dimension) + 2.0), 1.5)) + (2.0 * (mueff)));
+				negccov = (((1.0 - (ccovmu)) * 0.25) * (mueff)) / ((java.lang.Math.pow(((dimension) + 2.0), 1.5)) + (2.0 * (mueff)));
 				double negminresidualvariance = 0.66;
-
-
 				double negalphaold = 0.5;
-
-
 				int[] arReverseIndex = org.apache.commons.math.optimization.direct.CMAESOptimizer.reverse(arindex);
-				org.apache.commons.math.linear.RealMatrix arzneg = 
-				org.apache.commons.math.optimization.direct.CMAESOptimizer.selectColumns(arz, org.apache.commons.math.util.MathUtils.copyOf(arReverseIndex, mu));
+				org.apache.commons.math.linear.RealMatrix arzneg = org.apache.commons.math.optimization.direct.CMAESOptimizer.selectColumns(arz, org.apache.commons.math.util.MathUtils.copyOf(arReverseIndex, mu));
 				org.apache.commons.math.linear.RealMatrix arnorms = org.apache.commons.math.optimization.direct.CMAESOptimizer.sqrt(org.apache.commons.math.optimization.direct.CMAESOptimizer.sumRows(org.apache.commons.math.optimization.direct.CMAESOptimizer.square(arzneg)));
 				int[] idxnorms = sortedIndices(arnorms.getRow(0));
 				org.apache.commons.math.linear.RealMatrix arnormsSorted = org.apache.commons.math.optimization.direct.CMAESOptimizer.selectColumns(arnorms, idxnorms);
@@ -615,53 +404,25 @@
 				arnorms = org.apache.commons.math.optimization.direct.CMAESOptimizer.divide(arnormsReverse, arnormsSorted);
 				int[] idxInv = org.apache.commons.math.optimization.direct.CMAESOptimizer.inverse(idxnorms);
 				org.apache.commons.math.linear.RealMatrix arnormsInv = org.apache.commons.math.optimization.direct.CMAESOptimizer.selectColumns(arnorms, idxInv);
-
-				double negcovMax = (1.0 - negminresidualvariance) / 
-				(org.apache.commons.math.optimization.direct.CMAESOptimizer.square(arnormsInv).multiply(weights).getEntry(0, 0));
+				double negcovMax = (1.0 - negminresidualvariance) / (org.apache.commons.math.optimization.direct.CMAESOptimizer.square(arnormsInv).multiply(weights).getEntry(0, 0));
 				if (negccov > negcovMax)
 					negccov = negcovMax;
+
 				arzneg = org.apache.commons.math.optimization.direct.CMAESOptimizer.times(arzneg, org.apache.commons.math.optimization.direct.CMAESOptimizer.repmat(arnormsInv, dimension, 1));
 				org.apache.commons.math.linear.RealMatrix artmp = BD.multiply(arzneg);
-				org.apache.commons.math.linear.RealMatrix Cneg = artmp.multiply(org.apache.commons.math.optimization.direct.CMAESOptimizer.diag(weights)).multiply(
-				artmp.transpose());
+				org.apache.commons.math.linear.RealMatrix Cneg = artmp.multiply(org.apache.commons.math.optimization.direct.CMAESOptimizer.diag(weights)).multiply(artmp.transpose());
 				oldFac += negalphaold * negccov;
-				C = C.scalarMultiply(oldFac).add(
-
-				roneu).add(
-
-				arpos.scalarMultiply(
-
-				((ccovmu) + ((1.0 - negalphaold) * negccov))).multiply(
-
-				org.apache.commons.math.optimization.direct.CMAESOptimizer.times(org.apache.commons.math.optimization.direct.CMAESOptimizer.repmat(weights, 1, dimension), 
-				arpos.transpose()))).subtract(
-				Cneg.scalarMultiply(negccov));
+				C = C.scalarMultiply(oldFac).add(roneu).add(arpos.scalarMultiply(((ccovmu) + ((1.0 - negalphaold) * negccov))).multiply(org.apache.commons.math.optimization.direct.CMAESOptimizer.times(org.apache.commons.math.optimization.direct.CMAESOptimizer.repmat(weights, 1, dimension), arpos.transpose()))).subtract(Cneg.scalarMultiply(negccov));
 			}else {
-
-				C = C.scalarMultiply(oldFac).add(
-				roneu).add(
-
-				arpos.scalarMultiply(ccovmu).multiply(
-
-				org.apache.commons.math.optimization.direct.CMAESOptimizer.times(org.apache.commons.math.optimization.direct.CMAESOptimizer.repmat(weights, 1, dimension), 
-				arpos.transpose())));
+				C = C.scalarMultiply(oldFac).add(roneu).add(arpos.scalarMultiply(ccovmu).multiply(org.apache.commons.math.optimization.direct.CMAESOptimizer.times(org.apache.commons.math.optimization.direct.CMAESOptimizer.repmat(weights, 1, dimension), arpos.transpose())));
 			}
 		}
 		updateBD(negccov);
 	}
 
-
-
-
-
-
-
 	private void updateBD(double negccov) {
-		if (((((ccov1) + (ccovmu)) + negccov) > 0) && 
-		((((((iterations) % 1.0) / (((ccov1) + (ccovmu)) + negccov)) / (dimension)) / 10.0) < 1.0)) {
-
+		if (((((ccov1) + (ccovmu)) + negccov) > 0) && ((((((iterations) % 1.0) / (((ccov1) + (ccovmu)) + negccov)) / (dimension)) / 10.0) < 1.0)) {
 			C = org.apache.commons.math.optimization.direct.CMAESOptimizer.triu(C, 0).add(org.apache.commons.math.optimization.direct.CMAESOptimizer.triu(C, 1).transpose());
-
 			org.apache.commons.math.linear.EigenDecomposition eig = new org.apache.commons.math.linear.EigenDecompositionImpl(C, 1.0);
 			B = eig.getV();
 			D = eig.getD();
@@ -670,6 +431,8 @@
 				for (int i = 0; i < (dimension); i++)
 					if ((diagD.getEntry(i, 0)) < 0)
 						diagD.setEntry(i, 0, 0.0);
+
+
 				double tfac = (org.apache.commons.math.optimization.direct.CMAESOptimizer.max(diagD)) / 1.0E14;
 				C = C.add(org.apache.commons.math.optimization.direct.CMAESOptimizer.eye(dimension, dimension).scalarMultiply(tfac));
 				diagD = diagD.add(org.apache.commons.math.optimization.direct.CMAESOptimizer.ones(dimension, 1).scalarMultiply(tfac));
@@ -685,96 +448,55 @@
 		}
 	}
 
-
-
-
-
-
-
-
-
 	private static void push(double[] vals, double val) {
 		for (int i = (vals.length) - 1; i > 0; i--)
 			vals[i] = vals[(i - 1)];
+
 		vals[0] = val;
 	}
 
-
-
-
-
-
-
-
 	private int[] sortedIndices(final double[] doubles) {
 		org.apache.commons.math.optimization.direct.CMAESOptimizer.DoubleIndex[] dis = new org.apache.commons.math.optimization.direct.CMAESOptimizer.DoubleIndex[doubles.length];
 		for (int i = 0; i < (doubles.length); i++)
 			dis[i] = new org.apache.commons.math.optimization.direct.CMAESOptimizer.DoubleIndex(doubles[i], i);
+
 		java.util.Arrays.sort(dis);
 		int[] indices = new int[doubles.length];
 		for (int i = 0; i < (doubles.length); i++)
 			indices[i] = dis[i].index;
+
 		return indices;
 	}
 
-
-
-
-
 	private static class DoubleIndex implements java.lang.Comparable<org.apache.commons.math.optimization.direct.CMAESOptimizer.DoubleIndex> {
-
-
 		private double value;
 
 		private int index;
 
-
-
-
-
-
-
 		DoubleIndex(double value, int index) {
 			this.value = value;
 			this.index = index;
 		}
 
-
 		public int compareTo(org.apache.commons.math.optimization.direct.CMAESOptimizer.DoubleIndex o) {
 			return java.lang.Double.compare(value, o.value);
 		}
 	}
 
-
-
-
-
-
 	private class FitnessFunction {
-
-
 		private double valueRange;
 
-
-
-
 		private boolean isRepairMode;
 
-
-
 		public FitnessFunction() {
 			valueRange = 1.0;
 			isRepairMode = true;
 		}
 
-
-
-
-
-
 		public double[] encode(final double[] x) {
 			if ((boundaries) == null)
 				return x;
+
 			double[] res = new double[x.length];
 			for (int i = 0; i < (x.length); i++) {
 				double diff = (boundaries[1][i]) - (boundaries[0][i]);
@@ -783,14 +505,10 @@
 			return res;
 		}
 
-
-
-
-
-
 		public double[] decode(final double[] x) {
 			if ((boundaries) == null)
 				return x;
+
 			double[] res = new double[x.length];
 			for (int i = 0; i < (x.length); i++) {
 				double diff = (boundaries[1][i]) - (boundaries[0][i]);
@@ -799,74 +517,52 @@
 			return res;
 		}
 
-
-
-
-
-
 		public double value(final double[] point) {
 			double value;
 			if (((boundaries) != null) && (isRepairMode)) {
 				double[] repaired = repair(point);
-				value = (org.apache.commons.math.optimization.direct.CMAESOptimizer.this.computeObjectiveValue(
-				decode(repaired))) + 
-				(penalty(point, repaired));
+				value = (org.apache.commons.math.optimization.direct.CMAESOptimizer.this.computeObjectiveValue(decode(repaired))) + (penalty(point, repaired));
 			}else
-				value = org.apache.commons.math.optimization.direct.CMAESOptimizer.this.computeObjectiveValue(
-				decode(point));
+				value = org.apache.commons.math.optimization.direct.CMAESOptimizer.this.computeObjectiveValue(decode(point));
+
 			return isMinimize ? value : -value;
 		}
 
-
-
-
-
-
 		public boolean isFeasible(final double[] x) {
 			if ((boundaries) == null)
 				return true;
+
 			for (int i = 0; i < (x.length); i++) {
 				if ((x[i]) < 0)
 					return false;
+
 				if ((x[i]) > 1.0)
 					return false;
+
 			}
 			return true;
 		}
 
-
-
-
-
 		public void setValueRange(double valueRange) {
 			this.valueRange = valueRange;
 		}
 
-
-
-
-
-
 		private double[] repair(final double[] x) {
 			double[] repaired = new double[x.length];
 			for (int i = 0; i < (x.length); i++) {
 				if ((x[i]) < 0)
-					repaired[i] = 0;else
+					repaired[i] = 0;
+				else
 					if ((x[i]) > 1.0)
-						repaired[i] = 1.0;else
-
+						repaired[i] = 1.0;
+					else
 						repaired[i] = x[i];
+
+
 			}
 			return repaired;
 		}
 
-
-
-
-
-
-
-
 		private double penalty(final double[] x, final double[] repaired) {
 			double penalty = 0;
 			for (int i = 0; i < (x.length); i++) {
@@ -877,37 +573,25 @@
 		}
 	}
 
-
-
-
-
-
-
-
 	private static org.apache.commons.math.linear.RealMatrix log(final org.apache.commons.math.linear.RealMatrix m) {
 		double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
 		for (int r = 0; r < (m.getRowDimension()); r++)
 			for (int c = 0; c < (m.getColumnDimension()); c++)
 				d[r][c] = java.lang.Math.log(m.getEntry(r, c));
-		return new org.apache.commons.math.linear.Array2DRowRealMatrix(d, false);
-	}
-
-
-
 
 
+		return new org.apache.commons.math.linear.Array2DRowRealMatrix(d, false);
+	}
 
 	private static org.apache.commons.math.linear.RealMatrix sqrt(final org.apache.commons.math.linear.RealMatrix m) {
 		double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
 		for (int r = 0; r < (m.getRowDimension()); r++)
 			for (int c = 0; c < (m.getColumnDimension()); c++)
 				d[r][c] = java.lang.Math.sqrt(m.getEntry(r, c));
-		return new org.apache.commons.math.linear.Array2DRowRealMatrix(d, false);
-	}
-
-
 
 
+		return new org.apache.commons.math.linear.Array2DRowRealMatrix(d, false);
+	}
 
 	private static org.apache.commons.math.linear.RealMatrix square(final org.apache.commons.math.linear.RealMatrix m) {
 		double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
@@ -916,69 +600,49 @@
 				double e = m.getEntry(r, c);
 				d[r][c] = e * e;
 			}
+
 		return new org.apache.commons.math.linear.Array2DRowRealMatrix(d, false);
 	}
 
-
-
-
-
-
-
-
 	private static org.apache.commons.math.linear.RealMatrix times(final org.apache.commons.math.linear.RealMatrix m, final org.apache.commons.math.linear.RealMatrix n) {
 		double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
 		for (int r = 0; r < (m.getRowDimension()); r++)
 			for (int c = 0; c < (m.getColumnDimension()); c++)
 				d[r][c] = (m.getEntry(r, c)) * (n.getEntry(r, c));
-		return new org.apache.commons.math.linear.Array2DRowRealMatrix(d, false);
-	}
-
-
-
-
-
 
 
+		return new org.apache.commons.math.linear.Array2DRowRealMatrix(d, false);
+	}
 
 	private static org.apache.commons.math.linear.RealMatrix divide(final org.apache.commons.math.linear.RealMatrix m, final org.apache.commons.math.linear.RealMatrix n) {
 		double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
 		for (int r = 0; r < (m.getRowDimension()); r++)
 			for (int c = 0; c < (m.getColumnDimension()); c++)
 				d[r][c] = (m.getEntry(r, c)) / (n.getEntry(r, c));
-		return new org.apache.commons.math.linear.Array2DRowRealMatrix(d, false);
-	}
-
-
-
 
 
+		return new org.apache.commons.math.linear.Array2DRowRealMatrix(d, false);
+	}
 
 	private static org.apache.commons.math.linear.RealMatrix selectColumns(final org.apache.commons.math.linear.RealMatrix m, final int[] cols) {
 		double[][] d = new double[m.getRowDimension()][cols.length];
 		for (int r = 0; r < (m.getRowDimension()); r++)
 			for (int c = 0; c < (cols.length); c++)
 				d[r][c] = m.getEntry(r, cols[c]);
-		return new org.apache.commons.math.linear.Array2DRowRealMatrix(d, false);
-	}
-
-
-
 
 
+		return new org.apache.commons.math.linear.Array2DRowRealMatrix(d, false);
+	}
 
 	private static org.apache.commons.math.linear.RealMatrix triu(final org.apache.commons.math.linear.RealMatrix m, int k) {
 		double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
 		for (int r = 0; r < (m.getRowDimension()); r++)
 			for (int c = 0; c < (m.getColumnDimension()); c++)
 				d[r][c] = (r <= (c - k)) ? m.getEntry(r, c) : 0;
-		return new org.apache.commons.math.linear.Array2DRowRealMatrix(d, false);
-	}
-
-
-
 
 
+		return new org.apache.commons.math.linear.Array2DRowRealMatrix(d, false);
+	}
 
 	private static org.apache.commons.math.linear.RealMatrix sumRows(final org.apache.commons.math.linear.RealMatrix m) {
 		double[][] d = new double[1][m.getColumnDimension()];
@@ -986,97 +650,56 @@
 			double sum = 0;
 			for (int r = 0; r < (m.getRowDimension()); r++)
 				sum += m.getEntry(r, c);
+
 			d[0][c] = sum;
 		}
 		return new org.apache.commons.math.linear.Array2DRowRealMatrix(d, false);
 	}
 
-
-
-
-
-
-
 	private static org.apache.commons.math.linear.RealMatrix diag(final org.apache.commons.math.linear.RealMatrix m) {
 		if ((m.getColumnDimension()) == 1) {
 			double[][] d = new double[m.getRowDimension()][m.getRowDimension()];
 			for (int i = 0; i < (m.getRowDimension()); i++)
 				d[i][i] = m.getEntry(i, 0);
+
 			return new org.apache.commons.math.linear.Array2DRowRealMatrix(d, false);
 		}else {
 			double[][] d = new double[m.getRowDimension()][1];
 			for (int i = 0; i < (m.getColumnDimension()); i++)
 				d[i][0] = m.getEntry(i, i);
+
 			return new org.apache.commons.math.linear.Array2DRowRealMatrix(d, false);
 		}
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
 	private static void copyColumn(final org.apache.commons.math.linear.RealMatrix m1, int col1, org.apache.commons.math.linear.RealMatrix m2, int col2) {
 		for (int i = 0; i < (m1.getRowDimension()); i++)
 			m2.setEntry(i, col2, m1.getEntry(i, col1));
-	}
-
-
-
-
-
-
 
+	}
 
 	private static org.apache.commons.math.linear.RealMatrix ones(int n, int m) {
 		double[][] d = new double[n][m];
 		for (int r = 0; r < n; r++)
 			java.util.Arrays.fill(d[r], 1.0);
+
 		return new org.apache.commons.math.linear.Array2DRowRealMatrix(d, false);
 	}
 
-
-
-
-
-
-
-
 	private static org.apache.commons.math.linear.RealMatrix eye(int n, int m) {
 		double[][] d = new double[n][m];
 		for (int r = 0; r < n; r++)
 			if (r < m)
 				d[r][r] = 1;
-		return new org.apache.commons.math.linear.Array2DRowRealMatrix(d, false);
-	}
-
-
-
-
-
 
 
+		return new org.apache.commons.math.linear.Array2DRowRealMatrix(d, false);
+	}
 
 	private static org.apache.commons.math.linear.RealMatrix zeros(int n, int m) {
 		return new org.apache.commons.math.linear.Array2DRowRealMatrix(n, m);
 	}
 
-
-
-
-
-
-
-
-
-
 	private static org.apache.commons.math.linear.RealMatrix repmat(final org.apache.commons.math.linear.RealMatrix mat, int n, int m) {
 		int rd = mat.getRowDimension();
 		int cd = mat.getColumnDimension();
@@ -1084,17 +707,10 @@
 		for (int r = 0; r < (n * rd); r++)
 			for (int c = 0; c < (m * cd); c++)
 				d[r][c] = mat.getEntry((r % rd), (c % cd));
-		return new org.apache.commons.math.linear.Array2DRowRealMatrix(d, false);
-	}
-
-
-
-
-
-
-
 
 
+		return new org.apache.commons.math.linear.Array2DRowRealMatrix(d, false);
+	}
 
 	private static org.apache.commons.math.linear.RealMatrix sequence(double start, double end, double step) {
 		int size = ((int) (((end - start) / step) + 1));
@@ -1107,11 +723,6 @@
 		return new org.apache.commons.math.linear.Array2DRowRealMatrix(d, false);
 	}
 
-
-
-
-
-
 	private static double max(final org.apache.commons.math.linear.RealMatrix m) {
 		double max = -(java.lang.Double.MAX_VALUE);
 		for (int r = 0; r < (m.getRowDimension()); r++)
@@ -1119,15 +730,12 @@
 				double e = m.getEntry(r, c);
 				if (max < e)
 					max = e;
+
 			}
+
 		return max;
 	}
 
-
-
-
-
-
 	private static double min(final org.apache.commons.math.linear.RealMatrix m) {
 		double min = java.lang.Double.MAX_VALUE;
 		for (int r = 0; r < (m.getRowDimension()); r++)
@@ -1135,84 +743,63 @@
 				double e = m.getEntry(r, c);
 				if (min > e)
 					min = e;
+
 			}
+
 		return min;
 	}
 
-
-
-
-
-
 	private static double max(final double[] m) {
 		double max = -(java.lang.Double.MAX_VALUE);
 		for (int r = 0; r < (m.length); r++)
 			if (max < (m[r]))
 				max = m[r];
-		return max;
-	}
-
-
-
 
 
+		return max;
+	}
 
 	private static double min(final double[] m) {
 		double min = java.lang.Double.MAX_VALUE;
 		for (int r = 0; r < (m.length); r++)
 			if (min > (m[r]))
 				min = m[r];
-		return min;
-	}
-
-
-
 
 
+		return min;
+	}
 
 	private static int[] inverse(final int[] indices) {
 		int[] inverse = new int[indices.length];
 		for (int i = 0; i < (indices.length); i++)
 			inverse[indices[i]] = i;
+
 		return inverse;
 	}
 
-
-
-
-
-
 	private static int[] reverse(final int[] indices) {
 		int[] reverse = new int[indices.length];
 		for (int i = 0; i < (indices.length); i++)
 			reverse[i] = indices[(((indices.length) - i) - 1)];
+
 		return reverse;
 	}
 
-
-
-
-
-
 	private double[] randn(int size) {
 		double[] randn = new double[size];
 		for (int i = 0; i < size; i++)
 			randn[i] = random.nextGaussian();
+
 		return randn;
 	}
 
-
-
-
-
-
-
-
 	private org.apache.commons.math.linear.RealMatrix randn1(int size, int popSize) {
 		double[][] d = new double[size][popSize];
 		for (int r = 0; r < size; r++)
 			for (int c = 0; c < popSize; c++)
 				d[r][c] = random.nextGaussian();
+
+
 		return new org.apache.commons.math.linear.Array2DRowRealMatrix(d, false);
 	}
 }
\ No newline at end of file

[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:168) - Time Repair Loop (s): 299.219
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:170) - generationsexecuted: 7
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:234) - 
----SUMMARY_EXECUTION---
[INFO ] fr.inria.astor.core.ingredientbased.IngredientBasedEvolutionaryRepairApproachImpl.printFinalStatus(IngredientBasedEvolutionaryRepairApproachImpl.java:123) - Total mod points: 1000
[INFO ] fr.inria.astor.core.solutionsearch.spaces.ingredients.scopes.ExpressionTypeIngredientSpace.toJSON(ExpressionTypeIngredientSpace.java:233) - Storing ing JSON at /tmp/Cardumen_Bug_dot_jar_Commons-Math_fc409e88/./output_astor/AstorMain-Commons-Math-fc409e88//src/ingredients.json
[INFO ] fr.inria.astor.core.stats.IngredientStats.toJSON(IngredientStats.java:253) - Storing ing JSON at /tmp/Cardumen_Bug_dot_jar_Commons-Math_fc409e88/./output_astor/AstorMain-Commons-Math-fc409e88//ingredientSpaceSize.json
[INFO ] fr.inria.astor.core.stats.IngredientStats.toJSON(IngredientStats.java:254) - ingredientSpaceSize:{"allAttempts":7,"space":[{"a":73,"v":3},{"a":75,"v":1},{"a":165,"v":1},{"a":16,"v":1},{"a":27,"v":1}]}
[INFO ] fr.inria.astor.core.stats.IngredientStats.toJSON(IngredientStats.java:253) - Storing ing JSON at /tmp/Cardumen_Bug_dot_jar_Commons-Math_fc409e88/./output_astor/AstorMain-Commons-Math-fc409e88//combinationsTemplatesingredientSpaceSize.json
[INFO ] fr.inria.astor.core.stats.IngredientStats.toJSON(IngredientStats.java:254) - combinationsTemplatesingredientSpaceSize:{"allAttempts":25,"space":[{"a":2,"v":2},{"a":400,"v":2},{"a":361,"v":2},{"a":11,"v":4},{"a":1,"v":9},{"a":144,"v":2},{"a":0,"v":4}]}
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:184) - 
 --SOLUTIONS DESCRIPTION--

 ----
ProgramVariant 14
 
time(sec)= 298
operation: ExpressionReplaceOperator
location= org.apache.commons.math.optimization.direct.CMAESOptimizer
line= 861
lineSuspiciousness= 0.5
lineSuspiciousness= 7
original statement= (boundaries[1][i]) - (boundaries[0][i])
buggy kind= CtBinaryOperatorImpl|CtLocalVariableImpl
fixed statement= -(valueRange)
Patch kind= CtUnaryOperatorImpl|CtLocalVariableImpl
generation= 7
ingredientScope= -
ingredientParent= -_double_0
validation=|true|0|2407|[]|
diffpatch=/var/lib/oar/.batch_job_bashrc: line 5: /home/tdurieux/.bashrc: No such file or directory
--- /tmp/Cardumen_Bug_dot_jar_Commons-Math_fc409e88/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizerjava
+++ /tmp/Cardumen_Bug_dot_jar_Commons-Math_fc409e88/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizerjava
@@ -502,7 +502,7 @@
 
 			double[] res = new double[x.length];
 			for (int i = 0; i < (x.length); i++) {
-				double diff = (boundaries[1][i]) - (boundaries[0][i]);
+				double diff = -(valueRange);
 				res[i] = ((x[i]) - (boundaries[0][i])) / diff;
 			}
 			return res;


diffpatchoriginal=/var/lib/oar/.batch_job_bashrc: line 5: /home/tdurieux/.bashrc: No such file or directory
--- /tmp/Cardumen_Bug_dot_jar_Commons-Math_fc409e88/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizerjava
+++ /tmp/Cardumen_Bug_dot_jar_Commons-Math_fc409e88/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizerjava
@@ -858,44 +858,44 @@
 				return x;
 			double[] res = new double[x.length];
 			for (int i = 0; i < (x.length); i++) {
-				double diff = (boundaries[1][i]) - (boundaries[0][i]);
-				res[i] = ((x[i]) - (boundaries[0][i])) / diff;
-			}
-			return res;
-		}
+				double diff = 
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
 
 
 
 
 
 
-		public double[] decode(final double[] x) {
-			if ((boundaries) == null)
-				return x;
-			double[] res = new double[x.length];
-			for (int i = 0; i < (x.length); i++) {
-				double diff = (boundaries[1][i]) - (boundaries[0][i]);
-				res[i] = (diff * (x[i])) + (boundaries[0][i]);
-			}
-			return res;
-		}
 
 
 
 
 
 
-		public double value(final double[] point) {
-			double value;
-			if (((boundaries) != null) && (isRepairMode)) {
-				double[] repaired = repair(point);
-				value = (org.apache.commons.math.optimization.direct.CMAESOptimizer.this.computeObjectiveValue(
-				decode(repaired))) + 
-				(penalty(point, repaired));
-			}else
-				value = org.apache.commons.math.optimization.direct.CMAESOptimizer.this.computeObjectiveValue(
-				decode(point));
-			return isMinimize ? value : -value;
+				-(valueRange); 				res[i] = ((x[i]) - (boundaries[0][i])) / diff;} 			return res;} 		public double[] decode(final double[] x) { 			if ((boundaries) == null) 				return x; 			double[] res = new double[x.length]; 			for (int i = 0; i < (x.length); i++) { 				double diff = (boundaries[1][i]) - (boundaries[0][i]); 				res[i] = (diff * (x[i])) + (boundaries[0][i]);} 			return res;} 		public double value(final double[] point) { 			double value; 			if (((boundaries) != null) && (isRepairMode)) { 				double[] repaired = repair(point); 				value = (org.apache.commons.math.optimization.direct.CMAESOptimizer.this.computeObjectiveValue(decode(repaired))) + (penalty(point, repaired));}else 				value = org.apache.commons.math.optimization.direct.CMAESOptimizer.this.computeObjectiveValue(decode(point)); 			return isMinimize ? value : -value;
 		}
 
 



Astor Output:

General stats:
EXECUTION_IDENTIFIER=Commons-Math-fc409e88
TOTAL_TIME=299.219
NR_GENERATIONS=7
NR_RIGHT_COMPILATIONS=3
NR_FAILLING_COMPILATIONS=4
NR_ERRONEOUS_VARIANCES=null
NR_FAILING_VALIDATION_PROCESS=null
OUTPUT_STATUS=STOP_BY_PATCH_FOUND

Patch stats:

Patch 1
VARIANT_ID=14
TIME=298
VALIDATION=|true|0|2407|[]|
GENERATION=7
FOLDER_SOLUTION_CODE=/tmp/Cardumen_Bug_dot_jar_Commons-Math_fc409e88/./output_astor/AstorMain-Commons-Math-fc409e88//bin//variant-14
--Patch Hunk #1
OPERATOR=ExpressionReplaceOperator

LOCATION=org.apache.commons.math.optimization.direct.CMAESOptimizer

PATH=/tmp/Cardumen_Bug_dot_jar_Commons-Math_fc409e88/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java

MODIFIED_FILE_PATH=/tmp/Cardumen_Bug_dot_jar_Commons-Math_fc409e88/./output_astor/AstorMain-Commons-Math-fc409e88//src//variant-14/org/apache/commons/math/optimization/direct/CMAESOptimizer.java

LINE=861

SUSPICIOUNESS=0.5

MP_RANKING=7

ORIGINAL_CODE=(boundaries[1][i]) - (boundaries[0][i])

BUGGY_CODE_TYPE=CtBinaryOperatorImpl|CtLocalVariableImpl

PATCH_HUNK_CODE=-(valueRange)

PATCH_HUNK_TYPE=CtUnaryOperatorImpl|CtLocalVariableImpl

INGREDIENT_SCOPE=-

INGREDIENT_PARENT=-_double_0

PATCH_DIFF_ORIG=/var/lib/oar/.batch_job_bashrc: line 5: /home/tdurieux/.bashrc: No such file or directory
--- /tmp/Cardumen_Bug_dot_jar_Commons-Math_fc409e88/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizerjava
+++ /tmp/Cardumen_Bug_dot_jar_Commons-Math_fc409e88/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizerjava
@@ -858,44 +858,44 @@
 				return x;
 			double[] res = new double[x.length];
 			for (int i = 0; i < (x.length); i++) {
-				double diff = (boundaries[1][i]) - (boundaries[0][i]);
-				res[i] = ((x[i]) - (boundaries[0][i])) / diff;
-			}
-			return res;
-		}
+				double diff = 
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
 
 
 
 
 
 
-		public double[] decode(final double[] x) {
-			if ((boundaries) == null)
-				return x;
-			double[] res = new double[x.length];
-			for (int i = 0; i < (x.length); i++) {
-				double diff = (boundaries[1][i]) - (boundaries[0][i]);
-				res[i] = (diff * (x[i])) + (boundaries[0][i]);
-			}
-			return res;
-		}
 
 
 
 
 
 
-		public double value(final double[] point) {
-			double value;
-			if (((boundaries) != null) && (isRepairMode)) {
-				double[] repaired = repair(point);
-				value = (org.apache.commons.math.optimization.direct.CMAESOptimizer.this.computeObjectiveValue(
-				decode(repaired))) + 
-				(penalty(point, repaired));
-			}else
-				value = org.apache.commons.math.optimization.direct.CMAESOptimizer.this.computeObjectiveValue(
-				decode(point));
-			return isMinimize ? value : -value;
+				-(valueRange); 				res[i] = ((x[i]) - (boundaries[0][i])) / diff;} 			return res;} 		public double[] decode(final double[] x) { 			if ((boundaries) == null) 				return x; 			double[] res = new double[x.length]; 			for (int i = 0; i < (x.length); i++) { 				double diff = (boundaries[1][i]) - (boundaries[0][i]); 				res[i] = (diff * (x[i])) + (boundaries[0][i]);} 			return res;} 		public double value(final double[] point) { 			double value; 			if (((boundaries) != null) && (isRepairMode)) { 				double[] repaired = repair(point); 				value = (org.apache.commons.math.optimization.direct.CMAESOptimizer.this.computeObjectiveValue(decode(repaired))) + (penalty(point, repaired));}else 				value = org.apache.commons.math.optimization.direct.CMAESOptimizer.this.computeObjectiveValue(decode(point)); 			return isMinimize ? value : -value;
 		}
 
 



[INFO ] fr.inria.astor.core.output.PatchJSONStandarOutput.produceOutput(PatchJSONStandarOutput.java:103) - Storing ing JSON at /tmp/Cardumen_Bug_dot_jar_Commons-Math_fc409e88/./output_astor/AstorMain-Commons-Math-fc409e88//astor_output.json
[INFO ] fr.inria.astor.core.output.PatchJSONStandarOutput.produceOutput(PatchJSONStandarOutput.java:104) - astor_output:
{"general":{"NR_RIGHT_COMPILATIONS":3,"NR_ERRONEOUS_VARIANCES":null,"EXECUTION_IDENTIFIER":"Commons-Math-fc409e88","OUTPUT_STATUS":"STOP_BY_PATCH_FOUND","NR_FAILLING_COMPILATIONS":4,"NR_GENERATIONS":7,"TOTAL_TIME":299.219,"NR_FAILING_VALIDATION_PROCESS":null},"patches":[{"VARIANT_ID":"14","VALIDATION":"|true|0|2407|[]|","patchhunks":[{"LOCATION":"org.apache.commons.math.optimization.direct.CMAESOptimizer","PATH":"\\\/tmp\\\/Cardumen_Bug_dot_jar_Commons-Math_fc409e88\\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/direct\\\/CMAESOptimizer.java","INGREDIENT_SCOPE":"-","SUSPICIOUNESS":"0.5","INGREDIENT_PARENT":"-_double_0","PATCH_HUNK_TYPE":"CtUnaryOperatorImpl|CtLocalVariableImpl","ORIGINAL_CODE":"(boundaries[1][i]) - (boundaries[0][i])","BUGGY_CODE_TYPE":"CtBinaryOperatorImpl|CtLocalVariableImpl","OPERATOR":"ExpressionReplaceOperator","MODIFIED_FILE_PATH":"\\\/tmp\\\/Cardumen_Bug_dot_jar_Commons-Math_fc409e88\\\/.\\\/output_astor\\\/AstorMain-Commons-Math-fc409e88\\\/\\\/src\\\/\\\/variant-14\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/direct\\\/CMAESOptimizer.java","LINE":"861","MP_RANKING":"7","PATCH_HUNK_CODE":"-(valueRange)"}],"TIME":"298","GENERATION":"7","FOLDER_SOLUTION_CODE":"\\\/tmp\\\/Cardumen_Bug_dot_jar_Commons-Math_fc409e88\\\/.\\\/output_astor\\\/AstorMain-Commons-Math-fc409e88\\\/\\\/bin\\\/\\\/variant-14","PATCH_DIFF_ORIG":"\\\/var\\\/lib\\\/oar\\\/.batch_job_bashrc: line 5: \\\/home\\\/tdurieux\\\/.bashrc: No such file or directory\\n--- \\\/tmp\\\/Cardumen_Bug_dot_jar_Commons-Math_fc409e88\\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/direct\\\/CMAESOptimizerjava\\n+++ \\\/tmp\\\/Cardumen_Bug_dot_jar_Commons-Math_fc409e88\\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/direct\\\/CMAESOptimizerjava\\n@@ -858,44 +858,44 @@\\n \\t\\t\\t\\treturn x;\\n \\t\\t\\tdouble[] res = new double[x.length];\\n \\t\\t\\tfor (int i = 0; i < (x.length); i++) {\\n-\\t\\t\\t\\tdouble diff = (boundaries[1][i]) - (boundaries[0][i]);\\n-\\t\\t\\t\\tres[i] = ((x[i]) - (boundaries[0][i])) \\\/ diff;\\n-\\t\\t\\t}\\n-\\t\\t\\treturn res;\\n-\\t\\t}\\n+\\t\\t\\t\\tdouble diff = \\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\n \\n \\n \\n \\n \\n-\\t\\tpublic double[] decode(final double[] x) {\\n-\\t\\t\\tif ((boundaries) == null)\\n-\\t\\t\\t\\treturn x;\\n-\\t\\t\\tdouble[] res = new double[x.length];\\n-\\t\\t\\tfor (int i = 0; i < (x.length); i++) {\\n-\\t\\t\\t\\tdouble diff = (boundaries[1][i]) - (boundaries[0][i]);\\n-\\t\\t\\t\\tres[i] = (diff * (x[i])) + (boundaries[0][i]);\\n-\\t\\t\\t}\\n-\\t\\t\\treturn res;\\n-\\t\\t}\\n \\n \\n \\n \\n \\n \\n-\\t\\tpublic double value(final double[] point) {\\n-\\t\\t\\tdouble value;\\n-\\t\\t\\tif (((boundaries) != null) && (isRepairMode)) {\\n-\\t\\t\\t\\tdouble[] repaired = repair(point);\\n-\\t\\t\\t\\tvalue = (org.apache.commons.math.optimization.direct.CMAESOptimizer.this.computeObjectiveValue(\\n-\\t\\t\\t\\tdecode(repaired))) + \\n-\\t\\t\\t\\t(penalty(point, repaired));\\n-\\t\\t\\t}else\\n-\\t\\t\\t\\tvalue = org.apache.commons.math.optimization.direct.CMAESOptimizer.this.computeObjectiveValue(\\n-\\t\\t\\t\\tdecode(point));\\n-\\t\\t\\treturn isMinimize ? value : -value;\\n+\\t\\t\\t\\t-(valueRange); \\t\\t\\t\\tres[i] = ((x[i]) - (boundaries[0][i])) \\\/ diff;} \\t\\t\\treturn res;} \\t\\tpublic double[] decode(final double[] x) { \\t\\t\\tif ((boundaries) == null) \\t\\t\\t\\treturn x; \\t\\t\\tdouble[] res = new double[x.length]; \\t\\t\\tfor (int i = 0; i < (x.length); i++) { \\t\\t\\t\\tdouble diff = (boundaries[1][i]) - (boundaries[0][i]); \\t\\t\\t\\tres[i] = (diff * (x[i])) + (boundaries[0][i]);} \\t\\t\\treturn res;} \\t\\tpublic double value(final double[] point) { \\t\\t\\tdouble value; \\t\\t\\tif (((boundaries) != null) && (isRepairMode)) { \\t\\t\\t\\tdouble[] repaired = repair(point); \\t\\t\\t\\tvalue = (org.apache.commons.math.optimization.direct.CMAESOptimizer.this.computeObjectiveValue(decode(repaired))) + (penalty(point, repaired));}else \\t\\t\\t\\tvalue = org.apache.commons.math.optimization.direct.CMAESOptimizer.this.computeObjectiveValue(decode(point)); \\t\\t\\treturn isMinimize ? value : -value;\\n \\t\\t}\\n \\n \\n\\n"}]}
[INFO ] fr.inria.main.evolution.AstorMain.run(AstorMain.java:200) - Time Total(s): 1307.07
1542.30user 5.72system 21:48.08elapsed 118%CPU (0avgtext+0avgdata 1842392maxresident)k
85264inputs+35368outputs (31major+1531367minor)pagefaults 0swaps


Node: uvb-5.sophia.grid5000.fr



Date: Wed Jan  2 23:52:05 EST 2019

