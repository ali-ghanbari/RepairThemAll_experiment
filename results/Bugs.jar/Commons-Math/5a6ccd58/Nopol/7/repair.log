cd /tmp/Nopol_Bug_dot_jar_Commons-Math_5a6ccd58;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -Xmx4g -Xms1g -cp /home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin//../lib/tools.jar fr.inria.lille.repair.Main \
	--mode repair \
	--type pre_then_cond \
	--oracle angelic \
	--synthesis smt \
	--flocal gzoltar \
	--json \
	--solver z3 \
	--solver-path /home/tdurieux/defects4j4repair/script/../libs/z3/build/z3 \
	--complianceLevel 7 \
	--source src/main/java \
	--classpath "target/classes:target/test-classes:/home/tdurieux/.m2/repository/junit/junit/4.11/junit-4.11.jar:/home/tdurieux/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar";
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
09:54:57.780 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Source files: [src/main/java]
09:54:57.821 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Classpath: [file:/tmp/Nopol_Bug_dot_jar_Commons-Math_5a6ccd58/target/classes/, file:/tmp/Nopol_Bug_dot_jar_Commons-Math_5a6ccd58/target/test-classes/, file:/home/tdurieux/.m2/repository/junit/junit/4.11/junit-4.11.jar, file:/home/tdurieux/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar, file:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar]
09:54:57.822 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Statement type: PRE_THEN_COND
09:54:57.822 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Args: [org.apache.commons.math3.RetryRunnerTest, org.apache.commons.math3.analysis.FunctionUtilsTest, org.apache.commons.math3.analysis.differentiation.DSCompilerTest, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest, org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest, org.apache.commons.math3.analysis.differentiation.GradientFunctionTest, org.apache.commons.math3.analysis.differentiation.JacobianFunctionTest, org.apache.commons.math3.analysis.differentiation.SparseGradientTest, org.apache.commons.math3.analysis.function.GaussianTest, org.apache.commons.math3.analysis.function.HarmonicOscillatorTest, org.apache.commons.math3.analysis.function.LogisticTest, org.apache.commons.math3.analysis.function.LogitTest, org.apache.commons.math3.analysis.function.SigmoidTest, org.apache.commons.math3.analysis.function.SincTest, org.apache.commons.math3.analysis.function.SqrtTest, org.apache.commons.math3.analysis.function.StepFunctionTest, org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest, org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math3.analysis.integration.MidPointIntegratorTest, org.apache.commons.math3.analysis.integration.RombergIntegratorTest, org.apache.commons.math3.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math3.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactoryTest, org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorTest, org.apache.commons.math3.analysis.integration.gauss.HermiteParametricTest, org.apache.commons.math3.analysis.integration.gauss.HermiteTest, org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionParametricTest, org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionTest, org.apache.commons.math3.analysis.integration.gauss.LegendreParametricTest, org.apache.commons.math3.analysis.integration.gauss.LegendreTest, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest, org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest, org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math3.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math3.analysis.solvers.BisectionSolverTest, org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest, org.apache.commons.math3.analysis.solvers.BrentSolverTest, org.apache.commons.math3.analysis.solvers.IllinoisSolverTest, org.apache.commons.math3.analysis.solvers.LaguerreSolverTest, org.apache.commons.math3.analysis.solvers.MullerSolver2Test, org.apache.commons.math3.analysis.solvers.MullerSolverTest, org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolverTest, org.apache.commons.math3.analysis.solvers.NewtonSolverTest, org.apache.commons.math3.analysis.solvers.PegasusSolverTest, org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest, org.apache.commons.math3.analysis.solvers.RiddersSolverTest, org.apache.commons.math3.analysis.solvers.SecantSolverTest, org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest, org.apache.commons.math3.complex.ComplexFieldTest, org.apache.commons.math3.complex.ComplexFormatTest, org.apache.commons.math3.complex.ComplexTest, org.apache.commons.math3.complex.ComplexUtilsTest, org.apache.commons.math3.complex.FrenchComplexFormatTest, org.apache.commons.math3.complex.QuaternionTest, org.apache.commons.math3.complex.RootsOfUnityTest, org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest, org.apache.commons.math3.dfp.DfpDecTest, org.apache.commons.math3.dfp.DfpMathTest, org.apache.commons.math3.dfp.DfpTest, org.apache.commons.math3.distribution.AbstractIntegerDistributionTest, org.apache.commons.math3.distribution.AbstractRealDistributionTest, org.apache.commons.math3.distribution.BetaDistributionTest, org.apache.commons.math3.distribution.BinomialDistributionTest, org.apache.commons.math3.distribution.CauchyDistributionTest, org.apache.commons.math3.distribution.ChiSquaredDistributionTest, org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest, org.apache.commons.math3.distribution.EnumeratedRealDistributionTest, org.apache.commons.math3.distribution.ExponentialDistributionTest, org.apache.commons.math3.distribution.FDistributionTest, org.apache.commons.math3.distribution.GammaDistributionTest, org.apache.commons.math3.distribution.GeometricDistributionTest, org.apache.commons.math3.distribution.HypergeometricDistributionTest, org.apache.commons.math3.distribution.KolmogorovSmirnovDistributionTest, org.apache.commons.math3.distribution.LevyDistributionTest, org.apache.commons.math3.distribution.LogNormalDistributionTest, org.apache.commons.math3.distribution.MultivariateNormalDistributionTest, org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest, org.apache.commons.math3.distribution.NormalDistributionTest, org.apache.commons.math3.distribution.ParetoDistributionTest, org.apache.commons.math3.distribution.PascalDistributionTest, org.apache.commons.math3.distribution.PoissonDistributionTest, org.apache.commons.math3.distribution.TDistributionTest, org.apache.commons.math3.distribution.TriangularDistributionTest, org.apache.commons.math3.distribution.UniformIntegerDistributionTest, org.apache.commons.math3.distribution.UniformRealDistributionTest, org.apache.commons.math3.distribution.WeibullDistributionTest, org.apache.commons.math3.distribution.ZipfDistributionTest, org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest, org.apache.commons.math3.exception.DimensionMismatchExceptionTest, org.apache.commons.math3.exception.MaxCountExceededExceptionTest, org.apache.commons.math3.exception.NonMonotonicSequenceExceptionTest, org.apache.commons.math3.exception.NotPositiveExceptionTest, org.apache.commons.math3.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math3.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math3.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math3.exception.OutOfRangeExceptionTest, org.apache.commons.math3.exception.TooManyEvaluationsExceptionTest, org.apache.commons.math3.exception.util.ArgUtilsTest, org.apache.commons.math3.exception.util.ExceptionContextTest, org.apache.commons.math3.exception.util.LocalizedFormatsTest, org.apache.commons.math3.filter.KalmanFilterTest, org.apache.commons.math3.fitting.CurveFitterTest, org.apache.commons.math3.fitting.GaussianCurveFitterTest, org.apache.commons.math3.fitting.GaussianFitterTest, org.apache.commons.math3.fitting.HarmonicCurveFitterTest, org.apache.commons.math3.fitting.HarmonicFitterTest, org.apache.commons.math3.fitting.PolynomialCurveFitterTest, org.apache.commons.math3.fitting.PolynomialFitterTest, org.apache.commons.math3.fitting.WeightedObservedPointsTest, org.apache.commons.math3.fitting.leastsquares.EvaluationTest, org.apache.commons.math3.fitting.leastsquares.EvaluationTestValidation, org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizerWithCholeskyTest, org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizerWithLUTest, org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizerWithQRTest, org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizerWithSVDTest, org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizerTest, org.apache.commons.math3.fitting.leastsquares.MinpackTest, org.apache.commons.math3.fraction.BigFractionFieldTest, org.apache.commons.math3.fraction.BigFractionFormatTest, org.apache.commons.math3.fraction.BigFractionTest, org.apache.commons.math3.fraction.FractionFieldTest, org.apache.commons.math3.fraction.FractionFormatTest, org.apache.commons.math3.fraction.FractionTest, org.apache.commons.math3.genetics.BinaryChromosomeTest, org.apache.commons.math3.genetics.BinaryMutationTest, org.apache.commons.math3.genetics.ChromosomeTest, org.apache.commons.math3.genetics.CycleCrossoverTest, org.apache.commons.math3.genetics.ElitisticListPopulationTest, org.apache.commons.math3.genetics.FitnessCachingTest, org.apache.commons.math3.genetics.FixedElapsedTimeTest, org.apache.commons.math3.genetics.FixedGenerationCountTest, org.apache.commons.math3.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math3.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math3.genetics.ListPopulationTest, org.apache.commons.math3.genetics.NPointCrossoverTest, org.apache.commons.math3.genetics.OnePointCrossoverTest, org.apache.commons.math3.genetics.OrderedCrossoverTest, org.apache.commons.math3.genetics.RandomKeyMutationTest, org.apache.commons.math3.genetics.RandomKeyTest, org.apache.commons.math3.genetics.TournamentSelectionTest, org.apache.commons.math3.genetics.UniformCrossoverTest, org.apache.commons.math3.geometry.enclosing.WelzlEncloser2DTest, org.apache.commons.math3.geometry.enclosing.WelzlEncloser3DTest, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1DTest, org.apache.commons.math3.geometry.euclidean.oned.FrenchVector1DFormatTest, org.apache.commons.math3.geometry.euclidean.oned.IntervalTest, org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest, org.apache.commons.math3.geometry.euclidean.oned.Vector1DFormatTest, org.apache.commons.math3.geometry.euclidean.oned.Vector1DTest, org.apache.commons.math3.geometry.euclidean.threed.Euclidean3DTest, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest, org.apache.commons.math3.geometry.euclidean.threed.LineTest, org.apache.commons.math3.geometry.euclidean.threed.PlaneTest, org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest, org.apache.commons.math3.geometry.euclidean.threed.RotationOrderTest, org.apache.commons.math3.geometry.euclidean.threed.RotationTest, org.apache.commons.math3.geometry.euclidean.threed.SphereGeneratorTest, org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinatesTest, org.apache.commons.math3.geometry.euclidean.threed.SubLineTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest, org.apache.commons.math3.geometry.euclidean.twod.DiskGeneratorTest, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2DTest, org.apache.commons.math3.geometry.euclidean.twod.FrenchVector2DFormatTest, org.apache.commons.math3.geometry.euclidean.twod.LineTest, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest, org.apache.commons.math3.geometry.euclidean.twod.SegmentTest, org.apache.commons.math3.geometry.euclidean.twod.SubLineTest, org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormatTest, org.apache.commons.math3.geometry.euclidean.twod.Vector2DTest, org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristicTest, org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChainTest, org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest, org.apache.commons.math3.geometry.spherical.oned.ArcTest, org.apache.commons.math3.geometry.spherical.oned.ArcsSetTest, org.apache.commons.math3.geometry.spherical.oned.LimitAngleTest, org.apache.commons.math3.geometry.spherical.oned.S1PointTest, org.apache.commons.math3.geometry.spherical.oned.Sphere1Test, org.apache.commons.math3.geometry.spherical.twod.CircleTest, org.apache.commons.math3.geometry.spherical.twod.S2PointTest, org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSetTest, org.apache.commons.math3.geometry.spherical.twod.SubCircleTest, org.apache.commons.math3.linear.Array2DRowRealMatrixTest, org.apache.commons.math3.linear.ArrayFieldVectorTest, org.apache.commons.math3.linear.ArrayRealVectorTest, org.apache.commons.math3.linear.BiDiagonalTransformerTest, org.apache.commons.math3.linear.BlockFieldMatrixTest, org.apache.commons.math3.linear.BlockRealMatrixTest, org.apache.commons.math3.linear.CholeskyDecompositionTest, org.apache.commons.math3.linear.CholeskySolverTest, org.apache.commons.math3.linear.ConjugateGradientTest, org.apache.commons.math3.linear.DiagonalMatrixTest, org.apache.commons.math3.linear.EigenDecompositionTest, org.apache.commons.math3.linear.EigenSolverTest, org.apache.commons.math3.linear.FieldLUDecompositionTest, org.apache.commons.math3.linear.FieldLUSolverTest, org.apache.commons.math3.linear.FieldMatrixImplTest, org.apache.commons.math3.linear.FrenchRealVectorFormatTest, org.apache.commons.math3.linear.HessenbergTransformerTest, org.apache.commons.math3.linear.LUDecompositionTest, org.apache.commons.math3.linear.LUSolverTest, org.apache.commons.math3.linear.MatrixDimensionMismatchExceptionTest, org.apache.commons.math3.linear.MatrixUtilsTest, org.apache.commons.math3.linear.OpenMapRealMatrixTest, org.apache.commons.math3.linear.QRDecompositionTest, org.apache.commons.math3.linear.QRSolverTest, org.apache.commons.math3.linear.RRQRDecompositionTest, org.apache.commons.math3.linear.RRQRSolverTest, org.apache.commons.math3.linear.RealMatrixFormatTest, org.apache.commons.math3.linear.RealVectorFormatTest, org.apache.commons.math3.linear.RealVectorTest, org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest, org.apache.commons.math3.linear.SchurTransformerTest, org.apache.commons.math3.linear.SingularValueDecompositionTest, org.apache.commons.math3.linear.SingularValueSolverTest, org.apache.commons.math3.linear.SparseFieldMatrixTest, org.apache.commons.math3.linear.SparseFieldVectorTest, org.apache.commons.math3.linear.SparseRealMatrixTest, org.apache.commons.math3.linear.SparseRealVectorTest, org.apache.commons.math3.linear.SymmLQTest, org.apache.commons.math3.linear.TriDiagonalTransformerTest, org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest, org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest, org.apache.commons.math3.ml.clustering.DBSCANClustererTest, org.apache.commons.math3.ml.clustering.FuzzyKMeansClustererTest, org.apache.commons.math3.ml.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClustererTest, org.apache.commons.math3.ml.clustering.evaluation.SumOfClusterVariancesTest, org.apache.commons.math3.ml.distance.CanberraDistanceTest, org.apache.commons.math3.ml.distance.ChebyshevDistanceTest, org.apache.commons.math3.ml.distance.EarthMoversDistanceTest, org.apache.commons.math3.ml.distance.EuclideanDistanceTest, org.apache.commons.math3.ml.distance.ManhattanDistanceTest, org.apache.commons.math3.ml.neuralnet.MapUtilsTest, org.apache.commons.math3.ml.neuralnet.NetworkTest, org.apache.commons.math3.ml.neuralnet.NeuronTest, org.apache.commons.math3.ml.neuralnet.oned.NeuronStringTest, org.apache.commons.math3.ml.neuralnet.sofm.KohonenTrainingTaskTest, org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateActionTest, org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunctionFactoryTest, org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunctionFactoryTest, org.apache.commons.math3.ml.neuralnet.sofm.util.ExponentialDecayFunctionTest, org.apache.commons.math3.ml.neuralnet.sofm.util.QuasiSigmoidDecayFunctionTest, org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2DTest, org.apache.commons.math3.ode.ContinuousOutputModelTest, org.apache.commons.math3.ode.FirstOrderConverterTest, org.apache.commons.math3.ode.JacobianMatricesTest, org.apache.commons.math3.ode.events.EventFilterTest, org.apache.commons.math3.ode.events.EventStateTest, org.apache.commons.math3.ode.events.OverlappingEventsTest, org.apache.commons.math3.ode.events.ReappearingEventTest, org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.GillIntegratorTest, org.apache.commons.math3.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.LutherIntegratorTest, org.apache.commons.math3.ode.nonstiff.LutherStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest, org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest, org.apache.commons.math3.ode.sampling.StepNormalizerTest, org.apache.commons.math3.optim.PointValuePairTest, org.apache.commons.math3.optim.PointVectorValuePairTest, org.apache.commons.math3.optim.SimplePointCheckerTest, org.apache.commons.math3.optim.SimpleValueCheckerTest, org.apache.commons.math3.optim.SimpleVectorValueCheckerTest, org.apache.commons.math3.optim.linear.SimplexSolverTest, org.apache.commons.math3.optim.linear.SimplexTableauTest, org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizerTest, org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterTest, org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest, org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest, org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizerTest, org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTest, org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTestValidation, org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest, org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest, org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest, org.apache.commons.math3.optim.univariate.BracketFinderTest, org.apache.commons.math3.optim.univariate.BrentOptimizerTest, org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizerTest, org.apache.commons.math3.optim.univariate.SimpleUnivariateValueCheckerTest, org.apache.commons.math3.optimization.MultivariateDifferentiableMultiStartOptimizerTest, org.apache.commons.math3.optimization.MultivariateDifferentiableVectorMultiStartOptimizerTest, org.apache.commons.math3.optimization.MultivariateMultiStartOptimizerTest, org.apache.commons.math3.optimization.PointValuePairTest, org.apache.commons.math3.optimization.PointVectorValuePairTest, org.apache.commons.math3.optimization.SimplePointCheckerTest, org.apache.commons.math3.optimization.SimpleValueCheckerTest, org.apache.commons.math3.optimization.SimpleVectorValueCheckerTest, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest, org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest, org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest, org.apache.commons.math3.optimization.direct.PowellOptimizerTest, org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math3.optimization.fitting.CurveFitterTest, org.apache.commons.math3.optimization.fitting.GaussianFitterTest, org.apache.commons.math3.optimization.fitting.HarmonicFitterTest, org.apache.commons.math3.optimization.fitting.PolynomialFitterTest, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math3.optimization.general.MinpackTest, org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math3.optimization.linear.SimplexSolverTest, org.apache.commons.math3.optimization.linear.SimplexTableauTest, org.apache.commons.math3.optimization.univariate.BracketFinderTest, org.apache.commons.math3.optimization.univariate.BrentOptimizerTest, org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueCheckerTest, org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest, org.apache.commons.math3.primes.PrimesTest, org.apache.commons.math3.random.AbstractRandomGeneratorTest, org.apache.commons.math3.random.BitsStreamGeneratorTest, org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math3.random.EmpiricalDistributionTest, org.apache.commons.math3.random.GaussianRandomGeneratorTest, org.apache.commons.math3.random.HaltonSequenceGeneratorTest, org.apache.commons.math3.random.ISAACTest, org.apache.commons.math3.random.MersenneTwisterTest, org.apache.commons.math3.random.RandomAdaptorTest, org.apache.commons.math3.random.RandomDataGeneratorTest, org.apache.commons.math3.random.RandomGeneratorAbstractTest, org.apache.commons.math3.random.RandomGeneratorFactoryTest, org.apache.commons.math3.random.SobolSequenceGeneratorTest, org.apache.commons.math3.random.StableRandomGeneratorTest, org.apache.commons.math3.random.SynchronizedRandomGeneratorTest, org.apache.commons.math3.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math3.random.UniformRandomGeneratorTest, org.apache.commons.math3.random.UnitSphereRandomVectorGeneratorTest, org.apache.commons.math3.random.ValueServerTest, org.apache.commons.math3.random.Well1024aTest, org.apache.commons.math3.random.Well19937aTest, org.apache.commons.math3.random.Well19937cTest, org.apache.commons.math3.random.Well44497aTest, org.apache.commons.math3.random.Well44497bTest, org.apache.commons.math3.random.Well512aTest, org.apache.commons.math3.special.BetaTest, org.apache.commons.math3.special.ErfTest, org.apache.commons.math3.special.GammaTest, org.apache.commons.math3.stat.CertifiedDataTest, org.apache.commons.math3.stat.FrequencyTest, org.apache.commons.math3.stat.StatUtilsTest, org.apache.commons.math3.stat.clustering.DBSCANClustererTest, org.apache.commons.math3.stat.clustering.EuclideanDoublePointTest, org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math3.stat.correlation.CovarianceTest, org.apache.commons.math3.stat.correlation.KendallsCorrelationTest, org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math3.stat.correlation.StorelessCovarianceTest, org.apache.commons.math3.stat.data.LewTest, org.apache.commons.math3.stat.data.LotteryTest, org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math3.stat.descriptive.moment.InteractionTest, org.apache.commons.math3.stat.descriptive.moment.KurtosisTest, org.apache.commons.math3.stat.descriptive.moment.MeanTest, org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math3.stat.descriptive.moment.SkewnessTest, org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math3.stat.descriptive.moment.VarianceTest, org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math3.stat.descriptive.rank.MaxTest, org.apache.commons.math3.stat.descriptive.rank.MedianTest, org.apache.commons.math3.stat.descriptive.rank.MinTest, org.apache.commons.math3.stat.descriptive.rank.PercentileTest, org.apache.commons.math3.stat.descriptive.summary.ProductTest, org.apache.commons.math3.stat.descriptive.summary.SumLogTest, org.apache.commons.math3.stat.descriptive.summary.SumSqTest, org.apache.commons.math3.stat.descriptive.summary.SumTest, org.apache.commons.math3.stat.inference.BinomialTestTest, org.apache.commons.math3.stat.inference.ChiSquareTestTest, org.apache.commons.math3.stat.inference.GTestTest, org.apache.commons.math3.stat.inference.KolmogorovSmirnovTestTest, org.apache.commons.math3.stat.inference.MannWhitneyUTestTest, org.apache.commons.math3.stat.inference.OneWayAnovaTest, org.apache.commons.math3.stat.inference.TTestTest, org.apache.commons.math3.stat.inference.TestUtilsTest, org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest, org.apache.commons.math3.stat.interval.AgrestiCoullIntervalTest, org.apache.commons.math3.stat.interval.ClopperPearsonIntervalTest, org.apache.commons.math3.stat.interval.IntervalUtilsTest, org.apache.commons.math3.stat.interval.NormalApproximationIntervalTest, org.apache.commons.math3.stat.interval.WilsonScoreIntervalTest, org.apache.commons.math3.stat.ranking.NaturalRankingTest, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math3.stat.regression.SimpleRegressionTest, org.apache.commons.math3.transform.FastCosineTransformerTest, org.apache.commons.math3.transform.FastFourierTransformerTest, org.apache.commons.math3.transform.FastHadamardTransformerTest, org.apache.commons.math3.transform.FastSineTransformerTest, org.apache.commons.math3.util.ArithmeticUtilsTest, org.apache.commons.math3.util.BigRealFieldTest, org.apache.commons.math3.util.BigRealTest, org.apache.commons.math3.util.CombinationsTest, org.apache.commons.math3.util.CombinatoricsUtilsTest, org.apache.commons.math3.util.ContinuedFractionTest, org.apache.commons.math3.util.Decimal64Test, org.apache.commons.math3.util.DefaultTransformerTest, org.apache.commons.math3.util.FastMathStrictComparisonTest, org.apache.commons.math3.util.FastMathTest, org.apache.commons.math3.util.FastMathTestPerformance, org.apache.commons.math3.util.IncrementorTest, org.apache.commons.math3.util.MathArraysTest, org.apache.commons.math3.util.MathUtilsTest, org.apache.commons.math3.util.MultidimensionalCounterTest, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest, org.apache.commons.math3.util.OpenIntToFieldTest, org.apache.commons.math3.util.PairTest, org.apache.commons.math3.util.PrecisionTest, org.apache.commons.math3.util.ResizableDoubleArrayTest, org.apache.commons.math3.util.TransformerMapTest]
09:54:57.825 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/home/tdurieux/defects4j4repair/script/../libs/z3/build/z3', projectSources=[src/main/java], projectClasspath='[Ljava.net.URL;@66d33a', projectTests=[org.apache.commons.math3.RetryRunnerTest, org.apache.commons.math3.analysis.FunctionUtilsTest, org.apache.commons.math3.analysis.differentiation.DSCompilerTest, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest, org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest, org.apache.commons.math3.analysis.differentiation.GradientFunctionTest, org.apache.commons.math3.analysis.differentiation.JacobianFunctionTest, org.apache.commons.math3.analysis.differentiation.SparseGradientTest, org.apache.commons.math3.analysis.function.GaussianTest, org.apache.commons.math3.analysis.function.HarmonicOscillatorTest, org.apache.commons.math3.analysis.function.LogisticTest, org.apache.commons.math3.analysis.function.LogitTest, org.apache.commons.math3.analysis.function.SigmoidTest, org.apache.commons.math3.analysis.function.SincTest, org.apache.commons.math3.analysis.function.SqrtTest, org.apache.commons.math3.analysis.function.StepFunctionTest, org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest, org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math3.analysis.integration.MidPointIntegratorTest, org.apache.commons.math3.analysis.integration.RombergIntegratorTest, org.apache.commons.math3.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math3.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactoryTest, org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorTest, org.apache.commons.math3.analysis.integration.gauss.HermiteParametricTest, org.apache.commons.math3.analysis.integration.gauss.HermiteTest, org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionParametricTest, org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionTest, org.apache.commons.math3.analysis.integration.gauss.LegendreParametricTest, org.apache.commons.math3.analysis.integration.gauss.LegendreTest, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest, org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest, org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math3.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math3.analysis.solvers.BisectionSolverTest, org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest, org.apache.commons.math3.analysis.solvers.BrentSolverTest, org.apache.commons.math3.analysis.solvers.IllinoisSolverTest, org.apache.commons.math3.analysis.solvers.LaguerreSolverTest, org.apache.commons.math3.analysis.solvers.MullerSolver2Test, org.apache.commons.math3.analysis.solvers.MullerSolverTest, org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolverTest, org.apache.commons.math3.analysis.solvers.NewtonSolverTest, org.apache.commons.math3.analysis.solvers.PegasusSolverTest, org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest, org.apache.commons.math3.analysis.solvers.RiddersSolverTest, org.apache.commons.math3.analysis.solvers.SecantSolverTest, org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest, org.apache.commons.math3.complex.ComplexFieldTest, org.apache.commons.math3.complex.ComplexFormatTest, org.apache.commons.math3.complex.ComplexTest, org.apache.commons.math3.complex.ComplexUtilsTest, org.apache.commons.math3.complex.FrenchComplexFormatTest, org.apache.commons.math3.complex.QuaternionTest, org.apache.commons.math3.complex.RootsOfUnityTest, org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest, org.apache.commons.math3.dfp.DfpDecTest, org.apache.commons.math3.dfp.DfpMathTest, org.apache.commons.math3.dfp.DfpTest, org.apache.commons.math3.distribution.AbstractIntegerDistributionTest, org.apache.commons.math3.distribution.AbstractRealDistributionTest, org.apache.commons.math3.distribution.BetaDistributionTest, org.apache.commons.math3.distribution.BinomialDistributionTest, org.apache.commons.math3.distribution.CauchyDistributionTest, org.apache.commons.math3.distribution.ChiSquaredDistributionTest, org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest, org.apache.commons.math3.distribution.EnumeratedRealDistributionTest, org.apache.commons.math3.distribution.ExponentialDistributionTest, org.apache.commons.math3.distribution.FDistributionTest, org.apache.commons.math3.distribution.GammaDistributionTest, org.apache.commons.math3.distribution.GeometricDistributionTest, org.apache.commons.math3.distribution.HypergeometricDistributionTest, org.apache.commons.math3.distribution.KolmogorovSmirnovDistributionTest, org.apache.commons.math3.distribution.LevyDistributionTest, org.apache.commons.math3.distribution.LogNormalDistributionTest, org.apache.commons.math3.distribution.MultivariateNormalDistributionTest, org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest, org.apache.commons.math3.distribution.NormalDistributionTest, org.apache.commons.math3.distribution.ParetoDistributionTest, org.apache.commons.math3.distribution.PascalDistributionTest, org.apache.commons.math3.distribution.PoissonDistributionTest, org.apache.commons.math3.distribution.TDistributionTest, org.apache.commons.math3.distribution.TriangularDistributionTest, org.apache.commons.math3.distribution.UniformIntegerDistributionTest, org.apache.commons.math3.distribution.UniformRealDistributionTest, org.apache.commons.math3.distribution.WeibullDistributionTest, org.apache.commons.math3.distribution.ZipfDistributionTest, org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest, org.apache.commons.math3.exception.DimensionMismatchExceptionTest, org.apache.commons.math3.exception.MaxCountExceededExceptionTest, org.apache.commons.math3.exception.NonMonotonicSequenceExceptionTest, org.apache.commons.math3.exception.NotPositiveExceptionTest, org.apache.commons.math3.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math3.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math3.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math3.exception.OutOfRangeExceptionTest, org.apache.commons.math3.exception.TooManyEvaluationsExceptionTest, org.apache.commons.math3.exception.util.ArgUtilsTest, org.apache.commons.math3.exception.util.ExceptionContextTest, org.apache.commons.math3.exception.util.LocalizedFormatsTest, org.apache.commons.math3.filter.KalmanFilterTest, org.apache.commons.math3.fitting.CurveFitterTest, org.apache.commons.math3.fitting.GaussianCurveFitterTest, org.apache.commons.math3.fitting.GaussianFitterTest, org.apache.commons.math3.fitting.HarmonicCurveFitterTest, org.apache.commons.math3.fitting.HarmonicFitterTest, org.apache.commons.math3.fitting.PolynomialCurveFitterTest, org.apache.commons.math3.fitting.PolynomialFitterTest, org.apache.commons.math3.fitting.WeightedObservedPointsTest, org.apache.commons.math3.fitting.leastsquares.EvaluationTest, org.apache.commons.math3.fitting.leastsquares.EvaluationTestValidation, org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizerWithCholeskyTest, org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizerWithLUTest, org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizerWithQRTest, org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizerWithSVDTest, org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizerTest, org.apache.commons.math3.fitting.leastsquares.MinpackTest, org.apache.commons.math3.fraction.BigFractionFieldTest, org.apache.commons.math3.fraction.BigFractionFormatTest, org.apache.commons.math3.fraction.BigFractionTest, org.apache.commons.math3.fraction.FractionFieldTest, org.apache.commons.math3.fraction.FractionFormatTest, org.apache.commons.math3.fraction.FractionTest, org.apache.commons.math3.genetics.BinaryChromosomeTest, org.apache.commons.math3.genetics.BinaryMutationTest, org.apache.commons.math3.genetics.ChromosomeTest, org.apache.commons.math3.genetics.CycleCrossoverTest, org.apache.commons.math3.genetics.ElitisticListPopulationTest, org.apache.commons.math3.genetics.FitnessCachingTest, org.apache.commons.math3.genetics.FixedElapsedTimeTest, org.apache.commons.math3.genetics.FixedGenerationCountTest, org.apache.commons.math3.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math3.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math3.genetics.ListPopulationTest, org.apache.commons.math3.genetics.NPointCrossoverTest, org.apache.commons.math3.genetics.OnePointCrossoverTest, org.apache.commons.math3.genetics.OrderedCrossoverTest, org.apache.commons.math3.genetics.RandomKeyMutationTest, org.apache.commons.math3.genetics.RandomKeyTest, org.apache.commons.math3.genetics.TournamentSelectionTest, org.apache.commons.math3.genetics.UniformCrossoverTest, org.apache.commons.math3.geometry.enclosing.WelzlEncloser2DTest, org.apache.commons.math3.geometry.enclosing.WelzlEncloser3DTest, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1DTest, org.apache.commons.math3.geometry.euclidean.oned.FrenchVector1DFormatTest, org.apache.commons.math3.geometry.euclidean.oned.IntervalTest, org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest, org.apache.commons.math3.geometry.euclidean.oned.Vector1DFormatTest, org.apache.commons.math3.geometry.euclidean.oned.Vector1DTest, org.apache.commons.math3.geometry.euclidean.threed.Euclidean3DTest, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest, org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest, org.apache.commons.math3.geometry.euclidean.threed.LineTest, org.apache.commons.math3.geometry.euclidean.threed.PlaneTest, org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest, org.apache.commons.math3.geometry.euclidean.threed.RotationOrderTest, org.apache.commons.math3.geometry.euclidean.threed.RotationTest, org.apache.commons.math3.geometry.euclidean.threed.SphereGeneratorTest, org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinatesTest, org.apache.commons.math3.geometry.euclidean.threed.SubLineTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest, org.apache.commons.math3.geometry.euclidean.twod.DiskGeneratorTest, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2DTest, org.apache.commons.math3.geometry.euclidean.twod.FrenchVector2DFormatTest, org.apache.commons.math3.geometry.euclidean.twod.LineTest, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest, org.apache.commons.math3.geometry.euclidean.twod.SegmentTest, org.apache.commons.math3.geometry.euclidean.twod.SubLineTest, org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormatTest, org.apache.commons.math3.geometry.euclidean.twod.Vector2DTest, org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristicTest, org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChainTest, org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest, org.apache.commons.math3.geometry.spherical.oned.ArcTest, org.apache.commons.math3.geometry.spherical.oned.ArcsSetTest, org.apache.commons.math3.geometry.spherical.oned.LimitAngleTest, org.apache.commons.math3.geometry.spherical.oned.S1PointTest, org.apache.commons.math3.geometry.spherical.oned.Sphere1Test, org.apache.commons.math3.geometry.spherical.twod.CircleTest, org.apache.commons.math3.geometry.spherical.twod.S2PointTest, org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSetTest, org.apache.commons.math3.geometry.spherical.twod.SubCircleTest, org.apache.commons.math3.linear.Array2DRowRealMatrixTest, org.apache.commons.math3.linear.ArrayFieldVectorTest, org.apache.commons.math3.linear.ArrayRealVectorTest, org.apache.commons.math3.linear.BiDiagonalTransformerTest, org.apache.commons.math3.linear.BlockFieldMatrixTest, org.apache.commons.math3.linear.BlockRealMatrixTest, org.apache.commons.math3.linear.CholeskyDecompositionTest, org.apache.commons.math3.linear.CholeskySolverTest, org.apache.commons.math3.linear.ConjugateGradientTest, org.apache.commons.math3.linear.DiagonalMatrixTest, org.apache.commons.math3.linear.EigenDecompositionTest, org.apache.commons.math3.linear.EigenSolverTest, org.apache.commons.math3.linear.FieldLUDecompositionTest, org.apache.commons.math3.linear.FieldLUSolverTest, org.apache.commons.math3.linear.FieldMatrixImplTest, org.apache.commons.math3.linear.FrenchRealVectorFormatTest, org.apache.commons.math3.linear.HessenbergTransformerTest, org.apache.commons.math3.linear.LUDecompositionTest, org.apache.commons.math3.linear.LUSolverTest, org.apache.commons.math3.linear.MatrixDimensionMismatchExceptionTest, org.apache.commons.math3.linear.MatrixUtilsTest, org.apache.commons.math3.linear.OpenMapRealMatrixTest, org.apache.commons.math3.linear.QRDecompositionTest, org.apache.commons.math3.linear.QRSolverTest, org.apache.commons.math3.linear.RRQRDecompositionTest, org.apache.commons.math3.linear.RRQRSolverTest, org.apache.commons.math3.linear.RealMatrixFormatTest, org.apache.commons.math3.linear.RealVectorFormatTest, org.apache.commons.math3.linear.RealVectorTest, org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest, org.apache.commons.math3.linear.SchurTransformerTest, org.apache.commons.math3.linear.SingularValueDecompositionTest, org.apache.commons.math3.linear.SingularValueSolverTest, org.apache.commons.math3.linear.SparseFieldMatrixTest, org.apache.commons.math3.linear.SparseFieldVectorTest, org.apache.commons.math3.linear.SparseRealMatrixTest, org.apache.commons.math3.linear.SparseRealVectorTest, org.apache.commons.math3.linear.SymmLQTest, org.apache.commons.math3.linear.TriDiagonalTransformerTest, org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest, org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest, org.apache.commons.math3.ml.clustering.DBSCANClustererTest, org.apache.commons.math3.ml.clustering.FuzzyKMeansClustererTest, org.apache.commons.math3.ml.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClustererTest, org.apache.commons.math3.ml.clustering.evaluation.SumOfClusterVariancesTest, org.apache.commons.math3.ml.distance.CanberraDistanceTest, org.apache.commons.math3.ml.distance.ChebyshevDistanceTest, org.apache.commons.math3.ml.distance.EarthMoversDistanceTest, org.apache.commons.math3.ml.distance.EuclideanDistanceTest, org.apache.commons.math3.ml.distance.ManhattanDistanceTest, org.apache.commons.math3.ml.neuralnet.MapUtilsTest, org.apache.commons.math3.ml.neuralnet.NetworkTest, org.apache.commons.math3.ml.neuralnet.NeuronTest, org.apache.commons.math3.ml.neuralnet.oned.NeuronStringTest, org.apache.commons.math3.ml.neuralnet.sofm.KohonenTrainingTaskTest, org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateActionTest, org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunctionFactoryTest, org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunctionFactoryTest, org.apache.commons.math3.ml.neuralnet.sofm.util.ExponentialDecayFunctionTest, org.apache.commons.math3.ml.neuralnet.sofm.util.QuasiSigmoidDecayFunctionTest, org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2DTest, org.apache.commons.math3.ode.ContinuousOutputModelTest, org.apache.commons.math3.ode.FirstOrderConverterTest, org.apache.commons.math3.ode.JacobianMatricesTest, org.apache.commons.math3.ode.events.EventFilterTest, org.apache.commons.math3.ode.events.EventStateTest, org.apache.commons.math3.ode.events.OverlappingEventsTest, org.apache.commons.math3.ode.events.ReappearingEventTest, org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.GillIntegratorTest, org.apache.commons.math3.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.LutherIntegratorTest, org.apache.commons.math3.ode.nonstiff.LutherStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest, org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest, org.apache.commons.math3.ode.sampling.StepNormalizerTest, org.apache.commons.math3.optim.PointValuePairTest, org.apache.commons.math3.optim.PointVectorValuePairTest, org.apache.commons.math3.optim.SimplePointCheckerTest, org.apache.commons.math3.optim.SimpleValueCheckerTest, org.apache.commons.math3.optim.SimpleVectorValueCheckerTest, org.apache.commons.math3.optim.linear.SimplexSolverTest, org.apache.commons.math3.optim.linear.SimplexTableauTest, org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizerTest, org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterTest, org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest, org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest, org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizerTest, org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTest, org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTestValidation, org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest, org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest, org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest, org.apache.commons.math3.optim.univariate.BracketFinderTest, org.apache.commons.math3.optim.univariate.BrentOptimizerTest, org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizerTest, org.apache.commons.math3.optim.univariate.SimpleUnivariateValueCheckerTest, org.apache.commons.math3.optimization.MultivariateDifferentiableMultiStartOptimizerTest, org.apache.commons.math3.optimization.MultivariateDifferentiableVectorMultiStartOptimizerTest, org.apache.commons.math3.optimization.MultivariateMultiStartOptimizerTest, org.apache.commons.math3.optimization.PointValuePairTest, org.apache.commons.math3.optimization.PointVectorValuePairTest, org.apache.commons.math3.optimization.SimplePointCheckerTest, org.apache.commons.math3.optimization.SimpleValueCheckerTest, org.apache.commons.math3.optimization.SimpleVectorValueCheckerTest, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest, org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest, org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest, org.apache.commons.math3.optimization.direct.PowellOptimizerTest, org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math3.optimization.fitting.CurveFitterTest, org.apache.commons.math3.optimization.fitting.GaussianFitterTest, org.apache.commons.math3.optimization.fitting.HarmonicFitterTest, org.apache.commons.math3.optimization.fitting.PolynomialFitterTest, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math3.optimization.general.MinpackTest, org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math3.optimization.linear.SimplexSolverTest, org.apache.commons.math3.optimization.linear.SimplexTableauTest, org.apache.commons.math3.optimization.univariate.BracketFinderTest, org.apache.commons.math3.optimization.univariate.BrentOptimizerTest, org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueCheckerTest, org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest, org.apache.commons.math3.primes.PrimesTest, org.apache.commons.math3.random.AbstractRandomGeneratorTest, org.apache.commons.math3.random.BitsStreamGeneratorTest, org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math3.random.EmpiricalDistributionTest, org.apache.commons.math3.random.GaussianRandomGeneratorTest, org.apache.commons.math3.random.HaltonSequenceGeneratorTest, org.apache.commons.math3.random.ISAACTest, org.apache.commons.math3.random.MersenneTwisterTest, org.apache.commons.math3.random.RandomAdaptorTest, org.apache.commons.math3.random.RandomDataGeneratorTest, org.apache.commons.math3.random.RandomGeneratorAbstractTest, org.apache.commons.math3.random.RandomGeneratorFactoryTest, org.apache.commons.math3.random.SobolSequenceGeneratorTest, org.apache.commons.math3.random.StableRandomGeneratorTest, org.apache.commons.math3.random.SynchronizedRandomGeneratorTest, org.apache.commons.math3.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math3.random.UniformRandomGeneratorTest, org.apache.commons.math3.random.UnitSphereRandomVectorGeneratorTest, org.apache.commons.math3.random.ValueServerTest, org.apache.commons.math3.random.Well1024aTest, org.apache.commons.math3.random.Well19937aTest, org.apache.commons.math3.random.Well19937cTest, org.apache.commons.math3.random.Well44497aTest, org.apache.commons.math3.random.Well44497bTest, org.apache.commons.math3.random.Well512aTest, org.apache.commons.math3.special.BetaTest, org.apache.commons.math3.special.ErfTest, org.apache.commons.math3.special.GammaTest, org.apache.commons.math3.stat.CertifiedDataTest, org.apache.commons.math3.stat.FrequencyTest, org.apache.commons.math3.stat.StatUtilsTest, org.apache.commons.math3.stat.clustering.DBSCANClustererTest, org.apache.commons.math3.stat.clustering.EuclideanDoublePointTest, org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math3.stat.correlation.CovarianceTest, org.apache.commons.math3.stat.correlation.KendallsCorrelationTest, org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math3.stat.correlation.StorelessCovarianceTest, org.apache.commons.math3.stat.data.LewTest, org.apache.commons.math3.stat.data.LotteryTest, org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math3.stat.descriptive.moment.InteractionTest, org.apache.commons.math3.stat.descriptive.moment.KurtosisTest, org.apache.commons.math3.stat.descriptive.moment.MeanTest, org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math3.stat.descriptive.moment.SkewnessTest, org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math3.stat.descriptive.moment.VarianceTest, org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math3.stat.descriptive.rank.MaxTest, org.apache.commons.math3.stat.descriptive.rank.MedianTest, org.apache.commons.math3.stat.descriptive.rank.MinTest, org.apache.commons.math3.stat.descriptive.rank.PercentileTest, org.apache.commons.math3.stat.descriptive.summary.ProductTest, org.apache.commons.math3.stat.descriptive.summary.SumLogTest, org.apache.commons.math3.stat.descriptive.summary.SumSqTest, org.apache.commons.math3.stat.descriptive.summary.SumTest, org.apache.commons.math3.stat.inference.BinomialTestTest, org.apache.commons.math3.stat.inference.ChiSquareTestTest, org.apache.commons.math3.stat.inference.GTestTest, org.apache.commons.math3.stat.inference.KolmogorovSmirnovTestTest, org.apache.commons.math3.stat.inference.MannWhitneyUTestTest, org.apache.commons.math3.stat.inference.OneWayAnovaTest, org.apache.commons.math3.stat.inference.TTestTest, org.apache.commons.math3.stat.inference.TestUtilsTest, org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest, org.apache.commons.math3.stat.interval.AgrestiCoullIntervalTest, org.apache.commons.math3.stat.interval.ClopperPearsonIntervalTest, org.apache.commons.math3.stat.interval.IntervalUtilsTest, org.apache.commons.math3.stat.interval.NormalApproximationIntervalTest, org.apache.commons.math3.stat.interval.WilsonScoreIntervalTest, org.apache.commons.math3.stat.ranking.NaturalRankingTest, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math3.stat.regression.SimpleRegressionTest, org.apache.commons.math3.transform.FastCosineTransformerTest, org.apache.commons.math3.transform.FastFourierTransformerTest, org.apache.commons.math3.transform.FastHadamardTransformerTest, org.apache.commons.math3.transform.FastSineTransformerTest, org.apache.commons.math3.util.ArithmeticUtilsTest, org.apache.commons.math3.util.BigRealFieldTest, org.apache.commons.math3.util.BigRealTest, org.apache.commons.math3.util.CombinationsTest, org.apache.commons.math3.util.CombinatoricsUtilsTest, org.apache.commons.math3.util.ContinuedFractionTest, org.apache.commons.math3.util.Decimal64Test, org.apache.commons.math3.util.DefaultTransformerTest, org.apache.commons.math3.util.FastMathStrictComparisonTest, org.apache.commons.math3.util.FastMathTest, org.apache.commons.math3.util.FastMathTestPerformance, org.apache.commons.math3.util.IncrementorTest, org.apache.commons.math3.util.MathArraysTest, org.apache.commons.math3.util.MathUtilsTest, org.apache.commons.math3.util.MultidimensionalCounterTest, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest, org.apache.commons.math3.util.OpenIntToFieldTest, org.apache.commons.math3.util.PairTest, org.apache.commons.math3.util.PrecisionTest, org.apache.commons.math3.util.ResizableDoubleArrayTest, org.apache.commons.math3.util.TransformerMapTest], complianceLevel=7, outputFolder=., json=true}
09:54:57.826 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Available processors (cores): 4
09:54:57.832 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Free memory: 894 MB
09:54:57.832 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Maximum memory: 3 GB
09:54:57.832 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Total memory available to JVM: 981 MB
09:54:57.832 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Java version: 1.8.0_181
09:54:57.833 [main] INFO  fr.inria.lille.repair.nopol.NoPol - JAVA_HOME: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/
09:54:57.833 [main] INFO  fr.inria.lille.repair.nopol.NoPol - PATH: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:/usr/lib/oar/oardodo:/usr/lib/oar/oardodo:/usr/local/bin:/usr/bin:/bin:/usr/games
10:01:12.064 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #1
10:01:12.065 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.stat.descriptive.rank.Percentile:428 which is executed by 3 tests
1071639902
10:01:13.757 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math3.optim.univariate.BrentOptimizerTest.testQuinticMinStatistics(BrentOptimizerTest.java:167)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
10:01:13.827 [pool-4-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 10
<> Ignored tests: 0
<> Failed tests: 1
~ testQuinticMinStatistics(org.apache.commons.math3.optim.univariate.BrentOptimizerTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math3.optim.univariate.BrentOptimizerTest.testQuinticMinStatistics(BrentOptimizerTest.java:167)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math3.optim.univariate.BrentOptimizerTest.testQuinticMinStatistics(BrentOptimizerTest.java:167)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
10:01:14.586 [pool-5-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testQuinticMinStatistics(org.apache.commons.math3.optim.univariate.BrentOptimizerTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math3.optim.univariate.BrentOptimizerTest.testQuinticMinStatistics(BrentOptimizerTest.java:167)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math3.optim.univariate.BrentOptimizerTest.testQuinticMinStatistics(BrentOptimizerTest.java:167)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
10:01:14.590 [pool-6-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testQuinticMinStatistics(org.apache.commons.math3.optim.univariate.BrentOptimizerTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math3.optim.univariate.BrentOptimizerTest.testQuinticMinStatistics(BrentOptimizerTest.java:167)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

10:01:14.591 [pool-3-thread-1] DEBUG tests.output - Failing tests with false: 
[testQuinticMinStatistics(org.apache.commons.math3.optim.univariate.BrentOptimizerTest): null]
10:01:14.591 [pool-3-thread-1] DEBUG tests.output - Failing tests with true: 
[testQuinticMinStatistics(org.apache.commons.math3.optim.univariate.BrentOptimizerTest): null]
10:01:14.591 [pool-3-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.stat.descriptive.rank.Percentile:428.
10:01:14.592 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #2
10:01:14.592 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.stat.descriptive.rank.Percentile:386 which is executed by 3 tests
1071639902
10:01:14.741 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math3.optim.univariate.BrentOptimizerTest.testQuinticMinStatistics(BrentOptimizerTest.java:167)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
10:01:14.792 [pool-8-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (44 ms)
<> Total tests run: 10
<> Ignored tests: 0
<> Failed tests: 1
~ testQuinticMinStatistics(org.apache.commons.math3.optim.univariate.BrentOptimizerTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math3.optim.univariate.BrentOptimizerTest.testQuinticMinStatistics(BrentOptimizerTest.java:167)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

10:01:15.047 [pool-7-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Percentile.java:174: error: missing return statement
    }
    ^
10:01:15.055 [pool-7-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Percentile extends org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic implements java.io.Serializable {
    private static final long serialVersionUID = -8091216485095130416L;

    private static final int MIN_SELECT_SIZE = 15;

    private static final int MAX_CACHED_LEVELS = 10;

    private double quantile = 0.0;

    private int[] cachedPivots;

    public Percentile() {
        this(50.0);
    }

    public Percentile(final double p) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
        setQuantile(p);
        cachedPivots = null;
    }

    public Percentile(org.apache.commons.math3.stat.descriptive.rank.Percentile original) throws org.apache.commons.math3.exception.NullArgumentException {
        org.apache.commons.math3.stat.descriptive.rank.Percentile.copy(original, this);
    }

    @java.lang.Override
    public void setData(final double[] values) {
        if (values == null) {
            cachedPivots = null;
        }else {
            cachedPivots = new int[(1 << (org.apache.commons.math3.stat.descriptive.rank.Percentile.MAX_CACHED_LEVELS)) - 1];
            java.util.Arrays.fill(cachedPivots, (-1));
        }
        super.setData(values);
    }

    @java.lang.Override
    public void setData(final double[] values, final int begin, final int length) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
        if (values == null) {
            cachedPivots = null;
        }else {
            cachedPivots = new int[(1 << (org.apache.commons.math3.stat.descriptive.rank.Percentile.MAX_CACHED_LEVELS)) - 1];
            java.util.Arrays.fill(cachedPivots, (-1));
        }
        super.setData(values, begin, length);
    }

    public double evaluate(final double p) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
        return evaluate(getDataRef(), p);
    }

    public double evaluate(final double[] values, final double p) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
        test(values, 0, 0);
        return evaluate(values, 0, values.length, p);
    }

    @java.lang.Override
    public double evaluate(final double[] values, final int start, final int length) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
        return evaluate(values, start, length, quantile);
    }

    public double evaluate(final double[] values, final int begin, final int length, final double p) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
        test(values, begin, length);
        if ((p > 100) || (p <= 0)) {
            throw new org.apache.commons.math3.exception.OutOfRangeException(org.apache.commons.math3.exception.util.LocalizedFormats.OUT_OF_BOUNDS_QUANTILE_VALUE, p, 0, 100);
        }
        if (length == 0) {
            return java.lang.Double.NaN;
        }
        if (length == 1) {
            return values[begin];
        }
        double n = length;
        double pos = (p * (n + 1)) / 100;
        double fpos = org.apache.commons.math3.util.FastMath.floor(pos);
        int intPos = ((int) (fpos));
        double dif = pos - fpos;
        double[] work;
        int[] pivotsHeap;
        if (values == (getDataRef())) {
            work = getDataRef();
            pivotsHeap = cachedPivots;
        }else {
            work = new double[length];
            java.lang.System.arraycopy(values, begin, work, 0, length);
            pivotsHeap = new int[(1 << (org.apache.commons.math3.stat.descriptive.rank.Percentile.MAX_CACHED_LEVELS)) - 1];
            java.util.Arrays.fill(pivotsHeap, (-1));
        }
        if (pos < 1) {
            return select(work, pivotsHeap, 0);
        }
        if (pos >= n) {
            return select(work, pivotsHeap, (length - 1));
        }
        double lower = select(work, pivotsHeap, (intPos - 1));
        double upper = select(work, pivotsHeap, intPos);
        return lower + (dif * (upper - lower));
    }

    private double select(final double[] work, final int[] pivotsHeap, final int k) {
        int begin = 0;
        int end = work.length;
        int node = 0;
        while ((end - begin) > (org.apache.commons.math3.stat.descriptive.rank.Percentile.MIN_SELECT_SIZE)) {
            final int pivot;
            if ((node < (pivotsHeap.length)) && ((pivotsHeap[node]) >= 0)) {
                pivot = pivotsHeap[node];
            }else {
                pivot = partition(work, begin, end, medianOf3(work, begin, end));
                if (node < (pivotsHeap.length)) {
                    pivotsHeap[node] = pivot;
                }
            }
            if (k == pivot) {
                return work[k];
            }else
                if (k < pivot) {
                    end = pivot;
                    node = org.apache.commons.math3.util.FastMath.min(((2 * node) + 1), pivotsHeap.length);
                }else {
                    begin = pivot + 1;
                    node = org.apache.commons.math3.util.FastMath.min(((2 * node) + 2), pivotsHeap.length);
                }

        } 
        insertionSort(work, begin, end);
        return work[k];
    }

    int medianOf3(final double[] work, final int begin, final int end) {
        final int inclusiveEnd = end - 1;
        final int middle = begin + ((inclusiveEnd - begin) / 2);
        final double wBegin = work[begin];
        final double wMiddle = work[middle];
        final double wEnd = work[inclusiveEnd];
        if (wBegin < wMiddle) {
            if (wMiddle < wEnd) {
                return middle;
            }else {
                return wBegin < wEnd ? inclusiveEnd : begin;
            }
        }else {
            if (wBegin < wEnd) {
                return begin;
            }else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(1).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("wBegin",wBegin);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("middle",middle);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("wEnd",wEnd);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.apache.commons.math3.stat.descriptive.rank.Percentile.this.cachedPivots",org.apache.commons.math3.stat.descriptive.rank.Percentile.this.cachedPivots);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.apache.commons.math3.stat.descriptive.rank.Percentile.MAX_CACHED_LEVELS",org.apache.commons.math3.stat.descriptive.rank.Percentile.MAX_CACHED_LEVELS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("work",work);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("inclusiveEnd",inclusiveEnd);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.apache.commons.math3.stat.descriptive.rank.Percentile.MIN_SELECT_SIZE",org.apache.commons.math3.stat.descriptive.rank.Percentile.MIN_SELECT_SIZE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("end",end);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.apache.commons.math3.stat.descriptive.rank.Percentile.this.quantile",org.apache.commons.math3.stat.descriptive.rank.Percentile.this.quantile);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("wMiddle",wMiddle);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("begin",begin);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return wMiddle < wEnd ? inclusiveEnd : middle;

            }
        }
    }

    private int partition(final double[] work, final int begin, final int end, final int pivot) {
        final double value = work[pivot];
        work[pivot] = work[begin];
        int i = begin + 1;
        int j = end - 1;
        while (i < j) {
            while ((i < j) && ((work[j]) > value)) {
                --j;
            } 
            while ((i < j) && ((work[i]) < value)) {
                ++i;
            } 
            if (i < j) {
                final double tmp = work[i];
                work[(i++)] = work[j];
                work[(j--)] = tmp;
            }
        } 
        if ((i >= end) || ((work[i]) > value)) {
            --i;
        }
        work[begin] = work[i];
        work[i] = value;
        return i;
    }

    private void insertionSort(final double[] work, final int begin, final int end) {
        for (int j = begin + 1; j < end; j++) {
            final double saved = work[j];
            int i = j - 1;
            while ((i >= begin) && (saved < (work[i]))) {
                work[(i + 1)] = work[i];
                i--;
            } 
            work[(i + 1)] = saved;
        }
    }

    public double getQuantile() {
        return quantile;
    }

    public void setQuantile(final double p) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
        if ((p <= 0) || (p > 100)) {
            throw new org.apache.commons.math3.exception.OutOfRangeException(org.apache.commons.math3.exception.util.LocalizedFormats.OUT_OF_BOUNDS_QUANTILE_VALUE, p, 0, 100);
        }
        quantile = p;
    }

    @java.lang.Override
    public org.apache.commons.math3.stat.descriptive.rank.Percentile copy() {
        org.apache.commons.math3.stat.descriptive.rank.Percentile result = new org.apache.commons.math3.stat.descriptive.rank.Percentile();
        org.apache.commons.math3.stat.descriptive.rank.Percentile.copy(this, result);
        return result;
    }

    public static void copy(org.apache.commons.math3.stat.descriptive.rank.Percentile source, org.apache.commons.math3.stat.descriptive.rank.Percentile dest) throws org.apache.commons.math3.exception.NullArgumentException {
        org.apache.commons.math3.util.MathUtils.checkNotNull(source);
        org.apache.commons.math3.util.MathUtils.checkNotNull(dest);
        dest.setData(source.getDataRef());
        if ((source.cachedPivots) != null) {
            java.lang.System.arraycopy(source.cachedPivots, 0, dest.cachedPivots, 0, source.cachedPivots.length);
        }
        dest.quantile = source.quantile;
    }
}
10:01:15.056 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
10:01:15.056 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #3
10:01:15.056 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.stat.descriptive.rank.Percentile:384 which is executed by 3 tests
1071639902
10:01:15.199 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math3.optim.univariate.BrentOptimizerTest.testQuinticMinStatistics(BrentOptimizerTest.java:167)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
10:01:15.248 [pool-10-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (43 ms)
<> Total tests run: 10
<> Ignored tests: 0
<> Failed tests: 1
~ testQuinticMinStatistics(org.apache.commons.math3.optim.univariate.BrentOptimizerTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math3.optim.univariate.BrentOptimizerTest.testQuinticMinStatistics(BrentOptimizerTest.java:167)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

10:01:15.473 [pool-9-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Percentile.java:174: error: missing return statement
    }
    ^
10:01:15.481 [pool-9-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Percentile extends org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic implements java.io.Serializable {
    private static final long serialVersionUID = -8091216485095130416L;

    private static final int MIN_SELECT_SIZE = 15;

    private static final int MAX_CACHED_LEVELS = 10;

    private double quantile = 0.0;

    private int[] cachedPivots;

    public Percentile() {
        this(50.0);
    }

    public Percentile(final double p) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
        setQuantile(p);
        cachedPivots = null;
    }

    public Percentile(org.apache.commons.math3.stat.descriptive.rank.Percentile original) throws org.apache.commons.math3.exception.NullArgumentException {
        org.apache.commons.math3.stat.descriptive.rank.Percentile.copy(original, this);
    }

    @java.lang.Override
    public void setData(final double[] values) {
        if (values == null) {
            cachedPivots = null;
        }else {
            cachedPivots = new int[(1 << (org.apache.commons.math3.stat.descriptive.rank.Percentile.MAX_CACHED_LEVELS)) - 1];
            java.util.Arrays.fill(cachedPivots, (-1));
        }
        super.setData(values);
    }

    @java.lang.Override
    public void setData(final double[] values, final int begin, final int length) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
        if (values == null) {
            cachedPivots = null;
        }else {
            cachedPivots = new int[(1 << (org.apache.commons.math3.stat.descriptive.rank.Percentile.MAX_CACHED_LEVELS)) - 1];
            java.util.Arrays.fill(cachedPivots, (-1));
        }
        super.setData(values, begin, length);
    }

    public double evaluate(final double p) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
        return evaluate(getDataRef(), p);
    }

    public double evaluate(final double[] values, final double p) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
        test(values, 0, 0);
        return evaluate(values, 0, values.length, p);
    }

    @java.lang.Override
    public double evaluate(final double[] values, final int start, final int length) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
        return evaluate(values, start, length, quantile);
    }

    public double evaluate(final double[] values, final int begin, final int length, final double p) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
        test(values, begin, length);
        if ((p > 100) || (p <= 0)) {
            throw new org.apache.commons.math3.exception.OutOfRangeException(org.apache.commons.math3.exception.util.LocalizedFormats.OUT_OF_BOUNDS_QUANTILE_VALUE, p, 0, 100);
        }
        if (length == 0) {
            return java.lang.Double.NaN;
        }
        if (length == 1) {
            return values[begin];
        }
        double n = length;
        double pos = (p * (n + 1)) / 100;
        double fpos = org.apache.commons.math3.util.FastMath.floor(pos);
        int intPos = ((int) (fpos));
        double dif = pos - fpos;
        double[] work;
        int[] pivotsHeap;
        if (values == (getDataRef())) {
            work = getDataRef();
            pivotsHeap = cachedPivots;
        }else {
            work = new double[length];
            java.lang.System.arraycopy(values, begin, work, 0, length);
            pivotsHeap = new int[(1 << (org.apache.commons.math3.stat.descriptive.rank.Percentile.MAX_CACHED_LEVELS)) - 1];
            java.util.Arrays.fill(pivotsHeap, (-1));
        }
        if (pos < 1) {
            return select(work, pivotsHeap, 0);
        }
        if (pos >= n) {
            return select(work, pivotsHeap, (length - 1));
        }
        double lower = select(work, pivotsHeap, (intPos - 1));
        double upper = select(work, pivotsHeap, intPos);
        return lower + (dif * (upper - lower));
    }

    private double select(final double[] work, final int[] pivotsHeap, final int k) {
        int begin = 0;
        int end = work.length;
        int node = 0;
        while ((end - begin) > (org.apache.commons.math3.stat.descriptive.rank.Percentile.MIN_SELECT_SIZE)) {
            final int pivot;
            if ((node < (pivotsHeap.length)) && ((pivotsHeap[node]) >= 0)) {
                pivot = pivotsHeap[node];
            }else {
                pivot = partition(work, begin, end, medianOf3(work, begin, end));
                if (node < (pivotsHeap.length)) {
                    pivotsHeap[node] = pivot;
                }
            }
            if (k == pivot) {
                return work[k];
            }else
                if (k < pivot) {
                    end = pivot;
                    node = org.apache.commons.math3.util.FastMath.min(((2 * node) + 1), pivotsHeap.length);
                }else {
                    begin = pivot + 1;
                    node = org.apache.commons.math3.util.FastMath.min(((2 * node) + 2), pivotsHeap.length);
                }

        } 
        insertionSort(work, begin, end);
        return work[k];
    }

    int medianOf3(final double[] work, final int begin, final int end) {
        final int inclusiveEnd = end - 1;
        final int middle = begin + ((inclusiveEnd - begin) / 2);
        final double wBegin = work[begin];
        final double wMiddle = work[middle];
        final double wEnd = work[inclusiveEnd];
        if (wBegin < wMiddle) {
            if (wMiddle < wEnd) {
                return middle;
            }else {
                return wBegin < wEnd ? inclusiveEnd : begin;
            }
        }else {
            if (wBegin < wEnd) {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(2).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("wBegin",wBegin);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("middle",middle);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("wEnd",wEnd);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.apache.commons.math3.stat.descriptive.rank.Percentile.this.cachedPivots",org.apache.commons.math3.stat.descriptive.rank.Percentile.this.cachedPivots);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.apache.commons.math3.stat.descriptive.rank.Percentile.MAX_CACHED_LEVELS",org.apache.commons.math3.stat.descriptive.rank.Percentile.MAX_CACHED_LEVELS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("work",work);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("inclusiveEnd",inclusiveEnd);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.apache.commons.math3.stat.descriptive.rank.Percentile.MIN_SELECT_SIZE",org.apache.commons.math3.stat.descriptive.rank.Percentile.MIN_SELECT_SIZE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("end",end);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.apache.commons.math3.stat.descriptive.rank.Percentile.this.quantile",org.apache.commons.math3.stat.descriptive.rank.Percentile.this.quantile);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("wMiddle",wMiddle);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("begin",begin);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return begin;

            }else {
                return wMiddle < wEnd ? inclusiveEnd : middle;
            }
        }
    }

    private int partition(final double[] work, final int begin, final int end, final int pivot) {
        final double value = work[pivot];
        work[pivot] = work[begin];
        int i = begin + 1;
        int j = end - 1;
        while (i < j) {
            while ((i < j) && ((work[j]) > value)) {
                --j;
            } 
            while ((i < j) && ((work[i]) < value)) {
                ++i;
            } 
            if (i < j) {
                final double tmp = work[i];
                work[(i++)] = work[j];
                work[(j--)] = tmp;
            }
        } 
        if ((i >= end) || ((work[i]) > value)) {
            --i;
        }
        work[begin] = work[i];
        work[i] = value;
        return i;
    }

    private void insertionSort(final double[] work, final int begin, final int end) {
        for (int j = begin + 1; j < end; j++) {
            final double saved = work[j];
            int i = j - 1;
            while ((i >= begin) && (saved < (work[i]))) {
                work[(i + 1)] = work[i];
                i--;
            } 
            work[(i + 1)] = saved;
        }
    }

    public double getQuantile() {
        return quantile;
    }

    public void setQuantile(final double p) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
        if ((p <= 0) || (p > 100)) {
            throw new org.apache.commons.math3.exception.OutOfRangeException(org.apache.commons.math3.exception.util.LocalizedFormats.OUT_OF_BOUNDS_QUANTILE_VALUE, p, 0, 100);
        }
        quantile = p;
    }

    @java.lang.Override
    public org.apache.commons.math3.stat.descriptive.rank.Percentile copy() {
        org.apache.commons.math3.stat.descriptive.rank.Percentile result = new org.apache.commons.math3.stat.descriptive.rank.Percentile();
        org.apache.commons.math3.stat.descriptive.rank.Percentile.copy(this, result);
        return result;
    }

    public static void copy(org.apache.commons.math3.stat.descriptive.rank.Percentile source, org.apache.commons.math3.stat.descriptive.rank.Percentile dest) throws org.apache.commons.math3.exception.NullArgumentException {
        org.apache.commons.math3.util.MathUtils.checkNotNull(source);
        org.apache.commons.math3.util.MathUtils.checkNotNull(dest);
        dest.setData(source.getDataRef());
        if ((source.cachedPivots) != null) {
            java.lang.System.arraycopy(source.cachedPivots, 0, dest.cachedPivots, 0, source.cachedPivots.length);
        }
        dest.quantile = source.quantile;
    }
}
10:01:15.482 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
10:01:15.482 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #4
10:01:15.482 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.stat.descriptive.rank.Percentile:383 which is executed by 3 tests
1071639902
10:01:15.626 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math3.optim.univariate.BrentOptimizerTest.testQuinticMinStatistics(BrentOptimizerTest.java:167)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
10:01:15.673 [pool-12-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (43 ms)
<> Total tests run: 10
<> Ignored tests: 0
<> Failed tests: 1
~ testQuinticMinStatistics(org.apache.commons.math3.optim.univariate.BrentOptimizerTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math3.optim.univariate.BrentOptimizerTest.testQuinticMinStatistics(BrentOptimizerTest.java:167)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

10:01:15.890 [pool-11-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Percentile.java:173: error: missing return statement
    }
    ^
10:01:15.897 [pool-11-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Percentile extends org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic implements java.io.Serializable {
    private static final long serialVersionUID = -8091216485095130416L;

    private static final int MIN_SELECT_SIZE = 15;

    private static final int MAX_CACHED_LEVELS = 10;

    private double quantile = 0.0;

    private int[] cachedPivots;

    public Percentile() {
        this(50.0);
    }

    public Percentile(final double p) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
        setQuantile(p);
        cachedPivots = null;
    }

    public Percentile(org.apache.commons.math3.stat.descriptive.rank.Percentile original) throws org.apache.commons.math3.exception.NullArgumentException {
        org.apache.commons.math3.stat.descriptive.rank.Percentile.copy(original, this);
    }

    @java.lang.Override
    public void setData(final double[] values) {
        if (values == null) {
            cachedPivots = null;
        }else {
            cachedPivots = new int[(1 << (org.apache.commons.math3.stat.descriptive.rank.Percentile.MAX_CACHED_LEVELS)) - 1];
            java.util.Arrays.fill(cachedPivots, (-1));
        }
        super.setData(values);
    }

    @java.lang.Override
    public void setData(final double[] values, final int begin, final int length) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
        if (values == null) {
            cachedPivots = null;
        }else {
            cachedPivots = new int[(1 << (org.apache.commons.math3.stat.descriptive.rank.Percentile.MAX_CACHED_LEVELS)) - 1];
            java.util.Arrays.fill(cachedPivots, (-1));
        }
        super.setData(values, begin, length);
    }

    public double evaluate(final double p) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
        return evaluate(getDataRef(), p);
    }

    public double evaluate(final double[] values, final double p) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
        test(values, 0, 0);
        return evaluate(values, 0, values.length, p);
    }

    @java.lang.Override
    public double evaluate(final double[] values, final int start, final int length) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
        return evaluate(values, start, length, quantile);
    }

    public double evaluate(final double[] values, final int begin, final int length, final double p) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
        test(values, begin, length);
        if ((p > 100) || (p <= 0)) {
            throw new org.apache.commons.math3.exception.OutOfRangeException(org.apache.commons.math3.exception.util.LocalizedFormats.OUT_OF_BOUNDS_QUANTILE_VALUE, p, 0, 100);
        }
        if (length == 0) {
            return java.lang.Double.NaN;
        }
        if (length == 1) {
            return values[begin];
        }
        double n = length;
        double pos = (p * (n + 1)) / 100;
        double fpos = org.apache.commons.math3.util.FastMath.floor(pos);
        int intPos = ((int) (fpos));
        double dif = pos - fpos;
        double[] work;
        int[] pivotsHeap;
        if (values == (getDataRef())) {
            work = getDataRef();
            pivotsHeap = cachedPivots;
        }else {
            work = new double[length];
            java.lang.System.arraycopy(values, begin, work, 0, length);
            pivotsHeap = new int[(1 << (org.apache.commons.math3.stat.descriptive.rank.Percentile.MAX_CACHED_LEVELS)) - 1];
            java.util.Arrays.fill(pivotsHeap, (-1));
        }
        if (pos < 1) {
            return select(work, pivotsHeap, 0);
        }
        if (pos >= n) {
            return select(work, pivotsHeap, (length - 1));
        }
        double lower = select(work, pivotsHeap, (intPos - 1));
        double upper = select(work, pivotsHeap, intPos);
        return lower + (dif * (upper - lower));
    }

    private double select(final double[] work, final int[] pivotsHeap, final int k) {
        int begin = 0;
        int end = work.length;
        int node = 0;
        while ((end - begin) > (org.apache.commons.math3.stat.descriptive.rank.Percentile.MIN_SELECT_SIZE)) {
            final int pivot;
            if ((node < (pivotsHeap.length)) && ((pivotsHeap[node]) >= 0)) {
                pivot = pivotsHeap[node];
            }else {
                pivot = partition(work, begin, end, medianOf3(work, begin, end));
                if (node < (pivotsHeap.length)) {
                    pivotsHeap[node] = pivot;
                }
            }
            if (k == pivot) {
                return work[k];
            }else
                if (k < pivot) {
                    end = pivot;
                    node = org.apache.commons.math3.util.FastMath.min(((2 * node) + 1), pivotsHeap.length);
                }else {
                    begin = pivot + 1;
                    node = org.apache.commons.math3.util.FastMath.min(((2 * node) + 2), pivotsHeap.length);
                }

        } 
        insertionSort(work, begin, end);
        return work[k];
    }

    int medianOf3(final double[] work, final int begin, final int end) {
        final int inclusiveEnd = end - 1;
        final int middle = begin + ((inclusiveEnd - begin) / 2);
        final double wBegin = work[begin];
        final double wMiddle = work[middle];
        final double wEnd = work[inclusiveEnd];
        if (wBegin < wMiddle) {
            if (wMiddle < wEnd) {
                return middle;
            }else {
                return wBegin < wEnd ? inclusiveEnd : begin;
            }
        }else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(3).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("middle",middle);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.apache.commons.math3.stat.descriptive.rank.Percentile.this.cachedPivots",org.apache.commons.math3.stat.descriptive.rank.Percentile.this.cachedPivots);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("wBegin < wEnd",wBegin < wEnd);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("work",work);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("wMiddle",wMiddle);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("wBegin",wBegin);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("wEnd",wEnd);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.apache.commons.math3.stat.descriptive.rank.Percentile.MAX_CACHED_LEVELS",org.apache.commons.math3.stat.descriptive.rank.Percentile.MAX_CACHED_LEVELS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("inclusiveEnd",inclusiveEnd);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.apache.commons.math3.stat.descriptive.rank.Percentile.MIN_SELECT_SIZE",org.apache.commons.math3.stat.descriptive.rank.Percentile.MIN_SELECT_SIZE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("end",end);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.apache.commons.math3.stat.descriptive.rank.Percentile.this.quantile",org.apache.commons.math3.stat.descriptive.rank.Percentile.this.quantile);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("begin",begin);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectionEnds();
            }
            if (runtimeAngelicValue) if (wBegin < wEnd) {
                return begin;
            }else {
                return wMiddle < wEnd ? inclusiveEnd : middle;
            }
        }
    }

    private int partition(final double[] work, final int begin, final int end, final int pivot) {
        final double value = work[pivot];
        work[pivot] = work[begin];
        int i = begin + 1;
        int j = end - 1;
        while (i < j) {
            while ((i < j) && ((work[j]) > value)) {
                --j;
            } 
            while ((i < j) && ((work[i]) < value)) {
                ++i;
            } 
            if (i < j) {
                final double tmp = work[i];
                work[(i++)] = work[j];
                work[(j--)] = tmp;
            }
        } 
        if ((i >= end) || ((work[i]) > value)) {
            --i;
        }
        work[begin] = work[i];
        work[i] = value;
        return i;
    }

    private void insertionSort(final double[] work, final int begin, final int end) {
        for (int j = begin + 1; j < end; j++) {
            final double saved = work[j];
            int i = j - 1;
            while ((i >= begin) && (saved < (work[i]))) {
                work[(i + 1)] = work[i];
                i--;
            } 
            work[(i + 1)] = saved;
        }
    }

    public double getQuantile() {
        return quantile;
    }

    public void setQuantile(final double p) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
        if ((p <= 0) || (p > 100)) {
            throw new org.apache.commons.math3.exception.OutOfRangeException(org.apache.commons.math3.exception.util.LocalizedFormats.OUT_OF_BOUNDS_QUANTILE_VALUE, p, 0, 100);
        }
        quantile = p;
    }

    @java.lang.Override
    public org.apache.commons.math3.stat.descriptive.rank.Percentile copy() {
        org.apache.commons.math3.stat.descriptive.rank.Percentile result = new org.apache.commons.math3.stat.descriptive.rank.Percentile();
        org.apache.commons.math3.stat.descriptive.rank.Percentile.copy(this, result);
        return result;
    }

    public static void copy(org.apache.commons.math3.stat.descriptive.rank.Percentile source, org.apache.commons.math3.stat.descriptive.rank.Percentile dest) throws org.apache.commons.math3.exception.NullArgumentException {
        org.apache.commons.math3.util.MathUtils.checkNotNull(source);
        org.apache.commons.math3.util.MathUtils.checkNotNull(dest);
        dest.setData(source.getDataRef());
        if ((source.cachedPivots) != null) {
            java.lang.System.arraycopy(source.cachedPivots, 0, dest.cachedPivots, 0, source.cachedPivots.length);
        }
        dest.quantile = source.quantile;
    }
}
10:01:15.897 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
10:01:15.897 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math3.optim.univariate.BrentOptimizerTest.testQuinticMinStatistics(BrentOptimizerTest.java:167)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
10:01:15.951 [pool-14-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (43 ms)
<> Total tests run: 10
<> Ignored tests: 0
<> Failed tests: 1
~ testQuinticMinStatistics(org.apache.commons.math3.optim.univariate.BrentOptimizerTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math3.optim.univariate.BrentOptimizerTest.testQuinticMinStatistics(BrentOptimizerTest.java:167)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math3.optim.univariate.BrentOptimizerTest.testQuinticMinStatistics(BrentOptimizerTest.java:167)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
10:01:16.208 [pool-15-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (28 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testQuinticMinStatistics(org.apache.commons.math3.optim.univariate.BrentOptimizerTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math3.optim.univariate.BrentOptimizerTest.testQuinticMinStatistics(BrentOptimizerTest.java:167)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math3.optim.univariate.BrentOptimizerTest.testQuinticMinStatistics(BrentOptimizerTest.java:167)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
10:01:16.211 [pool-16-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testQuinticMinStatistics(org.apache.commons.math3.optim.univariate.BrentOptimizerTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math3.optim.univariate.BrentOptimizerTest.testQuinticMinStatistics(BrentOptimizerTest.java:167)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

10:01:16.212 [pool-13-thread-1] DEBUG tests.output - Failing tests with false: 
[testQuinticMinStatistics(org.apache.commons.math3.optim.univariate.BrentOptimizerTest): null]
10:01:16.212 [pool-13-thread-1] DEBUG tests.output - Failing tests with true: 
[testQuinticMinStatistics(org.apache.commons.math3.optim.univariate.BrentOptimizerTest): null]
10:01:16.212 [pool-13-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.stat.descriptive.rank.Percentile:383.
10:01:16.212 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #5
10:01:16.212 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.stat.descriptive.rank.Percentile:349 which is executed by 5 tests
1071639902
10:01:16.352 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math3.optim.univariate.BrentOptimizerTest.testQuinticMinStatistics(BrentOptimizerTest.java:167)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
10:01:16.399 [pool-18-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (42 ms)
<> Total tests run: 10
<> Ignored tests: 0
<> Failed tests: 1
~ testQuinticMinStatistics(org.apache.commons.math3.optim.univariate.BrentOptimizerTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math3.optim.univariate.BrentOptimizerTest.testQuinticMinStatistics(BrentOptimizerTest.java:167)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

10:05:45.825 [pool-17-thread-1] DEBUG xxl.java.junit.TestSuiteExecution - Timeout after 200 seconds. Infinite loop?
10:07:12.972 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
10:07:53.409 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #6
10:08:50.926 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.stat.descriptive.rank.Percentile:348 which is executed by 5 tests
java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: Java heap space
	at java.util.concurrent.FutureTask.report(FutureTask.java:122)
	at java.util.concurrent.FutureTask.get(FutureTask.java:206)
	at fr.inria.lille.repair.Main.main(Main.java:106)
Caused by: java.lang.OutOfMemoryError: Java heap space
	at java.lang.StringCoding$StringEncoder.encode(StringCoding.java:300)
	at java.lang.StringCoding.encode(StringCoding.java:344)
	at java.lang.String.getBytes(String.java:918)
	at java.io.UnixFileSystem.canonicalize0(Native Method)
	at java.io.UnixFileSystem.canonicalize(UnixFileSystem.java:172)
	at java.io.File.getCanonicalPath(File.java:618)
	at java.io.File.getCanonicalFile(File.java:643)
	at spoon.support.compiler.FileSystemFile.<init>(FileSystemFile.java:43)
	at spoon.support.compiler.FileSystemFolder.getFiles(FileSystemFolder.java:63)
	at spoon.support.compiler.FileSystemFolder.getAllJavaFiles(FileSystemFolder.java:108)
	at spoon.support.compiler.FileSystemFolder.getAllJavaFiles(FileSystemFolder.java:114)
	at spoon.support.compiler.FileSystemFolder.getAllJavaFiles(FileSystemFolder.java:114)
	at spoon.support.compiler.FileSystemFolder.getAllJavaFiles(FileSystemFolder.java:114)
	at spoon.support.compiler.FileSystemFolder.getAllJavaFiles(FileSystemFolder.java:114)
	at spoon.support.compiler.FileSystemFolder.getAllJavaFiles(FileSystemFolder.java:114)
	at spoon.support.compiler.FileSystemFolder.getAllJavaFiles(FileSystemFolder.java:114)
	at spoon.support.compiler.FileSystemFolder.getAllJavaFiles(FileSystemFolder.java:114)
	at spoon.support.StandardEnvironment.verifySourceClasspath(StandardEnvironment.java:444)
	at spoon.support.StandardEnvironment.setSourceClasspath(StandardEnvironment.java:428)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.setSourceClasspath(JDTBasedSpoonCompiler.java:321)
	at fr.inria.lille.commons.spoon.util.SpoonModelLibrary.modelFor(SpoonModelLibrary.java:47)
	at fr.inria.lille.commons.spoon.SpoonedFile.<init>(SpoonedFile.java:61)
	at fr.inria.lille.commons.spoon.SpoonedClass.<init>(SpoonedClass.java:14)
	at fr.inria.lille.commons.spoon.SpoonedProject.forked(SpoonedProject.java:47)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:222)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:213)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:154)
	at fr.inria.lille.repair.Main$1.call(Main.java:101)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Usage: java -jar nopol.jar
                          [(-m|--mode) <repair|ranking>] (-e|--type) <condition|precondition|pre_then_cond|loop|arithmetic> [(-o|--oracle) <angelic|symbolic>] [(-y|--synthesis) <smt|dynamoth>] [(-l|--solver) <z3|cvc4>] [(-p|--solver-path) <solverPath>] (-s|--source) source1:source2:...:sourceN  (-c|--classpath) <classpath> [(-t|--test) test1:test2:...:testN ] [--complianceLevel <complianceLevel>] [--maxTime <maxTime>] [--maxTimeType <maxTimeType>] [(-z|--flocal) < cocospoon|dumb|gzoltar>] [--output <outputFolder>] [--json[:<outputJson>]]

  [(-m|--mode) <repair|ranking>]
        Define the mode of execution. (default: repair)

  (-e|--type) <condition|precondition|pre_then_cond|loop|arithmetic>
        The repair type (example fixing only conditions, or adding
        precondition). REQUIRED OPTION (default: condition)

  [(-o|--oracle) <angelic|symbolic>]
        Define the oracle (only used with repair mode). (default: angelic)

  [(-y|--synthesis) <smt|dynamoth>]
        Define the patch synthesis. (default: smt)

  [(-l|--solver) <z3|cvc4>]
        Define the solver (only used with smt synthesis). (default: z3)

  [(-p|--solver-path) <solverPath>]
        Define the solver binary path (only used with smt synthesis).

  (-s|--source) source1:source2:...:sourceN 
        Define the path to the source code of the project.

  (-c|--classpath) <classpath>
        Define the classpath of the project.

  [(-t|--test) test1:test2:...:testN ]
        Define the tests of the project (both failing and passing),
        fully-qualified, separated with ':' (even if the classpath contains
        other tests, only those are considered.

  [--complianceLevel <complianceLevel>]
        The compliance level of the project. (default: 7)

  [--maxTime <maxTime>]
        The maximum time execution in minute for the whole execution of
        Nopol.(default: 10)

  [--maxTimeType <maxTimeType>]
        The maximum time execution in minute for one type of patch. (default: 5)

  [(-z|--flocal) < cocospoon|dumb|gzoltar>]
        Define the fault localizer to be used. (default: gzoltar)

  [--output <outputFolder>]
        Define the location where the patches will be saved. (default: .)

  [--json[:<outputJson>]]
        Output a json file in the current working directory.

Command exited with non-zero status 255
8598.59user 10.86system 40:42.17elapsed 352%CPU (0avgtext+0avgdata 4476792maxresident)k
38968inputs+8512outputs (3major+1516290minor)pagefaults 0swaps


Node: graphene-20.nancy.grid5000.fr



Date: Sat Dec 29 10:35:38 EST 2018

