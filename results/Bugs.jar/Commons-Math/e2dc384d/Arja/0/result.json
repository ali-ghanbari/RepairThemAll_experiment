{
  "repair_end": "2018-12-29 11:41:42.138017", 
  "repair_begin": "2018-12-29 10:36:21.141153", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 325, 
          "faulty": "double[] work3=new double[nC];", 
          "type": "InsertBefore", 
          "seed": "iterationCounter.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 333, 
          "faulty": "double currentCost=current.getCost();", 
          "type": "InsertBefore", 
          "seed": "xNorm=FastMath.sqrt(xNorm);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 329, 
          "faulty": "evaluationCounter.incrementCount();", 
          "type": "Delete", 
          "seed": "lmPar=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_834/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:26:30.356700453 -0500\n@@ -322,15 +322,15 @@\n         double[] qtf     = new double[nR];\n         double[] work1   = new double[nC];\n         double[] work2   = new double[nC];\n-        double[] work3   = new double[nC];\n+        iterationCounter.incrementCount();\n+\t\tdouble[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n         //value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n-        double currentCost = current.getCost();\n+        xNorm = FastMath.sqrt(xNorm);\n+\t\tdouble currentCost = current.getCost();\n \n         // Outer loop.\n         boolean firstIteration = true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 318, 
          "faulty": "double xNorm=0;", 
          "type": "InsertBefore", 
          "seed": "iterationCounter.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 338, 
          "faulty": "iterationCounter.incrementCount();", 
          "type": "InsertBefore", 
          "seed": "xNorm=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 329, 
          "faulty": "evaluationCounter.incrementCount();", 
          "type": "Delete", 
          "seed": "lmPar=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_469/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:13:38.968868493 -0500\n@@ -315,7 +315,8 @@\n \n         // local point\n         double   delta   = 0;\n-        double   xNorm   = 0;\n+        iterationCounter.incrementCount();\n+\t\tdouble   xNorm   = 0;\n         double[] diag    = new double[nC];\n         double[] oldX    = new double[nC];\n         double[] oldRes  = new double[nR];\n@@ -325,8 +326,6 @@\n         double[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n         //value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n@@ -335,7 +334,8 @@\n         // Outer loop.\n         boolean firstIteration = true;\n         while (true) {\n-            iterationCounter.incrementCount();\n+            xNorm = 0;\n+\t\t\titerationCounter.incrementCount();\n \n             final Evaluation previous = current;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 325, 
          "faulty": "double[] work3=new double[nC];", 
          "type": "InsertBefore", 
          "seed": "iterationCounter.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 329, 
          "faulty": "evaluationCounter.incrementCount();", 
          "type": "Replace", 
          "seed": "lmPar=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_181/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:03:43.020094190 -0500\n@@ -322,11 +322,11 @@\n         double[] qtf     = new double[nR];\n         double[] work1   = new double[nC];\n         double[] work2   = new double[nC];\n-        double[] work3   = new double[nC];\n+        iterationCounter.incrementCount();\n+\t\tdouble[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n+        lmPar = 0;\n         //value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 336, 
          "faulty": "boolean firstIteration=true;", 
          "type": "InsertBefore", 
          "seed": "xNorm=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 318, 
          "faulty": "double xNorm=0;", 
          "type": "InsertBefore", 
          "seed": "iterationCounter.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 329, 
          "faulty": "evaluationCounter.incrementCount();", 
          "type": "Replace", 
          "seed": "lmPar=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_673/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:20:49.410541760 -0500\n@@ -315,7 +315,8 @@\n \n         // local point\n         double   delta   = 0;\n-        double   xNorm   = 0;\n+        iterationCounter.incrementCount();\n+\t\tdouble   xNorm   = 0;\n         double[] diag    = new double[nC];\n         double[] oldX    = new double[nC];\n         double[] oldRes  = new double[nR];\n@@ -325,14 +326,14 @@\n         double[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n+        lmPar = 0;\n         //value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n         double currentCost = current.getCost();\n \n-        // Outer loop.\n+        xNorm = 0;\n+\t\t// Outer loop.\n         boolean firstIteration = true;\n         while (true) {\n             iterationCounter.incrementCount();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 318, 
          "faulty": "double xNorm=0;", 
          "type": "InsertBefore", 
          "seed": "iterationCounter.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 329, 
          "faulty": "evaluationCounter.incrementCount();", 
          "type": "Replace", 
          "seed": "for (int k=0; k < nC; ++k) {\n  double xK=diag[k] * currentPoint[k];\n  xNorm+=xK * xK;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_379/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:10:25.113917194 -0500\n@@ -315,7 +315,8 @@\n \n         // local point\n         double   delta   = 0;\n-        double   xNorm   = 0;\n+        iterationCounter.incrementCount();\n+\t\tdouble   xNorm   = 0;\n         double[] diag    = new double[nC];\n         double[] oldX    = new double[nC];\n         double[] oldRes  = new double[nR];\n@@ -325,8 +326,10 @@\n         double[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n+        for (int k = 0; k < nC; ++k) {\n+\t\t\tdouble xK = diag[k] * currentPoint[k];\n+\t\t\txNorm += xK * xK;\n+\t\t}\n         //value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 321, 
          "faulty": "double[] oldRes=new double[nR];", 
          "type": "InsertBefore", 
          "seed": "iterationCounter.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 329, 
          "faulty": "evaluationCounter.incrementCount();", 
          "type": "Delete", 
          "seed": "this.qrRankingThreshold=qrRankingThreshold;"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_89/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:00:31.985129380 -0500\n@@ -318,15 +318,14 @@\n         double   xNorm   = 0;\n         double[] diag    = new double[nC];\n         double[] oldX    = new double[nC];\n-        double[] oldRes  = new double[nR];\n+        iterationCounter.incrementCount();\n+\t\tdouble[] oldRes  = new double[nR];\n         double[] qtf     = new double[nR];\n         double[] work1   = new double[nC];\n         double[] work2   = new double[nC];\n         double[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n         //value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 318, 
          "faulty": "double xNorm=0;", 
          "type": "InsertBefore", 
          "seed": "lmPar*=0.5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 325, 
          "faulty": "double[] work3=new double[nC];", 
          "type": "InsertBefore", 
          "seed": "iterationCounter.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 329, 
          "faulty": "evaluationCounter.incrementCount();", 
          "type": "Replace", 
          "seed": "lmPar=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_626/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:19:06.651097001 -0500\n@@ -315,18 +315,19 @@\n \n         // local point\n         double   delta   = 0;\n-        double   xNorm   = 0;\n+        lmPar *= 0.5;\n+\t\tdouble   xNorm   = 0;\n         double[] diag    = new double[nC];\n         double[] oldX    = new double[nC];\n         double[] oldRes  = new double[nR];\n         double[] qtf     = new double[nR];\n         double[] work1   = new double[nC];\n         double[] work2   = new double[nC];\n-        double[] work3   = new double[nC];\n+        iterationCounter.incrementCount();\n+\t\tdouble[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n+        lmPar = 0;\n         //value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/OptimumImpl.java", 
          "line": 61, 
          "faulty": "return iterations;", 
          "type": "Replace", 
          "seed": "return iterations;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 318, 
          "faulty": "double xNorm=0;", 
          "type": "InsertBefore", 
          "seed": "iterationCounter.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 329, 
          "faulty": "evaluationCounter.incrementCount();", 
          "type": "Delete", 
          "seed": "this.parRelativeTolerance=parRelativeTolerance;"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_1185/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:39:26.672467851 -0500\n@@ -315,7 +315,8 @@\n \n         // local point\n         double   delta   = 0;\n-        double   xNorm   = 0;\n+        iterationCounter.incrementCount();\n+\t\tdouble   xNorm   = 0;\n         double[] diag    = new double[nC];\n         double[] oldX    = new double[nC];\n         double[] oldRes  = new double[nR];\n@@ -325,8 +326,6 @@\n         double[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n         //value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 324, 
          "faulty": "double[] work2=new double[nC];", 
          "type": "InsertBefore", 
          "seed": "delta=(xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 318, 
          "faulty": "double xNorm=0;", 
          "type": "InsertBefore", 
          "seed": "iterationCounter.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 329, 
          "faulty": "evaluationCounter.incrementCount();", 
          "type": "Delete", 
          "seed": "this.parRelativeTolerance=parRelativeTolerance;"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_743/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:23:12.857766891 -0500\n@@ -315,18 +315,19 @@\n \n         // local point\n         double   delta   = 0;\n-        double   xNorm   = 0;\n+        iterationCounter.incrementCount();\n+\t\tdouble   xNorm   = 0;\n         double[] diag    = new double[nC];\n         double[] oldX    = new double[nC];\n         double[] oldRes  = new double[nR];\n         double[] qtf     = new double[nR];\n         double[] work1   = new double[nC];\n-        double[] work2   = new double[nC];\n+        delta = (xNorm == 0) ? initialStepBoundFactor\n+\t\t\t\t: (initialStepBoundFactor * xNorm);\n+\t\tdouble[] work2   = new double[nC];\n         double[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n         //value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 318, 
          "faulty": "double xNorm=0;", 
          "type": "InsertBefore", 
          "seed": "iterationCounter.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 325, 
          "faulty": "double[] work3=new double[nC];", 
          "type": "InsertBefore", 
          "seed": "for (int k=0; k < nC; ++k) {\n  double xK=diag[k] * currentPoint[k];\n  xNorm+=xK * xK;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 329, 
          "faulty": "evaluationCounter.incrementCount();", 
          "type": "Delete", 
          "seed": "lmPar=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_850/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:27:02.332527836 -0500\n@@ -315,18 +315,21 @@\n \n         // local point\n         double   delta   = 0;\n-        double   xNorm   = 0;\n+        iterationCounter.incrementCount();\n+\t\tdouble   xNorm   = 0;\n         double[] diag    = new double[nC];\n         double[] oldX    = new double[nC];\n         double[] oldRes  = new double[nR];\n         double[] qtf     = new double[nR];\n         double[] work1   = new double[nC];\n         double[] work2   = new double[nC];\n-        double[] work3   = new double[nC];\n+        for (int k = 0; k < nC; ++k) {\n+\t\t\tdouble xK = diag[k] * currentPoint[k];\n+\t\t\txNorm += xK * xK;\n+\t\t}\n+\t\tdouble[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n         //value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 318, 
          "faulty": "double xNorm=0;", 
          "type": "InsertBefore", 
          "seed": "iterationCounter.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 338, 
          "faulty": "iterationCounter.incrementCount();", 
          "type": "InsertBefore", 
          "seed": "xNorm=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 329, 
          "faulty": "evaluationCounter.incrementCount();", 
          "type": "Replace", 
          "seed": "lmPar=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_716/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:22:23.438033817 -0500\n@@ -315,7 +315,8 @@\n \n         // local point\n         double   delta   = 0;\n-        double   xNorm   = 0;\n+        iterationCounter.incrementCount();\n+\t\tdouble   xNorm   = 0;\n         double[] diag    = new double[nC];\n         double[] oldX    = new double[nC];\n         double[] oldRes  = new double[nR];\n@@ -325,8 +326,7 @@\n         double[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n+        lmPar = 0;\n         //value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n@@ -335,7 +335,8 @@\n         // Outer loop.\n         boolean firstIteration = true;\n         while (true) {\n-            iterationCounter.incrementCount();\n+            xNorm = 0;\n+\t\t\titerationCounter.incrementCount();\n \n             final Evaluation previous = current;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 317, 
          "faulty": "double delta=0;", 
          "type": "InsertBefore", 
          "seed": "iterationCounter.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 329, 
          "faulty": "evaluationCounter.incrementCount();", 
          "type": "Delete", 
          "seed": "this.qrRankingThreshold=qrRankingThreshold;"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_613/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:18:38.883247062 -0500\n@@ -313,7 +313,8 @@\n         /* Levenberg-Marquardt parameter. */\n         double lmPar = 0;\n \n-        // local point\n+        iterationCounter.incrementCount();\n+\t\t// local point\n         double   delta   = 0;\n         double   xNorm   = 0;\n         double[] diag    = new double[nC];\n@@ -325,8 +326,6 @@\n         double[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n         //value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 1013, 
          "faulty": "return new InternalData(weightedJacobian,permutation,solvedCols,diagR,jacNorm,beta);", 
          "type": "Replace", 
          "seed": "return new InternalData(weightedJacobian,permutation,solvedCols,diagR,jacNorm,beta);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 318, 
          "faulty": "double xNorm=0;", 
          "type": "InsertBefore", 
          "seed": "iterationCounter.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 329, 
          "faulty": "evaluationCounter.incrementCount();", 
          "type": "Delete", 
          "seed": "this.parRelativeTolerance=parRelativeTolerance;"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_1002/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:32:34.834729256 -0500\n@@ -315,7 +315,8 @@\n \n         // local point\n         double   delta   = 0;\n-        double   xNorm   = 0;\n+        iterationCounter.incrementCount();\n+\t\tdouble   xNorm   = 0;\n         double[] diag    = new double[nC];\n         double[] oldX    = new double[nC];\n         double[] oldRes  = new double[nR];\n@@ -325,8 +326,6 @@\n         double[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n         //value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n@@ -1010,7 +1009,8 @@\n             }\n         }\n \n-        return new InternalData(weightedJacobian, permutation, solvedCols, diagR, jacNorm, beta);\n+        return new InternalData(weightedJacobian, permutation, solvedCols,\n+\t\t\t\tdiagR, jacNorm, beta);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 352, 
          "faulty": "for (int i=0; i < nR; i++) {\n  qtf[i]=weightedResidual[i];\n}", 
          "type": "InsertBefore", 
          "seed": "for (int j=0; j < nC; ++j) {\n  diag[j]=FastMath.max(diag[j],jacNorm[j]);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 325, 
          "faulty": "double[] work3=new double[nC];", 
          "type": "InsertBefore", 
          "seed": "iterationCounter.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 329, 
          "faulty": "evaluationCounter.incrementCount();", 
          "type": "Delete", 
          "seed": "lmPar=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_122/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:01:36.924777414 -0500\n@@ -322,11 +322,10 @@\n         double[] qtf     = new double[nR];\n         double[] work1   = new double[nC];\n         double[] work2   = new double[nC];\n-        double[] work3   = new double[nC];\n+        iterationCounter.incrementCount();\n+\t\tdouble[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n         //value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n@@ -349,7 +348,10 @@\n \n             //residuals already have weights applied\n             double[] weightedResidual = currentResiduals;\n-            for (int i = 0; i < nR; i++) {\n+            for (int j = 0; j < nC; ++j) {\n+\t\t\t\tdiag[j] = FastMath.max(diag[j], jacNorm[j]);\n+\t\t\t}\n+\t\t\tfor (int i = 0; i < nR; i++) {\n                 qtf[i] = weightedResidual[i];\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 340, 
          "faulty": "final Evaluation previous=current;", 
          "type": "InsertBefore", 
          "seed": "currentResiduals=current.getResiduals().toArray();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 321, 
          "faulty": "double[] oldRes=new double[nR];", 
          "type": "InsertBefore", 
          "seed": "iterationCounter.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 329, 
          "faulty": "evaluationCounter.incrementCount();", 
          "type": "Delete", 
          "seed": "this.qrRankingThreshold=qrRankingThreshold;"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_729/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:22:48.237899864 -0500\n@@ -318,15 +318,14 @@\n         double   xNorm   = 0;\n         double[] diag    = new double[nC];\n         double[] oldX    = new double[nC];\n-        double[] oldRes  = new double[nR];\n+        iterationCounter.incrementCount();\n+\t\tdouble[] oldRes  = new double[nR];\n         double[] qtf     = new double[nR];\n         double[] work1   = new double[nC];\n         double[] work2   = new double[nC];\n         double[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n         //value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n@@ -337,7 +336,8 @@\n         while (true) {\n             iterationCounter.incrementCount();\n \n-            final Evaluation previous = current;\n+            currentResiduals = current.getResiduals().toArray();\n+\t\t\tfinal Evaluation previous = current;\n \n             // QR decomposition of the jacobian matrix\n             final InternalData internalData\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 336, 
          "faulty": "boolean firstIteration=true;", 
          "type": "InsertBefore", 
          "seed": "iterationCounter.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 329, 
          "faulty": "evaluationCounter.incrementCount();", 
          "type": "Replace", 
          "seed": "delta=(xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_1146/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:37:55.804966486 -0500\n@@ -325,14 +325,15 @@\n         double[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n+        delta = (xNorm == 0) ? initialStepBoundFactor\n+\t\t\t\t: (initialStepBoundFactor * xNorm);\n         //value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n         double currentCost = current.getCost();\n \n-        // Outer loop.\n+        iterationCounter.incrementCount();\n+\t\t// Outer loop.\n         boolean firstIteration = true;\n         while (true) {\n             iterationCounter.incrementCount();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 352, 
          "faulty": "for (int i=0; i < nR; i++) {\n  qtf[i]=weightedResidual[i];\n}", 
          "type": "InsertBefore", 
          "seed": "currentResiduals=current.getResiduals().toArray();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 321, 
          "faulty": "double[] oldRes=new double[nR];", 
          "type": "InsertBefore", 
          "seed": "iterationCounter.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 329, 
          "faulty": "evaluationCounter.incrementCount();", 
          "type": "Delete", 
          "seed": "this.qrRankingThreshold=qrRankingThreshold;"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_214/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:04:48.859737554 -0500\n@@ -318,15 +318,14 @@\n         double   xNorm   = 0;\n         double[] diag    = new double[nC];\n         double[] oldX    = new double[nC];\n-        double[] oldRes  = new double[nR];\n+        iterationCounter.incrementCount();\n+\t\tdouble[] oldRes  = new double[nR];\n         double[] qtf     = new double[nR];\n         double[] work1   = new double[nC];\n         double[] work2   = new double[nC];\n         double[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n         //value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n@@ -349,7 +348,8 @@\n \n             //residuals already have weights applied\n             double[] weightedResidual = currentResiduals;\n-            for (int i = 0; i < nR; i++) {\n+            currentResiduals = current.getResiduals().toArray();\n+\t\t\tfor (int i = 0; i < nR; i++) {\n                 qtf[i] = weightedResidual[i];\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 325, 
          "faulty": "double[] work3=new double[nC];", 
          "type": "InsertBefore", 
          "seed": "iterationCounter.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 329, 
          "faulty": "evaluationCounter.incrementCount();", 
          "type": "Delete", 
          "seed": "lmPar=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_336/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:08:52.274419623 -0500\n@@ -322,11 +322,10 @@\n         double[] qtf     = new double[nR];\n         double[] work1   = new double[nC];\n         double[] work2   = new double[nC];\n-        double[] work3   = new double[nC];\n+        iterationCounter.incrementCount();\n+\t\tdouble[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n         //value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 324, 
          "faulty": "double[] work2=new double[nC];", 
          "type": "InsertBefore", 
          "seed": "delta=(xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 331, 
          "faulty": "Evaluation current=problem.evaluate(new ArrayRealVector(currentPoint));", 
          "type": "InsertBefore", 
          "seed": "iterationCounter.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 1013, 
          "faulty": "return new InternalData(weightedJacobian,permutation,solvedCols,diagR,jacNorm,beta);", 
          "type": "Replace", 
          "seed": "return new InternalData(weightedJacobian,permutation,solvedCols,diagR,jacNorm,beta);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 329, 
          "faulty": "evaluationCounter.incrementCount();", 
          "type": "Replace", 
          "seed": "lmPar=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_1134/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:37:29.269112134 -0500\n@@ -321,13 +321,15 @@\n         double[] oldRes  = new double[nR];\n         double[] qtf     = new double[nR];\n         double[] work1   = new double[nC];\n-        double[] work2   = new double[nC];\n+        delta = (xNorm == 0) ? initialStepBoundFactor\n+\t\t\t\t: (initialStepBoundFactor * xNorm);\n+\t\tdouble[] work2   = new double[nC];\n         double[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n-        //value will be reassigned in the loop\n+        lmPar = 0;\n+        iterationCounter.incrementCount();\n+\t\t//value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n         double currentCost = current.getCost();\n@@ -1010,7 +1012,8 @@\n             }\n         }\n \n-        return new InternalData(weightedJacobian, permutation, solvedCols, diagR, jacNorm, beta);\n+        return new InternalData(weightedJacobian, permutation, solvedCols,\n+\t\t\t\tdiagR, jacNorm, beta);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 351, 
          "faulty": "double[] weightedResidual=currentResiduals;", 
          "type": "InsertBefore", 
          "seed": "if (firstIteration) {\n  xNorm=0;\n  for (int k=0; k < nC; ++k) {\n    double dk=jacNorm[k];\n    if (dk == 0) {\n      dk=1.0;\n    }\n    double xk=dk * currentPoint[k];\n    xNorm+=xk * xk;\n    diag[k]=dk;\n  }\n  xNorm=FastMath.sqrt(xNorm);\n  delta=(xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 325, 
          "faulty": "double[] work3=new double[nC];", 
          "type": "InsertBefore", 
          "seed": "iterationCounter.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 329, 
          "faulty": "evaluationCounter.incrementCount();", 
          "type": "Delete", 
          "seed": "lmPar=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_194/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:04:08.143958092 -0500\n@@ -322,11 +322,10 @@\n         double[] qtf     = new double[nR];\n         double[] work1   = new double[nC];\n         double[] work2   = new double[nC];\n-        double[] work3   = new double[nC];\n+        iterationCounter.incrementCount();\n+\t\tdouble[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n         //value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n@@ -347,7 +346,22 @@\n             final double[] diagR = internalData.diagR;\n             final double[] jacNorm = internalData.jacNorm;\n \n-            //residuals already have weights applied\n+            if (firstIteration) {\n+\t\t\t\txNorm = 0;\n+\t\t\t\tfor (int k = 0; k < nC; ++k) {\n+\t\t\t\t\tdouble dk = jacNorm[k];\n+\t\t\t\t\tif (dk == 0) {\n+\t\t\t\t\t\tdk = 1.0;\n+\t\t\t\t\t}\n+\t\t\t\t\tdouble xk = dk * currentPoint[k];\n+\t\t\t\t\txNorm += xk * xk;\n+\t\t\t\t\tdiag[k] = dk;\n+\t\t\t\t}\n+\t\t\t\txNorm = FastMath.sqrt(xNorm);\n+\t\t\t\tdelta = (xNorm == 0) ? initialStepBoundFactor\n+\t\t\t\t\t\t: (initialStepBoundFactor * xNorm);\n+\t\t\t}\n+\t\t\t//residuals already have weights applied\n             double[] weightedResidual = currentResiduals;\n             for (int i = 0; i < nR; i++) {\n                 qtf[i] = weightedResidual[i];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 318, 
          "faulty": "double xNorm=0;", 
          "type": "InsertBefore", 
          "seed": "iterationCounter.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 329, 
          "faulty": "evaluationCounter.incrementCount();", 
          "type": "Replace", 
          "seed": "lmPar*=0.5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_549/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:16:17.936008917 -0500\n@@ -315,7 +315,8 @@\n \n         // local point\n         double   delta   = 0;\n-        double   xNorm   = 0;\n+        iterationCounter.incrementCount();\n+\t\tdouble   xNorm   = 0;\n         double[] diag    = new double[nC];\n         double[] oldX    = new double[nC];\n         double[] oldRes  = new double[nR];\n@@ -325,8 +326,7 @@\n         double[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n+        lmPar *= 0.5;\n         //value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 318, 
          "faulty": "double xNorm=0;", 
          "type": "InsertBefore", 
          "seed": "iterationCounter.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 329, 
          "faulty": "evaluationCounter.incrementCount();", 
          "type": "Replace", 
          "seed": "lmPar=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_274/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:06:47.771093613 -0500\n@@ -315,7 +315,8 @@\n \n         // local point\n         double   delta   = 0;\n-        double   xNorm   = 0;\n+        iterationCounter.incrementCount();\n+\t\tdouble   xNorm   = 0;\n         double[] diag    = new double[nC];\n         double[] oldX    = new double[nC];\n         double[] oldRes  = new double[nR];\n@@ -325,8 +326,7 @@\n         double[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n+        lmPar = 0;\n         //value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 1013, 
          "faulty": "return new InternalData(weightedJacobian,permutation,solvedCols,diagR,jacNorm,beta);", 
          "type": "Replace", 
          "seed": "return new InternalData(weightedJacobian,permutation,solvedCols,diagR,jacNorm,beta);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 325, 
          "faulty": "double[] work3=new double[nC];", 
          "type": "InsertBefore", 
          "seed": "iterationCounter.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 329, 
          "faulty": "evaluationCounter.incrementCount();", 
          "type": "Replace", 
          "seed": "lmPar=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_1009/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:32:47.514659573 -0500\n@@ -322,11 +322,11 @@\n         double[] qtf     = new double[nR];\n         double[] work1   = new double[nC];\n         double[] work2   = new double[nC];\n-        double[] work3   = new double[nC];\n+        iterationCounter.incrementCount();\n+\t\tdouble[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n+        lmPar = 0;\n         //value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n@@ -1010,7 +1010,8 @@\n             }\n         }\n \n-        return new InternalData(weightedJacobian, permutation, solvedCols, diagR, jacNorm, beta);\n+        return new InternalData(weightedJacobian, permutation, solvedCols,\n+\t\t\t\tdiagR, jacNorm, beta);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 318, 
          "faulty": "double xNorm=0;", 
          "type": "InsertBefore", 
          "seed": "iterationCounter.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 329, 
          "faulty": "evaluationCounter.incrementCount();", 
          "type": "Delete", 
          "seed": "for (int k=0; k < nC; ++k) {\n  double xK=diag[k] * currentPoint[k];\n  xNorm+=xK * xK;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_112/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:01:17.112884785 -0500\n@@ -315,7 +315,8 @@\n \n         // local point\n         double   delta   = 0;\n-        double   xNorm   = 0;\n+        iterationCounter.incrementCount();\n+\t\tdouble   xNorm   = 0;\n         double[] diag    = new double[nC];\n         double[] oldX    = new double[nC];\n         double[] oldRes  = new double[nR];\n@@ -325,8 +326,6 @@\n         double[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n         //value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 1013, 
          "faulty": "return new InternalData(weightedJacobian,permutation,solvedCols,diagR,jacNorm,beta);", 
          "type": "Replace", 
          "seed": "return new InternalData(weightedJacobian,permutation,solvedCols,diagR,jacNorm,beta);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 325, 
          "faulty": "double[] work3=new double[nC];", 
          "type": "InsertBefore", 
          "seed": "iterationCounter.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 338, 
          "faulty": "iterationCounter.incrementCount();", 
          "type": "InsertBefore", 
          "seed": "xNorm=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 329, 
          "faulty": "evaluationCounter.incrementCount();", 
          "type": "Replace", 
          "seed": "lmPar=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_1040/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:33:59.362264806 -0500\n@@ -322,11 +322,11 @@\n         double[] qtf     = new double[nR];\n         double[] work1   = new double[nC];\n         double[] work2   = new double[nC];\n-        double[] work3   = new double[nC];\n+        iterationCounter.incrementCount();\n+\t\tdouble[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n+        lmPar = 0;\n         //value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n@@ -335,7 +335,8 @@\n         // Outer loop.\n         boolean firstIteration = true;\n         while (true) {\n-            iterationCounter.incrementCount();\n+            xNorm = 0;\n+\t\t\titerationCounter.incrementCount();\n \n             final Evaluation previous = current;\n \n@@ -1010,7 +1011,8 @@\n             }\n         }\n \n-        return new InternalData(weightedJacobian, permutation, solvedCols, diagR, jacNorm, beta);\n+        return new InternalData(weightedJacobian, permutation, solvedCols,\n+\t\t\t\tdiagR, jacNorm, beta);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 321, 
          "faulty": "double[] oldRes=new double[nR];", 
          "type": "InsertBefore", 
          "seed": "iterationCounter.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 329, 
          "faulty": "evaluationCounter.incrementCount();", 
          "type": "Replace", 
          "seed": "lmPar=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_941/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:30:19.947461293 -0500\n@@ -318,15 +318,15 @@\n         double   xNorm   = 0;\n         double[] diag    = new double[nC];\n         double[] oldX    = new double[nC];\n-        double[] oldRes  = new double[nR];\n+        iterationCounter.incrementCount();\n+\t\tdouble[] oldRes  = new double[nR];\n         double[] qtf     = new double[nR];\n         double[] work1   = new double[nC];\n         double[] work2   = new double[nC];\n         double[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n+        lmPar = 0;\n         //value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/OptimumImpl.java", 
          "line": 61, 
          "faulty": "return iterations;", 
          "type": "Replace", 
          "seed": "return iterations;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 325, 
          "faulty": "double[] work3=new double[nC];", 
          "type": "InsertBefore", 
          "seed": "iterationCounter.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 329, 
          "faulty": "evaluationCounter.incrementCount();", 
          "type": "Replace", 
          "seed": "lmPar=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_887/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:28:17.500122099 -0500\n@@ -322,11 +322,11 @@\n         double[] qtf     = new double[nR];\n         double[] work1   = new double[nC];\n         double[] work2   = new double[nC];\n-        double[] work3   = new double[nC];\n+        iterationCounter.incrementCount();\n+\t\tdouble[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n+        lmPar = 0;\n         //value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 340, 
          "faulty": "final Evaluation previous=current;", 
          "type": "Replace", 
          "seed": "Evaluation previous=current;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 318, 
          "faulty": "double xNorm=0;", 
          "type": "InsertBefore", 
          "seed": "iterationCounter.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 329, 
          "faulty": "evaluationCounter.incrementCount();", 
          "type": "Delete", 
          "seed": "for (int k=0; k < nC; ++k) {\n  double xK=diag[k] * currentPoint[k];\n  xNorm+=xK * xK;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_175/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:03:31.500156598 -0500\n@@ -315,7 +315,8 @@\n \n         // local point\n         double   delta   = 0;\n-        double   xNorm   = 0;\n+        iterationCounter.incrementCount();\n+\t\tdouble   xNorm   = 0;\n         double[] diag    = new double[nC];\n         double[] oldX    = new double[nC];\n         double[] oldRes  = new double[nR];\n@@ -325,8 +326,6 @@\n         double[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n         //value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n@@ -337,7 +336,7 @@\n         while (true) {\n             iterationCounter.incrementCount();\n \n-            final Evaluation previous = current;\n+            Evaluation previous = current;\n \n             // QR decomposition of the jacobian matrix\n             final InternalData internalData\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 323, 
          "faulty": "double[] work1=new double[nC];", 
          "type": "InsertBefore", 
          "seed": "delta=(xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 325, 
          "faulty": "double[] work3=new double[nC];", 
          "type": "InsertBefore", 
          "seed": "iterationCounter.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 329, 
          "faulty": "evaluationCounter.incrementCount();", 
          "type": "Replace", 
          "seed": "lmPar=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_756/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:23:37.117635870 -0500\n@@ -320,13 +320,15 @@\n         double[] oldX    = new double[nC];\n         double[] oldRes  = new double[nR];\n         double[] qtf     = new double[nR];\n-        double[] work1   = new double[nC];\n+        delta = (xNorm == 0) ? initialStepBoundFactor\n+\t\t\t\t: (initialStepBoundFactor * xNorm);\n+\t\tdouble[] work1   = new double[nC];\n         double[] work2   = new double[nC];\n-        double[] work3   = new double[nC];\n+        iterationCounter.incrementCount();\n+\t\tdouble[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n+        lmPar = 0;\n         //value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 321, 
          "faulty": "double[] oldRes=new double[nR];", 
          "type": "InsertBefore", 
          "seed": "lmPar*=0.5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 325, 
          "faulty": "double[] work3=new double[nC];", 
          "type": "InsertBefore", 
          "seed": "iterationCounter.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 329, 
          "faulty": "evaluationCounter.incrementCount();", 
          "type": "Replace", 
          "seed": "lmPar=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_1178/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:39:14.500534634 -0500\n@@ -318,15 +318,16 @@\n         double   xNorm   = 0;\n         double[] diag    = new double[nC];\n         double[] oldX    = new double[nC];\n-        double[] oldRes  = new double[nR];\n+        lmPar *= 0.5;\n+\t\tdouble[] oldRes  = new double[nR];\n         double[] qtf     = new double[nR];\n         double[] work1   = new double[nC];\n         double[] work2   = new double[nC];\n-        double[] work3   = new double[nC];\n+        iterationCounter.incrementCount();\n+\t\tdouble[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n+        lmPar = 0;\n         //value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 318, 
          "faulty": "double xNorm=0;", 
          "type": "InsertBefore", 
          "seed": "lmPar*=0.5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 325, 
          "faulty": "double[] work3=new double[nC];", 
          "type": "InsertBefore", 
          "seed": "iterationCounter.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 329, 
          "faulty": "evaluationCounter.incrementCount();", 
          "type": "Delete", 
          "seed": "lmPar=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_598/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:18:11.607394475 -0500\n@@ -315,18 +315,18 @@\n \n         // local point\n         double   delta   = 0;\n-        double   xNorm   = 0;\n+        lmPar *= 0.5;\n+\t\tdouble   xNorm   = 0;\n         double[] diag    = new double[nC];\n         double[] oldX    = new double[nC];\n         double[] oldRes  = new double[nR];\n         double[] qtf     = new double[nR];\n         double[] work1   = new double[nC];\n         double[] work2   = new double[nC];\n-        double[] work3   = new double[nC];\n+        iterationCounter.incrementCount();\n+\t\tdouble[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n         //value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 1013, 
          "faulty": "return new InternalData(weightedJacobian,permutation,solvedCols,diagR,jacNorm,beta);", 
          "type": "Replace", 
          "seed": "return new InternalData(weightedJacobian,permutation,solvedCols,diagR,jacNorm,beta);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 325, 
          "faulty": "double[] work3=new double[nC];", 
          "type": "InsertBefore", 
          "seed": "iterationCounter.incrementCount();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java", 
          "line": 329, 
          "faulty": "evaluationCounter.incrementCount();", 
          "type": "Delete", 
          "seed": "lmPar=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 04:35:39.289939000 -0500\n+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_885/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\t2018-12-29 05:28:15.148134793 -0500\n@@ -322,11 +322,10 @@\n         double[] qtf     = new double[nR];\n         double[] work1   = new double[nC];\n         double[] work2   = new double[nC];\n-        double[] work3   = new double[nC];\n+        iterationCounter.incrementCount();\n+\t\tdouble[] work3   = new double[nC];\n \n \n-        // Evaluate the function at the starting point and calculate its norm.\n-        evaluationCounter.incrementCount();\n         //value will be reassigned in the loop\n         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n@@ -1010,7 +1009,8 @@\n             }\n         }\n \n-        return new InternalData(weightedJacobian, permutation, solvedCols, diagR, jacNorm, beta);\n+        return new InternalData(weightedJacobian, permutation, solvedCols,\n+\t\t\t\tdiagR, jacNorm, beta);\n     }\n \n     /**\n\n\n"
    }
  ]
}