{
  "repair_end": "2018-12-30 20:48:18.914905", 
  "repair_begin": "2018-12-30 19:29:49.105668", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "int nstart=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "throw new NumberIsTooSmallException(x,-0.5,true);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1226/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:38:14.663243195 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,27 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n             final double gammaAbs = SQRT_TWO_PI / x *\n                                     FastMath.pow(y, absX + 0.5) *\n                                     FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "int nstart=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Replace", 
          "seed": "boolean readyToNormalize=false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1265/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:39:46.616445586 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,31 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            boolean readyToNormalize = false;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "int nstart=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1174/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:36:15.729756011 -0500\n@@ -689,29 +689,30 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "Replace", 
          "seed": "final double y=absX + LANCZOS_G + 0.5;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_416/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:05:02.086013564 -0500\n@@ -694,24 +694,24 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "boolean calculatedB0=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 1 : -1;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1443/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:46:44.249804630 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,23 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "boolean calculatedB0=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "Delete", 
          "seed": "if (Double.isNaN(x) || Double.isInfinite(x)) {\n  return x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "final double ret=Gamma.regularizedGammaP(0.5,x * x,1.0e-15,10000);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1400/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:45:03.776526976 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,23 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "double prod1=1.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "int nstart=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1091/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:32:48.167163957 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,31 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tdouble prod1 = 1.0;\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "boolean calculatedB0=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 1 : -1;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1392/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:44:41.168238656 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,29 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 663, 
          "faulty": "if (absX <= 20.0) {\n  if (x >= 1.0) {\n    double prod=1.0;\n    double t=x;\n    while (t > 2.5) {\n      t-=1.0;\n      prod*=t;\n    }\n    ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n  }\n else {\n    double prod=x;\n    double t=x;\n    while (t < -0.5) {\n      t+=1.0;\n      prod*=t;\n    }\n    ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n  }\n}\n else {\n  final double y=absX + LANCZOS_G + 0.5;\n  final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);\n  if (x > 0.0) {\n    ret=gammaAbs;\n  }\n else {\n    ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int nstart=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "ret=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1420/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:45:54.005166415 -0500\n@@ -654,13 +654,15 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n         final double ret;\n         final double absX = FastMath.abs(x);\n-        if (absX <= 20.0) {\n+        int nstart = 0;\n+\t\tif (absX <= 20.0) {\n             if (x >= 1.0) {\n                 /*\n                  * From the recurrence relation\n@@ -689,29 +691,30 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "int ncalc=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 691, 
          "faulty": "t+=1.0;", 
          "type": "InsertBefore", 
          "seed": "boolean calculatedB0=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "double plast=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_829/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:22:39.279436748 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -688,30 +689,31 @@\n                 double prod = x;\n                 double t = x;\n                 while (t < -0.5) {\n-                    t += 1.0;\n+                    boolean calculatedB0 = false;\n+\t\t\t\t\tt += 1.0;\n                     prod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return x < 0 ? -ret : ret;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "double t=x;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1281/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:40:19.596874359 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,25 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            int nend = 0;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "Delete", 
          "seed": "int nend=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_406/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:04:37.153697833 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,23 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "double prod1=1.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "int nstart=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 664, 
          "faulty": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(x) || Double.isInfinite(x)) {\n  return x;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1157/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:35:37.149275137 -0500\n@@ -654,14 +654,18 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n         final double ret;\n         final double absX = FastMath.abs(x);\n         if (absX <= 20.0) {\n-            if (x >= 1.0) {\n+            if (Double.isNaN(x) || Double.isInfinite(x)) {\n+\t\t\t\treturn x;\n+\t\t\t}\n+\t\t\tif (x >= 1.0) {\n                 /*\n                  * From the recurrence relation\n                  * Gamma(x) = (x - 1) * ... * (x - n) * Gamma(x - n),\n@@ -689,29 +693,31 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tdouble prod1 = 1.0;\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return x < 0 ? -ret : ret;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "double t=x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 691, 
          "faulty": "t+=1.0;", 
          "type": "InsertBefore", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return 1 / (x * x);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1305/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:41:17.269621355 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -688,30 +689,34 @@\n                 double prod = x;\n                 double t = x;\n                 while (t < -0.5) {\n-                    t += 1.0;\n+                    if (x > 0 && x <= S_LIMIT) {\n+\t\t\t\t\t\treturn 1 / (x * x);\n+\t\t\t\t\t}\n+\t\t\t\t\tt += 1.0;\n                     prod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            int nend = 0;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 691, 
          "faulty": "t+=1.0;", 
          "type": "InsertBefore", 
          "seed": "final int magx=(int)x;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_507/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:09:10.113111709 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -688,30 +689,32 @@\n                 double prod = x;\n                 double t = x;\n                 while (t < -0.5) {\n-                    t += 1.0;\n+                    final int magx = (int) x;\n+\t\t\t\t\tt += 1.0;\n                     prod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            int nend = 0;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "int nstart=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "double t=x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "ret=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1190/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:36:51.514201715 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,31 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tdouble t = x;\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (Double.isNaN(x) || (x <= 0.0)) {\n  ret=Double.NaN;\n}\n else if (x < 0.5) {\n  return logGamma1p(x) - FastMath.log(x);\n}\n else if (x <= 2.5) {\n  return logGamma1p((x - 0.5) - 0.5);\n}\n else if (x <= 8.0) {\n  final int n=(int)FastMath.floor(x - 1.5);\n  double prod=1.0;\n  for (int i=1; i <= n; i++) {\n    prod*=x - i;\n  }\n  return logGamma1p(x - (n + 1)) + FastMath.log(prod);\n}\n else {\n  double sum=lanczos(x);\n  double tmp=x + LANCZOS_G + .5;\n  ret=((x + .5) * FastMath.log(tmp)) - tmp + HALF_LOG_2_PI + FastMath.log(sum / x);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "double p=INV_GAMMA1P_M1_P6;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "if (x <= 8.0) {\n  final int n=(int)FastMath.floor(x - 1.5);\n  double prod=1.0;\n  for (int i=1; i <= n; i++) {\n    prod*=x - i;\n  }\n  return logGamma1p(x - (n + 1)) + FastMath.log(prod);\n}\n else {\n  double sum=lanczos(x);\n  double tmp=x + LANCZOS_G + .5;\n  ret=((x + .5) * FastMath.log(tmp)) - tmp + HALF_LOG_2_PI + FastMath.log(sum / x);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_593/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:12:50.579951385 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,24 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "int nstart=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1292/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:40:47.069230616 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,27 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n             final double gammaAbs = SQRT_TWO_PI / x *\n                                     FastMath.pow(y, absX + 0.5) *\n                                     FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return x < 0 ? -ret : ret;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_903/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:25:32.733665680 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,24 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "boolean readyToInitialize=false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1359/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:43:24.087253059 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,27 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n             final double gammaAbs = SQRT_TWO_PI / x *\n                                     FastMath.pow(y, absX + 0.5) *\n                                     FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return x < 0 ? -ret : ret;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "double prod1=1.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_971/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:28:07.647634464 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,25 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tdouble prod1 = 1.0;\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "boolean calculatedB0=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "Delete", 
          "seed": "if (Double.isNaN(x) || Double.isInfinite(x)) {\n  return x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "final double ret=Gamma.regularizedGammaP(0.5,x * x,1.0e-15,10000);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Replace", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1433/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:46:19.417489376 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,24 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal int n = (int) FastMath.floor(x - 1.5);\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_333/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:01:21.035164221 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,24 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "boolean calculatedB0=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 1 : -1;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1416/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:45:45.605059580 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,29 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_963/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:27:53.903460468 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,27 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n             final double gammaAbs = SQRT_TWO_PI / x *\n                                     FastMath.pow(y, absX + 0.5) *\n                                     FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (Double.isNaN(x) || (x <= 0.0)) {\n  ret=Double.NaN;\n}\n else if (x < 0.5) {\n  return logGamma1p(x) - FastMath.log(x);\n}\n else if (x <= 2.5) {\n  return logGamma1p((x - 0.5) - 0.5);\n}\n else if (x <= 8.0) {\n  final int n=(int)FastMath.floor(x - 1.5);\n  double prod=1.0;\n  for (int i=1; i <= n; i++) {\n    prod*=x - i;\n  }\n  return logGamma1p(x - (n + 1)) + FastMath.log(prod);\n}\n else {\n  double sum=lanczos(x);\n  double tmp=x + LANCZOS_G + .5;\n  ret=((x + .5) * FastMath.log(tmp)) - tmp + HALF_LOG_2_PI + FastMath.log(sum / x);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Replace", 
          "seed": "double prod=1.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_650/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:15:11.677750555 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,25 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            double prod = 1.0;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "boolean calculatedB0=false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1185/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:36:40.414063491 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,30 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return x < 0 ? -ret : ret;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "double prod1=1.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "boolean calculatedB0=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "double n=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_800/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:21:27.462504074 -0500\n@@ -689,29 +689,30 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    boolean calculatedB0 = false;\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return x < 0 ? -ret : ret;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_881/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:24:43.177031866 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,25 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            int nend = 0;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 691, 
          "faulty": "t+=1.0;", 
          "type": "InsertBefore", 
          "seed": "double tmp=x + LANCZOS_G + .5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x < 0.5) {\n  return logGamma1p(x) - FastMath.log(x);\n}\n else if (x <= 2.5) {\n  return logGamma1p((x - 0.5) - 0.5);\n}\n else if (x <= 8.0) {\n  final int n=(int)FastMath.floor(x - 1.5);\n  double prod=1.0;\n  for (int i=1; i <= n; i++) {\n    prod*=x - i;\n  }\n  return logGamma1p(x - (n + 1)) + FastMath.log(prod);\n}\n else {\n  double sum=lanczos(x);\n  double tmp=x + LANCZOS_G + .5;\n  ret=((x + .5) * FastMath.log(tmp)) - tmp + HALF_LOG_2_PI + FastMath.log(sum / x);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1049/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:31:22.818093928 -0500\n@@ -688,30 +688,33 @@\n                 double prod = x;\n                 double t = x;\n                 while (t < -0.5) {\n-                    t += 1.0;\n-                    prod *= t;\n+                    double tmp = x + LANCZOS_G + .5;\n+\t\t\t\t\tt += 1.0;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            int nend = 0;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return x > 0 ? 1 : -1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_495/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:08:39.440731634 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,24 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return x < 0 ? -ret : ret;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "InsertBefore", 
          "seed": "boolean readyToInitialize=false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_965/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:27:56.683495671 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,26 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            int nend = 0;\n+\t\t\tboolean readyToInitialize = false;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "boolean readyToNormalize=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "double prod2=1.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_425/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:05:24.074291161 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,25 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            boolean readyToNormalize = false;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "int nstart=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "throw new NumberIsTooSmallException(x,-0.5,true);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1278/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:40:14.100802989 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,30 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_843/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:23:15.011898468 -0500\n@@ -694,24 +694,28 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            int nend = 0;\n+\t\t\tfinal double gammaAbs = SQRT_TWO_PI / x *\n                                     FastMath.pow(y, absX + 0.5) *\n                                     FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "ret=gammaAbs;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_553/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:11:08.782640558 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,24 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_272/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:58:38.665033789 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,27 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n             final double gammaAbs = SQRT_TWO_PI / x *\n                                     FastMath.pow(y, absX + 0.5) *\n                                     FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "double prod1=1.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1003/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:29:24.716608040 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,31 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tdouble prod1 = 1.0;\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return x < 0 ? -ret : ret;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_885/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:24:51.421137458 -0500\n@@ -694,24 +694,25 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            int nend = 0;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (Double.isNaN(x) || (x <= 0.0)) {\n  ret=Double.NaN;\n}\n else if (x < 0.5) {\n  return logGamma1p(x) - FastMath.log(x);\n}\n else if (x <= 2.5) {\n  return logGamma1p((x - 0.5) - 0.5);\n}\n else if (x <= 8.0) {\n  final int n=(int)FastMath.floor(x - 1.5);\n  double prod=1.0;\n  for (int i=1; i <= n; i++) {\n    prod*=x - i;\n  }\n  return logGamma1p(x - (n + 1)) + FastMath.log(prod);\n}\n else {\n  double sum=lanczos(x);\n  double tmp=x + LANCZOS_G + .5;\n  ret=((x + .5) * FastMath.log(tmp)) - tmp + HALF_LOG_2_PI + FastMath.log(sum / x);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 691, 
          "faulty": "t+=1.0;", 
          "type": "InsertBefore", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 1 : -1;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_672/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:16:06.630446688 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -688,30 +689,33 @@\n                 double prod = x;\n                 double t = x;\n                 while (t < -0.5) {\n-                    t += 1.0;\n+                    if (FastMath.abs(x) > 40) {\n+\t\t\t\t\t\treturn x > 0 ? 1 : -1;\n+\t\t\t\t\t}\n+\t\t\t\t\tt += 1.0;\n                     prod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "InsertBefore", 
          "seed": "double prod=x;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_794/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:21:13.138317239 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,25 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            double prod = x;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "boolean calculatedB0=false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1237/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:38:40.615583652 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,30 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_747/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:19:19.520874386 -0500\n@@ -694,24 +694,28 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            int nend = 0;\n+\t\t\tfinal double gammaAbs = SQRT_TWO_PI / x *\n                                     FastMath.pow(y, absX + 0.5) *\n                                     FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "boolean calculatedB0=false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1206/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:37:27.930654995 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,30 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "int nstart=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "throw new NumberIsTooSmallException(x,-0.5,true);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 663, 
          "faulty": "if (absX <= 20.0) {\n  if (x >= 1.0) {\n    double prod=1.0;\n    double t=x;\n    while (t > 2.5) {\n      t-=1.0;\n      prod*=t;\n    }\n    ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n  }\n else {\n    double prod=x;\n    double t=x;\n    while (t < -0.5) {\n      t+=1.0;\n      prod*=t;\n    }\n    ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n  }\n}\n else {\n  final double y=absX + LANCZOS_G + 0.5;\n  final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);\n  if (x > 0.0) {\n    ret=gammaAbs;\n  }\n else {\n    ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int nstart=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "if (x > 1.5) {\n  throw new NumberIsTooLargeException(x,1.5,true);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1301/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:41:09.061515247 -0500\n@@ -654,13 +654,15 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n         final double ret;\n         final double absX = FastMath.abs(x);\n-        if (absX <= 20.0) {\n+        int nstart = 0;\n+\t\tif (absX <= 20.0) {\n             if (x >= 1.0) {\n                 /*\n                  * From the recurrence relation\n@@ -689,29 +691,32 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    if (x > 1.5) {\n+\t\t\t\t\t\tthrow new NumberIsTooLargeException(x, 1.5, true);\n+\t\t\t\t\t}\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_615/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:13:45.776657417 -0500\n@@ -694,24 +694,25 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            int nend = 0;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return x < 0 ? -ret : ret;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1054/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:31:33.870232654 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,31 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            int nend = 0;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "int nstart=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "throw new NumberIsTooSmallException(x,-0.5,true);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 663, 
          "faulty": "if (absX <= 20.0) {\n  if (x >= 1.0) {\n    double prod=1.0;\n    double t=x;\n    while (t > 2.5) {\n      t-=1.0;\n      prod*=t;\n    }\n    ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n  }\n else {\n    double prod=x;\n    double t=x;\n    while (t < -0.5) {\n      t+=1.0;\n      prod*=t;\n    }\n    ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n  }\n}\n else {\n  final double y=absX + LANCZOS_G + 0.5;\n  final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);\n  if (x > 0.0) {\n    ret=gammaAbs;\n  }\n else {\n    ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int nstart=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1246/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:39:02.539870572 -0500\n@@ -654,13 +654,15 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n         final double ret;\n         final double absX = FastMath.abs(x);\n-        if (absX <= 20.0) {\n+        int nstart = 0;\n+\t\tif (absX <= 20.0) {\n             if (x >= 1.0) {\n                 /*\n                  * From the recurrence relation\n@@ -694,24 +696,24 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (Double.isNaN(x) || (x <= 0.0)) {\n  ret=Double.NaN;\n}\n else if (x < 0.5) {\n  return logGamma1p(x) - FastMath.log(x);\n}\n else if (x <= 2.5) {\n  return logGamma1p((x - 0.5) - 0.5);\n}\n else if (x <= 8.0) {\n  final int n=(int)FastMath.floor(x - 1.5);\n  double prod=1.0;\n  for (int i=1; i <= n; i++) {\n    prod*=x - i;\n  }\n  return logGamma1p(x - (n + 1)) + FastMath.log(prod);\n}\n else {\n  double sum=lanczos(x);\n  double tmp=x + LANCZOS_G + .5;\n  ret=((x + .5) * FastMath.log(tmp)) - tmp + HALF_LOG_2_PI + FastMath.log(sum / x);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "double sum=lanczos(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 694, 
          "faulty": "ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));", 
          "type": "InsertBefore", 
          "seed": "double sum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_863/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:23:56.196428894 -0500\n@@ -691,27 +691,31 @@\n                     t += 1.0;\n                     prod *= t;\n                 }\n-                ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+                double sum = 0;\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n             final double gammaAbs = SQRT_TWO_PI / x *\n                                     FastMath.pow(y, absX + 0.5) *\n                                     FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return x < 0 ? -ret : ret;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "double prod1=1.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "boolean calculatedB0=false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_765/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:20:07.081469860 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,30 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    boolean calculatedB0 = false;\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return x < 0 ? -ret : ret;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "double prod1=1.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Replace", 
          "seed": "double prod1=1.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_778/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:20:40.145885799 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,25 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            double prod1 = 1.0;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_969/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:28:04.931600089 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,31 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            int nend = 0;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "double prod1=1.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_894/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:25:10.869386310 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,31 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tdouble prod1 = 1.0;\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "double prod=1.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_944/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:27:09.606898847 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,26 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tdouble prod = 1.0;\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            int nend = 0;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "boolean readyToInitialize=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "InsertBefore", 
          "seed": "double sum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1423/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:45:59.525236599 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,28 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n             final double gammaAbs = SQRT_TWO_PI / x *\n                                     FastMath.pow(y, absX + 0.5) *\n                                     FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            double sum = 0;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (Double.isNaN(x) || (x <= 0.0)) {\n  ret=Double.NaN;\n}\n else if (x < 0.5) {\n  return logGamma1p(x) - FastMath.log(x);\n}\n else if (x <= 2.5) {\n  return logGamma1p((x - 0.5) - 0.5);\n}\n else if (x <= 8.0) {\n  final int n=(int)FastMath.floor(x - 1.5);\n  double prod=1.0;\n  for (int i=1; i <= n; i++) {\n    prod*=x - i;\n  }\n  return logGamma1p(x - (n + 1)) + FastMath.log(prod);\n}\n else {\n  double sum=lanczos(x);\n  double tmp=x + LANCZOS_G + .5;\n  ret=((x + .5) * FastMath.log(tmp)) - tmp + HALF_LOG_2_PI + FastMath.log(sum / x);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "double sum=lanczos(x);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_825/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:22:33.759365288 -0500\n@@ -694,24 +694,27 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n             final double gammaAbs = SQRT_TWO_PI / x *\n                                     FastMath.pow(y, absX + 0.5) *\n                                     FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "break;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "double prod=1.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1072/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:32:06.846646274 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,30 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "Delete", 
          "seed": "return trigamma(x + 1) + 1 / (x * x);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_947/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:27:15.094968501 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,23 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Replace", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "int ncalc=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_782/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:20:48.345993180 -0500\n@@ -694,24 +694,25 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            final int n = (int) FastMath.floor(x - 1.5);\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "int nstart=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1259/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:39:32.852266273 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,30 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Replace", 
          "seed": "double prod=x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1076/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:32:15.030748859 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,32 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            int nend = 0;\n+\t\t\tdouble prod = x;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return Gamma.logGamma1p(x - 1.0) + FastMath.log(x * (1.0 + x));"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_606/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:13:23.688375246 -0500\n@@ -694,24 +694,24 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "int nstart=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "throw new NumberIsTooSmallException(x,-0.5,true);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 663, 
          "faulty": "if (absX <= 20.0) {\n  if (x >= 1.0) {\n    double prod=1.0;\n    double t=x;\n    while (t > 2.5) {\n      t-=1.0;\n      prod*=t;\n    }\n    ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n  }\n else {\n    double prod=x;\n    double t=x;\n    while (t < -0.5) {\n      t+=1.0;\n      prod*=t;\n    }\n    ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n  }\n}\n else {\n  final double y=absX + LANCZOS_G + 0.5;\n  final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);\n  if (x > 0.0) {\n    ret=gammaAbs;\n  }\n else {\n    ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int nstart=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "if (x > 1.5) {\n  throw new NumberIsTooLargeException(x,1.5,true);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1336/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:42:31.806582049 -0500\n@@ -654,13 +654,15 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n         final double ret;\n         final double absX = FastMath.abs(x);\n-        if (absX <= 20.0) {\n+        int nstart = 0;\n+\t\tif (absX <= 20.0) {\n             if (x >= 1.0) {\n                 /*\n                  * From the recurrence relation\n@@ -689,29 +691,32 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    if (x > 1.5) {\n+\t\t\t\t\t\tthrow new NumberIsTooLargeException(x, 1.5, true);\n+\t\t\t\t\t}\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_289/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:59:22.525566059 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,24 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return x < 0 ? -ret : ret;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "double prod1=1.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "boolean calculatedB0=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "double n=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_845/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:23:17.751933815 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,30 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    boolean calculatedB0 = false;\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "boolean calculatedB0=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1447/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:46:52.485909119 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,25 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tint nend = 0;\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "int nstart=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1159/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:35:39.901309452 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,30 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return logGamma1p((x - 0.5) - 0.5);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1021/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:30:15.541248309 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,27 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+\t\t\t\treturn Double.NaN;\n+\t\t\t}\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_860/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:23:50.648357542 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,25 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            int nend = 0;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return x < 0 ? -ret : ret;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1070/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:32:04.114612022 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,25 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            int nend = 0;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "double prod1=1.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "int nstart=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1045/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:31:14.501989510 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,28 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tdouble prod1 = 1.0;\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n             final double gammaAbs = SQRT_TWO_PI / x *\n                                     FastMath.pow(y, absX + 0.5) *\n                                     FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "boolean calculatedB0=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "boolean calculatedB0=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 690, 
          "faulty": "while (t < -0.5) {\n  t+=1.0;\n  prod*=t;\n}", 
          "type": "InsertBefore", 
          "seed": "double inv=1 / (x * x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return -FastMath.log1p(invGamma1pm1(x));"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1379/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:44:13.451884738 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -687,31 +688,33 @@\n                  */\n                 double prod = x;\n                 double t = x;\n-                while (t < -0.5) {\n+                double inv = 1 / (x * x);\n+\t\t\t\twhile (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return x < 0 ? -ret : ret;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "double sum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1382/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:44:18.927954705 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,33 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            int nend = 0;\n+\t\t\tdouble sum = 0;\n+\t\t\tfinal int n = (int) FastMath.floor(x - 1.5);\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return x < 0 ? -ret : ret;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1348/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:43:02.082970904 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,32 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            int nend = 0;\n+\t\t\tfinal int n = (int) FastMath.floor(x - 1.5);\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "int nstart=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1141/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:34:58.412791932 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,30 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 690, 
          "faulty": "while (t < -0.5) {\n  t+=1.0;\n  prod*=t;\n}", 
          "type": "InsertBefore", 
          "seed": "while (t < -0.5) {\n  t+=1.0;\n  prod*=t;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Replace", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_706/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:17:33.963548626 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -688,30 +689,37 @@\n                 double prod = x;\n                 double t = x;\n                 while (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\twhile (t < -0.5) {\n                     t += 1.0;\n                     prod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            if (x > 0 && x <= S_LIMIT) {\n+\t\t\t\treturn -GAMMA - 1 / x;\n+\t\t\t}\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "double t=x;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1356/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:43:18.583182517 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,24 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "boolean calculatedB0=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "double sum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1198/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:37:11.266447609 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,25 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tdouble sum = 0;\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "int nstart=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1085/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:32:37.139025853 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,24 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "double prod1=1.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "int nstart=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 664, 
          "faulty": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(x) || Double.isInfinite(x)) {\n  return x;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1209/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:37:33.442723580 -0500\n@@ -654,14 +654,18 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n         final double ret;\n         final double absX = FastMath.abs(x);\n         if (absX <= 20.0) {\n-            if (x >= 1.0) {\n+            if (Double.isNaN(x) || Double.isInfinite(x)) {\n+\t\t\t\treturn x;\n+\t\t\t}\n+\t\t\tif (x >= 1.0) {\n                 /*\n                  * From the recurrence relation\n                  * Gamma(x) = (x - 1) * ... * (x - n) * Gamma(x - n),\n@@ -689,29 +693,31 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tdouble prod1 = 1.0;\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "double prod1=1.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "int nstart=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_996/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:29:08.160399178 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,31 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tdouble prod1 = 1.0;\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 716, 
          "faulty": "return ret;", 
          "type": "InsertBefore", 
          "seed": "double prod=1.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_519/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:09:37.649460620 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,25 +695,26 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n-        return ret;\n+        double prod = 1.0;\n+\t\treturn ret;\n     }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "boolean calculatedB0=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "if (x >= C_LIMIT) {\n  double inv=1 / (x * x);\n  return FastMath.log(x) - 0.5 / x - inv * ((1.0 / 12) + inv * (1.0 / 120 - inv / 252));\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1216/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:37:49.942928850 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,30 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 663, 
          "faulty": "if (absX <= 20.0) {\n  if (x >= 1.0) {\n    double prod=1.0;\n    double t=x;\n    while (t > 2.5) {\n      t-=1.0;\n      prod*=t;\n    }\n    ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n  }\n else {\n    double prod=x;\n    double t=x;\n    while (t < -0.5) {\n      t+=1.0;\n      prod*=t;\n    }\n    ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n  }\n}\n else {\n  final double y=absX + LANCZOS_G + 0.5;\n  final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);\n  if (x > 0.0) {\n    ret=gammaAbs;\n  }\n else {\n    ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int nstart=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "ret=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1429/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:46:11.141384235 -0500\n@@ -654,13 +654,15 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n         final double ret;\n         final double absX = FastMath.abs(x);\n-        if (absX <= 20.0) {\n+        int nstart = 0;\n+\t\tif (absX <= 20.0) {\n             if (x >= 1.0) {\n                 /*\n                  * From the recurrence relation\n@@ -689,29 +691,30 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "double prod1=1.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return x < 0 ? -ret : ret;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1087/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:32:39.871060070 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,32 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tdouble prod1 = 1.0;\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            int nend = 0;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_978/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:28:24.147843196 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,30 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Replace", 
          "seed": "double tmp=x + LANCZOS_G + .5;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_906/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:25:38.281736505 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,25 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            double tmp = x + LANCZOS_G + .5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "double prod1=1.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "int nstart=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 664, 
          "faulty": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(x) || Double.isInfinite(x)) {\n  return x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Replace", 
          "seed": "double p=INV_GAMMA1P_M1_P6;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1180/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:36:29.517927781 -0500\n@@ -654,14 +654,18 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n         final double ret;\n         final double absX = FastMath.abs(x);\n         if (absX <= 20.0) {\n-            if (x >= 1.0) {\n+            if (Double.isNaN(x) || Double.isInfinite(x)) {\n+\t\t\t\treturn x;\n+\t\t\t}\n+\t\t\tif (x >= 1.0) {\n                 /*\n                  * From the recurrence relation\n                  * Gamma(x) = (x - 1) * ... * (x - n) * Gamma(x - n),\n@@ -689,29 +693,32 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tdouble prod1 = 1.0;\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            double p = INV_GAMMA1P_M1_P6;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "boolean calculatedB0=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "return trigamma(x + 1) + 1 / (x * x);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1425/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:46:02.337272345 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,25 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tint nend = 0;\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "InsertBefore", 
          "seed": "boolean readyToInitialize=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "int ncalc=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1034/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:30:49.709678037 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,25 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            boolean readyToInitialize = false;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_891/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:25:05.321315353 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,30 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_643/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:14:57.841574909 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,24 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (Double.isNaN(x) || (x <= 0.0)) {\n  ret=Double.NaN;\n}\n else if (x < 0.5) {\n  return logGamma1p(x) - FastMath.log(x);\n}\n else if (x <= 2.5) {\n  return logGamma1p((x - 0.5) - 0.5);\n}\n else if (x <= 8.0) {\n  final int n=(int)FastMath.floor(x - 1.5);\n  double prod=1.0;\n  for (int i=1; i <= n; i++) {\n    prod*=x - i;\n  }\n  return logGamma1p(x - (n + 1)) + FastMath.log(prod);\n}\n else {\n  double sum=lanczos(x);\n  double tmp=x + LANCZOS_G + .5;\n  ret=((x + .5) * FastMath.log(tmp)) - tmp + HALF_LOG_2_PI + FastMath.log(sum / x);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "double b=INV_GAMMA1P_M1_B8;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_827/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:22:36.495400712 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,25 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tdouble b = INV_GAMMA1P_M1_B8;\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (Double.isNaN(x) || (x <= 0.0)) {\n  ret=Double.NaN;\n}\n else if (x < 0.5) {\n  return logGamma1p(x) - FastMath.log(x);\n}\n else if (x <= 2.5) {\n  return logGamma1p((x - 0.5) - 0.5);\n}\n else if (x <= 8.0) {\n  final int n=(int)FastMath.floor(x - 1.5);\n  double prod=1.0;\n  for (int i=1; i <= n; i++) {\n    prod*=x - i;\n  }\n  return logGamma1p(x - (n + 1)) + FastMath.log(prod);\n}\n else {\n  double sum=lanczos(x);\n  double tmp=x + LANCZOS_G + .5;\n  ret=((x + .5) * FastMath.log(tmp)) - tmp + HALF_LOG_2_PI + FastMath.log(sum / x);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "double b=INV_GAMMA1P_M1_B8;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_797/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:21:18.642389064 -0500\n@@ -694,24 +694,25 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tdouble b = INV_GAMMA1P_M1_B8;\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "int nstart=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Replace", 
          "seed": "boolean readyToNormalize=false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1201/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:37:16.806516562 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,31 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            boolean readyToNormalize = false;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "double prod1=1.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "break;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "Delete", 
          "seed": "return x < 0 ? -ret : ret;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1030/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:30:38.097532055 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,30 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tdouble prod1 = 1.0;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "int nstart=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1133/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:34:39.040550124 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,30 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "boolean calculatedB0=false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1232/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:38:28.443424084 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,30 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_397/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:04:15.109417739 -0500\n@@ -694,24 +694,24 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return x < 0 ? -ret : ret;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "double prod1=1.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "boolean calculatedB0=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "double n=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_787/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:20:56.610101297 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,30 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    boolean calculatedB0 = false;\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (Double.isNaN(x) || (x <= 0.0)) {\n  ret=Double.NaN;\n}\n else if (x < 0.5) {\n  return logGamma1p(x) - FastMath.log(x);\n}\n else if (x <= 2.5) {\n  return logGamma1p((x - 0.5) - 0.5);\n}\n else if (x <= 8.0) {\n  final int n=(int)FastMath.floor(x - 1.5);\n  double prod=1.0;\n  for (int i=1; i <= n; i++) {\n    prod*=x - i;\n  }\n  return logGamma1p(x - (n + 1)) + FastMath.log(prod);\n}\n else {\n  double sum=lanczos(x);\n  double tmp=x + LANCZOS_G + .5;\n  ret=((x + .5) * FastMath.log(tmp)) - tmp + HALF_LOG_2_PI + FastMath.log(sum / x);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 664, 
          "faulty": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}", 
          "type": "InsertBefore", 
          "seed": "double sum=lanczos(x);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_685/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:16:36.214820543 -0500\n@@ -654,14 +654,16 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n         final double ret;\n         final double absX = FastMath.abs(x);\n         if (absX <= 20.0) {\n-            if (x >= 1.0) {\n+            double sum = lanczos(x);\n+\t\t\tif (x >= 1.0) {\n                 /*\n                  * From the recurrence relation\n                  * Gamma(x) = (x - 1) * ... * (x - n) * Gamma(x - n),\n@@ -694,24 +696,24 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "double prod1=1.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "break;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "Delete", 
          "seed": "return x < 0 ? -ret : ret;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 691, 
          "faulty": "t+=1.0;", 
          "type": "InsertBefore", 
          "seed": "double tmp=x + LANCZOS_G + .5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x < 0.5) {\n  return logGamma1p(x) - FastMath.log(x);\n}\n else if (x <= 2.5) {\n  return logGamma1p((x - 0.5) - 0.5);\n}\n else if (x <= 8.0) {\n  final int n=(int)FastMath.floor(x - 1.5);\n  double prod=1.0;\n  for (int i=1; i <= n; i++) {\n    prod*=x - i;\n  }\n  return logGamma1p(x - (n + 1)) + FastMath.log(prod);\n}\n else {\n  double sum=lanczos(x);\n  double tmp=x + LANCZOS_G + .5;\n  ret=((x + .5) * FastMath.log(tmp)) - tmp + HALF_LOG_2_PI + FastMath.log(sum / x);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1065/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:31:55.866508599 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -688,30 +689,33 @@\n                 double prod = x;\n                 double t = x;\n                 while (t < -0.5) {\n-                    t += 1.0;\n-                    prod *= t;\n+                    double tmp = x + LANCZOS_G + .5;\n+\t\t\t\t\tt += 1.0;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tdouble prod1 = 1.0;\n+\t\t\tint nend = 0;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_440/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:06:05.918817475 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,25 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            int nend = 0;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "final double ret=Gamma.regularizedGammaP(0.5,x * x,1.0e-15,10000);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_757/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:19:47.701227341 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,27 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n             final double gammaAbs = SQRT_TWO_PI / x *\n                                     FastMath.pow(y, absX + 0.5) *\n                                     FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 691, 
          "faulty": "t+=1.0;", 
          "type": "Replace", 
          "seed": "while (t < -0.5) {\n  t+=1.0;\n  prod*=t;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "Delete", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_480/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:08:00.724250927 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -688,30 +689,32 @@\n                 double prod = x;\n                 double t = x;\n                 while (t < -0.5) {\n-                    t += 1.0;\n-                    prod *= t;\n+                    while (t < -0.5) {\n+\t\t\t\t\t\tt += 1.0;\n+\t\t\t\t\t\tprod *= t;\n+\t\t\t\t\t}\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "double prod1=1.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "Replace", 
          "seed": "int nstart=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_915/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:26:00.562020674 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,31 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tdouble prod1 = 1.0;\n+\t\t\tint nstart = 0;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "double prod1=1.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Replace", 
          "seed": "double prod1=1.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_848/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:23:23.268004946 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,25 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            double prod1 = 1.0;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return x < 0 ? -ret : ret;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(x) || Double.isInfinite(x)) {\n  return x;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1462/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:47:28.158361299 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,31 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            int nend = 0;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "int nstart=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "throw new NumberIsTooSmallException(x,-0.5,true);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1250/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:39:10.759977990 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,30 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "int nstart=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "throw new NumberIsTooSmallException(x,-0.5,true);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1192/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:36:54.234235581 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,30 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_459/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:06:58.795479380 -0500\n@@ -694,24 +694,24 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "int nstart=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "throw new NumberIsTooSmallException(x,-0.5,true);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return x < 0 ? -ret : ret;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return x > 0 ? 0 : 2;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1331/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:42:20.782440271 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,25 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            int nend = 0;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "boolean calculatedB0=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "Delete", 
          "seed": "boolean readyToInitialize=false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1309/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:41:25.533728122 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,29 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return x < 0 ? -ret : ret;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_952/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:27:26.167108962 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,31 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            int nend = 0;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return x < 0 ? -ret : ret;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_850/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:23:26.016040371 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,25 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            int nend = 0;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "break;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "double prod=1.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/util/FastMath.java", 
          "line": 3498, 
          "faulty": "return (z & 1) == 0 ? y : y + 1.0;", 
          "type": "InsertBefore", 
          "seed": "double x3max=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1067/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:31:58.674543812 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,27 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n             final double gammaAbs = SQRT_TWO_PI / x *\n                                     FastMath.pow(y, absX + 0.5) *\n                                     FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n         }\n         return ret;\n     }\n\n\n--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/util/FastMath.java\t2018-12-30 13:28:57.977066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1067/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/util/FastMath.java\t2018-12-30 14:31:58.678543862 -0500\n@@ -3495,7 +3495,8 @@\n \n         /* half way, round to even */\n         long z = (long) y;\n-        return (z & 1) == 0 ? y : y + 1.0;\n+        double x3max = 0;\n+\t\treturn (z & 1) == 0 ? y : y + 1.0;\n     }\n \n     /** Get the closest long to x.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_648/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:15:08.933715733 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,28 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            int nend = 0;\n+\t\t\tfinal double gammaAbs = SQRT_TWO_PI / x *\n                                     FastMath.pow(y, absX + 0.5) *\n                                     FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "double prod1=1.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "boolean calculatedB0=false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1170/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:36:07.469653087 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,31 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tdouble prod1 = 1.0;\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 663, 
          "faulty": "if (absX <= 20.0) {\n  if (x >= 1.0) {\n    double prod=1.0;\n    double t=x;\n    while (t > 2.5) {\n      t-=1.0;\n      prod*=t;\n    }\n    ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n  }\n else {\n    double prod=x;\n    double t=x;\n    while (t < -0.5) {\n      t+=1.0;\n      prod*=t;\n    }\n    ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n  }\n}\n else {\n  final double y=absX + LANCZOS_G + 0.5;\n  final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);\n  if (x > 0.0) {\n    ret=gammaAbs;\n  }\n else {\n    ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int nstart=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1369/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:43:48.655567659 -0500\n@@ -654,13 +654,15 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n         final double ret;\n         final double absX = FastMath.abs(x);\n-        if (absX <= 20.0) {\n+        int nstart = 0;\n+\t\tif (absX <= 20.0) {\n             if (x >= 1.0) {\n                 /*\n                  * From the recurrence relation\n@@ -689,29 +691,30 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "boolean calculatedB0=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "Delete", 
          "seed": "if (Double.isNaN(x) || Double.isInfinite(x)) {\n  return x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "final double ret=Gamma.regularizedGammaP(0.5,x * x,1.0e-15,10000);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Replace", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "return digamma(x + 1) - 1 / x;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1475/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:47:57.714735498 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,24 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal int n = (int) FastMath.floor(x - 1.5);\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "Delete", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_570/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:11:52.695207504 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,24 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tint nend = 0;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "double inv=1 / (x * x);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_987/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:28:46.164121453 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,24 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "boolean calculatedB0=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 1 : -1;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1460/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:47:25.422326639 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,29 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (Double.isNaN(x) || (x <= 0.0)) {\n  ret=Double.NaN;\n}\n else if (x < 0.5) {\n  return logGamma1p(x) - FastMath.log(x);\n}\n else if (x <= 2.5) {\n  return logGamma1p((x - 0.5) - 0.5);\n}\n else if (x <= 8.0) {\n  final int n=(int)FastMath.floor(x - 1.5);\n  double prod=1.0;\n  for (int i=1; i <= n; i++) {\n    prod*=x - i;\n  }\n  return logGamma1p(x - (n + 1)) + FastMath.log(prod);\n}\n else {\n  double sum=lanczos(x);\n  double tmp=x + LANCZOS_G + .5;\n  ret=((x + .5) * FastMath.log(tmp)) - tmp + HALF_LOG_2_PI + FastMath.log(sum / x);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 664, 
          "faulty": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}", 
          "type": "InsertBefore", 
          "seed": "double sum=lanczos(x);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_638/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:14:46.861435408 -0500\n@@ -661,7 +661,8 @@\n         final double ret;\n         final double absX = FastMath.abs(x);\n         if (absX <= 20.0) {\n-            if (x >= 1.0) {\n+            double sum = lanczos(x);\n+\t\t\tif (x >= 1.0) {\n                 /*\n                  * From the recurrence relation\n                  * Gamma(x) = (x - 1) * ... * (x - n) * Gamma(x - n),\n@@ -694,24 +695,24 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1272/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:40:03.104660099 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,24 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_732/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:18:43.208418997 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,27 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n             final double gammaAbs = SQRT_TWO_PI / x *\n                                     FastMath.pow(y, absX + 0.5) *\n                                     FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "InsertBefore", 
          "seed": "boolean readyToInitialize=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "int ncalc=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1012/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:29:53.436970010 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,28 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n             final double gammaAbs = SQRT_TWO_PI / x *\n                                     FastMath.pow(y, absX + 0.5) *\n                                     FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            boolean readyToInitialize = false;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "boolean calculatedB0=false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1063/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:31:53.134474336 -0500\n@@ -689,29 +689,30 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "int nstart=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1149/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:35:17.813033984 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,24 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (Double.isNaN(x) || (x <= 0.0)) {\n  ret=Double.NaN;\n}\n else if (x < 0.5) {\n  return logGamma1p(x) - FastMath.log(x);\n}\n else if (x <= 2.5) {\n  return logGamma1p((x - 0.5) - 0.5);\n}\n else if (x <= 8.0) {\n  final int n=(int)FastMath.floor(x - 1.5);\n  double prod=1.0;\n  for (int i=1; i <= n; i++) {\n    prod*=x - i;\n  }\n  return logGamma1p(x - (n + 1)) + FastMath.log(prod);\n}\n else {\n  double sum=lanczos(x);\n  double tmp=x + LANCZOS_G + .5;\n  ret=((x + .5) * FastMath.log(tmp)) - tmp + HALF_LOG_2_PI + FastMath.log(sum / x);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (Double.isNaN(x) || (x <= 0.0)) {\n  ret=Double.NaN;\n}\n else if (x < 0.5) {\n  return logGamma1p(x) - FastMath.log(x);\n}\n else if (x <= 2.5) {\n  return logGamma1p((x - 0.5) - 0.5);\n}\n else if (x <= 8.0) {\n  final int n=(int)FastMath.floor(x - 1.5);\n  double prod=1.0;\n  for (int i=1; i <= n; i++) {\n    prod*=x - i;\n  }\n  return logGamma1p(x - (n + 1)) + FastMath.log(prod);\n}\n else {\n  double sum=lanczos(x);\n  double tmp=x + LANCZOS_G + .5;\n  ret=((x + .5) * FastMath.log(tmp)) - tmp + HALF_LOG_2_PI + FastMath.log(sum / x);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 664, 
          "faulty": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}", 
          "type": "InsertBefore", 
          "seed": "double sum=lanczos(x);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_667/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:15:55.598307116 -0500\n@@ -661,7 +661,8 @@\n         final double ret;\n         final double absX = FastMath.abs(x);\n         if (absX <= 20.0) {\n-            if (x >= 1.0) {\n+            double sum = lanczos(x);\n+\t\t\tif (x >= 1.0) {\n                 /*\n                  * From the recurrence relation\n                  * Gamma(x) = (x - 1) * ... * (x - n) * Gamma(x - n),\n@@ -694,24 +695,24 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (Double.isNaN(x) || (x <= 0.0)) {\n  ret=Double.NaN;\n}\n else if (x < 0.5) {\n  return logGamma1p(x) - FastMath.log(x);\n}\n else if (x <= 2.5) {\n  return logGamma1p((x - 0.5) - 0.5);\n}\n else if (x <= 8.0) {\n  final int n=(int)FastMath.floor(x - 1.5);\n  double prod=1.0;\n  for (int i=1; i <= n; i++) {\n    prod*=x - i;\n  }\n  return logGamma1p(x - (n + 1)) + FastMath.log(prod);\n}\n else {\n  double sum=lanczos(x);\n  double tmp=x + LANCZOS_G + .5;\n  ret=((x + .5) * FastMath.log(tmp)) - tmp + HALF_LOG_2_PI + FastMath.log(sum / x);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 664, 
          "faulty": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}", 
          "type": "InsertBefore", 
          "seed": "double sum=lanczos(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 690, 
          "faulty": "while (t < -0.5) {\n  t+=1.0;\n  prod*=t;\n}", 
          "type": "InsertBefore", 
          "seed": "double tmp=x + LANCZOS_G + .5;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_681/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:16:27.962716323 -0500\n@@ -661,7 +661,8 @@\n         final double ret;\n         final double absX = FastMath.abs(x);\n         if (absX <= 20.0) {\n-            if (x >= 1.0) {\n+            double sum = lanczos(x);\n+\t\t\tif (x >= 1.0) {\n                 /*\n                  * From the recurrence relation\n                  * Gamma(x) = (x - 1) * ... * (x - n) * Gamma(x - n),\n@@ -687,31 +688,32 @@\n                  */\n                 double prod = x;\n                 double t = x;\n-                while (t < -0.5) {\n+                double tmp = x + LANCZOS_G + .5;\n+\t\t\t\twhile (t < -0.5) {\n                     t += 1.0;\n                     prod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Replace", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_743/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:19:11.092768750 -0500\n@@ -694,24 +694,25 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            final int n = (int) FastMath.floor(x - 1.5);\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (Double.isNaN(x) || (x <= 0.0)) {\n  ret=Double.NaN;\n}\n else if (x < 0.5) {\n  return logGamma1p(x) - FastMath.log(x);\n}\n else if (x <= 2.5) {\n  return logGamma1p((x - 0.5) - 0.5);\n}\n else if (x <= 8.0) {\n  final int n=(int)FastMath.floor(x - 1.5);\n  double prod=1.0;\n  for (int i=1; i <= n; i++) {\n    prod*=x - i;\n  }\n  return logGamma1p(x - (n + 1)) + FastMath.log(prod);\n}\n else {\n  double sum=lanczos(x);\n  double tmp=x + LANCZOS_G + .5;\n  ret=((x + .5) * FastMath.log(tmp)) - tmp + HALF_LOG_2_PI + FastMath.log(sum / x);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 691, 
          "faulty": "t+=1.0;", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_717/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:18:04.695935253 -0500\n@@ -688,30 +688,31 @@\n                 double prod = x;\n                 double t = x;\n                 while (t < -0.5) {\n-                    t += 1.0;\n+                    int nend = 0;\n+\t\t\t\t\tt += 1.0;\n                     prod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "boolean calculatedB0=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 690, 
          "faulty": "while (t < -0.5) {\n  t+=1.0;\n  prod*=t;\n}", 
          "type": "InsertBefore", 
          "seed": "double inv=1 / (x * x);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1276/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:40:11.304766668 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -687,31 +688,33 @@\n                  */\n                 double prod = x;\n                 double t = x;\n-                while (t < -0.5) {\n+                double inv = 1 / (x * x);\n+\t\t\t\twhile (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Replace", 
          "seed": "double prod=x;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1056/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:31:36.606266988 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,32 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            int nend = 0;\n+\t\t\tdouble prod = x;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return logGamma1p(x) - FastMath.log(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "boolean calculatedB0=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return Gamma.logGamma1p(x) + FastMath.log1p(x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "double prod=1.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1351/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:43:07.579041414 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,30 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "InsertBefore", 
          "seed": "boolean readyToInitialize=false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_920/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:26:11.582161081 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,28 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n             final double gammaAbs = SQRT_TWO_PI / x *\n                                     FastMath.pow(y, absX + 0.5) *\n                                     FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            boolean readyToInitialize = false;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x > 0 && x <= S_LIMIT) {\n  return -GAMMA - 1 / x;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Delete", 
          "seed": "return x < 0 ? -ret : ret;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 688, 
          "faulty": "double prod=x;", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_933/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:26:41.734544769 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -678,7 +679,8 @@\n                 }\n                 ret = prod / (1.0 + invGamma1pm1(t - 1.0));\n             } else {\n-                /*\n+                int nend = 0;\n+\t\t\t\t/*\n                  * From the recurrence relation\n                  * Gamma(x) = Gamma(x + n + 1) / [x * (x + 1) * ... * (x + n)]\n                  * then\n@@ -694,24 +696,25 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            int nend = 0;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Replace", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_784/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:20:51.094029142 -0500\n@@ -694,24 +694,25 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            final int n = (int) FastMath.floor(x - 1.5);\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "break;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "Delete", 
          "seed": "return x < 0 ? -ret : ret;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 691, 
          "faulty": "t+=1.0;", 
          "type": "InsertBefore", 
          "seed": "double tmp=x + LANCZOS_G + .5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (x < 0.5) {\n  return logGamma1p(x) - FastMath.log(x);\n}\n else if (x <= 2.5) {\n  return logGamma1p((x - 0.5) - 0.5);\n}\n else if (x <= 8.0) {\n  final int n=(int)FastMath.floor(x - 1.5);\n  double prod=1.0;\n  for (int i=1; i <= n; i++) {\n    prod*=x - i;\n  }\n  return logGamma1p(x - (n + 1)) + FastMath.log(prod);\n}\n else {\n  double sum=lanczos(x);\n  double tmp=x + LANCZOS_G + .5;\n  ret=((x + .5) * FastMath.log(tmp)) - tmp + HALF_LOG_2_PI + FastMath.log(sum / x);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1115/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:33:51.575957193 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -688,30 +689,31 @@\n                 double prod = x;\n                 double t = x;\n                 while (t < -0.5) {\n-                    t += 1.0;\n+                    double tmp = x + LANCZOS_G + .5;\n+\t\t\t\t\tt += 1.0;\n                     prod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tint nend = 0;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "if (x >= C_LIMIT) {\n  double inv=1 / (x * x);\n  return FastMath.log(x) - 0.5 / x - inv * ((1.0 / 12) + inv * (1.0 / 120 - inv / 252));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Replace", 
          "seed": "double p=INV_GAMMA1P_M1_P6;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_359/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:02:33.100107664 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,25 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            double p = INV_GAMMA1P_M1_P6;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1407/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:45:23.540778766 -0500\n@@ -694,24 +694,24 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "double prod1=1.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "Delete", 
          "seed": "return x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1025/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:30:27.077393458 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -689,29 +690,30 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tdouble prod1 = 1.0;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 692, 
          "faulty": "prod*=t;", 
          "type": "InsertBefore", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "double prod1=1.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "int nstart=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1130/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:34:33.512481102 -0500\n@@ -689,29 +689,31 @@\n                 double t = x;\n                 while (t < -0.5) {\n                     t += 1.0;\n-                    prod *= t;\n+                    final int n = (int) FastMath.floor(x - 1.5);\n+\t\t\t\t\tprod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tdouble prod1 = 1.0;\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 691, 
          "faulty": "t+=1.0;", 
          "type": "InsertBefore", 
          "seed": "final double y=absX + LANCZOS_G + 0.5;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_633/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:14:35.893295957 -0500\n@@ -688,30 +688,31 @@\n                 double prod = x;\n                 double t = x;\n                 while (t < -0.5) {\n-                    t += 1.0;\n+                    final double y = absX + LANCZOS_G + 0.5;\n+\t\t\t\t\tt += 1.0;\n                     prod *= t;\n                 }\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "break;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "double prod=1.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1041/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:31:06.213885415 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,27 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n             final double gammaAbs = SQRT_TWO_PI / x *\n                                     FastMath.pow(y, absX + 0.5) *\n                                     FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "return x > 0 ? 0 : 2;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_498/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:08:44.908799438 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,24 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "if (Double.isNaN(x) || (x <= 0.0)) {\n  ret=Double.NaN;\n}\n else if (x < 0.5) {\n  return logGamma1p(x) - FastMath.log(x);\n}\n else if (x <= 2.5) {\n  return logGamma1p((x - 0.5) - 0.5);\n}\n else if (x <= 8.0) {\n  final int n=(int)FastMath.floor(x - 1.5);\n  double prod=1.0;\n  for (int i=1; i <= n; i++) {\n    prod*=x - i;\n  }\n  return logGamma1p(x - (n + 1)) + FastMath.log(prod);\n}\n else {\n  double sum=lanczos(x);\n  double tmp=x + LANCZOS_G + .5;\n  ret=((x + .5) * FastMath.log(tmp)) - tmp + HALF_LOG_2_PI + FastMath.log(sum / x);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "Replace", 
          "seed": "throw new NumberIsTooLargeException(x,1.5,true);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_572/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:11:55.471243266 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,24 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 663, 
          "faulty": "if (absX <= 20.0) {\n  if (x >= 1.0) {\n    double prod=1.0;\n    double t=x;\n    while (t > 2.5) {\n      t-=1.0;\n      prod*=t;\n    }\n    ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n  }\n else {\n    double prod=x;\n    double t=x;\n    while (t < -0.5) {\n      t+=1.0;\n      prod*=t;\n    }\n    ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n  }\n}\n else {\n  final double y=absX + LANCZOS_G + 0.5;\n  final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);\n  if (x > 0.0) {\n    ret=gammaAbs;\n  }\n else {\n    ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int nstart=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "double q=INV_GAMMA1P_M1_Q4;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1329/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:42:18.010404604 -0500\n@@ -654,13 +654,16 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tdouble q = INV_GAMMA1P_M1_Q4;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n         final double ret;\n         final double absX = FastMath.abs(x);\n-        if (absX <= 20.0) {\n+        int nstart = 0;\n+\t\tif (absX <= 20.0) {\n             if (x >= 1.0) {\n                 /*\n                  * From the recurrence relation\n@@ -694,24 +697,24 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_512/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:09:21.117247920 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,28 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            int nend = 0;\n+\t\t\tfinal double gammaAbs = SQRT_TWO_PI / x *\n                                     FastMath.pow(y, absX + 0.5) *\n                                     FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "ContinuedFraction cf=new ContinuedFraction(){\n  @Override protected double getA(  int n,  double x){\n    return ((2.0 * n) + 1.0) - a + x;\n  }\n  @Override protected double getB(  int n,  double x){\n    return n * (a - n);\n  }\n}\n;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_930/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:26:36.234474831 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,28 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            int nend = 0;\n+\t\t\tfinal double gammaAbs = SQRT_TWO_PI / x *\n                                     FastMath.pow(y, absX + 0.5) *\n                                     FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Replace", 
          "seed": "final int n=(int)FastMath.floor(x - 1.5);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Replace", 
          "seed": "double prod1=1.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "if (x < -0.5) {\n  throw new NumberIsTooSmallException(x,-0.5,true);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1467/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:47:39.114500056 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,26 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n+            final int n = (int) FastMath.floor(x - 1.5);\n+            double prod1 = 1.0;\n         }\n         return ret;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 657, 
          "faulty": "if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n  return Double.NaN;\n}", 
          "type": "InsertBefore", 
          "seed": "int m=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "if (x >= 1.0) {\n  double prod=1.0;\n  double t=x;\n  while (t > 2.5) {\n    t-=1.0;\n    prod*=t;\n  }\n  ret=prod / (1.0 + invGamma1pm1(t - 1.0));\n}\n else {\n  double prod=x;\n  double t=x;\n  while (t < -0.5) {\n    t+=1.0;\n    prod*=t;\n  }\n  ret=1.0 / (prod * (1.0 + invGamma1pm1(t)));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 712, 
          "faulty": "ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);", 
          "type": "InsertBefore", 
          "seed": "return erfInv(1 - x);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "if (FastMath.abs(x) > 40) {\n  return x > 0 ? 0 : 2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 698, 
          "faulty": "final double gammaAbs=SQRT_TWO_PI / x * FastMath.pow(y,absX + 0.5) * FastMath.exp(-y) * lanczos(absX);", 
          "type": "Delete", 
          "seed": "return -GAMMA - 1 / x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 701, 
          "faulty": "if (x > 0.0) {\n  ret=gammaAbs;\n}\n else {\n  ret=-FastMath.PI / (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n}", 
          "type": "Delete", 
          "seed": "boolean calculatedB0=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math4/special/Gamma.java", 
          "line": 697, 
          "faulty": "final double y=absX + LANCZOS_G + 0.5;", 
          "type": "InsertBefore", 
          "seed": "int nend=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 13:28:57.913066000 -0500\n+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1390/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java\t2018-12-30 14:44:38.424203640 -0500\n@@ -654,7 +654,8 @@\n      */\n     public static double gamma(final double x) {\n \n-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {\n+        int m = 0;\n+\t\tif ((x == FastMath.rint(x)) && (x <= 0.0)) {\n             return Double.NaN;\n         }\n \n@@ -694,24 +695,25 @@\n                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n             }\n         } else {\n-            final double y = absX + LANCZOS_G + 0.5;\n-            final double gammaAbs = SQRT_TWO_PI / x *\n-                                    FastMath.pow(y, absX + 0.5) *\n-                                    FastMath.exp(-y) * lanczos(absX);\n-            if (x > 0.0) {\n-                ret = gammaAbs;\n-            } else {\n-                /*\n-                 * From the reflection formula\n-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,\n-                 * and the recurrence relation\n-                 * Gamma(1 - x) = -x * Gamma(-x),\n-                 * it is found\n-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].\n-                 */\n-                ret = -FastMath.PI /\n-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);\n-            }\n+            if (x >= 1.0) {\n+\t\t\t\tdouble prod = 1.0;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t > 2.5) {\n+\t\t\t\t\tt -= 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = prod / (1.0 + invGamma1pm1(t - 1.0));\n+\t\t\t} else {\n+\t\t\t\tdouble prod = x;\n+\t\t\t\tdouble t = x;\n+\t\t\t\twhile (t < -0.5) {\n+\t\t\t\t\tt += 1.0;\n+\t\t\t\t\tprod *= t;\n+\t\t\t\t}\n+\t\t\t\tret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));\n+\t\t\t}\n+\t\t\tint nend = 0;\n+\t\t\tfinal double y = absX + LANCZOS_G + 0.5;\n         }\n         return ret;\n     }\n\n\n"
    }
  ]
}