{
  "repair_end": "2018-12-02 11:41:21.427734", 
  "repair_begin": "2018-12-02 11:37:20.540431", 
  "patches": [
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1094/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:18.537088250 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(edge,0);"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 41, 
          "faulty": "return length_by_path;", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_983/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:00.808979783 -0500\n@@ -17,24 +17,15 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n+                    length_by_path.put(Arrays.asList(i, j), update_length);\n+\t\t\t\t\tlength_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "length_by_path.put(edge,INF);"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(Arrays.asList(i,j),update_length);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_898/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:47.324896921 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1184/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:33.393178755 -0500\n@@ -17,20 +17,22 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n+\t\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfor (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_603/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:01.968615670 -0500\n@@ -21,22 +21,23 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n+\t\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_943/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:54.588941599 -0500\n@@ -21,12 +21,8 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_442/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:37.792463977 -0500\n@@ -17,25 +17,20 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n             }\n         }\n         return length_by_path;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Replace", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1214/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:38.045207026 -0500\n@@ -17,24 +17,15 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n+                    length_by_path.put(Arrays.asList(i, j), update_length);\n+\t\t\t\t\tlength_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(Arrays.asList(i,j),update_length);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1438/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:41:13.789423213 -0500\n@@ -17,20 +17,22 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n+\t\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfor (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_282/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:13.804312087 -0500\n@@ -17,26 +17,8 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n         }\n         for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_531/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:50.296542599 -0500\n@@ -21,12 +21,8 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "length_by_path.put(edge,INF);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1260/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:44.677247274 -0500\n@@ -17,25 +17,20 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n             }\n         }\n         return length_by_path;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "length_by_path.put(edge,INF);"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Replace", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_268/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:11.720298822 -0500\n@@ -19,14 +19,11 @@\n         for (int i = 0; i < numNodes; i++) {\n             for (int j =0; j < numNodes; j++) {\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n+                length_by_path.put(edge, 0);\n+\t\t\t\tif (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(edge,0);"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_201/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:00.296225900 -0500\n@@ -17,26 +17,21 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n+\t\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(edge,0);"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Replace", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1322/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:54.641307623 -0500\n@@ -17,26 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n-        }\n-        for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n+            return length_by_path;\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 35, 
          "faulty": "int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1046/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:11.129042989 -0500\n@@ -19,14 +19,15 @@\n         for (int i = 0; i < numNodes; i++) {\n             for (int j =0; j < numNodes; j++) {\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n+                if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t} else {\n+\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t}\n+\t\t\t\tif (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_800/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:31.476799109 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "Delete", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_595/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:00.692607697 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "length_by_path.put(edge,length_by_edge.get(edge));"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 41, 
          "faulty": "return length_by_path;", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_569/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:56.124579122 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_793/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:30.428792624 -0500\n@@ -21,21 +21,13 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n+                return length_by_path;\n             }\n         }\n         return length_by_path;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_316/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:18.764343613 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(edge,0);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_58/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:36.280071405 -0500\n@@ -19,23 +19,6 @@\n         for (int i = 0; i < numNodes; i++) {\n             for (int j =0; j < numNodes; j++) {\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n-        }\n-        for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n             }\n         }\n         return length_by_path;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Delete", 
          "seed": "length_by_path.put(edge,0);"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Replace", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_817/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:33.848813778 -0500\n@@ -17,26 +17,9 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 41, 
          "faulty": "return length_by_path;", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1369/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:41:02.441354769 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_299/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:16.196327298 -0500\n@@ -25,18 +25,10 @@\n                 else if (length_by_edge.containsKey(edge) ) {\n                     length_by_path.put(edge, length_by_edge.get(edge));\n                 } else {\n-                    length_by_path.put(edge, INF);\n                 }\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1121/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:23.017115580 -0500\n@@ -17,25 +17,10 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n             }\n         }\n         return length_by_path;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_659/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:10.456668620 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "Delete", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_65/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:37.412078725 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "Replace", 
          "seed": "length_by_path.put(edge,length_by_edge.get(edge));"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Delete", 
          "seed": "length_by_path.put(edge,0);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_414/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:33.832439001 -0500\n@@ -19,14 +19,15 @@\n         for (int i = 0; i < numNodes; i++) {\n             for (int j =0; j < numNodes; j++) {\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n+                if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t} else {\n+\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t}\n+\t\t\t\tif (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Replace", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_925/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:51.684923750 -0500\n@@ -21,23 +21,22 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n-        }\n-        for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n+        for (int i = 0; i < numNodes; i++) {\n+\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\tif (i == j) {\n+\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t} else {\n+\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n         return length_by_path;\n     }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_657/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:10.268667449 -0500\n@@ -21,16 +21,24 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n+\t\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfor (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1003/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:04.036999573 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_520/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:48.844533488 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "Delete", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_683/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:13.516687672 -0500\n@@ -21,12 +21,8 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n@@ -34,7 +30,6 @@\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1067/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:14.353062698 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "Replace", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_662/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:10.812670838 -0500\n@@ -21,12 +21,8 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Replace", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_288/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:14.576316998 -0500\n@@ -25,18 +25,11 @@\n                 else if (length_by_edge.containsKey(edge) ) {\n                     length_by_path.put(edge, length_by_edge.get(edge));\n                 } else {\n-                    length_by_path.put(edge, INF);\n+                    return length_by_path;\n                 }\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1075/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:15.505069736 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "InsertBefore", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Replace", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_192/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:58.748215992 -0500\n@@ -25,18 +25,23 @@\n                 else if (length_by_edge.containsKey(edge) ) {\n                     length_by_path.put(edge, length_by_edge.get(edge));\n                 } else {\n-                    length_by_path.put(edge, INF);\n+                    return length_by_path;\n                 }\n             }\n         }\n-        for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n+        for (int i = 0; i < numNodes; i++) {\n+\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\tif (i == j) {\n+\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t} else {\n+\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tfor (int k = 0; k < numNodes; k++) {\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_459/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:40.092478466 -0500\n@@ -17,27 +17,20 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n-        }\n-        for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n+            return length_by_path;\n         }\n+        for (int i = 0; i < numNodes; i++) {\n+\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\tif (i == j) {\n+\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t} else {\n+\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n         return length_by_path;\n     }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_777/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:27.908777021 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_367/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:26.696393897 -0500\n@@ -17,20 +17,19 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n+\t\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\t\tint update_length = Math.min(\n+\t\t\t\t\t\t\tlength_by_path.get(Arrays.asList(i, j)),\n+\t\t\t\t\t\t\tlength_by_path.get(Arrays.asList(i, k))\n+\t\t\t\t\t\t\t\t\t+ length_by_path.get(Arrays.asList(j, k)));\n+\t\t\t\t\tlength_by_path.put(Arrays.asList(i, j), update_length);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfor (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1227/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:39.625216621 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(edge,0);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1392/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:41:06.369378479 -0500\n@@ -17,21 +17,21 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(edge,0);"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "InsertBefore", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1146/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:26.989139784 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "Replace", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_104/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:44.220122669 -0500\n@@ -17,24 +17,25 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n+\t\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfor (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_40/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:32.968049965 -0500\n@@ -17,20 +17,22 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n+\t\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfor (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_426/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:35.428449071 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1131/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:24.713125918 -0500\n@@ -21,22 +21,11 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\t;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_260/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:10.432290618 -0500\n@@ -17,26 +17,8 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n         }\n         for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1235/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:40.929224536 -0500\n@@ -21,22 +21,12 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n+            return length_by_path;\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_146/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:50.700164368 -0500\n@@ -16,28 +16,6 @@\n     final static int INF = 99999;\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n-        for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n-        }\n-        for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n-        }\n         return length_by_path;\n     }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 19, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Delete", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_838/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:37.580836838 -0500\n@@ -21,21 +21,22 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n             }\n         }\n         return length_by_path;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Replace", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_646/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:08.568656856 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_725/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:20.300729841 -0500\n@@ -19,14 +19,11 @@\n         for (int i = 0; i < numNodes; i++) {\n             for (int j =0; j < numNodes; j++) {\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n+                length_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\tif (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(edge,length_by_edge.get(edge));"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_428/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:35.612450233 -0500\n@@ -21,22 +21,11 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_480/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:42.948496441 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_902/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:47.852900172 -0500\n@@ -17,25 +17,20 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n             }\n         }\n         return length_by_path;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Replace", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1216/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:38.217208071 -0500\n@@ -17,25 +17,9 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n             }\n         }\n         return length_by_path;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1056/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:12.717052699 -0500\n@@ -17,21 +17,33 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n+\t\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfor (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "InsertBefore", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_390/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:30.328416869 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_709/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:17.648713367 -0500\n@@ -17,26 +17,21 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n+\t\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_161/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:53.364181477 -0500\n@@ -21,22 +21,12 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n+            return length_by_path;\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_954/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:56.324952263 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1317/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:53.929303316 -0500\n@@ -17,21 +17,21 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(edge,length_by_edge.get(edge));"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "InsertBefore", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_544/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:52.080553788 -0500\n@@ -21,17 +21,23 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Replace", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "InsertBefore", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_525/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:49.556537957 -0500\n@@ -17,21 +17,21 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "InsertBefore", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_253/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:09.252283098 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_970/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:58.808967512 -0500\n@@ -17,25 +17,32 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n+\t\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfor (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n             }\n         }\n         return length_by_path;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Replace", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1278/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:47.549264683 -0500\n@@ -17,24 +17,13 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(edge,length_by_edge.get(edge));"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "length_by_path.put(Arrays.asList(i,j),update_length);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_376/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:27.980402022 -0500\n@@ -21,22 +21,12 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n+            return length_by_path;\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_766/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:26.304767083 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "Replace", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "length_by_path.put(edge,INF);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_327/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:20.304353387 -0500\n@@ -25,19 +25,22 @@\n                 else if (length_by_edge.containsKey(edge) ) {\n                     length_by_path.put(edge, length_by_edge.get(edge));\n                 } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n-        }\n-        for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n+                    return length_by_path;\n                 }\n             }\n         }\n+        for (int i = 0; i < numNodes; i++) {\n+\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\tif (i == j) {\n+\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t} else {\n+\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n         return length_by_path;\n     }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_241/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:07.240270267 -0500\n@@ -17,26 +17,8 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n         }\n         for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_135/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:49.020153569 -0500\n@@ -17,26 +17,8 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n         }\n         for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Delete", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_403/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:32.188428621 -0500\n@@ -19,14 +19,11 @@\n         for (int i = 0; i < numNodes; i++) {\n             for (int j =0; j < numNodes; j++) {\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n+                length_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\tif (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n@@ -34,7 +31,6 @@\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(edge,length_by_edge.get(edge));"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_750/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:23.976752652 -0500\n@@ -21,23 +21,22 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n-        }\n-        for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n+        for (int i = 0; i < numNodes; i++) {\n+\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\tif (i == j) {\n+\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t} else {\n+\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n         return length_by_path;\n     }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1059/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:13.073054875 -0500\n@@ -20,13 +20,15 @@\n             for (int j =0; j < numNodes; j++) {\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                    if (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "Replace", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_668/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:11.544675396 -0500\n@@ -20,13 +20,8 @@\n             for (int j =0; j < numNodes; j++) {\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "Delete", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_470/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:41.504487356 -0500\n@@ -21,12 +21,8 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n@@ -38,6 +34,18 @@\n                 }\n             }\n         }\n-        return length_by_path;\n+        for (int i = 0; i < numNodes; i++) {\n+\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\tif (i == j) {\n+\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t} else {\n+\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn length_by_path;\n     }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 41, 
          "faulty": "return length_by_path;", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_499/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:45.540512738 -0500\n@@ -21,12 +21,8 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1246/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:42.541234318 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_642/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:08.200654562 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "length_by_path.put(edge,INF);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_928/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:52.064926086 -0500\n@@ -20,17 +20,24 @@\n             for (int j =0; j < numNodes; j++) {\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n+\t\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfor (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "Delete", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_284/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:13.980313207 -0500\n@@ -21,23 +21,22 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n-        }\n-        for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n+        for (int i = 0; i < numNodes; i++) {\n+\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\tif (i == j) {\n+\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t} else {\n+\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n         return length_by_path;\n     }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_809/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:32.740806927 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "InsertBefore", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_507/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:46.812520729 -0500\n@@ -21,17 +21,23 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "InsertBefore", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_729/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:20.836733169 -0500\n@@ -23,7 +23,7 @@\n                     length_by_path.put(edge, 0);\n                 }\n                 else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n+                    return length_by_path;\n                 } else {\n                     length_by_path.put(edge, INF);\n                 }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1307/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:52.353293778 -0500\n@@ -21,20 +21,26 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n+\t\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\t\tint update_length = Math.min(\n+\t\t\t\t\t\t\tlength_by_path.get(Arrays.asList(i, j)),\n+\t\t\t\t\t\t\tlength_by_path.get(Arrays.asList(i, k))\n+\t\t\t\t\t\t\t\t\t+ length_by_path.get(Arrays.asList(j, k)));\n+\t\t\t\t\tlength_by_path.put(Arrays.asList(i, j), update_length);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfor (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n+                    length_by_path.put(Arrays.asList(i, j), update_length);\n+\t\t\t\t\tlength_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(Arrays.asList(i,j),update_length);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_694/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:15.136697751 -0500\n@@ -21,21 +21,22 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n             }\n         }\n         return length_by_path;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Replace", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_639/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:07.840652317 -0500\n@@ -17,27 +17,20 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n-        }\n-        for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n+            return length_by_path;\n         }\n+        for (int i = 0; i < numNodes; i++) {\n+\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\tif (i == j) {\n+\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t} else {\n+\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n         return length_by_path;\n     }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_399/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:31.636425134 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "length_by_path.put(edge,length_by_edge.get(edge));"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_369/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:26.872395011 -0500\n@@ -17,26 +17,8 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n         }\n         for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Delete", 
          "seed": "length_by_path.put(edge,INF);"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 35, 
          "faulty": "int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));", 
          "type": "InsertBefore", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1026/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:07.885023140 -0500\n@@ -21,12 +21,8 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_92/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:42.368110728 -0500\n@@ -25,7 +25,7 @@\n                 else if (length_by_edge.containsKey(edge) ) {\n                     length_by_path.put(edge, length_by_edge.get(edge));\n                 } else {\n-                    length_by_path.put(edge, INF);\n+                    return length_by_path;\n                 }\n             }\n         }\n@@ -34,7 +34,6 @@\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_759/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:25.224760390 -0500\n@@ -17,27 +17,20 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n-        }\n-        for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n+            return length_by_path;\n         }\n+        for (int i = 0; i < numNodes; i++) {\n+\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\tif (i == j) {\n+\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t} else {\n+\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n         return length_by_path;\n     }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Replace", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_97/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:43.104115474 -0500\n@@ -19,23 +19,6 @@\n         for (int i = 0; i < numNodes; i++) {\n             for (int j =0; j < numNodes; j++) {\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n-        }\n-        for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n             }\n         }\n         return length_by_path;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Delete", 
          "seed": "length_by_path.put(edge,0);"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_163/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:53.540182607 -0500\n@@ -19,23 +19,6 @@\n         for (int i = 0; i < numNodes; i++) {\n             for (int j =0; j < numNodes; j++) {\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n-        }\n-        for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n             }\n         }\n         return length_by_path;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Delete", 
          "seed": "length_by_path.put(edge,0);"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_454/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:39.384474008 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(edge,length_by_edge.get(edge));"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "length_by_path.put(edge,INF);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_492/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:44.620506955 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Delete", 
          "seed": "length_by_path.put(edge,length_by_edge.get(edge));"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 41, 
          "faulty": "return length_by_path;", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1083/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:16.785077554 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 21, 
          "faulty": "List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_873/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:42.944869935 -0500\n@@ -21,22 +21,11 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\t;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_109/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:44.948127359 -0500\n@@ -19,23 +19,6 @@\n         for (int i = 0; i < numNodes; i++) {\n             for (int j =0; j < numNodes; j++) {\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n-        }\n-        for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n             }\n         }\n         return length_by_path;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Replace", 
          "seed": "length_by_path.put(edge,length_by_edge.get(edge));"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_115/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:45.852133182 -0500\n@@ -16,28 +16,6 @@\n     final static int INF = 99999;\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n-        for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n-        }\n-        for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n-        }\n         return length_by_path;\n     }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 19, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_461/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:40.268479575 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 41, 
          "faulty": "return length_by_path;", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1152/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:27.945145605 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "length_by_path.put(edge,length_by_edge.get(edge));"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_644/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:08.380655684 -0500\n@@ -17,27 +17,20 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n-        }\n-        for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n+            return length_by_path;\n         }\n+        for (int i = 0; i < numNodes; i++) {\n+\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\tif (i == j) {\n+\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t} else {\n+\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n         return length_by_path;\n     }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_867/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:42.044864386 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(edge,length_by_edge.get(edge));"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_843/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:38.124840197 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 41, 
          "faulty": "return length_by_path;", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1108/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:20.893102627 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1224/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:39.273214484 -0500\n@@ -17,25 +17,11 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n+                return length_by_path;\n             }\n         }\n         return length_by_path;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_349/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:23.800375556 -0500\n@@ -21,23 +21,22 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n-        }\n-        for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n+        for (int i = 0; i < numNodes; i++) {\n+\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\tif (i == j) {\n+\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t} else {\n+\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n         return length_by_path;\n     }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "InsertBefore", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_528/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:49.936540341 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_841/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:37.948839110 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "length_by_path.put(edge,INF);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_440/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:37.604462792 -0500\n@@ -17,24 +17,15 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n+                    length_by_path.put(Arrays.asList(i, j), update_length);\n+\t\t\t\t\tlength_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(Arrays.asList(i,j),update_length);"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 41, 
          "faulty": "return length_by_path;", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_396/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:31.276422860 -0500\n@@ -21,22 +21,23 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n+\t\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 41, 
          "faulty": "return length_by_path;", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_747/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:23.612750394 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(edge,length_by_edge.get(edge));"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_418/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:34.364442358 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1203/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:36.245196091 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_140/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:49.796158559 -0500\n@@ -25,16 +25,7 @@\n                 else if (length_by_edge.containsKey(edge) ) {\n                     length_by_path.put(edge, length_by_edge.get(edge));\n                 } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n-        }\n-        for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n+                    return length_by_path;\n                 }\n             }\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1346/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:58.837332995 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Replace", 
          "seed": "length_by_path.put(edge,length_by_edge.get(edge));"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_423/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:35.076446851 -0500\n@@ -21,12 +21,8 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 41, 
          "faulty": "return length_by_path;", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_742/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:22.896745953 -0500\n@@ -20,24 +20,22 @@\n             for (int j =0; j < numNodes; j++) {\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n-        }\n-        for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n+        for (int i = 0; i < numNodes; i++) {\n+\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\tif (i == j) {\n+\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t} else {\n+\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n         return length_by_path;\n     }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "Delete", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_752/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:24.152753744 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "length_by_path.put(edge,length_by_edge.get(edge));"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1291/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:49.525276655 -0500\n@@ -17,25 +17,20 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n             }\n         }\n         return length_by_path;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Replace", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 41, 
          "faulty": "return length_by_path;", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_291/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:14.936319288 -0500\n@@ -21,22 +21,11 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "InsertBefore", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1349/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:59.197335171 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 21, 
          "faulty": "List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_680/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:13.156685432 -0500\n@@ -17,21 +17,21 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "length_by_path.put(edge,length_by_edge.get(edge));"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "InsertBefore", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_812/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:33.092809104 -0500\n@@ -20,24 +20,22 @@\n             for (int j =0; j < numNodes; j++) {\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n-        }\n-        for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n+        for (int i = 0; i < numNodes; i++) {\n+\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\tif (i == j) {\n+\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t} else {\n+\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n         return length_by_path;\n     }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "Delete", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_445/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:38.140466170 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(edge,0);"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Replace", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_407/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:32.760432233 -0500\n@@ -17,24 +17,13 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "length_by_path.put(Arrays.asList(i,j),update_length);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1022/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:07.361019932 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1178/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:32.509173380 -0500\n@@ -17,26 +17,21 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n+\t\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(Arrays.asList(i,j),update_length);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_347/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:23.624374441 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "length_by_path.put(edge,INF);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_220/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:03.632247231 -0500\n@@ -17,26 +17,9 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1281/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:47.921266938 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_477/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:42.592494201 -0500\n@@ -17,26 +17,21 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n+\t\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(edge,length_by_edge.get(edge));"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1240/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:41.637228833 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 41, 
          "faulty": "return length_by_path;", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_535/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:50.832545962 -0500\n@@ -21,22 +21,23 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n+\t\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "InsertBefore", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_36/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:32.312045714 -0500\n@@ -19,23 +19,6 @@\n         for (int i = 0; i < numNodes; i++) {\n             for (int j =0; j < numNodes; j++) {\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n-        }\n-        for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n             }\n         }\n         return length_by_path;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Delete", 
          "seed": "length_by_path.put(edge,0);"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Replace", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_512/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:47.564525453 -0500\n@@ -17,24 +17,13 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "length_by_path.put(Arrays.asList(i,j),update_length);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_541/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:51.716551506 -0500\n@@ -17,25 +17,20 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n             }\n         }\n         return length_by_path;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Replace", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 35, 
          "faulty": "int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));", 
          "type": "InsertBefore", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_664/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:10.988671934 -0500\n@@ -21,22 +21,23 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n+\t\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_635/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:07.304648975 -0500\n@@ -19,14 +19,15 @@\n         for (int i = 0; i < numNodes; i++) {\n             for (int j =0; j < numNodes; j++) {\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n+                if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t} else {\n+\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t}\n+\t\t\t\tif (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_276/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:12.816305799 -0500\n@@ -17,24 +17,13 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_319/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:19.144346025 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Delete", 
          "seed": "length_by_path.put(edge,0);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_622/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:05.052634926 -0500\n@@ -21,12 +21,8 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n@@ -38,6 +34,17 @@\n                 }\n             }\n         }\n-        return length_by_path;\n+        for (int k = 0; k < numNodes; k++) {\n+\t\t\tfor (int i = 0; i < numNodes; i++) {\n+\t\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\t\tint update_length = Math.min(\n+\t\t\t\t\t\t\tlength_by_path.get(Arrays.asList(i, j)),\n+\t\t\t\t\t\t\tlength_by_path.get(Arrays.asList(i, k))\n+\t\t\t\t\t\t\t\t\t+ length_by_path.get(Arrays.asList(j, k)));\n+\t\t\t\t\tlength_by_path.put(Arrays.asList(i, j), update_length);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn length_by_path;\n     }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 41, 
          "faulty": "return length_by_path;", 
          "type": "InsertBefore", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_972/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:58.984968593 -0500\n@@ -17,24 +17,13 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1252/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:43.449239827 -0500\n@@ -21,20 +21,24 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n+\t\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\t\tint update_length = Math.min(\n+\t\t\t\t\t\t\tlength_by_path.get(Arrays.asList(i, j)),\n+\t\t\t\t\t\t\tlength_by_path.get(Arrays.asList(i, k))\n+\t\t\t\t\t\t\t\t\t+ length_by_path.get(Arrays.asList(j, k)));\n+\t\t\t\t\tlength_by_path.put(Arrays.asList(i, j), update_length);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfor (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "length_by_path.put(Arrays.asList(i,j),update_length);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_125/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:47.388143070 -0500\n@@ -16,27 +16,7 @@\n     final static int INF = 99999;\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n-        for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n-        }\n         for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 19, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_490/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:44.440505824 -0500\n@@ -21,23 +21,22 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n-        }\n-        for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n+        for (int i = 0; i < numNodes; i++) {\n+\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\tif (i == j) {\n+\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t} else {\n+\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n         return length_by_path;\n     }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "InsertBefore", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_555/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:53.704563966 -0500\n@@ -20,24 +20,30 @@\n             for (int j =0; j < numNodes; j++) {\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n-        }\n-        for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n+                    if (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t\tlength_by_path.put(edge, 0);\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n+        for (int i = 0; i < numNodes; i++) {\n+\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\tif (i == j) {\n+\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t} else {\n+\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n         return length_by_path;\n     }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "InsertBefore", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_787/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:29.508786928 -0500\n@@ -17,25 +17,20 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n             }\n         }\n         return length_by_path;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "length_by_path.put(edge,INF);"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Replace", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1035/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:09.305031830 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Replace", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_352/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:24.164377862 -0500\n@@ -21,23 +21,22 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n-        }\n-        for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n+        for (int i = 0; i < numNodes; i++) {\n+\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\tif (i == j) {\n+\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t} else {\n+\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n         return length_by_path;\n     }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_130/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:48.192148243 -0500\n@@ -21,22 +21,12 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n+            return length_by_path;\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 35, 
          "faulty": "int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));", 
          "type": "InsertBefore", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_691/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:14.776695512 -0500\n@@ -17,24 +17,13 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_946/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:54.956943861 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_655/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:10.088666328 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "length_by_path.put(edge,INF);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_769/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:26.656769265 -0500\n@@ -21,12 +21,8 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n@@ -34,7 +30,8 @@\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n+                    length_by_path.put(Arrays.asList(i, j), update_length);\n+\t\t\t\t\tlength_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(Arrays.asList(i,j),update_length);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_807/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:32.564805838 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Replace", 
          "seed": "length_by_path.put(edge,0);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_324/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:19.892350772 -0500\n@@ -21,16 +21,21 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n+\t\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\t\tint update_length = Math.min(\n+\t\t\t\t\t\t\tlength_by_path.get(Arrays.asList(i, j)),\n+\t\t\t\t\t\t\tlength_by_path.get(Arrays.asList(i, k))\n+\t\t\t\t\t\t\t\t\t+ length_by_path.get(Arrays.asList(j, k)));\n+\t\t\t\t\tlength_by_path.put(Arrays.asList(i, j), update_length);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfor (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_271/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:12.080301115 -0500\n@@ -25,16 +25,6 @@\n                 else if (length_by_edge.containsKey(edge) ) {\n                     length_by_path.put(edge, length_by_edge.get(edge));\n                 } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n-        }\n-        for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_553/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:53.528562864 -0500\n@@ -21,12 +21,8 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1187/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:33.753180945 -0500\n@@ -21,23 +21,22 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n-        }\n-        for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n+        for (int i = 0; i < numNodes; i++) {\n+\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\tif (i == j) {\n+\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t} else {\n+\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n         return length_by_path;\n     }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Replace", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_466/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:40.964483957 -0500\n@@ -17,24 +17,15 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n+                    length_by_path.put(Arrays.asList(i, j), update_length);\n+\t\t\t\t\tlength_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(Arrays.asList(i,j),update_length);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1395/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:41:06.729380651 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "length_by_path.put(edge,INF);"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Replace", 
          "seed": "length_by_path.put(edge,0);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_967/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:58.448965303 -0500\n@@ -17,24 +17,13 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Replace", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "Delete", 
          "seed": "length_by_path.put(Arrays.asList(i,j),update_length);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_904/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:48.032901280 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_117/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:46.044134418 -0500\n@@ -21,12 +21,8 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1192/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:34.457185224 -0500\n@@ -21,12 +21,8 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "Replace", 
          "seed": "length_by_path.put(edge,length_by_edge.get(edge));"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1073/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:15.329068661 -0500\n@@ -17,25 +17,11 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n+                return length_by_path;\n             }\n         }\n         return length_by_path;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "InsertBefore", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 35, 
          "faulty": "int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_451/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:39.032471791 -0500\n@@ -17,20 +17,22 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n+\t\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfor (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                             length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(edge,0);"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_677/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:12.804683241 -0500\n@@ -20,13 +20,16 @@\n             for (int j =0; j < numNodes; j++) {\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                    if (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t\tlength_by_path.put(edge, 0);\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "InsertBefore", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_675/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:12.620682096 -0500\n@@ -19,14 +19,11 @@\n         for (int i = 0; i < numNodes; i++) {\n             for (int j =0; j < numNodes; j++) {\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n+                length_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\tif (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(edge,length_by_edge.get(edge));"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_222/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:03.828248484 -0500\n@@ -17,16 +17,22 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n+            for (int j = 0; j < numNodes; j++) {\n+\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\tif (i == j) {\n+\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t} else {\n+\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfor (int j =0; j < numNodes; j++) {\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_495/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:44.992509293 -0500\n@@ -21,22 +21,11 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Replace", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1401/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:41:07.597385888 -0500\n@@ -21,12 +21,8 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "length_by_path.put(edge,0);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1412/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:41:09.277396019 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "Delete", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "length_by_path.put(edge,INF);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_311/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:17.992338710 -0500\n@@ -17,26 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n-        }\n-        for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n+            return length_by_path;\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "InsertBefore", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_488/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:44.220504440 -0500\n@@ -17,25 +17,20 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n             }\n         }\n         return length_by_path;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Replace", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 37, 
          "faulty": "length_by_path.put(Arrays.asList(i,j),update_length);", 
          "type": "InsertBefore", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_739/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:22.516743595 -0500\n@@ -19,24 +19,15 @@\n         for (int i = 0; i < numNodes; i++) {\n             for (int j =0; j < numNodes; j++) {\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n+                length_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\tif (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n+            return length_by_path;\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(edge,length_by_edge.get(edge));"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_850/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:39.188846765 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(edge,length_by_edge.get(edge));"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "length_by_path.put(edge,INF);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_998/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:03.316995160 -0500\n@@ -17,25 +17,20 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n             }\n         }\n         return length_by_path;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(edge,length_by_edge.get(edge));"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Replace", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1141/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:26.297135569 -0500\n@@ -21,23 +21,22 @@\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n-        }\n-        for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n+        for (int i = 0; i < numNodes; i++) {\n+\t\t\tfor (int j = 0; j < numNodes; j++) {\n+\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\tif (i == j) {\n+\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t} else {\n+\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n         return length_by_path;\n     }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 32, 
          "faulty": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 35, 
          "faulty": "int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));", 
          "type": "InsertBefore", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1264/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:45.213250524 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 28, 
          "faulty": "length_by_path.put(edge,INF);", 
          "type": "InsertBefore", 
          "seed": "length_by_path.put(edge,length_by_edge.get(edge));"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_342/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:22.876369700 -0500\n@@ -17,26 +17,8 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n         }\n         for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Delete", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Delete", 
          "seed": "length_by_path.put(edge,INF);"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1218/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:40:38.393209139 -0500\n@@ -19,14 +19,15 @@\n         for (int i = 0; i < numNodes; i++) {\n             for (int j =0; j < numNodes; j++) {\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n+                if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t} else {\n+\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t}\n+\t\t\t\tif (i == j) {\n                     length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 22, 
          "faulty": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "InsertBefore", 
          "seed": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Replace", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1408/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:41:08.741392787 -0500\n@@ -17,17 +17,7 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 26, 
          "faulty": "length_by_path.put(edge,length_by_edge.get(edge));", 
          "type": "Delete", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_618/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:39:04.504631506 -0500\n@@ -20,13 +20,15 @@\n             for (int j =0; j < numNodes; j++) {\n                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                 if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n+                    if (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+                } else\n+\t\t\t\t\treturn length_by_path;\n             }\n         }\n         for (int k = 0; k < numNodes; k++) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 23, 
          "faulty": "length_by_path.put(edge,0);", 
          "type": "Replace", 
          "seed": "if (i == j) {\n  length_by_path.put(edge,0);\n}\n else if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_1365/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:41:01.889351435 -0500\n@@ -17,25 +17,20 @@\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n         for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n+            return length_by_path;\n         }\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n+\t\t\t\t\tList<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n+\t\t\t\t\tif (i == j) {\n+\t\t\t\t\t\tlength_by_path.put(edge, 0);\n+\t\t\t\t\t} else if (length_by_edge.containsKey(edge)) {\n+\t\t\t\t\t\tlength_by_path.put(edge, length_by_edge.get(edge));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlength_by_path.put(edge, INF);\n+\t\t\t\t\t}\n+\t\t\t\t}\n             }\n         }\n         return length_by_path;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 25, 
          "faulty": "if (length_by_edge.containsKey(edge)) {\n  length_by_path.put(edge,length_by_edge.get(edge));\n}\n else {\n  length_by_path.put(edge,INF);\n}", 
          "type": "Replace", 
          "seed": "return length_by_path;"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 34, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n  length_by_path.put(Arrays.asList(i,j),update_length);\n}", 
          "type": "Replace", 
          "seed": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:37:15.107933759 -0500\n+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_308/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java\t2018-12-02 05:38:17.640336474 -0500\n@@ -16,27 +16,7 @@\n     final static int INF = 99999;\n     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n         Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n-        for (int i = 0; i < numNodes; i++) {\n-            for (int j =0; j < numNodes; j++) {\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n-                if (i == j) {\n-                    length_by_path.put(edge, 0);\n-                }\n-                else if (length_by_edge.containsKey(edge) ) {\n-                    length_by_path.put(edge, length_by_edge.get(edge));\n-                } else {\n-                    length_by_path.put(edge, INF);\n-                }\n-            }\n-        }\n         for (int k = 0; k < numNodes; k++) {\n-            for (int i = 0; i < numNodes; i++) {\n-                for (int j = 0; j < numNodes; j++) {\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\n-                }\n-            }\n         }\n         return length_by_path;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 19, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n    if (i == j) {\n      length_by_path.put(edge,0);\n    }\n else     if (length_by_edge.containsKey(edge)) {\n      length_by_path.put(edge,length_by_edge.get(edge));\n    }\n else {\n      length_by_path.put(edge,INF);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 20, 
          "faulty": "for (int j=0; j < numNodes; j++) {\n  List<Integer> edge=new ArrayList<>(Arrays.asList(i,j));\n  if (i == j) {\n    length_by_path.put(edge,0);\n  }\n else   if (length_by_edge.containsKey(edge)) {\n    length_by_path.put(edge,length_by_edge.get(edge));\n  }\n else {\n    length_by_path.put(edge,INF);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/SHORTEST_PATH_LENGTHS.java", 
          "line": 33, 
          "faulty": "for (int i=0; i < numNodes; i++) {\n  for (int j=0; j < numNodes; j++) {\n    int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n    length_by_path.put(Arrays.asList(i,j),update_length);\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int k=0; k < numNodes; k++) {\n  for (int i=0; i < numNodes; i++) {\n    for (int j=0; j < numNodes; j++) {\n      int update_length=Math.min(length_by_path.get(Arrays.asList(i,j)),length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\n      length_by_path.put(Arrays.asList(i,j),update_length);\n    }\n  }\n}"
        }
      ]
    }
  ]
}