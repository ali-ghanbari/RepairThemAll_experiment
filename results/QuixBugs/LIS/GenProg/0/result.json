{
  "repair_end": "2018-12-02 21:02:51.965466", 
  "repair_begin": "2018-12-02 20:59:56.088253", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_876/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:33.478854782 -0500\n@@ -18,17 +18,26 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 34, 
          "faulty": "i++;", 
          "type": "Replace", 
          "seed": "i++;"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_863/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:31.286876036 -0500\n@@ -24,10 +24,44 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length+1, i);\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_648/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:58.231249631 -0500\n@@ -20,14 +20,55 @@\n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n             for (int j=1; j < longest+1; j++) {\n                 if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n+                    int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t\t\t.max(prefix_lengths) : 0;\n+\t\t\t\t\tprefix_lengths.add(j);\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_705/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:07.023198667 -0500\n@@ -26,8 +26,15 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length+1, i);\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "longest=length + 1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_982/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:50.042723731 -0500\n@@ -26,9 +26,14 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+                if (length == longest || val < arr[ends.get(length + 1)]) {\n+\t\t\t\t\tends.put(length + 1, i);\n+\t\t\t\t\tlongest = length + 1;\n+\t\t\t\t}\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_643/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:57.667253222 -0500\n@@ -26,9 +26,15 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                ends.put(length + 1, i);\n+                if (length == longest || val < arr[ends.get(length + 1)]) {\n+\t\t\t\t\tends.put(length + 1, i);\n+\t\t\t\t\tlongest = length + 1;\n+\t\t\t\t}\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_969/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:48.482734664 -0500\n@@ -18,17 +18,35 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                ends.put(length + 1, i);\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tif (length == longest || val < arr[ends.get(length + 1)]) {\n+\t\t\t\t\tends.put(length + 1, i);\n+\t\t\t\t\tlongest = length + 1;\n+\t\t\t\t}\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_961/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:47.326742705 -0500\n@@ -18,17 +18,42 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                ends.put(length + 1, i);\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tif (length == longest || val < arr[ends.get(length + 1)]) {\n+\t\t\t\t\tends.put(length + 1, i);\n+\t\t\t\t\tlongest = length + 1;\n+\t\t\t\t}\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "Replace", 
          "seed": "i++;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_501/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:34.019450735 -0500\n@@ -18,15 +18,16 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n-\n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tint length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n                 longest = length + 1;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 15, 
          "faulty": "int longest=0;", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 17, 
          "faulty": "int i=0;", 
          "type": "InsertBefore", 
          "seed": "int longest=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_496/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:33.279458421 -0500\n@@ -13,8 +13,7 @@\n     public static int lis(int[] arr) {\n         Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int longest = 0;\n-\n-        int i = 0;\n+\t\tint i = 0;\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n@@ -26,8 +25,14 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length+1, i);\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_195/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:00:40.820079648 -0500\n@@ -26,7 +26,8 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n                 longest = length + 1;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 14, 
          "faulty": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);", 
          "type": "InsertBefore", 
          "seed": "int longest=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 15, 
          "faulty": "int longest=0;", 
          "type": "Delete", 
          "seed": "int longest=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_762/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:15.635067792 -0500\n@@ -11,9 +11,8 @@\n  */\n public class LIS {\n     public static int lis(int[] arr) {\n-        Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int longest = 0;\n-\n+\t\tMap<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int i = 0;\n         for (int val : arr) {\n \n@@ -24,10 +23,14 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                ends.put(length + 1, i);\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 14, 
          "faulty": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);", 
          "type": "Replace", 
          "seed": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_603/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:51.591294326 -0500\n@@ -11,7 +11,7 @@\n  */\n public class LIS {\n     public static int lis(int[] arr) {\n-        Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n+        Map<Integer, Integer> ends = new HashMap<Integer, Integer>(100);\n         int longest = 0;\n \n         int i = 0;\n@@ -26,7 +26,9 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n                 longest = length + 1;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_861/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:31.098877985 -0500\n@@ -18,17 +18,55 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "return longest;"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_297/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:00:59.476064293 -0500\n@@ -26,8 +26,8 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "return longest;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_399/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:16.935683055 -0500\n@@ -24,11 +24,15 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                if (length == longest || val < arr[ends.get(length + 1)]) {\n+\t\t\t\t\tends.put(length + 1, i);\n+\t\t\t\t\tlongest = length + 1;\n+\t\t\t\t}\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_697/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:06.087203691 -0500\n@@ -24,10 +24,46 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tint length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length+1, i);\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 15, 
          "faulty": "int longest=0;", 
          "type": "Replace", 
          "seed": "int longest=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_806/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:22.654972229 -0500\n@@ -18,17 +18,19 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                ends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 14, 
          "faulty": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);", 
          "type": "InsertBefore", 
          "seed": "int longest=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 15, 
          "faulty": "int longest=0;", 
          "type": "Delete", 
          "seed": "int longest=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_933/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:42.322779255 -0500\n@@ -11,24 +11,67 @@\n  */\n public class LIS {\n     public static int lis(int[] arr) {\n-        Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int longest = 0;\n-\n+\t\tMap<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int i = 0;\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "Delete", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_974/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:49.026731179 -0500\n@@ -18,17 +18,40 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                ends.put(length + 1, i);\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tif (length == longest || val < arr[ends.get(length + 1)]) {\n+\t\t\t\t\tends.put(length + 1, i);\n+\t\t\t\t\tlongest = length + 1;\n+\t\t\t\t}\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 14, 
          "faulty": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);", 
          "type": "InsertBefore", 
          "seed": "int longest=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 15, 
          "faulty": "int longest=0;", 
          "type": "Delete", 
          "seed": "int longest=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_680/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:03.471218732 -0500\n@@ -11,9 +11,8 @@\n  */\n public class LIS {\n     public static int lis(int[] arr) {\n-        Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int longest = 0;\n-\n+\t\tMap<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int i = 0;\n         for (int val : arr) {\n \n@@ -24,10 +23,13 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_455/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:26.683537774 -0500\n@@ -18,7 +18,12 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfor (int j=1; j < longest+1; j++) {\n                 if (arr[ends.get(j)] < val) {\n                     prefix_lengths.add(j);\n                 }\n@@ -26,7 +31,13 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length + 1)]) {\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n+\t\t\t}\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n                 longest = length + 1;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_695/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:05.883204786 -0500\n@@ -24,11 +24,31 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length+1, i);\n+                ends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 14, 
          "faulty": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);", 
          "type": "Replace", 
          "seed": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_536/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:40.171388296 -0500\n@@ -11,7 +11,7 @@\n  */\n public class LIS {\n     public static int lis(int[] arr) {\n-        Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n+        Map<Integer, Integer> ends = new HashMap<Integer, Integer>(100);\n         int longest = 0;\n \n         int i = 0;\n@@ -24,10 +24,18 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length+1, i);\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_659/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:59.803240419 -0500\n@@ -24,11 +24,18 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "InsertBefore", 
          "seed": "i++;"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_938/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:43.218771969 -0500\n@@ -18,21 +18,52 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                ends.put(length + 1, i);\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n         }\n-        return longest;\n+        i++;\n+\t\treturn longest;\n     }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_971/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:48.662733517 -0500\n@@ -20,15 +20,32 @@\n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n             for (int j=1; j < longest+1; j++) {\n                 if (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n                     prefix_lengths.add(j);\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                ends.put(length + 1, i);\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tif (length == longest || val < arr[ends.get(length + 1)]) {\n+\t\t\t\t\tends.put(length + 1, i);\n+\t\t\t\t\tlongest = length + 1;\n+\t\t\t\t}\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_434/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:22.939589889 -0500\n@@ -18,15 +18,25 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfor (int j=1; j < longest+1; j++) {\n                 if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n+                    if (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t\tprefix_lengths.add(j);\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n                 longest = length + 1;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 14, 
          "faulty": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);", 
          "type": "InsertBefore", 
          "seed": "int longest=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 15, 
          "faulty": "int longest=0;", 
          "type": "Delete", 
          "seed": "int longest=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_786/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:19.387014266 -0500\n@@ -11,9 +11,8 @@\n  */\n public class LIS {\n     public static int lis(int[] arr) {\n-        Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int longest = 0;\n-\n+\t\tMap<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int i = 0;\n         for (int val : arr) {\n \n@@ -24,10 +23,13 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "longest=length + 1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_426/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:21.631609057 -0500\n@@ -26,9 +26,15 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n                 longest = length + 1;\n+\t\t\t\tif (length == longest || val < arr[ends.get(length + 1)]) {\n+\t\t\t\t\tends.put(length + 1, i);\n+\t\t\t\t\tlongest = length + 1;\n+\t\t\t\t}\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_490/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:32.299469288 -0500\n@@ -24,9 +24,12 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n                 longest = length + 1;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_894/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:36.082830466 -0500\n@@ -18,17 +18,26 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                ends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_608/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:52.355289045 -0500\n@@ -24,10 +24,23 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length+1, i);\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "longest=length + 1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_727/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:10.387151432 -0500\n@@ -26,8 +26,9 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                longest = length + 1;\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "Replace", 
          "seed": "i++;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_541/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:40.911382105 -0500\n@@ -18,15 +18,16 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n-\n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tint length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n                 longest = length + 1;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_980/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:49.858725051 -0500\n@@ -26,9 +26,20 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                ends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tif (length == longest || val < arr[ends.get(length + 1)]) {\n+\t\t\t\t\tends.put(length + 1, i);\n+\t\t\t\t\tlongest = length + 1;\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_699/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:06.279202660 -0500\n@@ -18,17 +18,37 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length+1, i);\n+                ends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 14, 
          "faulty": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);", 
          "type": "InsertBefore", 
          "seed": "int longest=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 15, 
          "faulty": "int longest=0;", 
          "type": "Delete", 
          "seed": "int longest=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "longest=length + 1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_825/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:25.274941096 -0500\n@@ -11,9 +11,8 @@\n  */\n public class LIS {\n     public static int lis(int[] arr) {\n-        Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int longest = 0;\n-\n+\t\tMap<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int i = 0;\n         for (int val : arr) {\n \n@@ -24,11 +23,25 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 15, 
          "faulty": "int longest=0;", 
          "type": "Replace", 
          "seed": "int longest=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_832/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:26.254929956 -0500\n@@ -20,15 +20,30 @@\n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n             for (int j=1; j < longest+1; j++) {\n                 if (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n                     prefix_lengths.add(j);\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 14, 
          "faulty": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);", 
          "type": "InsertBefore", 
          "seed": "int longest=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 15, 
          "faulty": "int longest=0;", 
          "type": "Delete", 
          "seed": "int longest=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_904/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:37.874815472 -0500\n@@ -11,9 +11,8 @@\n  */\n public class LIS {\n     public static int lis(int[] arr) {\n-        Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int longest = 0;\n-\n+\t\tMap<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int i = 0;\n         for (int val : arr) {\n \n@@ -24,10 +23,27 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                ends.put(length + 1, i);\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length+1, i);\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "Delete", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_652/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:58.847245709 -0500\n@@ -20,14 +20,29 @@\n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n             for (int j=1; j < longest+1; j++) {\n                 if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tint length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length+1, i);\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_424/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:21.455611762 -0500\n@@ -24,10 +24,17 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length+1, i);\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 14, 
          "faulty": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);", 
          "type": "InsertBefore", 
          "seed": "int longest=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 15, 
          "faulty": "int longest=0;", 
          "type": "Delete", 
          "seed": "int longest=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_890/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:35.502835823 -0500\n@@ -11,24 +11,71 @@\n  */\n public class LIS {\n     public static int lis(int[] arr) {\n-        Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int longest = 0;\n-\n+\t\tMap<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int i = 0;\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length+1, i);\n+                ends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_382/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:14.555724699 -0500\n@@ -26,8 +26,15 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length+1, i);\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_626/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:55.003271187 -0500\n@@ -24,10 +24,21 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tint length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length+1, i);\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 14, 
          "faulty": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);", 
          "type": "InsertBefore", 
          "seed": "int longest=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 15, 
          "faulty": "int longest=0;", 
          "type": "Delete", 
          "seed": "int longest=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_776/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:18.095032449 -0500\n@@ -11,9 +11,8 @@\n  */\n public class LIS {\n     public static int lis(int[] arr) {\n-        Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int longest = 0;\n-\n+\t\tMap<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int i = 0;\n         for (int val : arr) {\n \n@@ -24,12 +23,17 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n-            }\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length + 1)]) {\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n+\t\t\t}\n \n             i++;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_702/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:06.643200707 -0500\n@@ -26,8 +26,14 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_619/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:54.211276227 -0500\n@@ -24,10 +24,12 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                ends.put(length + 1, i);\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_723/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:09.839160736 -0500\n@@ -18,17 +18,28 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_370/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:12.539762118 -0500\n@@ -26,7 +26,8 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n                 longest = length + 1;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_745/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:13.615098598 -0500\n@@ -24,10 +24,24 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_911/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:39.022805866 -0500\n@@ -18,17 +18,42 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tif (length == longest || val < arr[ends.get(length + 1)]) {\n+\t\t\t\t\tends.put(length + 1, i);\n+\t\t\t\t\tlongest = length + 1;\n+\t\t\t\t}\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_897/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:36.506826919 -0500\n@@ -18,17 +18,40 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_707/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:07.203197701 -0500\n@@ -24,11 +24,29 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n+                if (length == longest || val < arr[ends.get(length + 1)]) {\n+\t\t\t\t\tends.put(length + 1, i);\n+\t\t\t\t\tlongest = length + 1;\n+\t\t\t\t}\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 36, 
          "faulty": "return longest;", 
          "type": "Replace", 
          "seed": "return longest;"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_799/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:21.534986081 -0500\n@@ -18,17 +18,23 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                ends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_964/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:47.706739905 -0500\n@@ -18,17 +18,41 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tif (length == longest || val < arr[ends.get(length + 1)]) {\n+\t\t\t\t\tends.put(length + 1, i);\n+\t\t\t\t\tlongest = length + 1;\n+\t\t\t\t}\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_747/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:13.815095325 -0500\n@@ -18,17 +18,20 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                ends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 14, 
          "faulty": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);", 
          "type": "InsertBefore", 
          "seed": "int longest=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 15, 
          "faulty": "int longest=0;", 
          "type": "Delete", 
          "seed": "int longest=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 14, 
          "faulty": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);", 
          "type": "Replace", 
          "seed": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_857/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:30.390885325 -0500\n@@ -11,9 +11,8 @@\n  */\n public class LIS {\n     public static int lis(int[] arr) {\n-        Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int longest = 0;\n-\n+\t\tMap<Integer, Integer> ends = new HashMap<Integer, Integer>(100);\n         int i = 0;\n         for (int val : arr) {\n \n@@ -24,11 +23,19 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 14, 
          "faulty": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);", 
          "type": "InsertBefore", 
          "seed": "int longest=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 15, 
          "faulty": "int longest=0;", 
          "type": "Delete", 
          "seed": "int longest=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_749/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:13.999092313 -0500\n@@ -11,9 +11,8 @@\n  */\n public class LIS {\n     public static int lis(int[] arr) {\n-        Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int longest = 0;\n-\n+\t\tMap<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int i = 0;\n         for (int val : arr) {\n \n@@ -24,12 +23,19 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n-            }\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length + 1)]) {\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n+\t\t\t}\n \n             i++;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "longest=length + 1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_913/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:39.266803825 -0500\n@@ -18,17 +18,43 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n+                ends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tif (length == longest || val < arr[ends.get(length + 1)]) {\n+\t\t\t\t\tends.put(length + 1, i);\n+\t\t\t\t\tlongest = length + 1;\n+\t\t\t\t}\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_880/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:34.090849049 -0500\n@@ -26,9 +26,18 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_854/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:29.974889638 -0500\n@@ -20,15 +20,21 @@\n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n             for (int j=1; j < longest+1; j++) {\n                 if (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n                     prefix_lengths.add(j);\n                 }\n             }\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                ends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "Replace", 
          "seed": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_829/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:25.874934276 -0500\n@@ -18,17 +18,24 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                ends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 14, 
          "faulty": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);", 
          "type": "Replace", 
          "seed": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_977/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:49.502727673 -0500\n@@ -11,24 +11,50 @@\n  */\n public class LIS {\n     public static int lis(int[] arr) {\n-        Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n+        Map<Integer, Integer> ends = new HashMap<Integer, Integer>(100);\n         int longest = 0;\n \n         int i = 0;\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                ends.put(length + 1, i);\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_621/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:54.419274903 -0500\n@@ -26,8 +26,10 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                ends.put(length + 1, i);\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_928/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:41.506785582 -0500\n@@ -26,9 +26,15 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                ends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tif (length == longest || val < arr[ends.get(length + 1)]) {\n+\t\t\t\t\tends.put(length + 1, i);\n+\t\t\t\t\tlongest = length + 1;\n+\t\t\t\t}\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_760/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:15.459070320 -0500\n@@ -24,10 +24,23 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_637/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:56.687259462 -0500\n@@ -24,9 +24,11 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n                 longest = length + 1;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 14, 
          "faulty": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);", 
          "type": "InsertBefore", 
          "seed": "int longest=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 15, 
          "faulty": "int longest=0;", 
          "type": "Delete", 
          "seed": "int longest=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_670/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:01.799227913 -0500\n@@ -11,9 +11,8 @@\n  */\n public class LIS {\n     public static int lis(int[] arr) {\n-        Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int longest = 0;\n-\n+\t\tMap<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int i = 0;\n         for (int val : arr) {\n \n@@ -24,10 +23,25 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length+1, i);\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_389/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:15.487708103 -0500\n@@ -18,15 +18,24 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfor (int j=1; j < longest+1; j++) {\n                 if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n+                    if (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t\tprefix_lengths.add(j);\n                 }\n             }\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n                 longest = length + 1;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 14, 
          "faulty": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);", 
          "type": "InsertBefore", 
          "seed": "int longest=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 15, 
          "faulty": "int longest=0;", 
          "type": "Delete", 
          "seed": "int longest=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_710/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:07.579195683 -0500\n@@ -11,9 +11,8 @@\n  */\n public class LIS {\n     public static int lis(int[] arr) {\n-        Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int longest = 0;\n-\n+\t\tMap<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int i = 0;\n         for (int val : arr) {\n \n@@ -24,10 +23,42 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length+1, i);\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_813/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:23.574960851 -0500\n@@ -18,17 +18,22 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                ends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_559/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:44.035353965 -0500\n@@ -20,14 +20,22 @@\n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n             for (int j=1; j < longest+1; j++) {\n                 if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n+                    int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t\t\t.max(prefix_lengths) : 0;\n+\t\t\t\t\tprefix_lengths.add(j);\n                 }\n             }\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_565/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:44.983346033 -0500\n@@ -24,11 +24,19 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 17, 
          "faulty": "int i=0;", 
          "type": "Replace", 
          "seed": "int i=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_316/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:02.863974596 -0500\n@@ -26,7 +26,8 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n                 longest = length + 1;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_384/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:14.739721322 -0500\n@@ -18,7 +18,12 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfor (int j=1; j < longest+1; j++) {\n                 if (arr[ends.get(j)] < val) {\n                     prefix_lengths.add(j);\n                 }\n@@ -26,7 +31,8 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n                 longest = length + 1;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_884/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:34.682843504 -0500\n@@ -26,8 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                ends.put(length + 1, i);\n+\t\t\t\tends.put(length+1, i);\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_734/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:11.643130238 -0500\n@@ -18,17 +18,26 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length+1, i);\n+                ends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_656/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:59.447242330 -0500\n@@ -24,11 +24,40 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tint length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length+1, i);\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 17, 
          "faulty": "int i=0;", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "longest=length + 1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_394/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:16.215695510 -0500\n@@ -26,7 +26,8 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n                 longest = length + 1;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "Replace", 
          "seed": "int i=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_922/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:40.722791643 -0500\n@@ -18,17 +18,38 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 14, 
          "faulty": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);", 
          "type": "InsertBefore", 
          "seed": "int longest=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 15, 
          "faulty": "int longest=0;", 
          "type": "Delete", 
          "seed": "int longest=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_874/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:33.278856656 -0500\n@@ -11,24 +11,56 @@\n  */\n public class LIS {\n     public static int lis(int[] arr) {\n-        Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int longest = 0;\n-\n+\t\tMap<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int i = 0;\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                ends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length+1, i);\n+                ends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_846/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:28.658903281 -0500\n@@ -20,14 +20,19 @@\n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n             for (int j=1; j < longest+1; j++) {\n                 if (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n                     prefix_lengths.add(j);\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_752/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:14.363086711 -0500\n@@ -24,10 +24,36 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "Delete", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_624/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:54.823272331 -0500\n@@ -20,14 +20,31 @@\n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n             for (int j=1; j < longest+1; j++) {\n                 if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tint length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length+1, i);\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_915/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:39.498801884 -0500\n@@ -18,17 +18,20 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                ends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_791/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:20.151004054 -0500\n@@ -24,10 +24,38 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tif (length == longest || val < arr[ends.get(length + 1)]) {\n+\t\t\t\t\tends.put(length + 1, i);\n+\t\t\t\t\tlongest = length + 1;\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_469/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:29.143507027 -0500\n@@ -18,16 +18,25 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfor (int j=1; j < longest+1; j++) {\n                 if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n+                    if (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t\tprefix_lengths.add(j);\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 14, 
          "faulty": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);", 
          "type": "InsertBefore", 
          "seed": "int longest=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 15, 
          "faulty": "int longest=0;", 
          "type": "Delete", 
          "seed": "int longest=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_646/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:58.047250803 -0500\n@@ -11,9 +11,8 @@\n  */\n public class LIS {\n     public static int lis(int[] arr) {\n-        Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int longest = 0;\n-\n+\t\tMap<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int i = 0;\n         for (int val : arr) {\n \n@@ -24,9 +23,12 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n                 longest = length + 1;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_334/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:06.071897763 -0500\n@@ -24,11 +24,16 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+                if (length == longest || val < arr[ends.get(length + 1)]) {\n+\t\t\t\t\tends.put(length + 1, i);\n+\t\t\t\t\tlongest = length + 1;\n+\t\t\t\t}\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_475/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:30.059495750 -0500\n@@ -24,10 +24,18 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length+1, i);\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_758/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:15.279072907 -0500\n@@ -26,8 +26,18 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                if (length == longest || val < arr[ends.get(length + 1)]) {\n+\t\t\t\t\tends.put(length + 1, i);\n+\t\t\t\t\tlongest = length + 1;\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_484/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:31.563478097 -0500\n@@ -24,11 +24,18 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "Replace", 
          "seed": "i++;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_486/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:31.743475871 -0500\n@@ -18,15 +18,16 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n-\n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tint length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n                 longest = length + 1;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 34, 
          "faulty": "i++;", 
          "type": "Replace", 
          "seed": "i++;"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_557/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:43.847355538 -0500\n@@ -24,10 +24,19 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length+1, i);\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "Replace", 
          "seed": "return longest;"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_925/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:41.110788499 -0500\n@@ -18,17 +18,40 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                ends.put(length + 1, i);\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_238/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:00:48.796079830 -0500\n@@ -26,9 +26,14 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+                if (length == longest || val < arr[ends.get(length + 1)]) {\n+\t\t\t\t\tends.put(length + 1, i);\n+\t\t\t\t\tlongest = length + 1;\n+\t\t\t\t}\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Replace", 
          "seed": "longest=length + 1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_811/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:23.394963078 -0500\n@@ -18,17 +18,20 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                ends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_580/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:47.691324058 -0500\n@@ -24,10 +24,28 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tint length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tfor (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length+1, i);\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 23, 
          "faulty": "prefix_lengths.add(j);", 
          "type": "InsertBefore", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 14, 
          "faulty": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);", 
          "type": "InsertBefore", 
          "seed": "int longest=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 15, 
          "faulty": "int longest=0;", 
          "type": "Delete", 
          "seed": "int longest=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_632/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:55.927264381 -0500\n@@ -11,23 +11,31 @@\n  */\n public class LIS {\n     public static int lis(int[] arr) {\n-        Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int longest = 0;\n-\n+\t\tMap<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int i = 0;\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n             for (int j=1; j < longest+1; j++) {\n                 if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n+                    int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t\t\t.max(prefix_lengths) : 0;\n+\t\t\t\t\tprefix_lengths.add(j);\n                 }\n             }\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 14, 
          "faulty": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);", 
          "type": "InsertBefore", 
          "seed": "int longest=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 15, 
          "faulty": "int longest=0;", 
          "type": "Delete", 
          "seed": "int longest=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 14, 
          "faulty": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);", 
          "type": "Replace", 
          "seed": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_818/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:24.114954282 -0500\n@@ -11,9 +11,8 @@\n  */\n public class LIS {\n     public static int lis(int[] arr) {\n-        Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int longest = 0;\n-\n+\t\tMap<Integer, Integer> ends = new HashMap<Integer, Integer>(100);\n         int i = 0;\n         for (int val : arr) {\n \n@@ -24,10 +23,13 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n                 longest = length + 1;\n             }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_688/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:04.767211015 -0500\n@@ -24,11 +24,28 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tint length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length+1, i);\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_511/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:35.783431461 -0500\n@@ -24,11 +24,26 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length+1, i);\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 20, 
          "faulty": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);", 
          "type": "Replace", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 15, 
          "faulty": "int longest=0;", 
          "type": "Replace", 
          "seed": "int longest=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "Delete", 
          "seed": "ends.put(length + 1,i);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_586/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:01:48.655316956 -0500\n@@ -24,11 +24,21 @@\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tif (length == longest || val < arr[ends.get(length + 1)]) {\n+\t\t\t\t\tends.put(length + 1, i);\n+\t\t\t\t\tlongest = length + 1;\n+\t\t\t\t}\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Replace", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 15, 
          "faulty": "int longest=0;", 
          "type": "Replace", 
          "seed": "int longest=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_780/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:18.627024805 -0500\n@@ -18,17 +18,21 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                ends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 21, 
          "faulty": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}", 
          "type": "Replace", 
          "seed": "for (int j=1; j < longest + 1; j++) {\n  if (arr[ends.get(j)] < val) {\n    prefix_lengths.add(j);\n  }\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_815/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:23.754958626 -0500\n@@ -18,17 +18,26 @@\n         for (int val : arr) {\n \n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n-            for (int j=1; j < longest+1; j++) {\n-                if (arr[ends.get(j)] < val) {\n-                    prefix_lengths.add(j);\n-                }\n-            }\n+            for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t}\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                for (int j = 1; j < longest + 1; j++) {\n+\t\t\t\t\tif (arr[ends.get(j)] < val) {\n+\t\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 27, 
          "faulty": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;", 
          "type": "Replace", 
          "seed": "int length=!prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 31, 
          "faulty": "longest=length + 1;", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 22, 
          "faulty": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}", 
          "type": "InsertBefore", 
          "seed": "if (arr[ends.get(j)] < val) {\n  prefix_lengths.add(j);\n}"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 30, 
          "faulty": "ends.put(length + 1,i);", 
          "type": "Delete", 
          "seed": "ArrayList<Integer> prefix_lengths=new ArrayList<Integer>(100);"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_886/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:34.894841518 -0500\n@@ -20,15 +20,22 @@\n             ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n             for (int j=1; j < longest+1; j++) {\n                 if (arr[ends.get(j)] < val) {\n+\t\t\t\t\tprefix_lengths.add(j);\n+\t\t\t\t}\n+\t\t\t\tif (arr[ends.get(j)] < val) {\n                     prefix_lengths.add(j);\n                 }\n             }\n \n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n+            int length = !prefix_lengths.isEmpty() ? Collections\n+\t\t\t\t\t.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n-                ends.put(length+1, i);\n-                longest = length + 1;\n+            ends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n+                ends.put(length + 1, i);\n+\t\t\t\tlongest = length + 1;\n             }\n \n             i++;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/LIS.java", 
          "line": 29, 
          "faulty": "if (length == longest || val < arr[ends.get(length + 1)]) {\n  ends.put(length + 1,i);\n  longest=length + 1;\n}", 
          "type": "InsertBefore", 
          "seed": "ends.put(length + 1,i);"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 14, 
          "faulty": "Map<Integer,Integer> ends=new HashMap<Integer,Integer>(100);", 
          "type": "InsertBefore", 
          "seed": "int longest=0;"
        }, 
        {
          "path": "src/main/java/LIS.java", 
          "line": 15, 
          "faulty": "int longest=0;", 
          "type": "Delete", 
          "seed": "int longest=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 14:59:51.040078512 -0500\n+++ /tmp/GenProg_QuixBugs_LIS_/patches_fa8s/Patch_782/patched/tmp/GenProg_QuixBugs_LIS_/src/main/java/LIS.java\t2018-12-02 15:02:18.839021760 -0500\n@@ -11,9 +11,8 @@\n  */\n public class LIS {\n     public static int lis(int[] arr) {\n-        Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int longest = 0;\n-\n+\t\tMap<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n         int i = 0;\n         for (int val : arr) {\n \n@@ -26,7 +25,8 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n-            if (length == longest || val < arr[ends.get(length+1)]) {\n+            ends.put(length + 1, i);\n+\t\t\tif (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n                 longest = length + 1;\n             }\n\n\n"
    }
  ]
}